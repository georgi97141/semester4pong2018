
SEP4E-Two-player-snake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  000050c2  00005156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000050c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006ad  00800198  00800198  000051ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000051ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000660  00000000  00000000  00005260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000050f8  00000000  00000000  000058c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001857  00000000  00000000  0000a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004796  00000000  00000000  0000c20f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000017e4  00000000  00000000  000109a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000213b  00000000  00000000  0001218c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003261  00000000  00000000  000142c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000580  00000000  00000000  00017528  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__vector_16>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__vector_20>
      54:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__vector_21>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__vector_28>
      74:	0c 94 91 17 	jmp	0x2f22	; 0x2f22 <__vector_29>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e2 ec       	ldi	r30, 0xC2	; 194
      90:	f0 e5       	ldi	r31, 0x50	; 80
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a8 39       	cpi	r26, 0x98	; 152
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	28 e0       	ldi	r18, 0x08	; 8
      a0:	a8 e9       	ldi	r26, 0x98	; 152
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a5 34       	cpi	r26, 0x45	; 69
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <main>
      b2:	0c 94 5f 28 	jmp	0x50be	; 0x50be <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <byte_stuff>:
#include "byteStuffing.h"

uint8_t byte_stuff(uint8_t *data_buff, uint8_t data_buff_size, uint8_t *frame_buff, uint8_t	frame_buff_size)
{
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	cd b7       	in	r28, 0x3d	; 61
      c0:	de b7       	in	r29, 0x3e	; 62
      c2:	2c 97       	sbiw	r28, 0x0c	; 12
      c4:	0f b6       	in	r0, 0x3f	; 63
      c6:	f8 94       	cli
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	0f be       	out	0x3f, r0	; 63
      cc:	cd bf       	out	0x3d, r28	; 61
      ce:	98 87       	std	Y+8, r25	; 0x08
      d0:	8f 83       	std	Y+7, r24	; 0x07
      d2:	69 87       	std	Y+9, r22	; 0x09
      d4:	5b 87       	std	Y+11, r21	; 0x0b
      d6:	4a 87       	std	Y+10, r20	; 0x0a
      d8:	2c 87       	std	Y+12, r18	; 0x0c
	uint8_t const *frame_buff_start = frame_buff;
      da:	8a 85       	ldd	r24, Y+10	; 0x0a
      dc:	9b 85       	ldd	r25, Y+11	; 0x0b
      de:	9a 83       	std	Y+2, r25	; 0x02
      e0:	89 83       	std	Y+1, r24	; 0x01
	uint8_t const *frame_buff_end = frame_buff + frame_buff_size;
      e2:	8c 85       	ldd	r24, Y+12	; 0x0c
      e4:	88 2f       	mov	r24, r24
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	2a 85       	ldd	r18, Y+10	; 0x0a
      ea:	3b 85       	ldd	r19, Y+11	; 0x0b
      ec:	82 0f       	add	r24, r18
      ee:	93 1f       	adc	r25, r19
      f0:	9c 83       	std	Y+4, r25	; 0x04
      f2:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t const *data_buff_end = data_buff + data_buff_size;
      f4:	89 85       	ldd	r24, Y+9	; 0x09
      f6:	88 2f       	mov	r24, r24
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	2f 81       	ldd	r18, Y+7	; 0x07
      fc:	38 85       	ldd	r19, Y+8	; 0x08
      fe:	82 0f       	add	r24, r18
     100:	93 1f       	adc	r25, r19
     102:	9e 83       	std	Y+6, r25	; 0x06
     104:	8d 83       	std	Y+5, r24	; 0x05
	while (data_buff < data_buff_end && frame_buff < frame_buff_end)
     106:	69 c0       	rjmp	.+210    	; 0x1da <byte_stuff+0x120>
	{
		switch (*data_buff)
     108:	8f 81       	ldd	r24, Y+7	; 0x07
     10a:	98 85       	ldd	r25, Y+8	; 0x08
     10c:	fc 01       	movw	r30, r24
     10e:	80 81       	ld	r24, Z
     110:	88 2f       	mov	r24, r24
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	00 97       	sbiw	r24, 0x00	; 0
     116:	21 f0       	breq	.+8      	; 0x120 <byte_stuff+0x66>
     118:	8f 3f       	cpi	r24, 0xFF	; 255
     11a:	91 05       	cpc	r25, r1
     11c:	41 f1       	breq	.+80     	; 0x16e <byte_stuff+0xb4>
     11e:	4a c0       	rjmp	.+148    	; 0x1b4 <byte_stuff+0xfa>
		{
		case LINK_ESC:
		{
			if (frame_buff < (frame_buff_end - 1))
     120:	8b 81       	ldd	r24, Y+3	; 0x03
     122:	9c 81       	ldd	r25, Y+4	; 0x04
     124:	9c 01       	movw	r18, r24
     126:	21 50       	subi	r18, 0x01	; 1
     128:	31 09       	sbc	r19, r1
     12a:	8a 85       	ldd	r24, Y+10	; 0x0a
     12c:	9b 85       	ldd	r25, Y+11	; 0x0b
     12e:	82 17       	cp	r24, r18
     130:	93 07       	cpc	r25, r19
     132:	d8 f4       	brcc	.+54     	; 0x16a <byte_stuff+0xb0>
			{
				*frame_buff++ = *data_buff;
     134:	8a 85       	ldd	r24, Y+10	; 0x0a
     136:	9b 85       	ldd	r25, Y+11	; 0x0b
     138:	9c 01       	movw	r18, r24
     13a:	2f 5f       	subi	r18, 0xFF	; 255
     13c:	3f 4f       	sbci	r19, 0xFF	; 255
     13e:	3b 87       	std	Y+11, r19	; 0x0b
     140:	2a 87       	std	Y+10, r18	; 0x0a
     142:	2f 81       	ldd	r18, Y+7	; 0x07
     144:	38 85       	ldd	r19, Y+8	; 0x08
     146:	f9 01       	movw	r30, r18
     148:	20 81       	ld	r18, Z
     14a:	fc 01       	movw	r30, r24
     14c:	20 83       	st	Z, r18
				*frame_buff++ = *data_buff;
     14e:	8a 85       	ldd	r24, Y+10	; 0x0a
     150:	9b 85       	ldd	r25, Y+11	; 0x0b
     152:	9c 01       	movw	r18, r24
     154:	2f 5f       	subi	r18, 0xFF	; 255
     156:	3f 4f       	sbci	r19, 0xFF	; 255
     158:	3b 87       	std	Y+11, r19	; 0x0b
     15a:	2a 87       	std	Y+10, r18	; 0x0a
     15c:	2f 81       	ldd	r18, Y+7	; 0x07
     15e:	38 85       	ldd	r19, Y+8	; 0x08
     160:	f9 01       	movw	r30, r18
     162:	20 81       	ld	r18, Z
     164:	fc 01       	movw	r30, r24
     166:	20 83       	st	Z, r18
			{
				//no room
				return 0;
			}
		}
		break;
     168:	33 c0       	rjmp	.+102    	; 0x1d0 <byte_stuff+0x116>
				*frame_buff++ = *data_buff;
			}
			else
			{
				//no room
				return 0;
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	4d c0       	rjmp	.+154    	; 0x208 <byte_stuff+0x14e>
			}
		}
		break;
		case LINK_FLAG:
		{
			if (frame_buff < (frame_buff_end - 1))
     16e:	8b 81       	ldd	r24, Y+3	; 0x03
     170:	9c 81       	ldd	r25, Y+4	; 0x04
     172:	9c 01       	movw	r18, r24
     174:	21 50       	subi	r18, 0x01	; 1
     176:	31 09       	sbc	r19, r1
     178:	8a 85       	ldd	r24, Y+10	; 0x0a
     17a:	9b 85       	ldd	r25, Y+11	; 0x0b
     17c:	82 17       	cp	r24, r18
     17e:	93 07       	cpc	r25, r19
     180:	b8 f4       	brcc	.+46     	; 0x1b0 <byte_stuff+0xf6>
			{
				*frame_buff++ = LINK_ESC;
     182:	8a 85       	ldd	r24, Y+10	; 0x0a
     184:	9b 85       	ldd	r25, Y+11	; 0x0b
     186:	9c 01       	movw	r18, r24
     188:	2f 5f       	subi	r18, 0xFF	; 255
     18a:	3f 4f       	sbci	r19, 0xFF	; 255
     18c:	3b 87       	std	Y+11, r19	; 0x0b
     18e:	2a 87       	std	Y+10, r18	; 0x0a
     190:	fc 01       	movw	r30, r24
     192:	10 82       	st	Z, r1
				*frame_buff++ = *data_buff;
     194:	8a 85       	ldd	r24, Y+10	; 0x0a
     196:	9b 85       	ldd	r25, Y+11	; 0x0b
     198:	9c 01       	movw	r18, r24
     19a:	2f 5f       	subi	r18, 0xFF	; 255
     19c:	3f 4f       	sbci	r19, 0xFF	; 255
     19e:	3b 87       	std	Y+11, r19	; 0x0b
     1a0:	2a 87       	std	Y+10, r18	; 0x0a
     1a2:	2f 81       	ldd	r18, Y+7	; 0x07
     1a4:	38 85       	ldd	r19, Y+8	; 0x08
     1a6:	f9 01       	movw	r30, r18
     1a8:	20 81       	ld	r18, Z
     1aa:	fc 01       	movw	r30, r24
     1ac:	20 83       	st	Z, r18
			{
				//no room
				return 0;
			}
		}
		break;
     1ae:	10 c0       	rjmp	.+32     	; 0x1d0 <byte_stuff+0x116>
				*frame_buff++ = *data_buff;
			}
			else
			{
				//no room
				return 0;
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	2a c0       	rjmp	.+84     	; 0x208 <byte_stuff+0x14e>
			}
		}
		break;
		default:
		{
			*frame_buff++ = *data_buff;
     1b4:	8a 85       	ldd	r24, Y+10	; 0x0a
     1b6:	9b 85       	ldd	r25, Y+11	; 0x0b
     1b8:	9c 01       	movw	r18, r24
     1ba:	2f 5f       	subi	r18, 0xFF	; 255
     1bc:	3f 4f       	sbci	r19, 0xFF	; 255
     1be:	3b 87       	std	Y+11, r19	; 0x0b
     1c0:	2a 87       	std	Y+10, r18	; 0x0a
     1c2:	2f 81       	ldd	r18, Y+7	; 0x07
     1c4:	38 85       	ldd	r19, Y+8	; 0x08
     1c6:	f9 01       	movw	r30, r18
     1c8:	20 81       	ld	r18, Z
     1ca:	fc 01       	movw	r30, r24
     1cc:	20 83       	st	Z, r18
		}
		break;
     1ce:	00 00       	nop
		}
		data_buff++;
     1d0:	8f 81       	ldd	r24, Y+7	; 0x07
     1d2:	98 85       	ldd	r25, Y+8	; 0x08
     1d4:	01 96       	adiw	r24, 0x01	; 1
     1d6:	98 87       	std	Y+8, r25	; 0x08
     1d8:	8f 83       	std	Y+7, r24	; 0x07
uint8_t byte_stuff(uint8_t *data_buff, uint8_t data_buff_size, uint8_t *frame_buff, uint8_t	frame_buff_size)
{
	uint8_t const *frame_buff_start = frame_buff;
	uint8_t const *frame_buff_end = frame_buff + frame_buff_size;
	uint8_t const *data_buff_end = data_buff + data_buff_size;
	while (data_buff < data_buff_end && frame_buff < frame_buff_end)
     1da:	2f 81       	ldd	r18, Y+7	; 0x07
     1dc:	38 85       	ldd	r19, Y+8	; 0x08
     1de:	8d 81       	ldd	r24, Y+5	; 0x05
     1e0:	9e 81       	ldd	r25, Y+6	; 0x06
     1e2:	28 17       	cp	r18, r24
     1e4:	39 07       	cpc	r19, r25
     1e6:	40 f4       	brcc	.+16     	; 0x1f8 <byte_stuff+0x13e>
     1e8:	2a 85       	ldd	r18, Y+10	; 0x0a
     1ea:	3b 85       	ldd	r19, Y+11	; 0x0b
     1ec:	8b 81       	ldd	r24, Y+3	; 0x03
     1ee:	9c 81       	ldd	r25, Y+4	; 0x04
     1f0:	28 17       	cp	r18, r24
     1f2:	39 07       	cpc	r19, r25
     1f4:	08 f4       	brcc	.+2      	; 0x1f8 <byte_stuff+0x13e>
     1f6:	88 cf       	rjmp	.-240    	; 0x108 <byte_stuff+0x4e>
		break;
		}
		data_buff++;

	}
	return frame_buff - frame_buff_start;
     1f8:	2a 85       	ldd	r18, Y+10	; 0x0a
     1fa:	3b 85       	ldd	r19, Y+11	; 0x0b
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
     1fe:	9a 81       	ldd	r25, Y+2	; 0x02
     200:	a9 01       	movw	r20, r18
     202:	48 1b       	sub	r20, r24
     204:	59 0b       	sbc	r21, r25
     206:	ca 01       	movw	r24, r20
}
     208:	2c 96       	adiw	r28, 0x0c	; 12
     20a:	0f b6       	in	r0, 0x3f	; 63
     20c:	f8 94       	cli
     20e:	de bf       	out	0x3e, r29	; 62
     210:	0f be       	out	0x3f, r0	; 63
     212:	cd bf       	out	0x3d, r28	; 61
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	08 95       	ret

0000021a <byte_unstuff>:
uint8_t byte_unstuff(uint8_t *dst_buffer, uint8_t dst_buffer_size, uint8_t *link_data_buffer, uint8_t link_data_buffer_size)
{
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
     222:	2c 97       	sbiw	r28, 0x0c	; 12
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	f8 94       	cli
     228:	de bf       	out	0x3e, r29	; 62
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	cd bf       	out	0x3d, r28	; 61
     22e:	98 87       	std	Y+8, r25	; 0x08
     230:	8f 83       	std	Y+7, r24	; 0x07
     232:	69 87       	std	Y+9, r22	; 0x09
     234:	5b 87       	std	Y+11, r21	; 0x0b
     236:	4a 87       	std	Y+10, r20	; 0x0a
     238:	2c 87       	std	Y+12, r18	; 0x0c
	uint8_t const *dst_buffer_start = dst_buffer;
     23a:	8f 81       	ldd	r24, Y+7	; 0x07
     23c:	98 85       	ldd	r25, Y+8	; 0x08
     23e:	9a 83       	std	Y+2, r25	; 0x02
     240:	89 83       	std	Y+1, r24	; 0x01
	uint8_t const *dst_buffer_end = dst_buffer + dst_buffer_size;
     242:	89 85       	ldd	r24, Y+9	; 0x09
     244:	88 2f       	mov	r24, r24
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	2f 81       	ldd	r18, Y+7	; 0x07
     24a:	38 85       	ldd	r19, Y+8	; 0x08
     24c:	82 0f       	add	r24, r18
     24e:	93 1f       	adc	r25, r19
     250:	9c 83       	std	Y+4, r25	; 0x04
     252:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t const *link_data_buffer_end = link_data_buffer + link_data_buffer_size;
     254:	8c 85       	ldd	r24, Y+12	; 0x0c
     256:	88 2f       	mov	r24, r24
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	2a 85       	ldd	r18, Y+10	; 0x0a
     25c:	3b 85       	ldd	r19, Y+11	; 0x0b
     25e:	82 0f       	add	r24, r18
     260:	93 1f       	adc	r25, r19
     262:	9e 83       	std	Y+6, r25	; 0x06
     264:	8d 83       	std	Y+5, r24	; 0x05
	while (dst_buffer < dst_buffer_end && link_data_buffer < link_data_buffer_end)
     266:	39 c0       	rjmp	.+114    	; 0x2da <byte_unstuff+0xc0>
	{
		if (*link_data_buffer == LINK_ESC)
     268:	8a 85       	ldd	r24, Y+10	; 0x0a
     26a:	9b 85       	ldd	r25, Y+11	; 0x0b
     26c:	fc 01       	movw	r30, r24
     26e:	80 81       	ld	r24, Z
     270:	88 23       	and	r24, r24
     272:	09 f5       	brne	.+66     	; 0x2b6 <byte_unstuff+0x9c>
		{
			link_data_buffer++;
     274:	8a 85       	ldd	r24, Y+10	; 0x0a
     276:	9b 85       	ldd	r25, Y+11	; 0x0b
     278:	01 96       	adiw	r24, 0x01	; 1
     27a:	9b 87       	std	Y+11, r25	; 0x0b
     27c:	8a 87       	std	Y+10, r24	; 0x0a
			if ((*link_data_buffer == LINK_ESC) || (*link_data_buffer == LINK_FLAG))
     27e:	8a 85       	ldd	r24, Y+10	; 0x0a
     280:	9b 85       	ldd	r25, Y+11	; 0x0b
     282:	fc 01       	movw	r30, r24
     284:	80 81       	ld	r24, Z
     286:	88 23       	and	r24, r24
     288:	31 f0       	breq	.+12     	; 0x296 <byte_unstuff+0x7c>
     28a:	8a 85       	ldd	r24, Y+10	; 0x0a
     28c:	9b 85       	ldd	r25, Y+11	; 0x0b
     28e:	fc 01       	movw	r30, r24
     290:	80 81       	ld	r24, Z
     292:	8f 3f       	cpi	r24, 0xFF	; 255
     294:	71 f4       	brne	.+28     	; 0x2b2 <byte_unstuff+0x98>
				*dst_buffer++ = *link_data_buffer;
     296:	8f 81       	ldd	r24, Y+7	; 0x07
     298:	98 85       	ldd	r25, Y+8	; 0x08
     29a:	9c 01       	movw	r18, r24
     29c:	2f 5f       	subi	r18, 0xFF	; 255
     29e:	3f 4f       	sbci	r19, 0xFF	; 255
     2a0:	38 87       	std	Y+8, r19	; 0x08
     2a2:	2f 83       	std	Y+7, r18	; 0x07
     2a4:	2a 85       	ldd	r18, Y+10	; 0x0a
     2a6:	3b 85       	ldd	r19, Y+11	; 0x0b
     2a8:	f9 01       	movw	r30, r18
     2aa:	20 81       	ld	r18, Z
     2ac:	fc 01       	movw	r30, r24
     2ae:	20 83       	st	Z, r18
     2b0:	0f c0       	rjmp	.+30     	; 0x2d0 <byte_unstuff+0xb6>
			else
				return 0;
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	29 c0       	rjmp	.+82     	; 0x308 <byte_unstuff+0xee>
		}
		else
			*dst_buffer++ = *link_data_buffer;
     2b6:	8f 81       	ldd	r24, Y+7	; 0x07
     2b8:	98 85       	ldd	r25, Y+8	; 0x08
     2ba:	9c 01       	movw	r18, r24
     2bc:	2f 5f       	subi	r18, 0xFF	; 255
     2be:	3f 4f       	sbci	r19, 0xFF	; 255
     2c0:	38 87       	std	Y+8, r19	; 0x08
     2c2:	2f 83       	std	Y+7, r18	; 0x07
     2c4:	2a 85       	ldd	r18, Y+10	; 0x0a
     2c6:	3b 85       	ldd	r19, Y+11	; 0x0b
     2c8:	f9 01       	movw	r30, r18
     2ca:	20 81       	ld	r18, Z
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 83       	st	Z, r18

		link_data_buffer++;
     2d0:	8a 85       	ldd	r24, Y+10	; 0x0a
     2d2:	9b 85       	ldd	r25, Y+11	; 0x0b
     2d4:	01 96       	adiw	r24, 0x01	; 1
     2d6:	9b 87       	std	Y+11, r25	; 0x0b
     2d8:	8a 87       	std	Y+10, r24	; 0x0a
uint8_t byte_unstuff(uint8_t *dst_buffer, uint8_t dst_buffer_size, uint8_t *link_data_buffer, uint8_t link_data_buffer_size)
{
	uint8_t const *dst_buffer_start = dst_buffer;
	uint8_t const *dst_buffer_end = dst_buffer + dst_buffer_size;
	uint8_t const *link_data_buffer_end = link_data_buffer + link_data_buffer_size;
	while (dst_buffer < dst_buffer_end && link_data_buffer < link_data_buffer_end)
     2da:	2f 81       	ldd	r18, Y+7	; 0x07
     2dc:	38 85       	ldd	r19, Y+8	; 0x08
     2de:	8b 81       	ldd	r24, Y+3	; 0x03
     2e0:	9c 81       	ldd	r25, Y+4	; 0x04
     2e2:	28 17       	cp	r18, r24
     2e4:	39 07       	cpc	r19, r25
     2e6:	40 f4       	brcc	.+16     	; 0x2f8 <byte_unstuff+0xde>
     2e8:	2a 85       	ldd	r18, Y+10	; 0x0a
     2ea:	3b 85       	ldd	r19, Y+11	; 0x0b
     2ec:	8d 81       	ldd	r24, Y+5	; 0x05
     2ee:	9e 81       	ldd	r25, Y+6	; 0x06
     2f0:	28 17       	cp	r18, r24
     2f2:	39 07       	cpc	r19, r25
     2f4:	08 f4       	brcc	.+2      	; 0x2f8 <byte_unstuff+0xde>
     2f6:	b8 cf       	rjmp	.-144    	; 0x268 <byte_unstuff+0x4e>
		else
			*dst_buffer++ = *link_data_buffer;

		link_data_buffer++;
	}
	return dst_buffer - dst_buffer_start;
     2f8:	2f 81       	ldd	r18, Y+7	; 0x07
     2fa:	38 85       	ldd	r19, Y+8	; 0x08
     2fc:	89 81       	ldd	r24, Y+1	; 0x01
     2fe:	9a 81       	ldd	r25, Y+2	; 0x02
     300:	a9 01       	movw	r20, r18
     302:	48 1b       	sub	r20, r24
     304:	59 0b       	sbc	r21, r25
     306:	ca 01       	movw	r24, r20
     308:	2c 96       	adiw	r28, 0x0c	; 12
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	f8 94       	cli
     30e:	de bf       	out	0x3e, r29	; 62
     310:	0f be       	out	0x3f, r0	; 63
     312:	cd bf       	out	0x3d, r28	; 61
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <bat_move>:
int timer = 0;
bool score=false;
int* bata[3];
int* batb[3];
void bat_move(Player_t player, Direction_t direction)
{
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	00 d0       	rcall	.+0      	; 0x320 <bat_move+0x6>
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	89 83       	std	Y+1, r24	; 0x01
     326:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(direction)
     328:	8a 81       	ldd	r24, Y+2	; 0x02
     32a:	88 2f       	mov	r24, r24
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	81 30       	cpi	r24, 0x01	; 1
     330:	91 05       	cpc	r25, r1
     332:	09 f4       	brne	.+2      	; 0x336 <bat_move+0x1c>
     334:	73 c0       	rjmp	.+230    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     336:	02 97       	sbiw	r24, 0x02	; 2
     338:	09 f0       	breq	.+2      	; 0x33c <bat_move+0x22>
		bats[player]->pixels[1] -=14;
		bats[player]->pixels[2] -=14;}
		break;
	}

}
     33a:	e3 c0       	rjmp	.+454    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
{
	
	switch(direction)
	{ //interrupt messing the exec time. no mutex
		case D_UP:
		if( (player==PL_ONE&& bats[player]->pixels[0]<127 )|| (player==PL_TWO && bats[player]->pixels[0]<138)){
     33c:	89 81       	ldd	r24, Y+1	; 0x01
     33e:	88 23       	and	r24, r24
     340:	71 f4       	brne	.+28     	; 0x35e <bat_move+0x44>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 2f       	mov	r24, r24
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	88 0f       	add	r24, r24
     34a:	99 1f       	adc	r25, r25
     34c:	88 56       	subi	r24, 0x68	; 104
     34e:	9e 4f       	sbci	r25, 0xFE	; 254
     350:	fc 01       	movw	r30, r24
     352:	80 81       	ld	r24, Z
     354:	91 81       	ldd	r25, Z+1	; 0x01
     356:	fc 01       	movw	r30, r24
     358:	81 81       	ldd	r24, Z+1	; 0x01
     35a:	8f 37       	cpi	r24, 0x7F	; 127
     35c:	98 f0       	brcs	.+38     	; 0x384 <bat_move+0x6a>
     35e:	89 81       	ldd	r24, Y+1	; 0x01
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	09 f0       	breq	.+2      	; 0x366 <bat_move+0x4c>
     364:	cb c0       	rjmp	.+406    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	88 2f       	mov	r24, r24
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	88 0f       	add	r24, r24
     36e:	99 1f       	adc	r25, r25
     370:	88 56       	subi	r24, 0x68	; 104
     372:	9e 4f       	sbci	r25, 0xFE	; 254
     374:	fc 01       	movw	r30, r24
     376:	80 81       	ld	r24, Z
     378:	91 81       	ldd	r25, Z+1	; 0x01
     37a:	fc 01       	movw	r30, r24
     37c:	81 81       	ldd	r24, Z+1	; 0x01
     37e:	8a 38       	cpi	r24, 0x8A	; 138
     380:	08 f0       	brcs	.+2      	; 0x384 <bat_move+0x6a>
     382:	bc c0       	rjmp	.+376    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
		bats[player]->pixels[0] += 14;
     384:	89 81       	ldd	r24, Y+1	; 0x01
     386:	88 2f       	mov	r24, r24
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	88 0f       	add	r24, r24
     38c:	99 1f       	adc	r25, r25
     38e:	88 56       	subi	r24, 0x68	; 104
     390:	9e 4f       	sbci	r25, 0xFE	; 254
     392:	fc 01       	movw	r30, r24
     394:	80 81       	ld	r24, Z
     396:	91 81       	ldd	r25, Z+1	; 0x01
     398:	29 81       	ldd	r18, Y+1	; 0x01
     39a:	22 2f       	mov	r18, r18
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	22 0f       	add	r18, r18
     3a0:	33 1f       	adc	r19, r19
     3a2:	28 56       	subi	r18, 0x68	; 104
     3a4:	3e 4f       	sbci	r19, 0xFE	; 254
     3a6:	f9 01       	movw	r30, r18
     3a8:	20 81       	ld	r18, Z
     3aa:	31 81       	ldd	r19, Z+1	; 0x01
     3ac:	f9 01       	movw	r30, r18
     3ae:	21 81       	ldd	r18, Z+1	; 0x01
     3b0:	22 5f       	subi	r18, 0xF2	; 242
     3b2:	fc 01       	movw	r30, r24
     3b4:	21 83       	std	Z+1, r18	; 0x01
		bats[player]->pixels[1] +=14;
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	88 2f       	mov	r24, r24
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	88 0f       	add	r24, r24
     3be:	99 1f       	adc	r25, r25
     3c0:	88 56       	subi	r24, 0x68	; 104
     3c2:	9e 4f       	sbci	r25, 0xFE	; 254
     3c4:	fc 01       	movw	r30, r24
     3c6:	80 81       	ld	r24, Z
     3c8:	91 81       	ldd	r25, Z+1	; 0x01
     3ca:	29 81       	ldd	r18, Y+1	; 0x01
     3cc:	22 2f       	mov	r18, r18
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	22 0f       	add	r18, r18
     3d2:	33 1f       	adc	r19, r19
     3d4:	28 56       	subi	r18, 0x68	; 104
     3d6:	3e 4f       	sbci	r19, 0xFE	; 254
     3d8:	f9 01       	movw	r30, r18
     3da:	20 81       	ld	r18, Z
     3dc:	31 81       	ldd	r19, Z+1	; 0x01
     3de:	f9 01       	movw	r30, r18
     3e0:	22 81       	ldd	r18, Z+2	; 0x02
     3e2:	22 5f       	subi	r18, 0xF2	; 242
     3e4:	fc 01       	movw	r30, r24
     3e6:	22 83       	std	Z+2, r18	; 0x02
		bats[player]->pixels[2] +=14;
     3e8:	89 81       	ldd	r24, Y+1	; 0x01
     3ea:	88 2f       	mov	r24, r24
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	88 0f       	add	r24, r24
     3f0:	99 1f       	adc	r25, r25
     3f2:	88 56       	subi	r24, 0x68	; 104
     3f4:	9e 4f       	sbci	r25, 0xFE	; 254
     3f6:	fc 01       	movw	r30, r24
     3f8:	80 81       	ld	r24, Z
     3fa:	91 81       	ldd	r25, Z+1	; 0x01
     3fc:	29 81       	ldd	r18, Y+1	; 0x01
     3fe:	22 2f       	mov	r18, r18
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	22 0f       	add	r18, r18
     404:	33 1f       	adc	r19, r19
     406:	28 56       	subi	r18, 0x68	; 104
     408:	3e 4f       	sbci	r19, 0xFE	; 254
     40a:	f9 01       	movw	r30, r18
     40c:	20 81       	ld	r18, Z
     40e:	31 81       	ldd	r19, Z+1	; 0x01
     410:	f9 01       	movw	r30, r18
     412:	23 81       	ldd	r18, Z+3	; 0x03
     414:	22 5f       	subi	r18, 0xF2	; 242
     416:	fc 01       	movw	r30, r24
     418:	23 83       	std	Z+3, r18	; 0x03
		}
		
		break;
     41a:	70 c0       	rjmp	.+224    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
		case D_DOWN:
		if((player==PL_ONE&& bats[player]->pixels[2]>1)||(player==PL_TWO&& bats[player]->pixels[2]>12)){
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	88 23       	and	r24, r24
     420:	71 f4       	brne	.+28     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	88 2f       	mov	r24, r24
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	88 56       	subi	r24, 0x68	; 104
     42e:	9e 4f       	sbci	r25, 0xFE	; 254
     430:	fc 01       	movw	r30, r24
     432:	80 81       	ld	r24, Z
     434:	91 81       	ldd	r25, Z+1	; 0x01
     436:	fc 01       	movw	r30, r24
     438:	83 81       	ldd	r24, Z+3	; 0x03
     43a:	82 30       	cpi	r24, 0x02	; 2
     43c:	98 f4       	brcc	.+38     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	81 30       	cpi	r24, 0x01	; 1
     442:	09 f0       	breq	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     444:	5d c0       	rjmp	.+186    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	88 2f       	mov	r24, r24
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	88 0f       	add	r24, r24
     44e:	99 1f       	adc	r25, r25
     450:	88 56       	subi	r24, 0x68	; 104
     452:	9e 4f       	sbci	r25, 0xFE	; 254
     454:	fc 01       	movw	r30, r24
     456:	80 81       	ld	r24, Z
     458:	91 81       	ldd	r25, Z+1	; 0x01
     45a:	fc 01       	movw	r30, r24
     45c:	83 81       	ldd	r24, Z+3	; 0x03
     45e:	8d 30       	cpi	r24, 0x0D	; 13
     460:	08 f4       	brcc	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     462:	4e c0       	rjmp	.+156    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		bats[player]->pixels[0] -= 14;
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	88 2f       	mov	r24, r24
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	88 56       	subi	r24, 0x68	; 104
     470:	9e 4f       	sbci	r25, 0xFE	; 254
     472:	fc 01       	movw	r30, r24
     474:	80 81       	ld	r24, Z
     476:	91 81       	ldd	r25, Z+1	; 0x01
     478:	29 81       	ldd	r18, Y+1	; 0x01
     47a:	22 2f       	mov	r18, r18
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	22 0f       	add	r18, r18
     480:	33 1f       	adc	r19, r19
     482:	28 56       	subi	r18, 0x68	; 104
     484:	3e 4f       	sbci	r19, 0xFE	; 254
     486:	f9 01       	movw	r30, r18
     488:	20 81       	ld	r18, Z
     48a:	31 81       	ldd	r19, Z+1	; 0x01
     48c:	f9 01       	movw	r30, r18
     48e:	21 81       	ldd	r18, Z+1	; 0x01
     490:	2e 50       	subi	r18, 0x0E	; 14
     492:	fc 01       	movw	r30, r24
     494:	21 83       	std	Z+1, r18	; 0x01
		bats[player]->pixels[1] -=14;
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	88 2f       	mov	r24, r24
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	88 0f       	add	r24, r24
     49e:	99 1f       	adc	r25, r25
     4a0:	88 56       	subi	r24, 0x68	; 104
     4a2:	9e 4f       	sbci	r25, 0xFE	; 254
     4a4:	fc 01       	movw	r30, r24
     4a6:	80 81       	ld	r24, Z
     4a8:	91 81       	ldd	r25, Z+1	; 0x01
     4aa:	29 81       	ldd	r18, Y+1	; 0x01
     4ac:	22 2f       	mov	r18, r18
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	22 0f       	add	r18, r18
     4b2:	33 1f       	adc	r19, r19
     4b4:	28 56       	subi	r18, 0x68	; 104
     4b6:	3e 4f       	sbci	r19, 0xFE	; 254
     4b8:	f9 01       	movw	r30, r18
     4ba:	20 81       	ld	r18, Z
     4bc:	31 81       	ldd	r19, Z+1	; 0x01
     4be:	f9 01       	movw	r30, r18
     4c0:	22 81       	ldd	r18, Z+2	; 0x02
     4c2:	2e 50       	subi	r18, 0x0E	; 14
     4c4:	fc 01       	movw	r30, r24
     4c6:	22 83       	std	Z+2, r18	; 0x02
		bats[player]->pixels[2] -=14;}
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	88 2f       	mov	r24, r24
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	88 56       	subi	r24, 0x68	; 104
     4d4:	9e 4f       	sbci	r25, 0xFE	; 254
     4d6:	fc 01       	movw	r30, r24
     4d8:	80 81       	ld	r24, Z
     4da:	91 81       	ldd	r25, Z+1	; 0x01
     4dc:	29 81       	ldd	r18, Y+1	; 0x01
     4de:	22 2f       	mov	r18, r18
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	22 0f       	add	r18, r18
     4e4:	33 1f       	adc	r19, r19
     4e6:	28 56       	subi	r18, 0x68	; 104
     4e8:	3e 4f       	sbci	r19, 0xFE	; 254
     4ea:	f9 01       	movw	r30, r18
     4ec:	20 81       	ld	r18, Z
     4ee:	31 81       	ldd	r19, Z+1	; 0x01
     4f0:	f9 01       	movw	r30, r18
     4f2:	23 81       	ldd	r18, Z+3	; 0x03
     4f4:	2e 50       	subi	r18, 0x0E	; 14
     4f6:	fc 01       	movw	r30, r24
     4f8:	23 83       	std	Z+3, r18	; 0x03
		break;
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		bats[player]->pixels[0] += 14;
		bats[player]->pixels[1] +=14;
		bats[player]->pixels[2] +=14;
		}
		
		break;
     4fc:	00 00       	nop
     4fe:	01 c0       	rjmp	.+2      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		case D_DOWN:
		if((player==PL_ONE&& bats[player]->pixels[2]>1)||(player==PL_TWO&& bats[player]->pixels[2]>12)){
		bats[player]->pixels[0] -= 14;
		bats[player]->pixels[1] -=14;
		bats[player]->pixels[2] -=14;}
		break;
     500:	00 00       	nop
	}

}
     502:	00 00       	nop
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <restart_game>:

void restart_game()
{
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
	if(!run_game)
     516:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <run_game>
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	89 27       	eor	r24, r25
     51e:	88 23       	and	r24, r24
     520:	a9 f0       	breq	.+42     	; 0x54c <restart_game+0x3e>
	{	score=false;
     522:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <score>
		scoreone = 0;
     526:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <scoreone+0x1>
     52a:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <scoreone>
		scoretwo=0;
     52e:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <scoretwo+0x1>
     532:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <scoretwo>
		run_game = true;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <run_game>
		com_send_string("Game is restarted!");
     53c:	86 e2       	ldi	r24, 0x26	; 38
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	0e 94 c9 02 	call	0x592	; 0x592 <com_send_string>
		init_game(bats);
     544:	88 e9       	ldi	r24, 0x98	; 152
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	0e 94 b5 05 	call	0xb6a	; 0xb6a <init_game>
	    
	}
}
     54c:	00 00       	nop
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <end_game>:
void end_game()
{
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
	run_game = false;
     55c:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <run_game>
}
     560:	00 00       	nop
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <xy_to_pixel_id>:

uint8_t xy_to_pixel_id(uint8_t x, uint8_t y)
{
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	00 d0       	rcall	.+0      	; 0x56e <xy_to_pixel_id+0x6>
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	89 83       	std	Y+1, r24	; 0x01
     574:	6a 83       	std	Y+2, r22	; 0x02
	return x + y * SCREEN_DIMENSION_X;
     576:	8a 81       	ldd	r24, Y+2	; 0x02
     578:	88 0f       	add	r24, r24
     57a:	98 2f       	mov	r25, r24
     57c:	99 0f       	add	r25, r25
     57e:	99 0f       	add	r25, r25
     580:	99 0f       	add	r25, r25
     582:	98 1b       	sub	r25, r24
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	89 0f       	add	r24, r25
}
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <com_send_string>:

void com_send_string(char *str)
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	00 d0       	rcall	.+0      	; 0x598 <com_send_string+0x6>
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
     59c:	9a 83       	std	Y+2, r25	; 0x02
     59e:	89 83       	std	Y+1, r24	; 0x01
	send_bytes(str, strlen(str)+1);
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	9a 81       	ldd	r25, Y+2	; 0x02
     5a4:	0e 94 56 28 	call	0x50ac	; 0x50ac <strlen>
     5a8:	21 e0       	ldi	r18, 0x01	; 1
     5aa:	28 0f       	add	r18, r24
     5ac:	89 81       	ldd	r24, Y+1	; 0x01
     5ae:	9a 81       	ldd	r25, Y+2	; 0x02
     5b0:	62 2f       	mov	r22, r18
     5b2:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <send_bytes>
}
     5b6:	00 00       	nop
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	08 95       	ret

000005c2 <game_renderer_task>:


void game_renderer_task(void *pvParameters)
{
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
     5ce:	2a 97       	sbiw	r28, 0x0a	; 10
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	9a 87       	std	Y+10, r25	; 0x0a
     5dc:	89 87       	std	Y+9, r24	; 0x09
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	vTaskSetApplicationTaskTag( NULL, ( void * ) 3 );
     5de:	63 e0       	ldi	r22, 0x03	; 3
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 3b 23 	call	0x4676	; 0x4676 <vTaskSetApplicationTaskTag>
	#endif

	uint16_t* frame_buf = pvParameters;
     5ea:	89 85       	ldd	r24, Y+9	; 0x09
     5ec:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ee:	9d 83       	std	Y+5, r25	; 0x05
     5f0:	8c 83       	std	Y+4, r24	; 0x04

	for(uint8_t i = 0; i < 2; i++)
     5f2:	19 82       	std	Y+1, r1	; 0x01
     5f4:	11 c0       	rjmp	.+34     	; 0x618 <game_renderer_task+0x56>
	{
		bats[i] = bat_new_instance();
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
     5f8:	08 2f       	mov	r16, r24
     5fa:	10 e0       	ldi	r17, 0x00	; 0
     5fc:	0e 94 98 05 	call	0xb30	; 0xb30 <bat_new_instance>
     600:	9c 01       	movw	r18, r24
     602:	c8 01       	movw	r24, r16
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	88 56       	subi	r24, 0x68	; 104
     60a:	9e 4f       	sbci	r25, 0xFE	; 254
     60c:	fc 01       	movw	r30, r24
     60e:	31 83       	std	Z+1, r19	; 0x01
     610:	20 83       	st	Z, r18
	vTaskSetApplicationTaskTag( NULL, ( void * ) 3 );
	#endif

	uint16_t* frame_buf = pvParameters;

	for(uint8_t i = 0; i < 2; i++)
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	8f 5f       	subi	r24, 0xFF	; 255
     616:	89 83       	std	Y+1, r24	; 0x01
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	82 30       	cpi	r24, 0x02	; 2
     61c:	60 f3       	brcs	.-40     	; 0x5f6 <game_renderer_task+0x34>
	{
		bats[i] = bat_new_instance();
	}

	TickType_t game_renderer_task_lastwake = xTaskGetTickCount();
     61e:	0e 94 37 22 	call	0x446e	; 0x446e <xTaskGetTickCount>
     622:	98 87       	std	Y+8, r25	; 0x08
     624:	8f 83       	std	Y+7, r24	; 0x07
	

	clear_screen(frame_buf);			//clearing from the screen from bootup display.
     626:	8c 81       	ldd	r24, Y+4	; 0x04
     628:	9d 81       	ldd	r25, Y+5	; 0x05
     62a:	0e 94 1c 06 	call	0xc38	; 0xc38 <clear_screen>
	init_game(bats);
     62e:	88 e9       	ldi	r24, 0x98	; 152
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	0e 94 b5 05 	call	0xb6a	; 0xb6a <init_game>
	
	draw_game(frame_buf, bats, ball_location);
     636:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     63a:	8c 81       	ldd	r24, Y+4	; 0x04
     63c:	9d 81       	ldd	r25, Y+5	; 0x05
     63e:	42 2f       	mov	r20, r18
     640:	68 e9       	ldi	r22, 0x98	; 152
     642:	71 e0       	ldi	r23, 0x01	; 1
     644:	0e 94 71 06 	call	0xce2	; 0xce2 <draw_game>
	
	while(1)
	{
		UBaseType_t stackUsage = uxTaskGetStackHighWaterMark(NULL);
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 ef 25 	call	0x4bde	; 0x4bde <uxTaskGetStackHighWaterMark>
     650:	8e 83       	std	Y+6, r24	; 0x06
		//Set task period
		vTaskDelayUntil(&game_renderer_task_lastwake, GAME_RENDERER_TASK_PERIOD);
     652:	ce 01       	movw	r24, r28
     654:	07 96       	adiw	r24, 0x07	; 7
     656:	62 e3       	ldi	r22, 0x32	; 50
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	0e 94 c1 20 	call	0x4182	; 0x4182 <vTaskDelayUntil>
		//Action5
		
		if(score==true){timer++;}
     65e:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <score>
     662:	88 23       	and	r24, r24
     664:	49 f0       	breq	.+18     	; 0x678 <game_renderer_task+0xb6>
     666:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <timer>
     66a:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <timer+0x1>
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <timer+0x1>
     674:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <timer>
		if(timer%123==0&&run_game==false&&score==true){run_game=true; score=false;}
     678:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <timer>
     67c:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <timer+0x1>
     680:	2b e7       	ldi	r18, 0x7B	; 123
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	b9 01       	movw	r22, r18
     686:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <__divmodhi4>
     68a:	89 2b       	or	r24, r25
     68c:	79 f4       	brne	.+30     	; 0x6ac <game_renderer_task+0xea>
     68e:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <run_game>
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	89 27       	eor	r24, r25
     696:	88 23       	and	r24, r24
     698:	49 f0       	breq	.+18     	; 0x6ac <game_renderer_task+0xea>
     69a:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <score>
     69e:	88 23       	and	r24, r24
     6a0:	29 f0       	breq	.+10     	; 0x6ac <game_renderer_task+0xea>
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <run_game>
     6a8:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <score>
		if(timer==356){timer=0;}
     6ac:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <timer>
     6b0:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <timer+0x1>
     6b4:	84 36       	cpi	r24, 0x64	; 100
     6b6:	91 40       	sbci	r25, 0x01	; 1
     6b8:	21 f4       	brne	.+8      	; 0x6c2 <game_renderer_task+0x100>
     6ba:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <timer+0x1>
     6be:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <timer>
			
		if(run_game)
     6c2:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <run_game>
     6c6:	88 23       	and	r24, r24
     6c8:	09 f4       	brne	.+2      	; 0x6cc <game_renderer_task+0x10a>
     6ca:	be cf       	rjmp	.-132    	; 0x648 <game_renderer_task+0x86>
		{
			clear_screen(frame_buf);
     6cc:	8c 81       	ldd	r24, Y+4	; 0x04
     6ce:	9d 81       	ldd	r25, Y+5	; 0x05
     6d0:	0e 94 1c 06 	call	0xc38	; 0xc38 <clear_screen>
			//remove this for
			for(int i = 0; i < 2; i++)
     6d4:	1b 82       	std	Y+3, r1	; 0x03
     6d6:	1a 82       	std	Y+2, r1	; 0x02
     6d8:	a4 c1       	rjmp	.+840    	; 0xa22 <__stack+0x123>
			{
				
			if(ball_location%13==ball_location/13-1)			//first player scores 
     6da:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     6de:	8f e4       	ldi	r24, 0x4F	; 79
     6e0:	98 9f       	mul	r25, r24
     6e2:	81 2d       	mov	r24, r1
     6e4:	11 24       	eor	r1, r1
     6e6:	86 95       	lsr	r24
     6e8:	86 95       	lsr	r24
     6ea:	2d e0       	ldi	r18, 0x0D	; 13
     6ec:	82 9f       	mul	r24, r18
     6ee:	80 2d       	mov	r24, r0
     6f0:	11 24       	eor	r1, r1
     6f2:	29 2f       	mov	r18, r25
     6f4:	28 1b       	sub	r18, r24
     6f6:	82 2f       	mov	r24, r18
     6f8:	28 2f       	mov	r18, r24
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     700:	8f e4       	ldi	r24, 0x4F	; 79
     702:	98 9f       	mul	r25, r24
     704:	81 2d       	mov	r24, r1
     706:	11 24       	eor	r1, r1
     708:	86 95       	lsr	r24
     70a:	86 95       	lsr	r24
     70c:	88 2f       	mov	r24, r24
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	01 97       	sbiw	r24, 0x01	; 1
     712:	28 17       	cp	r18, r24
     714:	39 07       	cpc	r19, r25
     716:	49 f5       	brne	.+82     	; 0x76a <game_renderer_task+0x1a8>
			{
				
				scoreone++;
     718:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <scoreone>
     71c:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <scoreone+0x1>
     720:	01 96       	adiw	r24, 0x01	; 1
     722:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <scoreone+0x1>
     726:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <scoreone>
				ball_location=21;
     72a:	85 e1       	ldi	r24, 0x15	; 21
     72c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				dir=2;
     730:	82 e0       	ldi	r24, 0x02	; 2
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     738:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
				//hide_game(frame_buf, bats);
				com_send_string("Player 1 scored!");
     73c:	89 e3       	ldi	r24, 0x39	; 57
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	0e 94 c9 02 	call	0x592	; 0x592 <com_send_string>
				draw_scores(frame_buf, scoreone, scoretwo);
     744:	40 91 9f 01 	lds	r20, 0x019F	; 0x80019f <scoretwo>
     748:	50 91 a0 01 	lds	r21, 0x01A0	; 0x8001a0 <scoretwo+0x1>
     74c:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <scoreone>
     750:	30 91 9e 01 	lds	r19, 0x019E	; 0x80019e <scoreone+0x1>
     754:	8c 81       	ldd	r24, Y+4	; 0x04
     756:	9d 81       	ldd	r25, Y+5	; 0x05
     758:	b9 01       	movw	r22, r18
     75a:	0e 94 30 07 	call	0xe60	; 0xe60 <draw_scores>
				run_game=false;
     75e:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <run_game>
				score=true;
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <score>
     768:	66 c0       	rjmp	.+204    	; 0x836 <game_renderer_task+0x274>
				
					} //score
				
				else if
				((ball_location-12)%14==0 && ball_location==bats[PL_TWO]->pixels[0]	)
     76a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     76e:	88 2f       	mov	r24, r24
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0c 97       	sbiw	r24, 0x0c	; 12
     774:	2e e0       	ldi	r18, 0x0E	; 14
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	b9 01       	movw	r22, r18
     77a:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <__divmodhi4>
     77e:	89 2b       	or	r24, r25
     780:	b9 f4       	brne	.+46     	; 0x7b0 <game_renderer_task+0x1ee>
     782:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end+0x2>
     786:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <__data_end+0x3>
     78a:	fc 01       	movw	r30, r24
     78c:	91 81       	ldd	r25, Z+1	; 0x01
     78e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     792:	98 17       	cp	r25, r24
     794:	69 f4       	brne	.+26     	; 0x7b0 <game_renderer_task+0x1ee>
				{
					dir=2;
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     79e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
					up=1;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <up+0x1>
     7aa:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <up>
     7ae:	43 c0       	rjmp	.+134    	; 0x836 <game_renderer_task+0x274>
				}
					else if
					((ball_location-12)%14==0 && ball_location==bats[PL_TWO]->pixels[1]	)
     7b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     7b4:	88 2f       	mov	r24, r24
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0c 97       	sbiw	r24, 0x0c	; 12
     7ba:	2e e0       	ldi	r18, 0x0E	; 14
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	b9 01       	movw	r22, r18
     7c0:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <__divmodhi4>
     7c4:	89 2b       	or	r24, r25
     7c6:	b9 f4       	brne	.+46     	; 0x7f6 <game_renderer_task+0x234>
     7c8:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end+0x2>
     7cc:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <__data_end+0x3>
     7d0:	fc 01       	movw	r30, r24
     7d2:	92 81       	ldd	r25, Z+2	; 0x02
     7d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     7d8:	98 17       	cp	r25, r24
     7da:	69 f4       	brne	.+26     	; 0x7f6 <game_renderer_task+0x234>
					{
						dir=2;
     7dc:	82 e0       	ldi	r24, 0x02	; 2
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     7e4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
						up=2;
     7e8:	82 e0       	ldi	r24, 0x02	; 2
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <up+0x1>
     7f0:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <up>
     7f4:	20 c0       	rjmp	.+64     	; 0x836 <game_renderer_task+0x274>
					}
					//
					else if
					((ball_location-12)%14==0 && ball_location==bats[PL_TWO]->pixels[2]	)
     7f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     7fa:	88 2f       	mov	r24, r24
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0c 97       	sbiw	r24, 0x0c	; 12
     800:	2e e0       	ldi	r18, 0x0E	; 14
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	b9 01       	movw	r22, r18
     806:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <__divmodhi4>
     80a:	89 2b       	or	r24, r25
     80c:	a1 f4       	brne	.+40     	; 0x836 <game_renderer_task+0x274>
     80e:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end+0x2>
     812:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <__data_end+0x3>
     816:	fc 01       	movw	r30, r24
     818:	93 81       	ldd	r25, Z+3	; 0x03
     81a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     81e:	98 17       	cp	r25, r24
     820:	51 f4       	brne	.+20     	; 0x836 <game_renderer_task+0x274>
					{
						dir=2;
     822:	82 e0       	ldi	r24, 0x02	; 2
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     82a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
						up=0;
     82e:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <up+0x1>
     832:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <up>
					}
					
				if(ball_location%14==0)							//second player scores.
     836:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     83a:	92 2f       	mov	r25, r18
     83c:	96 95       	lsr	r25
     83e:	83 e9       	ldi	r24, 0x93	; 147
     840:	98 9f       	mul	r25, r24
     842:	81 2d       	mov	r24, r1
     844:	11 24       	eor	r1, r1
     846:	86 95       	lsr	r24
     848:	86 95       	lsr	r24
     84a:	98 2f       	mov	r25, r24
     84c:	89 2f       	mov	r24, r25
     84e:	88 0f       	add	r24, r24
     850:	98 2f       	mov	r25, r24
     852:	89 2f       	mov	r24, r25
     854:	88 0f       	add	r24, r24
     856:	88 0f       	add	r24, r24
     858:	88 0f       	add	r24, r24
     85a:	89 1b       	sub	r24, r25
     85c:	f2 2f       	mov	r31, r18
     85e:	f8 1b       	sub	r31, r24
     860:	8f 2f       	mov	r24, r31
     862:	88 23       	and	r24, r24
     864:	49 f5       	brne	.+82     	; 0x8b8 <game_renderer_task+0x2f6>
					{
				scoretwo++;
     866:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <scoretwo>
     86a:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <scoretwo+0x1>
     86e:	01 96       	adiw	r24, 0x01	; 1
     870:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <scoretwo+0x1>
     874:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <scoretwo>
				dir=1;	
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     880:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
				ball_location = 21;
     884:	85 e1       	ldi	r24, 0x15	; 21
     886:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				//hide_game(frame_buf, bats);
				com_send_string("Player 2 scored!");
     88a:	8a e4       	ldi	r24, 0x4A	; 74
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	0e 94 c9 02 	call	0x592	; 0x592 <com_send_string>
				draw_scores(frame_buf, scoreone, scoretwo);
     892:	40 91 9f 01 	lds	r20, 0x019F	; 0x80019f <scoretwo>
     896:	50 91 a0 01 	lds	r21, 0x01A0	; 0x8001a0 <scoretwo+0x1>
     89a:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <scoreone>
     89e:	30 91 9e 01 	lds	r19, 0x019E	; 0x80019e <scoreone+0x1>
     8a2:	8c 81       	ldd	r24, Y+4	; 0x04
     8a4:	9d 81       	ldd	r25, Y+5	; 0x05
     8a6:	b9 01       	movw	r22, r18
     8a8:	0e 94 30 07 	call	0xe60	; 0xe60 <draw_scores>
				run_game=false;
     8ac:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <run_game>
				score=true;
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <score>
     8b6:	66 c0       	rjmp	.+204    	; 0x984 <__stack+0x85>
				
					} //SCORE
				else if((ball_location-1)%14==0 && ball_location==bats[PL_ONE]->pixels[0])
     8b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     8bc:	88 2f       	mov	r24, r24
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	2e e0       	ldi	r18, 0x0E	; 14
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	b9 01       	movw	r22, r18
     8c8:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <__divmodhi4>
     8cc:	89 2b       	or	r24, r25
     8ce:	b9 f4       	brne	.+46     	; 0x8fe <game_renderer_task+0x33c>
     8d0:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__data_end>
     8d4:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <__data_end+0x1>
     8d8:	fc 01       	movw	r30, r24
     8da:	91 81       	ldd	r25, Z+1	; 0x01
     8dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     8e0:	98 17       	cp	r25, r24
     8e2:	69 f4       	brne	.+26     	; 0x8fe <game_renderer_task+0x33c>
				{
				
					dir=1;
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     8ec:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
					up=1;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <up+0x1>
     8f8:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <up>
     8fc:	43 c0       	rjmp	.+134    	; 0x984 <__stack+0x85>
				}
			
				//
				else if((ball_location-1)%14==0 && ball_location==bats[PL_ONE]->pixels[1])
     8fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     902:	88 2f       	mov	r24, r24
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	01 97       	sbiw	r24, 0x01	; 1
     908:	2e e0       	ldi	r18, 0x0E	; 14
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	b9 01       	movw	r22, r18
     90e:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <__divmodhi4>
     912:	89 2b       	or	r24, r25
     914:	b9 f4       	brne	.+46     	; 0x944 <__stack+0x45>
     916:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__data_end>
     91a:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <__data_end+0x1>
     91e:	fc 01       	movw	r30, r24
     920:	92 81       	ldd	r25, Z+2	; 0x02
     922:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     926:	98 17       	cp	r25, r24
     928:	69 f4       	brne	.+26     	; 0x944 <__stack+0x45>
						{	
							dir=1;
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     932:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
							up=2;	
     936:	82 e0       	ldi	r24, 0x02	; 2
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <up+0x1>
     93e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <up>
     942:	20 c0       	rjmp	.+64     	; 0x984 <__stack+0x85>
						}
			
				//
					else if((ball_location-1)%14==0 && ball_location==bats[PL_ONE]->pixels[2])
     944:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     948:	88 2f       	mov	r24, r24
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	2e e0       	ldi	r18, 0x0E	; 14
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	b9 01       	movw	r22, r18
     954:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <__divmodhi4>
     958:	89 2b       	or	r24, r25
     95a:	a1 f4       	brne	.+40     	; 0x984 <__stack+0x85>
     95c:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__data_end>
     960:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <__data_end+0x1>
     964:	fc 01       	movw	r30, r24
     966:	93 81       	ldd	r25, Z+3	; 0x03
     968:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     96c:	98 17       	cp	r25, r24
     96e:	51 f4       	brne	.+20     	; 0x984 <__stack+0x85>
					{
						dir=1;
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     978:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
						up=0;
     97c:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <up+0x1>
     980:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <up>
					}
				
				if(z%27==0)				//z is the ball period.
     984:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <z>
     988:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <z+0x1>
     98c:	2b e1       	ldi	r18, 0x1B	; 27
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	b9 01       	movw	r22, r18
     992:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <__divmodhi4>
     996:	89 2b       	or	r24, r25
     998:	49 f4       	brne	.+18     	; 0x9ac <__stack+0xad>
					{
					move_ball(&ball_location,dir);
     99a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dir>
     99e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <dir+0x1>
     9a2:	bc 01       	movw	r22, r24
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	0e 94 20 05 	call	0xa40	; 0xa40 <move_ball>
					}
				z++;
     9ac:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <z>
     9b0:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <z+0x1>
     9b4:	01 96       	adiw	r24, 0x01	; 1
     9b6:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <z+0x1>
     9ba:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <z>
				if(z==270)
     9be:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <z>
     9c2:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <z+0x1>
     9c6:	8e 30       	cpi	r24, 0x0E	; 14
     9c8:	91 40       	sbci	r25, 0x01	; 1
     9ca:	21 f4       	brne	.+8      	; 0x9d4 <__stack+0xd5>
				z=0;
     9cc:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <z+0x1>
     9d0:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <z>
				
				if(scoreone>=2||scoretwo>=2)
     9d4:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <scoreone>
     9d8:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <scoreone+0x1>
     9dc:	02 97       	sbiw	r24, 0x02	; 2
     9de:	30 f4       	brcc	.+12     	; 0x9ec <__stack+0xed>
     9e0:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <scoretwo>
     9e4:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <scoretwo+0x1>
     9e8:	02 97       	sbiw	r24, 0x02	; 2
     9ea:	b0 f0       	brcs	.+44     	; 0xa18 <__stack+0x119>
					{
						if(scoreone>=2)
     9ec:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <scoreone>
     9f0:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <scoreone+0x1>
     9f4:	02 97       	sbiw	r24, 0x02	; 2
     9f6:	20 f0       	brcs	.+8      	; 0xa00 <__stack+0x101>
						com_send_string("player 1 won");
     9f8:	8b e5       	ldi	r24, 0x5B	; 91
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	0e 94 c9 02 	call	0x592	; 0x592 <com_send_string>
						if(scoretwo>=2)
     a00:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <scoretwo>
     a04:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <scoretwo+0x1>
     a08:	02 97       	sbiw	r24, 0x02	; 2
     a0a:	20 f0       	brcs	.+8      	; 0xa14 <__stack+0x115>
						com_send_string("player 2 won");
     a0c:	88 e6       	ldi	r24, 0x68	; 104
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	0e 94 c9 02 	call	0x592	; 0x592 <com_send_string>
						 end_game();
     a14:	0e 94 aa 02 	call	0x554	; 0x554 <end_game>
			
		if(run_game)
		{
			clear_screen(frame_buf);
			//remove this for
			for(int i = 0; i < 2; i++)
     a18:	8a 81       	ldd	r24, Y+2	; 0x02
     a1a:	9b 81       	ldd	r25, Y+3	; 0x03
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	9b 83       	std	Y+3, r25	; 0x03
     a20:	8a 83       	std	Y+2, r24	; 0x02
     a22:	8a 81       	ldd	r24, Y+2	; 0x02
     a24:	9b 81       	ldd	r25, Y+3	; 0x03
     a26:	02 97       	sbiw	r24, 0x02	; 2
     a28:	0c f4       	brge	.+2      	; 0xa2c <__stack+0x12d>
     a2a:	57 ce       	rjmp	.-850    	; 0x6da <game_renderer_task+0x118>
						 end_game();
					}
				
			}
			
			draw_game(frame_buf, bats, ball_location);
     a2c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     a30:	8c 81       	ldd	r24, Y+4	; 0x04
     a32:	9d 81       	ldd	r25, Y+5	; 0x05
     a34:	42 2f       	mov	r20, r18
     a36:	68 e9       	ldi	r22, 0x98	; 152
     a38:	71 e0       	ldi	r23, 0x01	; 1
     a3a:	0e 94 71 06 	call	0xce2	; 0xce2 <draw_game>
		}
	}
     a3e:	04 ce       	rjmp	.-1016   	; 0x648 <game_renderer_task+0x86>

00000a40 <move_ball>:
}

void move_ball(uint8_t *location, uint8_t* dir)
{
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	00 d0       	rcall	.+0      	; 0xa46 <move_ball+0x6>
     a46:	00 d0       	rcall	.+0      	; 0xa48 <move_ball+0x8>
     a48:	1f 92       	push	r1
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	9b 83       	std	Y+3, r25	; 0x03
     a50:	8a 83       	std	Y+2, r24	; 0x02
     a52:	7d 83       	std	Y+5, r23	; 0x05
     a54:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t x = *location;
     a56:	8a 81       	ldd	r24, Y+2	; 0x02
     a58:	9b 81       	ldd	r25, Y+3	; 0x03
     a5a:	fc 01       	movw	r30, r24
     a5c:	80 81       	ld	r24, Z
     a5e:	89 83       	std	Y+1, r24	; 0x01
	
	//boolean up 
	if(x>125) up = 0; //bouncing of the ball from the wall
     a60:	89 81       	ldd	r24, Y+1	; 0x01
     a62:	8e 37       	cpi	r24, 0x7E	; 126
     a64:	20 f0       	brcs	.+8      	; 0xa6e <move_ball+0x2e>
     a66:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <up+0x1>
     a6a:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <up>
	if(x<13) up = 1;  //bouncing of the ball from the wall
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	8d 30       	cpi	r24, 0x0D	; 13
     a72:	30 f4       	brcc	.+12     	; 0xa80 <move_ball+0x40>
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <up+0x1>
     a7c:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <up>
	
	if(dir==1)
     a80:	8c 81       	ldd	r24, Y+4	; 0x04
     a82:	9d 81       	ldd	r25, Y+5	; 0x05
     a84:	01 97       	sbiw	r24, 0x01	; 1
     a86:	f1 f4       	brne	.+60     	; 0xac4 <move_ball+0x84>
	{
		if(up==1) x=x+15;
     a88:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <up>
     a8c:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <up+0x1>
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	21 f4       	brne	.+8      	; 0xa9c <move_ball+0x5c>
     a94:	89 81       	ldd	r24, Y+1	; 0x01
     a96:	81 5f       	subi	r24, 0xF1	; 241
     a98:	89 83       	std	Y+1, r24	; 0x01
     a9a:	31 c0       	rjmp	.+98     	; 0xafe <move_ball+0xbe>
		else if(up==0) x=x-13; //move down; keep the direction 
     a9c:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <up>
     aa0:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <up+0x1>
     aa4:	89 2b       	or	r24, r25
     aa6:	21 f4       	brne	.+8      	; 0xab0 <move_ball+0x70>
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	8d 50       	subi	r24, 0x0D	; 13
     aac:	89 83       	std	Y+1, r24	; 0x01
     aae:	27 c0       	rjmp	.+78     	; 0xafe <move_ball+0xbe>
		else if(up==2) x=x+1;	//when up=2 move straight
     ab0:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <up>
     ab4:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <up+0x1>
     ab8:	02 97       	sbiw	r24, 0x02	; 2
     aba:	09 f5       	brne	.+66     	; 0xafe <move_ball+0xbe>
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	8f 5f       	subi	r24, 0xFF	; 255
     ac0:	89 83       	std	Y+1, r24	; 0x01
     ac2:	1d c0       	rjmp	.+58     	; 0xafe <move_ball+0xbe>
	}
	else  
	{
		if(up==1) x=x+13;
     ac4:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <up>
     ac8:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <up+0x1>
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	21 f4       	brne	.+8      	; 0xad8 <move_ball+0x98>
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
     ad2:	83 5f       	subi	r24, 0xF3	; 243
     ad4:	89 83       	std	Y+1, r24	; 0x01
     ad6:	13 c0       	rjmp	.+38     	; 0xafe <move_ball+0xbe>
		else if(up==0) x=x-15; //do the maths ;
     ad8:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <up>
     adc:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <up+0x1>
     ae0:	89 2b       	or	r24, r25
     ae2:	21 f4       	brne	.+8      	; 0xaec <move_ball+0xac>
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
     ae6:	8f 50       	subi	r24, 0x0F	; 15
     ae8:	89 83       	std	Y+1, r24	; 0x01
     aea:	09 c0       	rjmp	.+18     	; 0xafe <move_ball+0xbe>
		else if (up==2) x=x-1;
     aec:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <up>
     af0:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <up+0x1>
     af4:	02 97       	sbiw	r24, 0x02	; 2
     af6:	19 f4       	brne	.+6      	; 0xafe <move_ball+0xbe>
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	81 50       	subi	r24, 0x01	; 1
     afc:	89 83       	std	Y+1, r24	; 0x01
	}
	x %= SCREEN_DIMENSION_X * SCREEN_DIMENSION_Y;		//makes sure the ball doesn't go out of the screen.
     afe:	89 81       	ldd	r24, Y+1	; 0x01
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	8c 38       	cpi	r24, 0x8C	; 140
     b04:	08 f4       	brcc	.+2      	; 0xb08 <move_ball+0xc8>
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	2c e8       	ldi	r18, 0x8C	; 140
     b0a:	92 9f       	mul	r25, r18
     b0c:	90 2d       	mov	r25, r0
     b0e:	11 24       	eor	r1, r1
     b10:	89 1b       	sub	r24, r25
     b12:	89 83       	std	Y+1, r24	; 0x01
	*location = x;
     b14:	8a 81       	ldd	r24, Y+2	; 0x02
     b16:	9b 81       	ldd	r25, Y+3	; 0x03
     b18:	29 81       	ldd	r18, Y+1	; 0x01
     b1a:	fc 01       	movw	r30, r24
     b1c:	20 83       	st	Z, r18
}
     b1e:	00 00       	nop
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	0f 90       	pop	r0
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	08 95       	ret

00000b30 <bat_new_instance>:

bat_t* bat_new_instance()
{//?
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	00 d0       	rcall	.+0      	; 0xb36 <bat_new_instance+0x6>
     b36:	cd b7       	in	r28, 0x3d	; 61
     b38:	de b7       	in	r29, 0x3e	; 62
	bat_t *ret = pvPortMalloc(sizeof *ret);
     b3a:	84 e0       	ldi	r24, 0x04	; 4
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <pvPortMalloc>
     b42:	9a 83       	std	Y+2, r25	; 0x02
     b44:	89 83       	std	Y+1, r24	; 0x01
	if(ret == NULL)
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	9a 81       	ldd	r25, Y+2	; 0x02
     b4a:	89 2b       	or	r24, r25
     b4c:	19 f4       	brne	.+6      	; 0xb54 <bat_new_instance+0x24>
		return ret;
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
     b50:	9a 81       	ldd	r25, Y+2	; 0x02
     b52:	06 c0       	rjmp	.+12     	; 0xb60 <bat_new_instance+0x30>

	ret->length = 0;
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	9a 81       	ldd	r25, Y+2	; 0x02
     b58:	fc 01       	movw	r30, r24
     b5a:	10 82       	st	Z, r1

	return ret;
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	08 95       	ret

00000b6a <init_game>:
void init_game(bat_t **bats)
{
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	00 d0       	rcall	.+0      	; 0xb74 <init_game+0xa>
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
     b78:	9a 83       	std	Y+2, r25	; 0x02
     b7a:	89 83       	std	Y+1, r24	; 0x01
	
	bats[PL_ONE]->length = 3;//
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	9a 81       	ldd	r25, Y+2	; 0x02
     b80:	fc 01       	movw	r30, r24
     b82:	80 81       	ld	r24, Z
     b84:	91 81       	ldd	r25, Z+1	; 0x01
     b86:	23 e0       	ldi	r18, 0x03	; 3
     b88:	fc 01       	movw	r30, r24
     b8a:	20 83       	st	Z, r18
	bats[PL_ONE]->pixels[0] = xy_to_pixel_id(1,2);
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	9a 81       	ldd	r25, Y+2	; 0x02
     b90:	fc 01       	movw	r30, r24
     b92:	00 81       	ld	r16, Z
     b94:	11 81       	ldd	r17, Z+1	; 0x01
     b96:	62 e0       	ldi	r22, 0x02	; 2
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	0e 94 b4 02 	call	0x568	; 0x568 <xy_to_pixel_id>
     b9e:	f8 01       	movw	r30, r16
     ba0:	81 83       	std	Z+1, r24	; 0x01
	bats[PL_ONE]->pixels[1] = xy_to_pixel_id(1,1);
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	9a 81       	ldd	r25, Y+2	; 0x02
     ba6:	fc 01       	movw	r30, r24
     ba8:	00 81       	ld	r16, Z
     baa:	11 81       	ldd	r17, Z+1	; 0x01
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	0e 94 b4 02 	call	0x568	; 0x568 <xy_to_pixel_id>
     bb4:	f8 01       	movw	r30, r16
     bb6:	82 83       	std	Z+2, r24	; 0x02
	bats[PL_ONE]->pixels[2] = xy_to_pixel_id(1, 0);
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	9a 81       	ldd	r25, Y+2	; 0x02
     bbc:	fc 01       	movw	r30, r24
     bbe:	00 81       	ld	r16, Z
     bc0:	11 81       	ldd	r17, Z+1	; 0x01
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	0e 94 b4 02 	call	0x568	; 0x568 <xy_to_pixel_id>
     bca:	f8 01       	movw	r30, r16
     bcc:	83 83       	std	Z+3, r24	; 0x03


	bats[PL_TWO]->length = 3;//
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	9a 81       	ldd	r25, Y+2	; 0x02
     bd2:	02 96       	adiw	r24, 0x02	; 2
     bd4:	fc 01       	movw	r30, r24
     bd6:	80 81       	ld	r24, Z
     bd8:	91 81       	ldd	r25, Z+1	; 0x01
     bda:	23 e0       	ldi	r18, 0x03	; 3
     bdc:	fc 01       	movw	r30, r24
     bde:	20 83       	st	Z, r18
	bats[PL_TWO]->pixels[0] = xy_to_pixel_id(12, 9);
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	9a 81       	ldd	r25, Y+2	; 0x02
     be4:	02 96       	adiw	r24, 0x02	; 2
     be6:	fc 01       	movw	r30, r24
     be8:	00 81       	ld	r16, Z
     bea:	11 81       	ldd	r17, Z+1	; 0x01
     bec:	69 e0       	ldi	r22, 0x09	; 9
     bee:	8c e0       	ldi	r24, 0x0C	; 12
     bf0:	0e 94 b4 02 	call	0x568	; 0x568 <xy_to_pixel_id>
     bf4:	f8 01       	movw	r30, r16
     bf6:	81 83       	std	Z+1, r24	; 0x01
	bats[PL_TWO]->pixels[1] = xy_to_pixel_id(12, 8);
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	9a 81       	ldd	r25, Y+2	; 0x02
     bfc:	02 96       	adiw	r24, 0x02	; 2
     bfe:	fc 01       	movw	r30, r24
     c00:	00 81       	ld	r16, Z
     c02:	11 81       	ldd	r17, Z+1	; 0x01
     c04:	68 e0       	ldi	r22, 0x08	; 8
     c06:	8c e0       	ldi	r24, 0x0C	; 12
     c08:	0e 94 b4 02 	call	0x568	; 0x568 <xy_to_pixel_id>
     c0c:	f8 01       	movw	r30, r16
     c0e:	82 83       	std	Z+2, r24	; 0x02
	bats[PL_TWO]->pixels[2] = xy_to_pixel_id(12, 7);
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	9a 81       	ldd	r25, Y+2	; 0x02
     c14:	02 96       	adiw	r24, 0x02	; 2
     c16:	fc 01       	movw	r30, r24
     c18:	00 81       	ld	r16, Z
     c1a:	11 81       	ldd	r17, Z+1	; 0x01
     c1c:	67 e0       	ldi	r22, 0x07	; 7
     c1e:	8c e0       	ldi	r24, 0x0C	; 12
     c20:	0e 94 b4 02 	call	0x568	; 0x568 <xy_to_pixel_id>
     c24:	f8 01       	movw	r30, r16
     c26:	83 83       	std	Z+3, r24	; 0x03
}
     c28:	00 00       	nop
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	08 95       	ret

00000c38 <clear_screen>:

void clear_screen(uint16_t* framebuffer)
{
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	00 d0       	rcall	.+0      	; 0xc3e <clear_screen+0x6>
     c3e:	1f 92       	push	r1
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	9b 83       	std	Y+3, r25	; 0x03
     c46:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8_t x = 0; x < SCREEN_DIMENSION_X; x++)
     c48:	19 82       	std	Y+1, r1	; 0x01
     c4a:	0f c0       	rjmp	.+30     	; 0xc6a <clear_screen+0x32>
		framebuffer[x] = 0;
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	88 2f       	mov	r24, r24
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	2a 81       	ldd	r18, Y+2	; 0x02
     c58:	3b 81       	ldd	r19, Y+3	; 0x03
     c5a:	82 0f       	add	r24, r18
     c5c:	93 1f       	adc	r25, r19
     c5e:	fc 01       	movw	r30, r24
     c60:	11 82       	std	Z+1, r1	; 0x01
     c62:	10 82       	st	Z, r1
	bats[PL_TWO]->pixels[2] = xy_to_pixel_id(12, 7);
}

void clear_screen(uint16_t* framebuffer)
{
	for(uint8_t x = 0; x < SCREEN_DIMENSION_X; x++)
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	8f 5f       	subi	r24, 0xFF	; 255
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	8e 30       	cpi	r24, 0x0E	; 14
     c6e:	70 f3       	brcs	.-36     	; 0xc4c <clear_screen+0x14>
		framebuffer[x] = 0;
}
     c70:	00 00       	nop
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	08 95       	ret

00000c7e <y_offset>:

uint8_t y_offset(uint8_t pixel_id)
{
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	1f 92       	push	r1
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	89 83       	std	Y+1, r24	; 0x01
	return pixel_id / SCREEN_DIMENSION_X;
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	98 2f       	mov	r25, r24
     c8e:	96 95       	lsr	r25
     c90:	83 e9       	ldi	r24, 0x93	; 147
     c92:	98 9f       	mul	r25, r24
     c94:	81 2d       	mov	r24, r1
     c96:	11 24       	eor	r1, r1
     c98:	86 95       	lsr	r24
     c9a:	86 95       	lsr	r24
}
     c9c:	0f 90       	pop	r0
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	08 95       	ret

00000ca4 <x_offset>:
uint8_t x_offset(uint8_t pixel_id)
{
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	1f 92       	push	r1
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	89 83       	std	Y+1, r24	; 0x01
	return pixel_id % SCREEN_DIMENSION_X;
     cb0:	29 81       	ldd	r18, Y+1	; 0x01
     cb2:	92 2f       	mov	r25, r18
     cb4:	96 95       	lsr	r25
     cb6:	83 e9       	ldi	r24, 0x93	; 147
     cb8:	98 9f       	mul	r25, r24
     cba:	81 2d       	mov	r24, r1
     cbc:	11 24       	eor	r1, r1
     cbe:	86 95       	lsr	r24
     cc0:	86 95       	lsr	r24
     cc2:	98 2f       	mov	r25, r24
     cc4:	89 2f       	mov	r24, r25
     cc6:	88 0f       	add	r24, r24
     cc8:	98 2f       	mov	r25, r24
     cca:	89 2f       	mov	r24, r25
     ccc:	88 0f       	add	r24, r24
     cce:	88 0f       	add	r24, r24
     cd0:	88 0f       	add	r24, r24
     cd2:	89 1b       	sub	r24, r25
     cd4:	92 2f       	mov	r25, r18
     cd6:	98 1b       	sub	r25, r24
     cd8:	89 2f       	mov	r24, r25
}
     cda:	0f 90       	pop	r0
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <draw_game>:

void draw_game(uint16_t* framebuffer, bat_t **bats, uint8_t ball_location)
{
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	27 97       	sbiw	r28, 0x07	; 7
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	9c 83       	std	Y+4, r25	; 0x04
     cfc:	8b 83       	std	Y+3, r24	; 0x03
     cfe:	7e 83       	std	Y+6, r23	; 0x06
     d00:	6d 83       	std	Y+5, r22	; 0x05
     d02:	4f 83       	std	Y+7, r20	; 0x07
	framebuffer[x_offset(ball_location)] |=  _BV((SCREEN_DIMENSION_Y - (y_offset(ball_location)+1)));
     d04:	8f 81       	ldd	r24, Y+7	; 0x07
     d06:	0e 94 3f 06 	call	0xc7e	; 0xc7e <y_offset>
     d0a:	88 2f       	mov	r24, r24
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	29 e0       	ldi	r18, 0x09	; 9
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	28 1b       	sub	r18, r24
     d14:	39 0b       	sbc	r19, r25
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	8c 01       	movw	r16, r24
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <draw_game+0x40>
     d1e:	00 0f       	add	r16, r16
     d20:	11 1f       	adc	r17, r17
     d22:	2a 95       	dec	r18
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <draw_game+0x3c>
     d26:	8f 81       	ldd	r24, Y+7	; 0x07
     d28:	0e 94 52 06 	call	0xca4	; 0xca4 <x_offset>
     d2c:	48 2f       	mov	r20, r24
     d2e:	84 2f       	mov	r24, r20
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	2b 81       	ldd	r18, Y+3	; 0x03
     d38:	3c 81       	ldd	r19, Y+4	; 0x04
     d3a:	82 0f       	add	r24, r18
     d3c:	93 1f       	adc	r25, r19
     d3e:	24 2f       	mov	r18, r20
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	22 0f       	add	r18, r18
     d44:	33 1f       	adc	r19, r19
     d46:	4b 81       	ldd	r20, Y+3	; 0x03
     d48:	5c 81       	ldd	r21, Y+4	; 0x04
     d4a:	24 0f       	add	r18, r20
     d4c:	35 1f       	adc	r19, r21
     d4e:	f9 01       	movw	r30, r18
     d50:	20 81       	ld	r18, Z
     d52:	31 81       	ldd	r19, Z+1	; 0x01
     d54:	a8 01       	movw	r20, r16
     d56:	24 2b       	or	r18, r20
     d58:	35 2b       	or	r19, r21
     d5a:	fc 01       	movw	r30, r24
     d5c:	31 83       	std	Z+1, r19	; 0x01
     d5e:	20 83       	st	Z, r18
	for(Player_t player = 0; player < 2; player++)
     d60:	19 82       	std	Y+1, r1	; 0x01
     d62:	6e c0       	rjmp	.+220    	; 0xe40 <draw_game+0x15e>
	{
		for(uint8_t i = 0; i < bats[player]->length; i++)
     d64:	1a 82       	std	Y+2, r1	; 0x02
     d66:	57 c0       	rjmp	.+174    	; 0xe16 <draw_game+0x134>
		{
			framebuffer[x_offset(bats[player]->pixels[i])] |= _BV((SCREEN_DIMENSION_Y - (y_offset(bats[player]->pixels[i])+1)));
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	88 2f       	mov	r24, r24
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	2d 81       	ldd	r18, Y+5	; 0x05
     d74:	3e 81       	ldd	r19, Y+6	; 0x06
     d76:	82 0f       	add	r24, r18
     d78:	93 1f       	adc	r25, r19
     d7a:	fc 01       	movw	r30, r24
     d7c:	20 81       	ld	r18, Z
     d7e:	31 81       	ldd	r19, Z+1	; 0x01
     d80:	8a 81       	ldd	r24, Y+2	; 0x02
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	82 0f       	add	r24, r18
     d88:	93 1f       	adc	r25, r19
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	fc 01       	movw	r30, r24
     d8e:	80 81       	ld	r24, Z
     d90:	0e 94 3f 06 	call	0xc7e	; 0xc7e <y_offset>
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	29 e0       	ldi	r18, 0x09	; 9
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	28 1b       	sub	r18, r24
     d9e:	39 0b       	sbc	r19, r25
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	8c 01       	movw	r16, r24
     da6:	02 c0       	rjmp	.+4      	; 0xdac <draw_game+0xca>
     da8:	00 0f       	add	r16, r16
     daa:	11 1f       	adc	r17, r17
     dac:	2a 95       	dec	r18
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <draw_game+0xc6>
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	2d 81       	ldd	r18, Y+5	; 0x05
     dbc:	3e 81       	ldd	r19, Y+6	; 0x06
     dbe:	82 0f       	add	r24, r18
     dc0:	93 1f       	adc	r25, r19
     dc2:	fc 01       	movw	r30, r24
     dc4:	20 81       	ld	r18, Z
     dc6:	31 81       	ldd	r19, Z+1	; 0x01
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	88 2f       	mov	r24, r24
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	82 0f       	add	r24, r18
     dd0:	93 1f       	adc	r25, r19
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	fc 01       	movw	r30, r24
     dd6:	80 81       	ld	r24, Z
     dd8:	0e 94 52 06 	call	0xca4	; 0xca4 <x_offset>
     ddc:	48 2f       	mov	r20, r24
     dde:	84 2f       	mov	r24, r20
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	2b 81       	ldd	r18, Y+3	; 0x03
     de8:	3c 81       	ldd	r19, Y+4	; 0x04
     dea:	82 0f       	add	r24, r18
     dec:	93 1f       	adc	r25, r19
     dee:	24 2f       	mov	r18, r20
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	22 0f       	add	r18, r18
     df4:	33 1f       	adc	r19, r19
     df6:	4b 81       	ldd	r20, Y+3	; 0x03
     df8:	5c 81       	ldd	r21, Y+4	; 0x04
     dfa:	24 0f       	add	r18, r20
     dfc:	35 1f       	adc	r19, r21
     dfe:	f9 01       	movw	r30, r18
     e00:	20 81       	ld	r18, Z
     e02:	31 81       	ldd	r19, Z+1	; 0x01
     e04:	a8 01       	movw	r20, r16
     e06:	24 2b       	or	r18, r20
     e08:	35 2b       	or	r19, r21
     e0a:	fc 01       	movw	r30, r24
     e0c:	31 83       	std	Z+1, r19	; 0x01
     e0e:	20 83       	st	Z, r18
void draw_game(uint16_t* framebuffer, bat_t **bats, uint8_t ball_location)
{
	framebuffer[x_offset(ball_location)] |=  _BV((SCREEN_DIMENSION_Y - (y_offset(ball_location)+1)));
	for(Player_t player = 0; player < 2; player++)
	{
		for(uint8_t i = 0; i < bats[player]->length; i++)
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	8f 5f       	subi	r24, 0xFF	; 255
     e14:	8a 83       	std	Y+2, r24	; 0x02
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	88 2f       	mov	r24, r24
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	2d 81       	ldd	r18, Y+5	; 0x05
     e22:	3e 81       	ldd	r19, Y+6	; 0x06
     e24:	82 0f       	add	r24, r18
     e26:	93 1f       	adc	r25, r19
     e28:	fc 01       	movw	r30, r24
     e2a:	80 81       	ld	r24, Z
     e2c:	91 81       	ldd	r25, Z+1	; 0x01
     e2e:	fc 01       	movw	r30, r24
     e30:	90 81       	ld	r25, Z
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	89 17       	cp	r24, r25
     e36:	08 f4       	brcc	.+2      	; 0xe3a <draw_game+0x158>
     e38:	97 cf       	rjmp	.-210    	; 0xd68 <draw_game+0x86>
}

void draw_game(uint16_t* framebuffer, bat_t **bats, uint8_t ball_location)
{
	framebuffer[x_offset(ball_location)] |=  _BV((SCREEN_DIMENSION_Y - (y_offset(ball_location)+1)));
	for(Player_t player = 0; player < 2; player++)
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	8f 5f       	subi	r24, 0xFF	; 255
     e3e:	89 83       	std	Y+1, r24	; 0x01
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	82 30       	cpi	r24, 0x02	; 2
     e44:	08 f4       	brcc	.+2      	; 0xe48 <draw_game+0x166>
     e46:	8e cf       	rjmp	.-228    	; 0xd64 <draw_game+0x82>
		for(uint8_t i = 0; i < bats[player]->length; i++)
		{
			framebuffer[x_offset(bats[player]->pixels[i])] |= _BV((SCREEN_DIMENSION_Y - (y_offset(bats[player]->pixels[i])+1)));
		}
	}
}
     e48:	00 00       	nop
     e4a:	27 96       	adiw	r28, 0x07	; 7
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	08 95       	ret

00000e60 <draw_scores>:

void draw_scores(uint16_t* framebuffer, uint8_t score_right, uint8_t score_left)
{			
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	28 97       	sbiw	r28, 0x08	; 8
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	9e 83       	std	Y+6, r25	; 0x06
     e7a:	8d 83       	std	Y+5, r24	; 0x05
     e7c:	6f 83       	std	Y+7, r22	; 0x07
     e7e:	48 87       	std	Y+8, r20	; 0x08
	if(score_right==1)
     e80:	8f 81       	ldd	r24, Y+7	; 0x07
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	09 f0       	breq	.+2      	; 0xe88 <draw_scores+0x28>
     e86:	43 c0       	rjmp	.+134    	; 0xf0e <draw_scores+0xae>
	{
		for(uint8_t i = 31; i <=101; i++)
     e88:	8f e1       	ldi	r24, 0x1F	; 31
     e8a:	89 83       	std	Y+1, r24	; 0x01
     e8c:	3c c0       	rjmp	.+120    	; 0xf06 <draw_scores+0xa6>
		{
			if((i-3)%14==0)
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	03 97       	sbiw	r24, 0x03	; 3
     e96:	2e e0       	ldi	r18, 0x0E	; 14
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	b9 01       	movw	r22, r18
     e9c:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <__divmodhi4>
     ea0:	89 2b       	or	r24, r25
     ea2:	71 f5       	brne	.+92     	; 0xf00 <draw_scores+0xa0>
			framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <y_offset>
     eaa:	88 2f       	mov	r24, r24
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	29 e0       	ldi	r18, 0x09	; 9
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	28 1b       	sub	r18, r24
     eb4:	39 0b       	sbc	r19, r25
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	8c 01       	movw	r16, r24
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <draw_scores+0x62>
     ebe:	00 0f       	add	r16, r16
     ec0:	11 1f       	adc	r17, r17
     ec2:	2a 95       	dec	r18
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <draw_scores+0x5e>
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	0e 94 52 06 	call	0xca4	; 0xca4 <x_offset>
     ecc:	48 2f       	mov	r20, r24
     ece:	84 2f       	mov	r24, r20
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	2d 81       	ldd	r18, Y+5	; 0x05
     ed8:	3e 81       	ldd	r19, Y+6	; 0x06
     eda:	82 0f       	add	r24, r18
     edc:	93 1f       	adc	r25, r19
     ede:	24 2f       	mov	r18, r20
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	22 0f       	add	r18, r18
     ee4:	33 1f       	adc	r19, r19
     ee6:	4d 81       	ldd	r20, Y+5	; 0x05
     ee8:	5e 81       	ldd	r21, Y+6	; 0x06
     eea:	24 0f       	add	r18, r20
     eec:	35 1f       	adc	r19, r21
     eee:	f9 01       	movw	r30, r18
     ef0:	20 81       	ld	r18, Z
     ef2:	31 81       	ldd	r19, Z+1	; 0x01
     ef4:	a8 01       	movw	r20, r16
     ef6:	24 2b       	or	r18, r20
     ef8:	35 2b       	or	r19, r21
     efa:	fc 01       	movw	r30, r24
     efc:	31 83       	std	Z+1, r19	; 0x01
     efe:	20 83       	st	Z, r18

void draw_scores(uint16_t* framebuffer, uint8_t score_right, uint8_t score_left)
{			
	if(score_right==1)
	{
		for(uint8_t i = 31; i <=101; i++)
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	8f 5f       	subi	r24, 0xFF	; 255
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	86 36       	cpi	r24, 0x66	; 102
     f0a:	08 f2       	brcs	.-126    	; 0xe8e <draw_scores+0x2e>
     f0c:	80 c0       	rjmp	.+256    	; 0x100e <draw_scores+0x1ae>
		{
			if((i-3)%14==0)
			framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
		}
	}
	else if(score_right==2)
     f0e:	8f 81       	ldd	r24, Y+7	; 0x07
     f10:	82 30       	cpi	r24, 0x02	; 2
     f12:	09 f0       	breq	.+2      	; 0xf16 <draw_scores+0xb6>
     f14:	7c c0       	rjmp	.+248    	; 0x100e <draw_scores+0x1ae>
		{
			for(uint8_t i = 31; i <=103; i++)
     f16:	8f e1       	ldi	r24, 0x1F	; 31
     f18:	8a 83       	std	Y+2, r24	; 0x02
     f1a:	75 c0       	rjmp	.+234    	; 0x1006 <draw_scores+0x1a6>
			{
				if((i-3)%14==0)
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	03 97       	sbiw	r24, 0x03	; 3
     f24:	2e e0       	ldi	r18, 0x0E	; 14
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	b9 01       	movw	r22, r18
     f2a:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <__divmodhi4>
     f2e:	89 2b       	or	r24, r25
     f30:	71 f5       	brne	.+92     	; 0xf8e <draw_scores+0x12e>
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	0e 94 3f 06 	call	0xc7e	; 0xc7e <y_offset>
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	29 e0       	ldi	r18, 0x09	; 9
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	28 1b       	sub	r18, r24
     f42:	39 0b       	sbc	r19, r25
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	8c 01       	movw	r16, r24
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <draw_scores+0xf0>
     f4c:	00 0f       	add	r16, r16
     f4e:	11 1f       	adc	r17, r17
     f50:	2a 95       	dec	r18
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <draw_scores+0xec>
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	0e 94 52 06 	call	0xca4	; 0xca4 <x_offset>
     f5a:	48 2f       	mov	r20, r24
     f5c:	84 2f       	mov	r24, r20
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	2d 81       	ldd	r18, Y+5	; 0x05
     f66:	3e 81       	ldd	r19, Y+6	; 0x06
     f68:	82 0f       	add	r24, r18
     f6a:	93 1f       	adc	r25, r19
     f6c:	24 2f       	mov	r18, r20
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	22 0f       	add	r18, r18
     f72:	33 1f       	adc	r19, r19
     f74:	4d 81       	ldd	r20, Y+5	; 0x05
     f76:	5e 81       	ldd	r21, Y+6	; 0x06
     f78:	24 0f       	add	r18, r20
     f7a:	35 1f       	adc	r19, r21
     f7c:	f9 01       	movw	r30, r18
     f7e:	20 81       	ld	r18, Z
     f80:	31 81       	ldd	r19, Z+1	; 0x01
     f82:	a8 01       	movw	r20, r16
     f84:	24 2b       	or	r18, r20
     f86:	35 2b       	or	r19, r21
     f88:	fc 01       	movw	r30, r24
     f8a:	31 83       	std	Z+1, r19	; 0x01
     f8c:	20 83       	st	Z, r18
			
				if((i-5)%14==0)
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	05 97       	sbiw	r24, 0x05	; 5
     f96:	2e e0       	ldi	r18, 0x0E	; 14
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	b9 01       	movw	r22, r18
     f9c:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <__divmodhi4>
     fa0:	89 2b       	or	r24, r25
     fa2:	71 f5       	brne	.+92     	; 0x1000 <draw_scores+0x1a0>
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <y_offset>
     faa:	88 2f       	mov	r24, r24
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	29 e0       	ldi	r18, 0x09	; 9
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	28 1b       	sub	r18, r24
     fb4:	39 0b       	sbc	r19, r25
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	8c 01       	movw	r16, r24
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <draw_scores+0x162>
     fbe:	00 0f       	add	r16, r16
     fc0:	11 1f       	adc	r17, r17
     fc2:	2a 95       	dec	r18
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <draw_scores+0x15e>
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	0e 94 52 06 	call	0xca4	; 0xca4 <x_offset>
     fcc:	48 2f       	mov	r20, r24
     fce:	84 2f       	mov	r24, r20
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	2d 81       	ldd	r18, Y+5	; 0x05
     fd8:	3e 81       	ldd	r19, Y+6	; 0x06
     fda:	82 0f       	add	r24, r18
     fdc:	93 1f       	adc	r25, r19
     fde:	24 2f       	mov	r18, r20
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	22 0f       	add	r18, r18
     fe4:	33 1f       	adc	r19, r19
     fe6:	4d 81       	ldd	r20, Y+5	; 0x05
     fe8:	5e 81       	ldd	r21, Y+6	; 0x06
     fea:	24 0f       	add	r18, r20
     fec:	35 1f       	adc	r19, r21
     fee:	f9 01       	movw	r30, r18
     ff0:	20 81       	ld	r18, Z
     ff2:	31 81       	ldd	r19, Z+1	; 0x01
     ff4:	a8 01       	movw	r20, r16
     ff6:	24 2b       	or	r18, r20
     ff8:	35 2b       	or	r19, r21
     ffa:	fc 01       	movw	r30, r24
     ffc:	31 83       	std	Z+1, r19	; 0x01
     ffe:	20 83       	st	Z, r18
			framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
		}
	}
	else if(score_right==2)
		{
			for(uint8_t i = 31; i <=103; i++)
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	8f 5f       	subi	r24, 0xFF	; 255
    1004:	8a 83       	std	Y+2, r24	; 0x02
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	88 36       	cpi	r24, 0x68	; 104
    100a:	08 f4       	brcc	.+2      	; 0x100e <draw_scores+0x1ae>
    100c:	87 cf       	rjmp	.-242    	; 0xf1c <draw_scores+0xbc>
			}
		}
		
	
	
		if(score_left==1)
    100e:	88 85       	ldd	r24, Y+8	; 0x08
    1010:	81 30       	cpi	r24, 0x01	; 1
    1012:	09 f0       	breq	.+2      	; 0x1016 <draw_scores+0x1b6>
    1014:	43 c0       	rjmp	.+134    	; 0x109c <draw_scores+0x23c>
		{
			for(uint8_t i = 37; i <=107; i++)
    1016:	85 e2       	ldi	r24, 0x25	; 37
    1018:	8b 83       	std	Y+3, r24	; 0x03
    101a:	3c c0       	rjmp	.+120    	; 0x1094 <draw_scores+0x234>
			{
				if((i-9)%14==0)
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	88 2f       	mov	r24, r24
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	09 97       	sbiw	r24, 0x09	; 9
    1024:	2e e0       	ldi	r18, 0x0E	; 14
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	b9 01       	movw	r22, r18
    102a:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <__divmodhi4>
    102e:	89 2b       	or	r24, r25
    1030:	71 f5       	brne	.+92     	; 0x108e <draw_scores+0x22e>
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	0e 94 3f 06 	call	0xc7e	; 0xc7e <y_offset>
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	29 e0       	ldi	r18, 0x09	; 9
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	28 1b       	sub	r18, r24
    1042:	39 0b       	sbc	r19, r25
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	8c 01       	movw	r16, r24
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <draw_scores+0x1f0>
    104c:	00 0f       	add	r16, r16
    104e:	11 1f       	adc	r17, r17
    1050:	2a 95       	dec	r18
    1052:	e2 f7       	brpl	.-8      	; 0x104c <draw_scores+0x1ec>
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	0e 94 52 06 	call	0xca4	; 0xca4 <x_offset>
    105a:	48 2f       	mov	r20, r24
    105c:	84 2f       	mov	r24, r20
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	2d 81       	ldd	r18, Y+5	; 0x05
    1066:	3e 81       	ldd	r19, Y+6	; 0x06
    1068:	82 0f       	add	r24, r18
    106a:	93 1f       	adc	r25, r19
    106c:	24 2f       	mov	r18, r20
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	22 0f       	add	r18, r18
    1072:	33 1f       	adc	r19, r19
    1074:	4d 81       	ldd	r20, Y+5	; 0x05
    1076:	5e 81       	ldd	r21, Y+6	; 0x06
    1078:	24 0f       	add	r18, r20
    107a:	35 1f       	adc	r19, r21
    107c:	f9 01       	movw	r30, r18
    107e:	20 81       	ld	r18, Z
    1080:	31 81       	ldd	r19, Z+1	; 0x01
    1082:	a8 01       	movw	r20, r16
    1084:	24 2b       	or	r18, r20
    1086:	35 2b       	or	r19, r21
    1088:	fc 01       	movw	r30, r24
    108a:	31 83       	std	Z+1, r19	; 0x01
    108c:	20 83       	st	Z, r18
		
	
	
		if(score_left==1)
		{
			for(uint8_t i = 37; i <=107; i++)
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	8f 5f       	subi	r24, 0xFF	; 255
    1092:	8b 83       	std	Y+3, r24	; 0x03
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	8c 36       	cpi	r24, 0x6C	; 108
    1098:	08 f2       	brcs	.-126    	; 0x101c <draw_scores+0x1bc>
		}
		
		
		
	
}
    109a:	80 c0       	rjmp	.+256    	; 0x119c <draw_scores+0x33c>
			{
				if((i-9)%14==0)
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
			}
		}
		else if(score_left==2)
    109c:	88 85       	ldd	r24, Y+8	; 0x08
    109e:	82 30       	cpi	r24, 0x02	; 2
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <draw_scores+0x244>
    10a2:	7c c0       	rjmp	.+248    	; 0x119c <draw_scores+0x33c>
		{
			for(uint8_t i = 37; i <=109; i++)
    10a4:	85 e2       	ldi	r24, 0x25	; 37
    10a6:	8c 83       	std	Y+4, r24	; 0x04
    10a8:	75 c0       	rjmp	.+234    	; 0x1194 <draw_scores+0x334>
			{
				if((i-9)%14==0)
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	09 97       	sbiw	r24, 0x09	; 9
    10b2:	2e e0       	ldi	r18, 0x0E	; 14
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	b9 01       	movw	r22, r18
    10b8:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <__divmodhi4>
    10bc:	89 2b       	or	r24, r25
    10be:	71 f5       	brne	.+92     	; 0x111c <draw_scores+0x2bc>
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <y_offset>
    10c6:	88 2f       	mov	r24, r24
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	29 e0       	ldi	r18, 0x09	; 9
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	28 1b       	sub	r18, r24
    10d0:	39 0b       	sbc	r19, r25
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	8c 01       	movw	r16, r24
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <draw_scores+0x27e>
    10da:	00 0f       	add	r16, r16
    10dc:	11 1f       	adc	r17, r17
    10de:	2a 95       	dec	r18
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <draw_scores+0x27a>
    10e2:	8c 81       	ldd	r24, Y+4	; 0x04
    10e4:	0e 94 52 06 	call	0xca4	; 0xca4 <x_offset>
    10e8:	48 2f       	mov	r20, r24
    10ea:	84 2f       	mov	r24, r20
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	2d 81       	ldd	r18, Y+5	; 0x05
    10f4:	3e 81       	ldd	r19, Y+6	; 0x06
    10f6:	82 0f       	add	r24, r18
    10f8:	93 1f       	adc	r25, r19
    10fa:	24 2f       	mov	r18, r20
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	22 0f       	add	r18, r18
    1100:	33 1f       	adc	r19, r19
    1102:	4d 81       	ldd	r20, Y+5	; 0x05
    1104:	5e 81       	ldd	r21, Y+6	; 0x06
    1106:	24 0f       	add	r18, r20
    1108:	35 1f       	adc	r19, r21
    110a:	f9 01       	movw	r30, r18
    110c:	20 81       	ld	r18, Z
    110e:	31 81       	ldd	r19, Z+1	; 0x01
    1110:	a8 01       	movw	r20, r16
    1112:	24 2b       	or	r18, r20
    1114:	35 2b       	or	r19, r21
    1116:	fc 01       	movw	r30, r24
    1118:	31 83       	std	Z+1, r19	; 0x01
    111a:	20 83       	st	Z, r18
				if((i-11)%14==0)
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0b 97       	sbiw	r24, 0x0b	; 11
    1124:	2e e0       	ldi	r18, 0x0E	; 14
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	b9 01       	movw	r22, r18
    112a:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <__divmodhi4>
    112e:	89 2b       	or	r24, r25
    1130:	71 f5       	brne	.+92     	; 0x118e <draw_scores+0x32e>
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
    1132:	8c 81       	ldd	r24, Y+4	; 0x04
    1134:	0e 94 3f 06 	call	0xc7e	; 0xc7e <y_offset>
    1138:	88 2f       	mov	r24, r24
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	29 e0       	ldi	r18, 0x09	; 9
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	28 1b       	sub	r18, r24
    1142:	39 0b       	sbc	r19, r25
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	8c 01       	movw	r16, r24
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <draw_scores+0x2f0>
    114c:	00 0f       	add	r16, r16
    114e:	11 1f       	adc	r17, r17
    1150:	2a 95       	dec	r18
    1152:	e2 f7       	brpl	.-8      	; 0x114c <draw_scores+0x2ec>
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	0e 94 52 06 	call	0xca4	; 0xca4 <x_offset>
    115a:	48 2f       	mov	r20, r24
    115c:	84 2f       	mov	r24, r20
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	2d 81       	ldd	r18, Y+5	; 0x05
    1166:	3e 81       	ldd	r19, Y+6	; 0x06
    1168:	82 0f       	add	r24, r18
    116a:	93 1f       	adc	r25, r19
    116c:	24 2f       	mov	r18, r20
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	22 0f       	add	r18, r18
    1172:	33 1f       	adc	r19, r19
    1174:	4d 81       	ldd	r20, Y+5	; 0x05
    1176:	5e 81       	ldd	r21, Y+6	; 0x06
    1178:	24 0f       	add	r18, r20
    117a:	35 1f       	adc	r19, r21
    117c:	f9 01       	movw	r30, r18
    117e:	20 81       	ld	r18, Z
    1180:	31 81       	ldd	r19, Z+1	; 0x01
    1182:	a8 01       	movw	r20, r16
    1184:	24 2b       	or	r18, r20
    1186:	35 2b       	or	r19, r21
    1188:	fc 01       	movw	r30, r24
    118a:	31 83       	std	Z+1, r19	; 0x01
    118c:	20 83       	st	Z, r18
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
			}
		}
		else if(score_left==2)
		{
			for(uint8_t i = 37; i <=109; i++)
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	8f 5f       	subi	r24, 0xFF	; 255
    1192:	8c 83       	std	Y+4, r24	; 0x04
    1194:	8c 81       	ldd	r24, Y+4	; 0x04
    1196:	8e 36       	cpi	r24, 0x6E	; 110
    1198:	08 f4       	brcc	.+2      	; 0x119c <draw_scores+0x33c>
    119a:	87 cf       	rjmp	.-242    	; 0x10aa <draw_scores+0x24a>
		}
		
		
		
	
}
    119c:	00 00       	nop
    119e:	28 96       	adiw	r28, 0x08	; 8
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
    11b2:	08 95       	ret

000011b4 <read_joystick>:
#include "joystick.h"

#include <FreeRTOS.h>

uint8_t read_joystick()
{
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
	return  (PINC & _BV(PINC6)) | (PINC & _BV(PINC0)) | (PIND & _BV(PIND3));
    11bc:	86 e2       	ldi	r24, 0x26	; 38
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	fc 01       	movw	r30, r24
    11c2:	80 81       	ld	r24, Z
    11c4:	28 2f       	mov	r18, r24
    11c6:	20 74       	andi	r18, 0x40	; 64
    11c8:	86 e2       	ldi	r24, 0x26	; 38
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	fc 01       	movw	r30, r24
    11ce:	80 81       	ld	r24, Z
    11d0:	81 70       	andi	r24, 0x01	; 1
    11d2:	28 2b       	or	r18, r24
    11d4:	89 e2       	ldi	r24, 0x29	; 41
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	fc 01       	movw	r30, r24
    11da:	80 81       	ld	r24, Z
    11dc:	88 70       	andi	r24, 0x08	; 8
    11de:	82 2b       	or	r24, r18
}
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	08 95       	ret

000011e6 <joystick_task>:


void joystick_task(void *pvParameters)
{
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <joystick_task+0x6>
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <joystick_task+0x8>
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	9c 83       	std	Y+4, r25	; 0x04
    11f4:	8b 83       	std	Y+3, r24	; 0x03
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	//vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );
	#endif

	TickType_t joystick_task_lastwake = xTaskGetTickCount();
    11f6:	0e 94 37 22 	call	0x446e	; 0x446e <xTaskGetTickCount>
    11fa:	9a 83       	std	Y+2, r25	; 0x02
    11fc:	89 83       	std	Y+1, r24	; 0x01
	
	while(1)
	{
		//Set task period
		vTaskDelayUntil(&joystick_task_lastwake, JOYSTICK_TASK_PERIOD);
    11fe:	62 e3       	ldi	r22, 0x32	; 50
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	ce 01       	movw	r24, r28
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	0e 94 c1 20 	call	0x4182	; 0x4182 <vTaskDelayUntil>
		
		//Action
		
	
		if((read_joystick() & JOYSTICK_UP) == 0)
    120a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <read_joystick>
    120e:	88 2f       	mov	r24, r24
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	80 74       	andi	r24, 0x40	; 64
    1214:	99 27       	eor	r25, r25
    1216:	89 2b       	or	r24, r25
    1218:	21 f4       	brne	.+8      	; 0x1222 <joystick_task+0x3c>
		{
			bat_move(PL_ONE, D_UP);
    121a:	62 e0       	ldi	r22, 0x02	; 2
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	0e 94 8d 01 	call	0x31a	; 0x31a <bat_move>
		}
		if((read_joystick() & JOYSTICK_DOWN) == 0)
    1222:	0e 94 da 08 	call	0x11b4	; 0x11b4 <read_joystick>
    1226:	88 2f       	mov	r24, r24
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	81 70       	andi	r24, 0x01	; 1
    122c:	99 27       	eor	r25, r25
    122e:	89 2b       	or	r24, r25
    1230:	21 f4       	brne	.+8      	; 0x123a <joystick_task+0x54>
		{
			bat_move(PL_ONE, D_DOWN);
    1232:	61 e0       	ldi	r22, 0x01	; 1
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	0e 94 8d 01 	call	0x31a	; 0x31a <bat_move>
		}
		if((read_joystick() & JOYSTICK_PUSH) == 0)
    123a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <read_joystick>
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	88 70       	andi	r24, 0x08	; 8
    1244:	99 27       	eor	r25, r25
    1246:	89 2b       	or	r24, r25
    1248:	d1 f6       	brne	.-76     	; 0x11fe <joystick_task+0x18>
		{
			restart_game();
    124a:	0e 94 87 02 	call	0x50e	; 0x50e <restart_game>
		}
	}
    124e:	d7 cf       	rjmp	.-82     	; 0x11fe <joystick_task+0x18>

00001250 <vApplicationIdleHook>:
// frame_buf contains a bit pattern for each column in the display
uint16_t frame_buf[14] = {1023, 1+256+512, 28+512, 62, 126, 254, 508, 254, 126, 62, 28 + 512, 1+256+512 , 1023, 0 };

//-----------------------------------------
void vApplicationIdleHook( void )
{
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
	//
}
    1258:	00 00       	nop
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	08 95       	ret

00001260 <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
	// Set SER to 1
	PORTD |= _BV(PORTD2);
    1268:	8b e2       	ldi	r24, 0x2B	; 43
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	2b e2       	ldi	r18, 0x2B	; 43
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	f9 01       	movw	r30, r18
    1272:	20 81       	ld	r18, Z
    1274:	24 60       	ori	r18, 0x04	; 4
    1276:	fc 01       	movw	r30, r24
    1278:	20 83       	st	Z, r18
}
    127a:	00 00       	nop
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	08 95       	ret

00001282 <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
	// one SCK pulse
	PORTD |= _BV(PORTD5);
    128a:	8b e2       	ldi	r24, 0x2B	; 43
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	2b e2       	ldi	r18, 0x2B	; 43
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	f9 01       	movw	r30, r18
    1294:	20 81       	ld	r18, Z
    1296:	20 62       	ori	r18, 0x20	; 32
    1298:	fc 01       	movw	r30, r24
    129a:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
    129c:	8b e2       	ldi	r24, 0x2B	; 43
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	2b e2       	ldi	r18, 0x2B	; 43
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	f9 01       	movw	r30, r18
    12a6:	20 81       	ld	r18, Z
    12a8:	2f 7d       	andi	r18, 0xDF	; 223
    12aa:	fc 01       	movw	r30, r24
    12ac:	20 83       	st	Z, r18
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
    12ae:	8b e2       	ldi	r24, 0x2B	; 43
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	2b e2       	ldi	r18, 0x2B	; 43
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	f9 01       	movw	r30, r18
    12b8:	20 81       	ld	r18, Z
    12ba:	20 61       	ori	r18, 0x10	; 16
    12bc:	fc 01       	movw	r30, r24
    12be:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
    12c0:	8b e2       	ldi	r24, 0x2B	; 43
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	2b e2       	ldi	r18, 0x2B	; 43
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	f9 01       	movw	r30, r18
    12ca:	20 81       	ld	r18, Z
    12cc:	2f 7e       	andi	r18, 0xEF	; 239
    12ce:	fc 01       	movw	r30, r24
    12d0:	20 83       	st	Z, r18
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
    12d2:	8b e2       	ldi	r24, 0x2B	; 43
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	2b e2       	ldi	r18, 0x2B	; 43
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	f9 01       	movw	r30, r18
    12dc:	20 81       	ld	r18, Z
    12de:	2b 7f       	andi	r18, 0xFB	; 251
    12e0:	fc 01       	movw	r30, r24
    12e2:	20 83       	st	Z, r18
}
    12e4:	00 00       	nop
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	08 95       	ret

000012ec <load_col_value>:

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <load_col_value+0x6>
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	9a 83       	std	Y+2, r25	; 0x02
    12f8:	89 83       	std	Y+1, r24	; 0x01
	PORTA = ~(col_value & 0xFF);
    12fa:	82 e2       	ldi	r24, 0x22	; 34
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	29 81       	ldd	r18, Y+1	; 0x01
    1300:	20 95       	com	r18
    1302:	fc 01       	movw	r30, r24
    1304:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
    1306:	85 e2       	ldi	r24, 0x25	; 37
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	25 e2       	ldi	r18, 0x25	; 37
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	f9 01       	movw	r30, r18
    1310:	20 81       	ld	r18, Z
    1312:	23 60       	ori	r18, 0x03	; 3
    1314:	fc 01       	movw	r30, r24
    1316:	20 83       	st	Z, r18
	PORTB &= ~((col_value >> 8) & 0x03);
    1318:	85 e2       	ldi	r24, 0x25	; 37
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	25 e2       	ldi	r18, 0x25	; 37
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	f9 01       	movw	r30, r18
    1322:	40 81       	ld	r20, Z
    1324:	29 81       	ldd	r18, Y+1	; 0x01
    1326:	3a 81       	ldd	r19, Y+2	; 0x02
    1328:	23 2f       	mov	r18, r19
    132a:	33 27       	eor	r19, r19
    132c:	23 70       	andi	r18, 0x03	; 3
    132e:	20 95       	com	r18
    1330:	24 23       	and	r18, r20
    1332:	fc 01       	movw	r30, r24
    1334:	20 83       	st	Z, r18
}
    1336:	00 00       	nop
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	08 95       	ret

00001342 <handle_display>:

//-----------------------------------------
void handle_display(void)
{
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
	static uint8_t col = 0;
	
	if (col == 0)
    134a:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <col.2142>
    134e:	88 23       	and	r24, r24
    1350:	11 f4       	brne	.+4      	; 0x1356 <handle_display+0x14>
	{
		prepare_shiftregister();
    1352:	0e 94 30 09 	call	0x1260	; 0x1260 <prepare_shiftregister>
	}
	
	load_col_value(frame_buf[col]);
    1356:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <col.2142>
    135a:	88 2f       	mov	r24, r24
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	8d 5f       	subi	r24, 0xFD	; 253
    1364:	9e 4f       	sbci	r25, 0xFE	; 254
    1366:	fc 01       	movw	r30, r24
    1368:	80 81       	ld	r24, Z
    136a:	91 81       	ldd	r25, Z+1	; 0x01
    136c:	0e 94 76 09 	call	0x12ec	; 0x12ec <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
    1370:	0e 94 41 09 	call	0x1282	; 0x1282 <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
    1374:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <col.2142>
    1378:	8f 5f       	subi	r24, 0xFF	; 255
    137a:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <col.2142>
	if (col > 13)
    137e:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <col.2142>
    1382:	8e 30       	cpi	r24, 0x0E	; 14
    1384:	10 f0       	brcs	.+4      	; 0x138a <handle_display+0x48>
	{
		col = 0;
    1386:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <col.2142>
	}
}
    138a:	00 00       	nop
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	08 95       	ret

00001392 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask,signed char *pcTaskName )
{
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	00 d0       	rcall	.+0      	; 0x1398 <vApplicationStackOverflowHook+0x6>
    1398:	00 d0       	rcall	.+0      	; 0x139a <vApplicationStackOverflowHook+0x8>
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	9a 83       	std	Y+2, r25	; 0x02
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	7c 83       	std	Y+4, r23	; 0x04
    13a4:	6b 83       	std	Y+3, r22	; 0x03
	

}
    13a6:	00 00       	nop
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	08 95       	ret

000013b6 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62

}
    13be:	00 00       	nop
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	08 95       	ret

000013c6 <main>:

//-----------------------------------------
int main(void)
{	
    13c6:	ef 92       	push	r14
    13c8:	ff 92       	push	r15
    13ca:	0f 93       	push	r16
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <main+0xc>
    13d2:	1f 92       	push	r1
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
	cli();
    13d8:	f8 94       	cli
	//
	init_board();
    13da:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
    13de:	8b e2       	ldi	r24, 0x2B	; 43
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	2b e2       	ldi	r18, 0x2B	; 43
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	f9 01       	movw	r30, r18
    13e8:	20 81       	ld	r18, Z
    13ea:	2f 7b       	andi	r18, 0xBF	; 191
    13ec:	fc 01       	movw	r30, r24
    13ee:	20 83       	st	Z, r18
	
	//Tasks 
	
	BaseType_t t1 = xTaskCreate(serial_com_task, (const char *)"serial_com", 250, (void *)NULL, tskIDLE_PRIORITY+3, NULL);
    13f0:	e1 2c       	mov	r14, r1
    13f2:	f1 2c       	mov	r15, r1
    13f4:	03 e0       	ldi	r16, 0x03	; 3
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	4a ef       	ldi	r20, 0xFA	; 250
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	65 e7       	ldi	r22, 0x75	; 117
    1400:	71 e0       	ldi	r23, 0x01	; 1
    1402:	8c ed       	ldi	r24, 0xDC	; 220
    1404:	9c e0       	ldi	r25, 0x0C	; 12
    1406:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <xTaskCreate>
    140a:	89 83       	std	Y+1, r24	; 0x01
	BaseType_t t2 = xTaskCreate(joystick_task, (const char *)"joystick", configMINIMAL_STACK_SIZE + 50, (void *)NULL, tskIDLE_PRIORITY+4, NULL);
    140c:	e1 2c       	mov	r14, r1
    140e:	f1 2c       	mov	r15, r1
    1410:	04 e0       	ldi	r16, 0x04	; 4
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	47 e8       	ldi	r20, 0x87	; 135
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	60 e8       	ldi	r22, 0x80	; 128
    141c:	71 e0       	ldi	r23, 0x01	; 1
    141e:	83 ef       	ldi	r24, 0xF3	; 243
    1420:	98 e0       	ldi	r25, 0x08	; 8
    1422:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <xTaskCreate>
    1426:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t t3 = xTaskCreate(game_renderer_task, (const char *)"game_rend", configMINIMAL_STACK_SIZE+50, frame_buf, tskIDLE_PRIORITY+2, NULL);
    1428:	e1 2c       	mov	r14, r1
    142a:	f1 2c       	mov	r15, r1
    142c:	02 e0       	ldi	r16, 0x02	; 2
    142e:	23 e0       	ldi	r18, 0x03	; 3
    1430:	31 e0       	ldi	r19, 0x01	; 1
    1432:	47 e8       	ldi	r20, 0x87	; 135
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	69 e8       	ldi	r22, 0x89	; 137
    1438:	71 e0       	ldi	r23, 0x01	; 1
    143a:	81 ee       	ldi	r24, 0xE1	; 225
    143c:	92 e0       	ldi	r25, 0x02	; 2
    143e:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <xTaskCreate>
    1442:	8b 83       	std	Y+3, r24	; 0x03

	// Start the display handler timer
	init_display_timer(handle_display);
    1444:	81 ea       	ldi	r24, 0xA1	; 161
    1446:	99 e0       	ldi	r25, 0x09	; 9
    1448:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <init_display_timer>
	
	sei();
    144c:	78 94       	sei
	
	//Start the scheduler
	vTaskStartScheduler();
    144e:	0e 94 5e 21 	call	0x42bc	; 0x42bc <vTaskStartScheduler>
	
	//Should never reach here
	while (1)
	{

	}
    1452:	ff cf       	rjmp	.-2      	; 0x1452 <main+0x8c>

00001454 <compute_crc8>:
#include "protocol.h"
#include <FreeRTOS.h>
#include <queue.h>

CRC compute_crc8(uint8_t data[], uint8_t data_size)
{
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	27 97       	sbiw	r28, 0x07	; 7
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	de bf       	out	0x3e, r29	; 62
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	cd bf       	out	0x3d, r28	; 61
    1468:	9e 83       	std	Y+6, r25	; 0x06
    146a:	8d 83       	std	Y+5, r24	; 0x05
    146c:	6f 83       	std	Y+7, r22	; 0x07
	CRC crc = 0;
    146e:	19 82       	std	Y+1, r1	; 0x01

	for (uint8_t i = 0; i < data_size; i++)
    1470:	1a 82       	std	Y+2, r1	; 0x02
    1472:	26 c0       	rjmp	.+76     	; 0x14c0 <compute_crc8+0x6c>
	{
		crc ^= data[i];
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	88 2f       	mov	r24, r24
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	2d 81       	ldd	r18, Y+5	; 0x05
    147c:	3e 81       	ldd	r19, Y+6	; 0x06
    147e:	82 0f       	add	r24, r18
    1480:	93 1f       	adc	r25, r19
    1482:	fc 01       	movw	r30, r24
    1484:	80 81       	ld	r24, Z
    1486:	99 81       	ldd	r25, Y+1	; 0x01
    1488:	89 27       	eor	r24, r25
    148a:	89 83       	std	Y+1, r24	; 0x01
		for (uint8_t j = 0; j < 8; j++)
    148c:	1b 82       	std	Y+3, r1	; 0x03
    148e:	12 c0       	rjmp	.+36     	; 0x14b4 <compute_crc8+0x60>
		{
			uint8_t msb = (crc >> 7) & 1;
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	88 1f       	adc	r24, r24
    1494:	88 27       	eor	r24, r24
    1496:	88 1f       	adc	r24, r24
    1498:	8c 83       	std	Y+4, r24	; 0x04
			crc <<= 1;
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	88 0f       	add	r24, r24
    149e:	89 83       	std	Y+1, r24	; 0x01
			if (msb) {
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	88 23       	and	r24, r24
    14a4:	21 f0       	breq	.+8      	; 0x14ae <compute_crc8+0x5a>
				crc ^= CRC8_POLYNOMIAL;
    14a6:	99 81       	ldd	r25, Y+1	; 0x01
    14a8:	87 e0       	ldi	r24, 0x07	; 7
    14aa:	89 27       	eor	r24, r25
    14ac:	89 83       	std	Y+1, r24	; 0x01
	CRC crc = 0;

	for (uint8_t i = 0; i < data_size; i++)
	{
		crc ^= data[i];
		for (uint8_t j = 0; j < 8; j++)
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	8f 5f       	subi	r24, 0xFF	; 255
    14b2:	8b 83       	std	Y+3, r24	; 0x03
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	88 30       	cpi	r24, 0x08	; 8
    14b8:	58 f3       	brcs	.-42     	; 0x1490 <compute_crc8+0x3c>

CRC compute_crc8(uint8_t data[], uint8_t data_size)
{
	CRC crc = 0;

	for (uint8_t i = 0; i < data_size; i++)
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	8f 5f       	subi	r24, 0xFF	; 255
    14be:	8a 83       	std	Y+2, r24	; 0x02
    14c0:	9a 81       	ldd	r25, Y+2	; 0x02
    14c2:	8f 81       	ldd	r24, Y+7	; 0x07
    14c4:	98 17       	cp	r25, r24
    14c6:	b0 f2       	brcs	.-84     	; 0x1474 <compute_crc8+0x20>
			if (msb) {
				crc ^= CRC8_POLYNOMIAL;
			}
		}
	}
	return crc;
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ca:	27 96       	adiw	r28, 0x07	; 7
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	08 95       	ret

000014dc <unpack_data_frame>:

Frame_type_t unpack_data_frame(uint8_t *frame_buffer, uint8_t frame_buffer_size, uint8_t *data_length)
{
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	28 97       	sbiw	r28, 0x08	; 8
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	9d 83       	std	Y+5, r25	; 0x05
    14f2:	8c 83       	std	Y+4, r24	; 0x04
    14f4:	6e 83       	std	Y+6, r22	; 0x06
    14f6:	58 87       	std	Y+8, r21	; 0x08
    14f8:	4f 83       	std	Y+7, r20	; 0x07
	if (frame_buffer_size < MIN_FRAME_SIZE)
    14fa:	8e 81       	ldd	r24, Y+6	; 0x06
    14fc:	84 30       	cpi	r24, 0x04	; 4
    14fe:	10 f4       	brcc	.+4      	; 0x1504 <unpack_data_frame+0x28>
		return FrameInvalid;
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	41 c0       	rjmp	.+130    	; 0x1586 <unpack_data_frame+0xaa>
	if (!is_start_of_frame(*frame_buffer))
    1504:	8c 81       	ldd	r24, Y+4	; 0x04
    1506:	9d 81       	ldd	r25, Y+5	; 0x05
    1508:	fc 01       	movw	r30, r24
    150a:	80 81       	ld	r24, Z
    150c:	0e 94 cf 0b 	call	0x179e	; 0x179e <is_start_of_frame>
    1510:	98 2f       	mov	r25, r24
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	89 27       	eor	r24, r25
    1516:	88 23       	and	r24, r24
    1518:	11 f0       	breq	.+4      	; 0x151e <unpack_data_frame+0x42>
		return FrameInvalid;
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	34 c0       	rjmp	.+104    	; 0x1586 <unpack_data_frame+0xaa>

	uint8_t frame_size = get_frame_size(frame_buffer, frame_buffer_size);
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	6e 81       	ldd	r22, Y+6	; 0x06
    1524:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <get_frame_size>
    1528:	89 83       	std	Y+1, r24	; 0x01
	if (!is_CRC_valid(frame_buffer, frame_size))
    152a:	8c 81       	ldd	r24, Y+4	; 0x04
    152c:	9d 81       	ldd	r25, Y+5	; 0x05
    152e:	69 81       	ldd	r22, Y+1	; 0x01
    1530:	0e 94 de 0b 	call	0x17bc	; 0x17bc <is_CRC_valid>
    1534:	98 2f       	mov	r25, r24
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	89 27       	eor	r24, r25
    153a:	88 23       	and	r24, r24
    153c:	11 f0       	breq	.+4      	; 0x1542 <unpack_data_frame+0x66>
		return FrameInvalid;
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	22 c0       	rjmp	.+68     	; 0x1586 <unpack_data_frame+0xaa>

	Frame_type_t type = *(frame_buffer + LINK_FLAG_SIZE);
    1542:	8c 81       	ldd	r24, Y+4	; 0x04
    1544:	9d 81       	ldd	r25, Y+5	; 0x05
    1546:	fc 01       	movw	r30, r24
    1548:	81 81       	ldd	r24, Z+1	; 0x01
    154a:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t data_offset = LINK_FLAG_SIZE + FLAGS_SIZE + TOTAL_LENGTH_SIZE;
    154c:	83 e0       	ldi	r24, 0x03	; 3
    154e:	8b 83       	std	Y+3, r24	; 0x03

	*data_length = byte_unstuff(frame_buffer, frame_buffer_size, frame_buffer + data_offset, frame_size - (data_offset + CRC_SIZE));
    1550:	99 81       	ldd	r25, Y+1	; 0x01
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	f9 2f       	mov	r31, r25
    1556:	f8 1b       	sub	r31, r24
    1558:	8f 2f       	mov	r24, r31
    155a:	6f ef       	ldi	r22, 0xFF	; 255
    155c:	68 0f       	add	r22, r24
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	88 2f       	mov	r24, r24
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	2c 81       	ldd	r18, Y+4	; 0x04
    1566:	3d 81       	ldd	r19, Y+5	; 0x05
    1568:	a9 01       	movw	r20, r18
    156a:	48 0f       	add	r20, r24
    156c:	59 1f       	adc	r21, r25
    156e:	8c 81       	ldd	r24, Y+4	; 0x04
    1570:	9d 81       	ldd	r25, Y+5	; 0x05
    1572:	26 2f       	mov	r18, r22
    1574:	6e 81       	ldd	r22, Y+6	; 0x06
    1576:	0e 94 0d 01 	call	0x21a	; 0x21a <byte_unstuff>
    157a:	28 2f       	mov	r18, r24
    157c:	8f 81       	ldd	r24, Y+7	; 0x07
    157e:	98 85       	ldd	r25, Y+8	; 0x08
    1580:	fc 01       	movw	r30, r24
    1582:	20 83       	st	Z, r18

	return type;
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1586:	28 96       	adiw	r28, 0x08	; 8
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	08 95       	ret

00001598 <get_data_frame>:
uint8_t get_data_frame(uint8_t *frame_buffer, uint8_t frame_buffer_size, uint8_t *data_buffer, uint8_t data_buffer_size)//, uint16_t *seq_num, uint16_t ack_num)
{
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	2c 97       	sbiw	r28, 0x0c	; 12
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	98 87       	std	Y+8, r25	; 0x08
    15ae:	8f 83       	std	Y+7, r24	; 0x07
    15b0:	69 87       	std	Y+9, r22	; 0x09
    15b2:	5b 87       	std	Y+11, r21	; 0x0b
    15b4:	4a 87       	std	Y+10, r20	; 0x0a
    15b6:	2c 87       	std	Y+12, r18	; 0x0c
	uint8_t const *frame_buffer_start = frame_buffer;
    15b8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ba:	98 85       	ldd	r25, Y+8	; 0x08
    15bc:	9b 83       	std	Y+3, r25	; 0x03
    15be:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t *stuffed_bytes = pvPortMalloc(frame_buffer_size);
    15c0:	89 85       	ldd	r24, Y+9	; 0x09
    15c2:	88 2f       	mov	r24, r24
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <pvPortMalloc>
    15ca:	9d 83       	std	Y+5, r25	; 0x05
    15cc:	8c 83       	std	Y+4, r24	; 0x04
	if(!stuffed_bytes)
    15ce:	8c 81       	ldd	r24, Y+4	; 0x04
    15d0:	9d 81       	ldd	r25, Y+5	; 0x05
    15d2:	89 2b       	or	r24, r25
    15d4:	11 f4       	brne	.+4      	; 0x15da <get_data_frame+0x42>
		return 0;
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	7f c0       	rjmp	.+254    	; 0x16d8 <get_data_frame+0x140>
	uint8_t payload_bytes = 0;
    15da:	1e 82       	std	Y+6, r1	; 0x06
	if ((payload_bytes = byte_stuff(data_buffer, data_buffer_size, stuffed_bytes, data_buffer_size * 2)))
    15dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    15de:	28 2f       	mov	r18, r24
    15e0:	22 0f       	add	r18, r18
    15e2:	4c 81       	ldd	r20, Y+4	; 0x04
    15e4:	5d 81       	ldd	r21, Y+5	; 0x05
    15e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    15e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    15ea:	6c 85       	ldd	r22, Y+12	; 0x0c
    15ec:	0e 94 5d 00 	call	0xba	; 0xba <byte_stuff>
    15f0:	8e 83       	std	Y+6, r24	; 0x06
    15f2:	8e 81       	ldd	r24, Y+6	; 0x06
    15f4:	88 23       	and	r24, r24
    15f6:	09 f4       	brne	.+2      	; 0x15fa <get_data_frame+0x62>
    15f8:	6a c0       	rjmp	.+212    	; 0x16ce <get_data_frame+0x136>
	{
		if ((payload_bytes <= MAX_PAYLOAD_SIZE) && (frame_buffer_size >= (payload_bytes + FRAME_OVERHEAD)))
    15fa:	89 85       	ldd	r24, Y+9	; 0x09
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	8e 81       	ldd	r24, Y+6	; 0x06
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	04 96       	adiw	r24, 0x04	; 4
    1608:	28 17       	cp	r18, r24
    160a:	39 07       	cpc	r19, r25
    160c:	08 f4       	brcc	.+2      	; 0x1610 <get_data_frame+0x78>
    160e:	5f c0       	rjmp	.+190    	; 0x16ce <get_data_frame+0x136>
		{
			*frame_buffer++ = LINK_FLAG;
    1610:	8f 81       	ldd	r24, Y+7	; 0x07
    1612:	98 85       	ldd	r25, Y+8	; 0x08
    1614:	9c 01       	movw	r18, r24
    1616:	2f 5f       	subi	r18, 0xFF	; 255
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	38 87       	std	Y+8, r19	; 0x08
    161c:	2f 83       	std	Y+7, r18	; 0x07
    161e:	2f ef       	ldi	r18, 0xFF	; 255
    1620:	fc 01       	movw	r30, r24
    1622:	20 83       	st	Z, r18
			*frame_buffer++ = PLACEHOLDER_FLAG;
    1624:	8f 81       	ldd	r24, Y+7	; 0x07
    1626:	98 85       	ldd	r25, Y+8	; 0x08
    1628:	9c 01       	movw	r18, r24
    162a:	2f 5f       	subi	r18, 0xFF	; 255
    162c:	3f 4f       	sbci	r19, 0xFF	; 255
    162e:	38 87       	std	Y+8, r19	; 0x08
    1630:	2f 83       	std	Y+7, r18	; 0x07
    1632:	21 e0       	ldi	r18, 0x01	; 1
    1634:	fc 01       	movw	r30, r24
    1636:	20 83       	st	Z, r18
			*frame_buffer++ = payload_bytes + FRAME_OVERHEAD;
    1638:	8f 81       	ldd	r24, Y+7	; 0x07
    163a:	98 85       	ldd	r25, Y+8	; 0x08
    163c:	9c 01       	movw	r18, r24
    163e:	2f 5f       	subi	r18, 0xFF	; 255
    1640:	3f 4f       	sbci	r19, 0xFF	; 255
    1642:	38 87       	std	Y+8, r19	; 0x08
    1644:	2f 83       	std	Y+7, r18	; 0x07
    1646:	2e 81       	ldd	r18, Y+6	; 0x06
    1648:	2c 5f       	subi	r18, 0xFC	; 252
    164a:	fc 01       	movw	r30, r24
    164c:	20 83       	st	Z, r18
			for (uint8_t i = 0; i < payload_bytes; i++) //maybe I should use memcpy..
    164e:	19 82       	std	Y+1, r1	; 0x01
    1650:	15 c0       	rjmp	.+42     	; 0x167c <get_data_frame+0xe4>
				*frame_buffer++ = stuffed_bytes[i];
    1652:	8f 81       	ldd	r24, Y+7	; 0x07
    1654:	98 85       	ldd	r25, Y+8	; 0x08
    1656:	9c 01       	movw	r18, r24
    1658:	2f 5f       	subi	r18, 0xFF	; 255
    165a:	3f 4f       	sbci	r19, 0xFF	; 255
    165c:	38 87       	std	Y+8, r19	; 0x08
    165e:	2f 83       	std	Y+7, r18	; 0x07
    1660:	29 81       	ldd	r18, Y+1	; 0x01
    1662:	22 2f       	mov	r18, r18
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	4c 81       	ldd	r20, Y+4	; 0x04
    1668:	5d 81       	ldd	r21, Y+5	; 0x05
    166a:	24 0f       	add	r18, r20
    166c:	35 1f       	adc	r19, r21
    166e:	f9 01       	movw	r30, r18
    1670:	20 81       	ld	r18, Z
    1672:	fc 01       	movw	r30, r24
    1674:	20 83       	st	Z, r18
		if ((payload_bytes <= MAX_PAYLOAD_SIZE) && (frame_buffer_size >= (payload_bytes + FRAME_OVERHEAD)))
		{
			*frame_buffer++ = LINK_FLAG;
			*frame_buffer++ = PLACEHOLDER_FLAG;
			*frame_buffer++ = payload_bytes + FRAME_OVERHEAD;
			for (uint8_t i = 0; i < payload_bytes; i++) //maybe I should use memcpy..
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	8f 5f       	subi	r24, 0xFF	; 255
    167a:	89 83       	std	Y+1, r24	; 0x01
    167c:	99 81       	ldd	r25, Y+1	; 0x01
    167e:	8e 81       	ldd	r24, Y+6	; 0x06
    1680:	98 17       	cp	r25, r24
    1682:	38 f3       	brcs	.-50     	; 0x1652 <get_data_frame+0xba>
				*frame_buffer++ = stuffed_bytes[i];

			vPortFree(stuffed_bytes);
    1684:	8c 81       	ldd	r24, Y+4	; 0x04
    1686:	9d 81       	ldd	r25, Y+5	; 0x05
    1688:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <vPortFree>

			*frame_buffer = compute_crc8(frame_buffer_start, frame_buffer - frame_buffer_start);
    168c:	2f 81       	ldd	r18, Y+7	; 0x07
    168e:	38 85       	ldd	r19, Y+8	; 0x08
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	9b 81       	ldd	r25, Y+3	; 0x03
    1694:	a9 01       	movw	r20, r18
    1696:	48 1b       	sub	r20, r24
    1698:	59 0b       	sbc	r21, r25
    169a:	ca 01       	movw	r24, r20
    169c:	28 2f       	mov	r18, r24
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	9b 81       	ldd	r25, Y+3	; 0x03
    16a2:	62 2f       	mov	r22, r18
    16a4:	0e 94 2a 0a 	call	0x1454	; 0x1454 <compute_crc8>
    16a8:	28 2f       	mov	r18, r24
    16aa:	8f 81       	ldd	r24, Y+7	; 0x07
    16ac:	98 85       	ldd	r25, Y+8	; 0x08
    16ae:	fc 01       	movw	r30, r24
    16b0:	20 83       	st	Z, r18
			frame_buffer++;
    16b2:	8f 81       	ldd	r24, Y+7	; 0x07
    16b4:	98 85       	ldd	r25, Y+8	; 0x08
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	98 87       	std	Y+8, r25	; 0x08
    16ba:	8f 83       	std	Y+7, r24	; 0x07

			return frame_buffer - frame_buffer_start;
    16bc:	2f 81       	ldd	r18, Y+7	; 0x07
    16be:	38 85       	ldd	r19, Y+8	; 0x08
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	9b 81       	ldd	r25, Y+3	; 0x03
    16c4:	a9 01       	movw	r20, r18
    16c6:	48 1b       	sub	r20, r24
    16c8:	59 0b       	sbc	r21, r25
    16ca:	ca 01       	movw	r24, r20
    16cc:	05 c0       	rjmp	.+10     	; 0x16d8 <get_data_frame+0x140>
		}
	}
	vPortFree(stuffed_bytes);
    16ce:	8c 81       	ldd	r24, Y+4	; 0x04
    16d0:	9d 81       	ldd	r25, Y+5	; 0x05
    16d2:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <vPortFree>
	return 0;
    16d6:	80 e0       	ldi	r24, 0x00	; 0
}
    16d8:	2c 96       	adiw	r28, 0x0c	; 12
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	08 95       	ret

000016ea <get_acknowledge_frame>:
uint8_t get_acknowledge_frame(uint8_t *frame_buffer, uint8_t frame_buffer_size)
{
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <get_acknowledge_frame+0x6>
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <get_acknowledge_frame+0x8>
    16f2:	1f 92       	push	r1
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	9c 83       	std	Y+4, r25	; 0x04
    16fa:	8b 83       	std	Y+3, r24	; 0x03
    16fc:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t const *frame_buffer_start = frame_buffer;
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	9c 81       	ldd	r25, Y+4	; 0x04
    1702:	9a 83       	std	Y+2, r25	; 0x02
    1704:	89 83       	std	Y+1, r24	; 0x01
	if (frame_buffer_size >= LINK_FLAG_SIZE + HEADER_SIZE + CRC_SIZE)
    1706:	8d 81       	ldd	r24, Y+5	; 0x05
    1708:	84 30       	cpi	r24, 0x04	; 4
    170a:	08 f4       	brcc	.+2      	; 0x170e <get_acknowledge_frame+0x24>
    170c:	3f c0       	rjmp	.+126    	; 0x178c <get_acknowledge_frame+0xa2>
	{
		*frame_buffer++ = LINK_FLAG;
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	9c 81       	ldd	r25, Y+4	; 0x04
    1712:	9c 01       	movw	r18, r24
    1714:	2f 5f       	subi	r18, 0xFF	; 255
    1716:	3f 4f       	sbci	r19, 0xFF	; 255
    1718:	3c 83       	std	Y+4, r19	; 0x04
    171a:	2b 83       	std	Y+3, r18	; 0x03
    171c:	2f ef       	ldi	r18, 0xFF	; 255
    171e:	fc 01       	movw	r30, r24
    1720:	20 83       	st	Z, r18
		*frame_buffer++ = ACK_FLAG;
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	9c 81       	ldd	r25, Y+4	; 0x04
    1726:	9c 01       	movw	r18, r24
    1728:	2f 5f       	subi	r18, 0xFF	; 255
    172a:	3f 4f       	sbci	r19, 0xFF	; 255
    172c:	3c 83       	std	Y+4, r19	; 0x04
    172e:	2b 83       	std	Y+3, r18	; 0x03
    1730:	22 e0       	ldi	r18, 0x02	; 2
    1732:	fc 01       	movw	r30, r24
    1734:	20 83       	st	Z, r18
		*frame_buffer++ = FRAME_OVERHEAD;
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	9c 81       	ldd	r25, Y+4	; 0x04
    173a:	9c 01       	movw	r18, r24
    173c:	2f 5f       	subi	r18, 0xFF	; 255
    173e:	3f 4f       	sbci	r19, 0xFF	; 255
    1740:	3c 83       	std	Y+4, r19	; 0x04
    1742:	2b 83       	std	Y+3, r18	; 0x03
    1744:	24 e0       	ldi	r18, 0x04	; 4
    1746:	fc 01       	movw	r30, r24
    1748:	20 83       	st	Z, r18

		*frame_buffer = compute_crc8(frame_buffer_start, frame_buffer - frame_buffer_start);
    174a:	2b 81       	ldd	r18, Y+3	; 0x03
    174c:	3c 81       	ldd	r19, Y+4	; 0x04
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	9a 81       	ldd	r25, Y+2	; 0x02
    1752:	a9 01       	movw	r20, r18
    1754:	48 1b       	sub	r20, r24
    1756:	59 0b       	sbc	r21, r25
    1758:	ca 01       	movw	r24, r20
    175a:	28 2f       	mov	r18, r24
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	9a 81       	ldd	r25, Y+2	; 0x02
    1760:	62 2f       	mov	r22, r18
    1762:	0e 94 2a 0a 	call	0x1454	; 0x1454 <compute_crc8>
    1766:	28 2f       	mov	r18, r24
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	9c 81       	ldd	r25, Y+4	; 0x04
    176c:	fc 01       	movw	r30, r24
    176e:	20 83       	st	Z, r18
		frame_buffer++;
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	9c 81       	ldd	r25, Y+4	; 0x04
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	9c 83       	std	Y+4, r25	; 0x04
    1778:	8b 83       	std	Y+3, r24	; 0x03
		return frame_buffer - frame_buffer_start;
    177a:	2b 81       	ldd	r18, Y+3	; 0x03
    177c:	3c 81       	ldd	r19, Y+4	; 0x04
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	9a 81       	ldd	r25, Y+2	; 0x02
    1782:	a9 01       	movw	r20, r18
    1784:	48 1b       	sub	r20, r24
    1786:	59 0b       	sbc	r21, r25
    1788:	ca 01       	movw	r24, r20
    178a:	01 c0       	rjmp	.+2      	; 0x178e <get_acknowledge_frame+0xa4>
	}
	return 0;
    178c:	80 e0       	ldi	r24, 0x00	; 0
}
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	08 95       	ret

0000179e <is_start_of_frame>:
bool is_start_of_frame(uint8_t byte)
{
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	1f 92       	push	r1
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	89 83       	std	Y+1, r24	; 0x01
	return byte == LINK_FLAG;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	99 81       	ldd	r25, Y+1	; 0x01
    17ae:	9f 3f       	cpi	r25, 0xFF	; 255
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <is_start_of_frame+0x16>
    17b2:	80 e0       	ldi	r24, 0x00	; 0
}
    17b4:	0f 90       	pop	r0
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	08 95       	ret

000017bc <is_CRC_valid>:
bool is_CRC_valid(uint8_t *frame_buffer, uint8_t bytes)
{
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <is_CRC_valid+0x6>
    17c2:	1f 92       	push	r1
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	9a 83       	std	Y+2, r25	; 0x02
    17ca:	89 83       	std	Y+1, r24	; 0x01
    17cc:	6b 83       	std	Y+3, r22	; 0x03
	return compute_crc8(frame_buffer, bytes) == 0;
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	9a 81       	ldd	r25, Y+2	; 0x02
    17d2:	6b 81       	ldd	r22, Y+3	; 0x03
    17d4:	0e 94 2a 0a 	call	0x1454	; 0x1454 <compute_crc8>
    17d8:	98 2f       	mov	r25, r24
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	99 23       	and	r25, r25
    17de:	09 f0       	breq	.+2      	; 0x17e2 <is_CRC_valid+0x26>
    17e0:	80 e0       	ldi	r24, 0x00	; 0
}
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	08 95       	ret

000017ee <get_frame_size>:
uint8_t get_frame_size(uint8_t *byte_buffer, uint8_t byte_buffer_size)
{
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <get_frame_size+0x6>
    17f4:	1f 92       	push	r1
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	9a 83       	std	Y+2, r25	; 0x02
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	6b 83       	std	Y+3, r22	; 0x03
	if (byte_buffer_size < (HEADER_SIZE + LINK_FLAG_SIZE))
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	83 30       	cpi	r24, 0x03	; 3
    1804:	10 f4       	brcc	.+4      	; 0x180a <get_frame_size+0x1c>
		return 0;
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	16 c0       	rjmp	.+44     	; 0x1836 <get_frame_size+0x48>
	if (*byte_buffer != LINK_FLAG)
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	9a 81       	ldd	r25, Y+2	; 0x02
    180e:	fc 01       	movw	r30, r24
    1810:	80 81       	ld	r24, Z
    1812:	8f 3f       	cpi	r24, 0xFF	; 255
    1814:	11 f0       	breq	.+4      	; 0x181a <get_frame_size+0x2c>
		return 0;
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	0e c0       	rjmp	.+28     	; 0x1836 <get_frame_size+0x48>
	byte_buffer += LINK_FLAG_SIZE;
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	9a 81       	ldd	r25, Y+2	; 0x02
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	9a 83       	std	Y+2, r25	; 0x02
    1822:	89 83       	std	Y+1, r24	; 0x01
	byte_buffer += FLAGS_SIZE;
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	9a 81       	ldd	r25, Y+2	; 0x02
    1828:	01 96       	adiw	r24, 0x01	; 1
    182a:	9a 83       	std	Y+2, r25	; 0x02
    182c:	89 83       	std	Y+1, r24	; 0x01

	return *byte_buffer;
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	9a 81       	ldd	r25, Y+2	; 0x02
    1832:	fc 01       	movw	r30, r24
    1834:	80 81       	ld	r24, Z
}
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	08 95       	ret

00001842 <is_ack_frame>:

bool is_ack_frame(uint8_t *frame_buffer, uint8_t frame_buffer_size)
{
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	00 d0       	rcall	.+0      	; 0x1848 <is_ack_frame+0x6>
    1848:	1f 92       	push	r1
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	6b 83       	std	Y+3, r22	; 0x03
	if (frame_buffer_size < (HEADER_SIZE + LINK_FLAG_SIZE))
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	83 30       	cpi	r24, 0x03	; 3
    1858:	10 f4       	brcc	.+4      	; 0x185e <is_ack_frame+0x1c>
		return false;
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	11 c0       	rjmp	.+34     	; 0x1880 <is_ack_frame+0x3e>

	frame_buffer += LINK_FLAG_SIZE;
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	9a 81       	ldd	r25, Y+2	; 0x02
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	89 83       	std	Y+1, r24	; 0x01
	return (*frame_buffer & ACK_FLAG);
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	9a 81       	ldd	r25, Y+2	; 0x02
    186c:	fc 01       	movw	r30, r24
    186e:	80 81       	ld	r24, Z
    1870:	88 2f       	mov	r24, r24
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	82 70       	andi	r24, 0x02	; 2
    1876:	99 27       	eor	r25, r25
    1878:	21 e0       	ldi	r18, 0x01	; 1
    187a:	89 2b       	or	r24, r25
    187c:	09 f4       	brne	.+2      	; 0x1880 <is_ack_frame+0x3e>
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	82 2f       	mov	r24, r18
}
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	08 95       	ret

0000188e <get_frame_from_queue>:

bool get_frame_from_queue(QueueHandle_t queue, uint8_t *buffer, uint8_t buffer_size, uint8_t *frame_size)
{
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	28 97       	sbiw	r28, 0x08	; 8
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	9b 83       	std	Y+3, r25	; 0x03
    18a4:	8a 83       	std	Y+2, r24	; 0x02
    18a6:	7d 83       	std	Y+5, r23	; 0x05
    18a8:	6c 83       	std	Y+4, r22	; 0x04
    18aa:	4e 83       	std	Y+6, r20	; 0x06
    18ac:	38 87       	std	Y+8, r19	; 0x08
    18ae:	2f 83       	std	Y+7, r18	; 0x07
	if (buffer_size < MIN_FRAME_SIZE)
    18b0:	8e 81       	ldd	r24, Y+6	; 0x06
    18b2:	84 30       	cpi	r24, 0x04	; 4
    18b4:	08 f0       	brcs	.+2      	; 0x18b8 <get_frame_from_queue+0x2a>
    18b6:	6f c0       	rjmp	.+222    	; 0x1996 <get_frame_from_queue+0x108>
	return false;
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	75 c0       	rjmp	.+234    	; 0x19a6 <get_frame_from_queue+0x118>

	while(*frame_size <= buffer_size)
	{
		if(!xQueueReceive(queue, (buffer + *frame_size), 0))
    18bc:	8f 81       	ldd	r24, Y+7	; 0x07
    18be:	98 85       	ldd	r25, Y+8	; 0x08
    18c0:	fc 01       	movw	r30, r24
    18c2:	80 81       	ld	r24, Z
    18c4:	88 2f       	mov	r24, r24
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	2c 81       	ldd	r18, Y+4	; 0x04
    18ca:	3d 81       	ldd	r19, Y+5	; 0x05
    18cc:	b9 01       	movw	r22, r18
    18ce:	68 0f       	add	r22, r24
    18d0:	79 1f       	adc	r23, r25
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	9b 81       	ldd	r25, Y+3	; 0x03
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	40 e0       	ldi	r20, 0x00	; 0
    18da:	50 e0       	ldi	r21, 0x00	; 0
    18dc:	0e 94 08 1c 	call	0x3810	; 0x3810 <xQueueGenericReceive>
    18e0:	88 23       	and	r24, r24
    18e2:	11 f4       	brne	.+4      	; 0x18e8 <get_frame_from_queue+0x5a>
		return false;
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	5f c0       	rjmp	.+190    	; 0x19a6 <get_frame_from_queue+0x118>

		if (((*frame_size) == 0) && (!is_start_of_frame(*buffer)))
    18e8:	8f 81       	ldd	r24, Y+7	; 0x07
    18ea:	98 85       	ldd	r25, Y+8	; 0x08
    18ec:	fc 01       	movw	r30, r24
    18ee:	80 81       	ld	r24, Z
    18f0:	88 23       	and	r24, r24
    18f2:	61 f4       	brne	.+24     	; 0x190c <get_frame_from_queue+0x7e>
    18f4:	8c 81       	ldd	r24, Y+4	; 0x04
    18f6:	9d 81       	ldd	r25, Y+5	; 0x05
    18f8:	fc 01       	movw	r30, r24
    18fa:	80 81       	ld	r24, Z
    18fc:	0e 94 cf 0b 	call	0x179e	; 0x179e <is_start_of_frame>
    1900:	98 2f       	mov	r25, r24
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	89 27       	eor	r24, r25
    1906:	88 23       	and	r24, r24
    1908:	09 f0       	breq	.+2      	; 0x190c <get_frame_from_queue+0x7e>
		continue; //Seek the start of a new frame
    190a:	45 c0       	rjmp	.+138    	; 0x1996 <get_frame_from_queue+0x108>

		(*frame_size)++;
    190c:	8f 81       	ldd	r24, Y+7	; 0x07
    190e:	98 85       	ldd	r25, Y+8	; 0x08
    1910:	fc 01       	movw	r30, r24
    1912:	80 81       	ld	r24, Z
    1914:	21 e0       	ldi	r18, 0x01	; 1
    1916:	28 0f       	add	r18, r24
    1918:	8f 81       	ldd	r24, Y+7	; 0x07
    191a:	98 85       	ldd	r25, Y+8	; 0x08
    191c:	fc 01       	movw	r30, r24
    191e:	20 83       	st	Z, r18
		
		if (*frame_size >= (LINK_FLAG_SIZE + HEADER_SIZE))
    1920:	8f 81       	ldd	r24, Y+7	; 0x07
    1922:	98 85       	ldd	r25, Y+8	; 0x08
    1924:	fc 01       	movw	r30, r24
    1926:	80 81       	ld	r24, Z
    1928:	83 30       	cpi	r24, 0x03	; 3
    192a:	a8 f1       	brcs	.+106    	; 0x1996 <get_frame_from_queue+0x108>
		{
			//frame is big enough to have the header -> size should be available.
			uint8_t f_size = get_frame_size(buffer, LINK_FLAG_SIZE + HEADER_SIZE);
    192c:	8c 81       	ldd	r24, Y+4	; 0x04
    192e:	9d 81       	ldd	r25, Y+5	; 0x05
    1930:	63 e0       	ldi	r22, 0x03	; 3
    1932:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <get_frame_size>
    1936:	89 83       	std	Y+1, r24	; 0x01
			if (buffer_size < f_size)
    1938:	9e 81       	ldd	r25, Y+6	; 0x06
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	98 17       	cp	r25, r24
    193e:	10 f5       	brcc	.+68     	; 0x1984 <get_frame_from_queue+0xf6>
			return false;
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	31 c0       	rjmp	.+98     	; 0x19a6 <get_frame_from_queue+0x118>

			//try to get the rest
			while ((*frame_size < f_size))
			{
				if(!xQueueReceive(queue, (buffer + *frame_size), 0))
    1944:	8f 81       	ldd	r24, Y+7	; 0x07
    1946:	98 85       	ldd	r25, Y+8	; 0x08
    1948:	fc 01       	movw	r30, r24
    194a:	80 81       	ld	r24, Z
    194c:	88 2f       	mov	r24, r24
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	2c 81       	ldd	r18, Y+4	; 0x04
    1952:	3d 81       	ldd	r19, Y+5	; 0x05
    1954:	b9 01       	movw	r22, r18
    1956:	68 0f       	add	r22, r24
    1958:	79 1f       	adc	r23, r25
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	9b 81       	ldd	r25, Y+3	; 0x03
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	0e 94 08 1c 	call	0x3810	; 0x3810 <xQueueGenericReceive>
    1968:	88 23       	and	r24, r24
    196a:	11 f4       	brne	.+4      	; 0x1970 <get_frame_from_queue+0xe2>
				return false;
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	1b c0       	rjmp	.+54     	; 0x19a6 <get_frame_from_queue+0x118>

				(*frame_size)++;
    1970:	8f 81       	ldd	r24, Y+7	; 0x07
    1972:	98 85       	ldd	r25, Y+8	; 0x08
    1974:	fc 01       	movw	r30, r24
    1976:	80 81       	ld	r24, Z
    1978:	21 e0       	ldi	r18, 0x01	; 1
    197a:	28 0f       	add	r18, r24
    197c:	8f 81       	ldd	r24, Y+7	; 0x07
    197e:	98 85       	ldd	r25, Y+8	; 0x08
    1980:	fc 01       	movw	r30, r24
    1982:	20 83       	st	Z, r18
			uint8_t f_size = get_frame_size(buffer, LINK_FLAG_SIZE + HEADER_SIZE);
			if (buffer_size < f_size)
			return false;

			//try to get the rest
			while ((*frame_size < f_size))
    1984:	8f 81       	ldd	r24, Y+7	; 0x07
    1986:	98 85       	ldd	r25, Y+8	; 0x08
    1988:	fc 01       	movw	r30, r24
    198a:	90 81       	ld	r25, Z
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	98 17       	cp	r25, r24
    1990:	c8 f2       	brcs	.-78     	; 0x1944 <get_frame_from_queue+0xb6>

				(*frame_size)++;
			}

			//Survived the loop! must be at the end of the frame
			return true;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	08 c0       	rjmp	.+16     	; 0x19a6 <get_frame_from_queue+0x118>
bool get_frame_from_queue(QueueHandle_t queue, uint8_t *buffer, uint8_t buffer_size, uint8_t *frame_size)
{
	if (buffer_size < MIN_FRAME_SIZE)
	return false;

	while(*frame_size <= buffer_size)
    1996:	8f 81       	ldd	r24, Y+7	; 0x07
    1998:	98 85       	ldd	r25, Y+8	; 0x08
    199a:	fc 01       	movw	r30, r24
    199c:	90 81       	ld	r25, Z
    199e:	8e 81       	ldd	r24, Y+6	; 0x06
    19a0:	89 17       	cp	r24, r25
    19a2:	08 f0       	brcs	.+2      	; 0x19a6 <get_frame_from_queue+0x118>
    19a4:	8b cf       	rjmp	.-234    	; 0x18bc <get_frame_from_queue+0x2e>

			//Survived the loop! must be at the end of the frame
			return true;
		}
	}
    19a6:	28 96       	adiw	r28, 0x08	; 8
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	df 91       	pop	r29
    19b4:	cf 91       	pop	r28
    19b6:	08 95       	ret

000019b8 <serial_com_task>:
static TickType_t last_frame_time = 0;
static uint8_t ack_timeouts = 0;


void serial_com_task(void *pvParameters)
{
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	c1 57       	subi	r28, 0x71	; 113
    19c2:	d1 09       	sbc	r29, r1
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	9e 01       	movw	r18, r28
    19d0:	20 59       	subi	r18, 0x90	; 144
    19d2:	3f 4f       	sbci	r19, 0xFF	; 255
    19d4:	f9 01       	movw	r30, r18
    19d6:	91 83       	std	Z+1, r25	; 0x01
    19d8:	80 83       	st	Z, r24
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	//vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
	#endif

	com_send_frame_buffer = xQueueCreate(COM_SEND_QUEUE_SIZE, sizeof(uint8_t));
    19da:	40 e0       	ldi	r20, 0x00	; 0
    19dc:	61 e0       	ldi	r22, 0x01	; 1
    19de:	84 e6       	ldi	r24, 0x64	; 100
    19e0:	0e 94 1f 1a 	call	0x343e	; 0x343e <xQueueGenericCreate>
    19e4:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <com_send_frame_buffer+0x1>
    19e8:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <com_send_frame_buffer>
	com_send_queue_add_mutex = xSemaphoreCreateMutex();		//should be semphores
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <xQueueCreateMutex>
    19f2:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <com_send_queue_add_mutex+0x1>
    19f6:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <com_send_queue_add_mutex>
	_x_com_received_chars_queue = xQueueCreate( _COM_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
    19fa:	8e e1       	ldi	r24, 0x1E	; 30
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	61 e0       	ldi	r22, 0x01	; 1
    1a00:	0e 94 1f 1a 	call	0x343e	; 0x343e <xQueueGenericCreate>
    1a04:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <_x_com_received_chars_queue+0x1>
    1a08:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <_x_com_received_chars_queue>
	init_com(_x_com_received_chars_queue);
    1a0c:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_x_com_received_chars_queue>
    1a10:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <_x_com_received_chars_queue+0x1>
    1a14:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <init_com>

	
	uint8_t frame[MAX_FRAME_SIZE];
	uint8_t frame_size = 0;
    1a18:	ce 01       	movw	r24, r28
    1a1a:	88 59       	subi	r24, 0x98	; 152
    1a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1e:	fc 01       	movw	r30, r24
    1a20:	10 82       	st	Z, r1

	TickType_t serial_com_task_lastwake = xTaskGetTickCount();
    1a22:	0e 94 37 22 	call	0x446e	; 0x446e <xTaskGetTickCount>
    1a26:	9c 01       	movw	r18, r24
    1a28:	ce 01       	movw	r24, r28
    1a2a:	87 59       	subi	r24, 0x97	; 151
    1a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2e:	fc 01       	movw	r30, r24
    1a30:	31 83       	std	Z+1, r19	; 0x01
    1a32:	20 83       	st	Z, r18
	
	while(1)
	{
		//UBaseType_t stackUsage = uxTaskGetStackHighWaterMark(NULL);
		//Set task period
		vTaskDelayUntil(&serial_com_task_lastwake, SERIAL_COM_TASK_PERIOD);
    1a34:	ce 01       	movw	r24, r28
    1a36:	87 59       	subi	r24, 0x97	; 151
    1a38:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3a:	69 e1       	ldi	r22, 0x19	; 25
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	0e 94 c1 20 	call	0x4182	; 0x4182 <vTaskDelayUntil>
		
		//Actions:
		//Receive frames
		if(get_frame_from_queue(_x_com_received_chars_queue, frame, MAX_FRAME_SIZE, &frame_size))
    1a42:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <_x_com_received_chars_queue>
    1a46:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <_x_com_received_chars_queue+0x1>
    1a4a:	9e 01       	movw	r18, r28
    1a4c:	28 59       	subi	r18, 0x98	; 152
    1a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a50:	be 01       	movw	r22, r28
    1a52:	6c 5f       	subi	r22, 0xFC	; 252
    1a54:	7f 4f       	sbci	r23, 0xFF	; 255
    1a56:	44 e6       	ldi	r20, 0x64	; 100
    1a58:	0e 94 47 0c 	call	0x188e	; 0x188e <get_frame_from_queue>
    1a5c:	88 23       	and	r24, r24
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <serial_com_task+0xaa>
    1a60:	78 c0       	rjmp	.+240    	; 0x1b52 <serial_com_task+0x19a>
		{
			uint8_t data_length = 0;
    1a62:	ce 01       	movw	r24, r28
    1a64:	85 59       	subi	r24, 0x95	; 149
    1a66:	9f 4f       	sbci	r25, 0xFF	; 255
    1a68:	fc 01       	movw	r30, r24
    1a6a:	10 82       	st	Z, r1
			Frame_type_t type = unpack_data_frame(frame, MAX_FRAME_SIZE, &data_length);
    1a6c:	9e 01       	movw	r18, r28
    1a6e:	25 59       	subi	r18, 0x95	; 149
    1a70:	3f 4f       	sbci	r19, 0xFF	; 255
    1a72:	ce 01       	movw	r24, r28
    1a74:	04 96       	adiw	r24, 0x04	; 4
    1a76:	a9 01       	movw	r20, r18
    1a78:	64 e6       	ldi	r22, 0x64	; 100
    1a7a:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <unpack_data_frame>
    1a7e:	8a 83       	std	Y+2, r24	; 0x02
			if (type == ACK)
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	82 30       	cpi	r24, 0x02	; 2
    1a84:	51 f4       	brne	.+20     	; 0x1a9a <serial_com_task+0xe2>
			{
				//Ready to get the next out-frame from queue
				RTS = true;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <RTS>
				last_sent_frame[0] = 0;
    1a8c:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <last_sent_frame>
				last_sent_frame_size = 0;
    1a90:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <last_sent_frame_size>
				ack_timeouts = 0;
    1a94:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <ack_timeouts>
    1a98:	56 c0       	rjmp	.+172    	; 0x1b46 <serial_com_task+0x18e>
			}
			else if(type == DATA)
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <serial_com_task+0xea>
    1aa0:	4f c0       	rjmp	.+158    	; 0x1b40 <serial_com_task+0x188>
			{
				uint8_t ack_frame[LINK_FLAG_SIZE + HEADER_SIZE + CRC_SIZE];
				uint8_t ack_frame_size = 0;
    1aa2:	1b 82       	std	Y+3, r1	; 0x03
				if ((ack_frame_size = get_acknowledge_frame(ack_frame, sizeof(ack_frame))))
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	84 59       	subi	r24, 0x94	; 148
    1aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aaa:	64 e0       	ldi	r22, 0x04	; 4
    1aac:	0e 94 75 0b 	call	0x16ea	; 0x16ea <get_acknowledge_frame>
    1ab0:	8b 83       	std	Y+3, r24	; 0x03
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	88 23       	and	r24, r24
    1ab6:	b9 f1       	breq	.+110    	; 0x1b26 <serial_com_task+0x16e>
				{
					if(xSemaphoreTake(com_send_queue_add_mutex, 50))
    1ab8:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <com_send_queue_add_mutex>
    1abc:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <com_send_queue_add_mutex+0x1>
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	42 e3       	ldi	r20, 0x32	; 50
    1ac4:	50 e0       	ldi	r21, 0x00	; 0
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	0e 94 08 1c 	call	0x3810	; 0x3810 <xQueueGenericReceive>
    1ace:	88 23       	and	r24, r24
    1ad0:	f9 f0       	breq	.+62     	; 0x1b10 <serial_com_task+0x158>
					for (uint8_t i = 0; i < ack_frame_size; i++)
    1ad2:	19 82       	std	Y+1, r1	; 0x01
    1ad4:	17 c0       	rjmp	.+46     	; 0x1b04 <serial_com_task+0x14c>
					{
						if (!xQueueSend(com_send_frame_buffer, ack_frame+i, 0))
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	88 2f       	mov	r24, r24
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	9e 01       	movw	r18, r28
    1ade:	24 59       	subi	r18, 0x94	; 148
    1ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae2:	b9 01       	movw	r22, r18
    1ae4:	68 0f       	add	r22, r24
    1ae6:	79 1f       	adc	r23, r25
    1ae8:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <com_send_frame_buffer>
    1aec:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <com_send_frame_buffer+0x1>
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	40 e0       	ldi	r20, 0x00	; 0
    1af4:	50 e0       	ldi	r21, 0x00	; 0
    1af6:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <xQueueGenericSend>
    1afa:	88 23       	and	r24, r24
    1afc:	41 f0       	breq	.+16     	; 0x1b0e <serial_com_task+0x156>
				uint8_t ack_frame[LINK_FLAG_SIZE + HEADER_SIZE + CRC_SIZE];
				uint8_t ack_frame_size = 0;
				if ((ack_frame_size = get_acknowledge_frame(ack_frame, sizeof(ack_frame))))
				{
					if(xSemaphoreTake(com_send_queue_add_mutex, 50))
					for (uint8_t i = 0; i < ack_frame_size; i++)
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	8f 5f       	subi	r24, 0xFF	; 255
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	99 81       	ldd	r25, Y+1	; 0x01
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	98 17       	cp	r25, r24
    1b0a:	28 f3       	brcs	.-54     	; 0x1ad6 <serial_com_task+0x11e>
    1b0c:	01 c0       	rjmp	.+2      	; 0x1b10 <serial_com_task+0x158>
					{
						if (!xQueueSend(com_send_frame_buffer, ack_frame+i, 0))
							break;
    1b0e:	00 00       	nop
					}
					xSemaphoreGive(com_send_queue_add_mutex);
    1b10:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <com_send_queue_add_mutex>
    1b14:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <com_send_queue_add_mutex+0x1>
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	50 e0       	ldi	r21, 0x00	; 0
    1b1e:	60 e0       	ldi	r22, 0x00	; 0
    1b20:	70 e0       	ldi	r23, 0x00	; 0
    1b22:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <xQueueGenericSend>
				}
				//now handle the received data:
				handle_serial_input(frame, data_length);
    1b26:	ce 01       	movw	r24, r28
    1b28:	85 59       	subi	r24, 0x95	; 149
    1b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	80 81       	ld	r24, Z
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	ce 01       	movw	r24, r28
    1b36:	04 96       	adiw	r24, 0x04	; 4
    1b38:	b9 01       	movw	r22, r18
    1b3a:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <handle_serial_input>
    1b3e:	03 c0       	rjmp	.+6      	; 0x1b46 <serial_com_task+0x18e>
			}
			else
			{
				RTS = true; //breakpoint
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <RTS>

			}
			//Make ready for next frame
			frame[0] = 0;
    1b46:	1c 82       	std	Y+4, r1	; 0x04
			frame_size = 0;
    1b48:	ce 01       	movw	r24, r28
    1b4a:	88 59       	subi	r24, 0x98	; 152
    1b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4e:	fc 01       	movw	r30, r24
    1b50:	10 82       	st	Z, r1
		}


		if(RTS)
    1b52:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <RTS>
    1b56:	88 23       	and	r24, r24
    1b58:	89 f0       	breq	.+34     	; 0x1b7c <serial_com_task+0x1c4>
		{
			//Get the next frame
			if(get_frame_from_queue(com_send_frame_buffer, last_sent_frame, MAX_FRAME_SIZE, &last_sent_frame_size))
    1b5a:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <com_send_frame_buffer>
    1b5e:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <com_send_frame_buffer+0x1>
    1b62:	23 e1       	ldi	r18, 0x13	; 19
    1b64:	32 e0       	ldi	r19, 0x02	; 2
    1b66:	44 e6       	ldi	r20, 0x64	; 100
    1b68:	6f ea       	ldi	r22, 0xAF	; 175
    1b6a:	71 e0       	ldi	r23, 0x01	; 1
    1b6c:	0e 94 47 0c 	call	0x188e	; 0x188e <get_frame_from_queue>
    1b70:	88 23       	and	r24, r24
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <serial_com_task+0x1be>
    1b74:	5f cf       	rjmp	.-322    	; 0x1a34 <serial_com_task+0x7c>
			{
				send_current_frame();
    1b76:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_current_frame>
    1b7a:	5c cf       	rjmp	.-328    	; 0x1a34 <serial_com_task+0x7c>
			}
		}
		else
		{
			if ((xTaskGetTickCount() - last_frame_time) >= ACK_TIMEOUT)
    1b7c:	0e 94 37 22 	call	0x446e	; 0x446e <xTaskGetTickCount>
    1b80:	9c 01       	movw	r18, r24
    1b82:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <last_frame_time>
    1b86:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <last_frame_time+0x1>
    1b8a:	a9 01       	movw	r20, r18
    1b8c:	48 1b       	sub	r20, r24
    1b8e:	59 0b       	sbc	r21, r25
    1b90:	ca 01       	movw	r24, r20
    1b92:	84 36       	cpi	r24, 0x64	; 100
    1b94:	91 05       	cpc	r25, r1
    1b96:	08 f4       	brcc	.+2      	; 0x1b9a <serial_com_task+0x1e2>
    1b98:	4d cf       	rjmp	.-358    	; 0x1a34 <serial_com_task+0x7c>
			{
				ack_timeouts++; //could overflow but thats probably low-risk
    1b9a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <ack_timeouts>
    1b9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ba0:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <ack_timeouts>
				if(ack_timeouts <= MAX_CONSECUTIVE_ACK_TIMEOUTS)
    1ba4:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <ack_timeouts>
    1ba8:	86 30       	cpi	r24, 0x06	; 6
    1baa:	18 f4       	brcc	.+6      	; 0x1bb2 <serial_com_task+0x1fa>
				{
					send_current_frame(); //resend
    1bac:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_current_frame>
    1bb0:	41 cf       	rjmp	.-382    	; 0x1a34 <serial_com_task+0x7c>
				}
				else
				{
					//Remote end seems to be refusing to send acks, will just continue sending data then..
					RTS = true;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <RTS>
					last_sent_frame[0] = 0;
    1bb8:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <last_sent_frame>
					last_sent_frame_size = 0;
    1bbc:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <last_sent_frame_size>
					ack_timeouts = 0;
    1bc0:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <ack_timeouts>
				}
			}
		}
	}
    1bc4:	37 cf       	rjmp	.-402    	; 0x1a34 <serial_com_task+0x7c>

00001bc6 <send_current_frame>:
}
void send_current_frame()
{
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	1f 92       	push	r1
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
	if(last_sent_frame_size)
    1bd0:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <last_sent_frame_size>
    1bd4:	88 23       	and	r24, r24
    1bd6:	39 f1       	breq	.+78     	; 0x1c26 <send_current_frame+0x60>
	{
		//Send it
		for(uint8_t i = 0; i < last_sent_frame_size;)
    1bd8:	19 82       	std	Y+1, r1	; 0x01
    1bda:	13 c0       	rjmp	.+38     	; 0x1c02 <send_current_frame+0x3c>
		{
			if(com_send_byte(last_sent_frame[i]) == BUFFER_OK)
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	88 2f       	mov	r24, r24
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	81 55       	subi	r24, 0x51	; 81
    1be4:	9e 4f       	sbci	r25, 0xFE	; 254
    1be6:	fc 01       	movw	r30, r24
    1be8:	80 81       	ld	r24, Z
    1bea:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <com_send_byte>
    1bee:	88 23       	and	r24, r24
    1bf0:	21 f4       	brne	.+8      	; 0x1bfa <send_current_frame+0x34>
				i++; //continue to next byte
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	8f 5f       	subi	r24, 0xFF	; 255
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	04 c0       	rjmp	.+8      	; 0x1c02 <send_current_frame+0x3c>
			else
				vTaskDelay(COM_BUFFER_FULL_DELAY); //Wait a bit and retry
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	0e 94 3b 21 	call	0x4276	; 0x4276 <vTaskDelay>
void send_current_frame()
{
	if(last_sent_frame_size)
	{
		//Send it
		for(uint8_t i = 0; i < last_sent_frame_size;)
    1c02:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <last_sent_frame_size>
    1c06:	99 81       	ldd	r25, Y+1	; 0x01
    1c08:	98 17       	cp	r25, r24
    1c0a:	40 f3       	brcs	.-48     	; 0x1bdc <send_current_frame+0x16>
			if(com_send_byte(last_sent_frame[i]) == BUFFER_OK)
				i++; //continue to next byte
			else
				vTaskDelay(COM_BUFFER_FULL_DELAY); //Wait a bit and retry
		}
		last_frame_time = xTaskGetTickCount();
    1c0c:	0e 94 37 22 	call	0x446e	; 0x446e <xTaskGetTickCount>
    1c10:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <last_frame_time+0x1>
    1c14:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <last_frame_time>
		RTS = is_ack_frame(last_sent_frame, MIN_FRAME_SIZE); //Only dataframes require us to wait for acks
    1c18:	64 e0       	ldi	r22, 0x04	; 4
    1c1a:	8f ea       	ldi	r24, 0xAF	; 175
    1c1c:	91 e0       	ldi	r25, 0x01	; 1
    1c1e:	0e 94 21 0c 	call	0x1842	; 0x1842 <is_ack_frame>
    1c22:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <RTS>
	}
}
    1c26:	00 00       	nop
    1c28:	0f 90       	pop	r0
    1c2a:	df 91       	pop	r29
    1c2c:	cf 91       	pop	r28
    1c2e:	08 95       	ret

00001c30 <count_illegal_chars>:
uint8_t count_illegal_chars(uint8_t *byte_buffer, uint8_t buffer_size)
{
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <count_illegal_chars+0x6>
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <count_illegal_chars+0x8>
    1c38:	1f 92       	push	r1
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	9c 83       	std	Y+4, r25	; 0x04
    1c40:	8b 83       	std	Y+3, r24	; 0x03
    1c42:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t c = 0;
    1c44:	19 82       	std	Y+1, r1	; 0x01
	for(uint8_t i = 0; i < buffer_size; i++)
    1c46:	1a 82       	std	Y+2, r1	; 0x02
    1c48:	17 c0       	rjmp	.+46     	; 0x1c78 <count_illegal_chars+0x48>
	{
		if((*byte_buffer == LINK_FLAG) || (*byte_buffer == LINK_ESC))
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4e:	fc 01       	movw	r30, r24
    1c50:	80 81       	ld	r24, Z
    1c52:	8f 3f       	cpi	r24, 0xFF	; 255
    1c54:	31 f0       	breq	.+12     	; 0x1c62 <count_illegal_chars+0x32>
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	80 81       	ld	r24, Z
    1c5e:	88 23       	and	r24, r24
    1c60:	19 f4       	brne	.+6      	; 0x1c68 <count_illegal_chars+0x38>
			c++;
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	8f 5f       	subi	r24, 0xFF	; 255
    1c66:	89 83       	std	Y+1, r24	; 0x01

		byte_buffer++;
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6c:	01 96       	adiw	r24, 0x01	; 1
    1c6e:	9c 83       	std	Y+4, r25	; 0x04
    1c70:	8b 83       	std	Y+3, r24	; 0x03
	}
}
uint8_t count_illegal_chars(uint8_t *byte_buffer, uint8_t buffer_size)
{
	uint8_t c = 0;
	for(uint8_t i = 0; i < buffer_size; i++)
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	8f 5f       	subi	r24, 0xFF	; 255
    1c76:	8a 83       	std	Y+2, r24	; 0x02
    1c78:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7c:	98 17       	cp	r25, r24
    1c7e:	28 f3       	brcs	.-54     	; 0x1c4a <count_illegal_chars+0x1a>
		if((*byte_buffer == LINK_FLAG) || (*byte_buffer == LINK_ESC))
			c++;

		byte_buffer++;
	}
	return c;
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	08 95       	ret

00001c92 <send_bytes>:
bool send_bytes(uint8_t *byte_buffer, uint8_t buffer_size)
{
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	27 97       	sbiw	r28, 0x07	; 7
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
    1caa:	6f 83       	std	Y+7, r22	; 0x07
	if (buffer_size > MAX_PAYLOAD_SIZE)
		return false;
	uint8_t *frame;
	uint8_t frame_size = buffer_size + FRAME_OVERHEAD + (count_illegal_chars(byte_buffer, buffer_size) * 2);
    1cac:	8d 81       	ldd	r24, Y+5	; 0x05
    1cae:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb2:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <count_illegal_chars>
    1cb6:	98 2f       	mov	r25, r24
    1cb8:	99 0f       	add	r25, r25
    1cba:	8f 81       	ldd	r24, Y+7	; 0x07
    1cbc:	89 0f       	add	r24, r25
    1cbe:	8c 5f       	subi	r24, 0xFC	; 252
    1cc0:	89 83       	std	Y+1, r24	; 0x01
	if(frame_size > MAX_FRAME_SIZE)
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	85 36       	cpi	r24, 0x65	; 101
    1cc6:	10 f0       	brcs	.+4      	; 0x1ccc <send_bytes+0x3a>
		frame_size = MAX_FRAME_SIZE;
    1cc8:	84 e6       	ldi	r24, 0x64	; 100
    1cca:	89 83       	std	Y+1, r24	; 0x01
	
	frame = pvPortMalloc(frame_size);
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	88 2f       	mov	r24, r24
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <pvPortMalloc>
    1cd6:	9c 83       	std	Y+4, r25	; 0x04
    1cd8:	8b 83       	std	Y+3, r24	; 0x03
	if(!frame)
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	89 2b       	or	r24, r25
    1ce0:	11 f4       	brne	.+4      	; 0x1ce6 <send_bytes+0x54>
		return false;
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	54 c0       	rjmp	.+168    	; 0x1d8e <send_bytes+0xfc>
	frame_size = get_data_frame(frame, frame_size, byte_buffer, buffer_size);
    1ce6:	4d 81       	ldd	r20, Y+5	; 0x05
    1ce8:	5e 81       	ldd	r21, Y+6	; 0x06
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	9c 81       	ldd	r25, Y+4	; 0x04
    1cee:	2f 81       	ldd	r18, Y+7	; 0x07
    1cf0:	69 81       	ldd	r22, Y+1	; 0x01
    1cf2:	0e 94 cc 0a 	call	0x1598	; 0x1598 <get_data_frame>
    1cf6:	89 83       	std	Y+1, r24	; 0x01
	if (frame_size)
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	88 23       	and	r24, r24
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <send_bytes+0x6e>
    1cfe:	42 c0       	rjmp	.+132    	; 0x1d84 <send_bytes+0xf2>
	{
		if (uxQueueSpacesAvailable(com_send_frame_buffer) >= frame_size)
    1d00:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <com_send_frame_buffer>
    1d04:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <com_send_frame_buffer+0x1>
    1d08:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <uxQueueSpacesAvailable>
    1d0c:	98 2f       	mov	r25, r24
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	98 17       	cp	r25, r24
    1d12:	c0 f1       	brcs	.+112    	; 0x1d84 <send_bytes+0xf2>
		{
			if(xSemaphoreTake(com_send_queue_add_mutex, 50))
    1d14:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <com_send_queue_add_mutex>
    1d18:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <com_send_queue_add_mutex+0x1>
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	42 e3       	ldi	r20, 0x32	; 50
    1d20:	50 e0       	ldi	r21, 0x00	; 0
    1d22:	60 e0       	ldi	r22, 0x00	; 0
    1d24:	70 e0       	ldi	r23, 0x00	; 0
    1d26:	0e 94 08 1c 	call	0x3810	; 0x3810 <xQueueGenericReceive>
    1d2a:	88 23       	and	r24, r24
    1d2c:	d1 f0       	breq	.+52     	; 0x1d62 <send_bytes+0xd0>
			for (uint8_t i = 0; i < frame_size; i++)
    1d2e:	1a 82       	std	Y+2, r1	; 0x02
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <send_bytes+0xc8>
			{
				xQueueSend(com_send_frame_buffer, frame+i, 0);
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	88 2f       	mov	r24, r24
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	2b 81       	ldd	r18, Y+3	; 0x03
    1d3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d3c:	b9 01       	movw	r22, r18
    1d3e:	68 0f       	add	r22, r24
    1d40:	79 1f       	adc	r23, r25
    1d42:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <com_send_frame_buffer>
    1d46:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <com_send_frame_buffer+0x1>
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	40 e0       	ldi	r20, 0x00	; 0
    1d4e:	50 e0       	ldi	r21, 0x00	; 0
    1d50:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <xQueueGenericSend>
	if (frame_size)
	{
		if (uxQueueSpacesAvailable(com_send_frame_buffer) >= frame_size)
		{
			if(xSemaphoreTake(com_send_queue_add_mutex, 50))
			for (uint8_t i = 0; i < frame_size; i++)
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	8f 5f       	subi	r24, 0xFF	; 255
    1d58:	8a 83       	std	Y+2, r24	; 0x02
    1d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	98 17       	cp	r25, r24
    1d60:	40 f3       	brcs	.-48     	; 0x1d32 <send_bytes+0xa0>
			{
				xQueueSend(com_send_frame_buffer, frame+i, 0);
			}
			xSemaphoreGive(com_send_queue_add_mutex);
    1d62:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <com_send_queue_add_mutex>
    1d66:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <com_send_queue_add_mutex+0x1>
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	50 e0       	ldi	r21, 0x00	; 0
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <xQueueGenericSend>
			vPortFree(frame);
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7c:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <vPortFree>
			return true;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	05 c0       	rjmp	.+10     	; 0x1d8e <send_bytes+0xfc>
		}
	}
	vPortFree(frame);
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <vPortFree>
	return false;
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
}
    1d8e:	27 96       	adiw	r28, 0x07	; 7
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	08 95       	ret

00001da0 <handle_serial_input>:



void handle_serial_input(uint8_t *buffer, uint8_t length)
{
    1da0:	cf 93       	push	r28
    1da2:	df 93       	push	r29
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <handle_serial_input+0x6>
    1da6:	1f 92       	push	r1
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	9a 83       	std	Y+2, r25	; 0x02
    1dae:	89 83       	std	Y+1, r24	; 0x01
    1db0:	6b 83       	std	Y+3, r22	; 0x03
	if(length == 1)
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	a9 f4       	brne	.+42     	; 0x1de2 <handle_serial_input+0x42>
	{ //keyboard input
		 if(*buffer == 0x26)
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	80 81       	ld	r24, Z
    1dc0:	86 32       	cpi	r24, 0x26	; 38
    1dc2:	29 f4       	brne	.+10     	; 0x1dce <handle_serial_input+0x2e>
		bat_move(PL_TWO, D_UP);
    1dc4:	62 e0       	ldi	r22, 0x02	; 2
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	0e 94 8d 01 	call	0x31a	; 0x31a <bat_move>
		
		else if(*buffer == 0x28)
		bat_move(PL_TWO, D_DOWN);
	}
    1dcc:	0a c0       	rjmp	.+20     	; 0x1de2 <handle_serial_input+0x42>
	if(length == 1)
	{ //keyboard input
		 if(*buffer == 0x26)
		bat_move(PL_TWO, D_UP);
		
		else if(*buffer == 0x28)
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	80 81       	ld	r24, Z
    1dd6:	88 32       	cpi	r24, 0x28	; 40
    1dd8:	21 f4       	brne	.+8      	; 0x1de2 <handle_serial_input+0x42>
		bat_move(PL_TWO, D_DOWN);
    1dda:	61 e0       	ldi	r22, 0x01	; 1
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	0e 94 8d 01 	call	0x31a	; 0x31a <bat_move>
	}
    1de2:	00 00       	nop
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	08 95       	ret

00001df0 <_com_call_back>:
}

// ----------------------------------------------------------------------------------------------------------------------
uint8_t com_send_bytes(uint8_t *bytes, uint8_t len) {
	return serial_send_bytes(_com_serial_instance, bytes, len);
}
    1df0:	cf 93       	push	r28
    1df2:	df 93       	push	r29
    1df4:	00 d0       	rcall	.+0      	; 0x1df6 <_com_call_back+0x6>
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <_com_call_back+0x8>
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	9b 83       	std	Y+3, r25	; 0x03
    1dfe:	8a 83       	std	Y+2, r24	; 0x02
    1e00:	6c 83       	std	Y+4, r22	; 0x04
    1e02:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <_x_rx_com_queue>
    1e06:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <_x_rx_com_queue+0x1>
    1e0a:	89 2b       	or	r24, r25
    1e0c:	99 f0       	breq	.+38     	; 0x1e34 <_com_call_back+0x44>
    1e0e:	19 82       	std	Y+1, r1	; 0x01
    1e10:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <_x_rx_com_queue>
    1e14:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <_x_rx_com_queue+0x1>
    1e18:	be 01       	movw	r22, r28
    1e1a:	6c 5f       	subi	r22, 0xFC	; 252
    1e1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	ae 01       	movw	r20, r28
    1e22:	4f 5f       	subi	r20, 0xFF	; 255
    1e24:	5f 4f       	sbci	r21, 0xFF	; 255
    1e26:	0e 94 a9 1b 	call	0x3752	; 0x3752 <xQueueGenericSendFromISR>
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	88 23       	and	r24, r24
    1e2e:	11 f0       	breq	.+4      	; 0x1e34 <_com_call_back+0x44>
    1e30:	0e 94 62 14 	call	0x28c4	; 0x28c4 <vPortYield>
    1e34:	00 00       	nop
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	08 95       	ret

00001e44 <init_com>:
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <init_com+0x6>
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	9a 83       	std	Y+2, r25	; 0x02
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	9a 81       	ldd	r25, Y+2	; 0x02
    1e56:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <_x_rx_com_queue+0x1>
    1e5a:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <_x_rx_com_queue>
    1e5e:	00 00       	nop
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	df 91       	pop	r29
    1e66:	cf 91       	pop	r28
    1e68:	08 95       	ret

00001e6a <init_display_timer>:
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    1e6e:	00 d0       	rcall	.+0      	; 0x1e70 <init_display_timer+0x6>
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	9a 83       	std	Y+2, r25	; 0x02
    1e76:	89 83       	std	Y+1, r24	; 0x01
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7c:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <cb_ptr+0x1>
    1e80:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <cb_ptr>
    1e84:	87 e4       	ldi	r24, 0x47	; 71
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	2a e0       	ldi	r18, 0x0A	; 10
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	20 83       	st	Z, r18
    1e8e:	84 e4       	ldi	r24, 0x44	; 68
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	24 e4       	ldi	r18, 0x44	; 68
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	f9 01       	movw	r30, r18
    1e98:	20 81       	ld	r18, Z
    1e9a:	22 60       	ori	r18, 0x02	; 2
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	20 83       	st	Z, r18
    1ea0:	8e e6       	ldi	r24, 0x6E	; 110
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	2e e6       	ldi	r18, 0x6E	; 110
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	f9 01       	movw	r30, r18
    1eaa:	20 81       	ld	r18, Z
    1eac:	22 60       	ori	r18, 0x02	; 2
    1eae:	fc 01       	movw	r30, r24
    1eb0:	20 83       	st	Z, r18
    1eb2:	85 e4       	ldi	r24, 0x45	; 69
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	25 e4       	ldi	r18, 0x45	; 69
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	f9 01       	movw	r30, r18
    1ebc:	20 81       	ld	r18, Z
    1ebe:	25 60       	ori	r18, 0x05	; 5
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	20 83       	st	Z, r18
    1ec4:	00 00       	nop
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	df 91       	pop	r29
    1ecc:	cf 91       	pop	r28
    1ece:	08 95       	ret

00001ed0 <__vector_16>:
    1ed0:	1f 92       	push	r1
    1ed2:	0f 92       	push	r0
    1ed4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1ed8:	0f 92       	push	r0
    1eda:	11 24       	eor	r1, r1
    1edc:	2f 93       	push	r18
    1ede:	3f 93       	push	r19
    1ee0:	4f 93       	push	r20
    1ee2:	5f 93       	push	r21
    1ee4:	6f 93       	push	r22
    1ee6:	7f 93       	push	r23
    1ee8:	8f 93       	push	r24
    1eea:	9f 93       	push	r25
    1eec:	af 93       	push	r26
    1eee:	bf 93       	push	r27
    1ef0:	ef 93       	push	r30
    1ef2:	ff 93       	push	r31
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <cb_ptr>
    1f00:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <cb_ptr+0x1>
    1f04:	89 2b       	or	r24, r25
    1f06:	31 f0       	breq	.+12     	; 0x1f14 <__vector_16+0x44>
    1f08:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <cb_ptr>
    1f0c:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <cb_ptr+0x1>
    1f10:	fc 01       	movw	r30, r24
    1f12:	09 95       	icall
    1f14:	00 00       	nop
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	ff 91       	pop	r31
    1f1c:	ef 91       	pop	r30
    1f1e:	bf 91       	pop	r27
    1f20:	af 91       	pop	r26
    1f22:	9f 91       	pop	r25
    1f24:	8f 91       	pop	r24
    1f26:	7f 91       	pop	r23
    1f28:	6f 91       	pop	r22
    1f2a:	5f 91       	pop	r21
    1f2c:	4f 91       	pop	r20
    1f2e:	3f 91       	pop	r19
    1f30:	2f 91       	pop	r18
    1f32:	0f 90       	pop	r0
    1f34:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1f38:	0f 90       	pop	r0
    1f3a:	1f 90       	pop	r1
    1f3c:	18 95       	reti

00001f3e <com_send_byte>:
uint8_t com_send_byte(uint8_t byte) {
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	1f 92       	push	r1
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	89 83       	std	Y+1, r24	; 0x01
	return serial_send_byte(_com_serial_instance, byte);
    1f4a:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <_com_serial_instance>
    1f4e:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <_com_serial_instance+0x1>
    1f52:	69 81       	ldd	r22, Y+1	; 0x01
    1f54:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <serial_send_byte>
}
    1f58:	0f 90       	pop	r0
    1f5a:	df 91       	pop	r29
    1f5c:	cf 91       	pop	r28
    1f5e:	08 95       	ret

00001f60 <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
    1f60:	8f 92       	push	r8
    1f62:	9f 92       	push	r9
    1f64:	af 92       	push	r10
    1f66:	bf 92       	push	r11
    1f68:	cf 92       	push	r12
    1f6a:	df 92       	push	r13
    1f6c:	ef 92       	push	r14
    1f6e:	0f 93       	push	r16
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
    1f78:	8d e1       	ldi	r24, 0x1D	; 29
    1f7a:	92 e0       	ldi	r25, 0x02	; 2
    1f7c:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <buffer_init>
	buffer_init(&_com_tx_buffer);
    1f80:	80 e4       	ldi	r24, 0x40	; 64
    1f82:	92 e0       	ldi	r25, 0x02	; 2
    1f84:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
    1f88:	0f 2e       	mov	r0, r31
    1f8a:	f8 ef       	ldi	r31, 0xF8	; 248
    1f8c:	8f 2e       	mov	r8, r31
    1f8e:	fe e0       	ldi	r31, 0x0E	; 14
    1f90:	9f 2e       	mov	r9, r31
    1f92:	f0 2d       	mov	r31, r0
    1f94:	0f 2e       	mov	r0, r31
    1f96:	f0 e4       	ldi	r31, 0x40	; 64
    1f98:	af 2e       	mov	r10, r31
    1f9a:	f2 e0       	ldi	r31, 0x02	; 2
    1f9c:	bf 2e       	mov	r11, r31
    1f9e:	f0 2d       	mov	r31, r0
    1fa0:	0f 2e       	mov	r0, r31
    1fa2:	fd e1       	ldi	r31, 0x1D	; 29
    1fa4:	cf 2e       	mov	r12, r31
    1fa6:	f2 e0       	ldi	r31, 0x02	; 2
    1fa8:	df 2e       	mov	r13, r31
    1faa:	f0 2d       	mov	r31, r0
    1fac:	e1 2c       	mov	r14, r1
    1fae:	00 e0       	ldi	r16, 0x00	; 0
    1fb0:	23 e0       	ldi	r18, 0x03	; 3
    1fb2:	40 e0       	ldi	r20, 0x00	; 0
    1fb4:	52 ec       	ldi	r21, 0xC2	; 194
    1fb6:	61 e0       	ldi	r22, 0x01	; 1
    1fb8:	70 e0       	ldi	r23, 0x00	; 0
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	0e 94 99 15 	call	0x2b32	; 0x2b32 <serial_new_instance>
    1fc0:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <_com_serial_instance+0x1>
    1fc4:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <_com_serial_instance>
	
	// Set Joystick pins as inputs:
	DDRC &= ~(_BV(PINC0) | _BV(PINC1) | _BV(PINC6) | _BV(PINC7)); 
    1fc8:	87 e2       	ldi	r24, 0x27	; 39
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	27 e2       	ldi	r18, 0x27	; 39
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	f9 01       	movw	r30, r18
    1fd2:	20 81       	ld	r18, Z
    1fd4:	2c 73       	andi	r18, 0x3C	; 60
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	20 83       	st	Z, r18
	DDRD &= ~_BV(PIND3);
    1fda:	8a e2       	ldi	r24, 0x2A	; 42
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	2a e2       	ldi	r18, 0x2A	; 42
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	f9 01       	movw	r30, r18
    1fe4:	20 81       	ld	r18, Z
    1fe6:	27 7f       	andi	r18, 0xF7	; 247
    1fe8:	fc 01       	movw	r30, r24
    1fea:	20 83       	st	Z, r18

	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
    1fec:	88 e2       	ldi	r24, 0x28	; 40
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	28 e2       	ldi	r18, 0x28	; 40
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	f9 01       	movw	r30, r18
    1ff6:	20 81       	ld	r18, Z
    1ff8:	23 6c       	ori	r18, 0xC3	; 195
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
    1ffe:	8b e2       	ldi	r24, 0x2B	; 43
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	2b e2       	ldi	r18, 0x2B	; 43
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	f9 01       	movw	r30, r18
    2008:	20 81       	ld	r18, Z
    200a:	28 60       	ori	r18, 0x08	; 8
    200c:	fc 01       	movw	r30, r24
    200e:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
    2010:	8a e2       	ldi	r24, 0x2A	; 42
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	2a e2       	ldi	r18, 0x2A	; 42
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	f9 01       	movw	r30, r18
    201a:	20 81       	ld	r18, Z
    201c:	24 67       	ori	r18, 0x74	; 116
    201e:	fc 01       	movw	r30, r24
    2020:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
    2022:	8b e2       	ldi	r24, 0x2B	; 43
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	2b e2       	ldi	r18, 0x2B	; 43
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	f9 01       	movw	r30, r18
    202c:	20 81       	ld	r18, Z
    202e:	20 64       	ori	r18, 0x40	; 64
    2030:	fc 01       	movw	r30, r24
    2032:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
    2034:	81 e2       	ldi	r24, 0x21	; 33
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	fc 01       	movw	r30, r24
    203a:	80 81       	ld	r24, Z
    203c:	81 e2       	ldi	r24, 0x21	; 33
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	2f ef       	ldi	r18, 0xFF	; 255
    2042:	fc 01       	movw	r30, r24
    2044:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
    2046:	84 e2       	ldi	r24, 0x24	; 36
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	24 e2       	ldi	r18, 0x24	; 36
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	f9 01       	movw	r30, r18
    2050:	20 81       	ld	r18, Z
    2052:	23 60       	ori	r18, 0x03	; 3
    2054:	fc 01       	movw	r30, r24
    2056:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
    2058:	84 e2       	ldi	r24, 0x24	; 36
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	24 e2       	ldi	r18, 0x24	; 36
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	f9 01       	movw	r30, r18
    2062:	20 81       	ld	r18, Z
    2064:	2c 63       	ori	r18, 0x3C	; 60
    2066:	fc 01       	movw	r30, r24
    2068:	20 83       	st	Z, r18
}
    206a:	00 00       	nop
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	0f 91       	pop	r16
    2072:	ef 90       	pop	r14
    2074:	df 90       	pop	r13
    2076:	cf 90       	pop	r12
    2078:	bf 90       	pop	r11
    207a:	af 90       	pop	r10
    207c:	9f 90       	pop	r9
    207e:	8f 90       	pop	r8
    2080:	08 95       	ret

00002082 <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
    2082:	cf 93       	push	r28
    2084:	df 93       	push	r29
    2086:	1f 92       	push	r1
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
    208e:	85 e2       	ldi	r24, 0x25	; 37
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	25 e2       	ldi	r18, 0x25	; 37
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	f9 01       	movw	r30, r18
    2098:	20 81       	ld	r18, Z
    209a:	23 7c       	andi	r18, 0xC3	; 195
    209c:	fc 01       	movw	r30, r24
    209e:	20 83       	st	Z, r18
		PORTB |= task_no << 2;
    20a0:	85 e2       	ldi	r24, 0x25	; 37
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	25 e2       	ldi	r18, 0x25	; 37
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	f9 01       	movw	r30, r18
    20aa:	20 81       	ld	r18, Z
    20ac:	42 2f       	mov	r20, r18
    20ae:	29 81       	ldd	r18, Y+1	; 0x01
    20b0:	22 2f       	mov	r18, r18
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	22 0f       	add	r18, r18
    20b6:	33 1f       	adc	r19, r19
    20b8:	22 0f       	add	r18, r18
    20ba:	33 1f       	adc	r19, r19
    20bc:	24 2b       	or	r18, r20
    20be:	fc 01       	movw	r30, r24
    20c0:	20 83       	st	Z, r18
	}
    20c2:	00 00       	nop
    20c4:	0f 90       	pop	r0
    20c6:	df 91       	pop	r29
    20c8:	cf 91       	pop	r28
    20ca:	08 95       	ret

000020cc <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	1f 92       	push	r1
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
    20d6:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
    20d8:	85 e2       	ldi	r24, 0x25	; 37
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	25 e2       	ldi	r18, 0x25	; 37
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	f9 01       	movw	r30, r18
    20e2:	20 81       	ld	r18, Z
    20e4:	23 7c       	andi	r18, 0xC3	; 195
    20e6:	fc 01       	movw	r30, r24
    20e8:	20 83       	st	Z, r18
	}
    20ea:	00 00       	nop
    20ec:	0f 90       	pop	r0
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	08 95       	ret

000020f4 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
    20f4:	cf 93       	push	r28
    20f6:	df 93       	push	r29
    20f8:	00 d0       	rcall	.+0      	; 0x20fa <buffer_init+0x6>
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	9a 83       	std	Y+2, r25	; 0x02
    2100:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	9a 81       	ldd	r25, Y+2	; 0x02
    2106:	fc 01       	movw	r30, r24
    2108:	10 a2       	std	Z+32, r1	; 0x20
	buffer->out_i = 0;
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	9a 81       	ldd	r25, Y+2	; 0x02
    210e:	fc 01       	movw	r30, r24
    2110:	11 a2       	std	Z+33, r1	; 0x21
	buffer->no_in_buffer = 0;
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	9a 81       	ldd	r25, Y+2	; 0x02
    2116:	fc 01       	movw	r30, r24
    2118:	12 a2       	std	Z+34, r1	; 0x22
}
    211a:	00 00       	nop
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	df 91       	pop	r29
    2122:	cf 91       	pop	r28
    2124:	08 95       	ret

00002126 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	00 d0       	rcall	.+0      	; 0x212c <buffer_get_item+0x6>
    212c:	00 d0       	rcall	.+0      	; 0x212e <buffer_get_item+0x8>
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	9a 83       	std	Y+2, r25	; 0x02
    2134:	89 83       	std	Y+1, r24	; 0x01
    2136:	7c 83       	std	Y+4, r23	; 0x04
    2138:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	9a 81       	ldd	r25, Y+2	; 0x02
    213e:	fc 01       	movw	r30, r24
    2140:	82 a1       	ldd	r24, Z+34	; 0x22
    2142:	88 23       	and	r24, r24
    2144:	81 f1       	breq	.+96     	; 0x21a6 <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	9a 81       	ldd	r25, Y+2	; 0x02
    214a:	fc 01       	movw	r30, r24
    214c:	81 a1       	ldd	r24, Z+33	; 0x21
    214e:	88 2f       	mov	r24, r24
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	29 81       	ldd	r18, Y+1	; 0x01
    2154:	3a 81       	ldd	r19, Y+2	; 0x02
    2156:	82 0f       	add	r24, r18
    2158:	93 1f       	adc	r25, r19
    215a:	fc 01       	movw	r30, r24
    215c:	20 81       	ld	r18, Z
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	9c 81       	ldd	r25, Y+4	; 0x04
    2162:	fc 01       	movw	r30, r24
    2164:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	9a 81       	ldd	r25, Y+2	; 0x02
    216a:	fc 01       	movw	r30, r24
    216c:	81 a1       	ldd	r24, Z+33	; 0x21
    216e:	88 2f       	mov	r24, r24
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	01 96       	adiw	r24, 0x01	; 1
    2174:	8f 71       	andi	r24, 0x1F	; 31
    2176:	90 78       	andi	r25, 0x80	; 128
    2178:	99 23       	and	r25, r25
    217a:	24 f4       	brge	.+8      	; 0x2184 <buffer_get_item+0x5e>
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	80 6e       	ori	r24, 0xE0	; 224
    2180:	9f 6f       	ori	r25, 0xFF	; 255
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	28 2f       	mov	r18, r24
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	9a 81       	ldd	r25, Y+2	; 0x02
    218a:	fc 01       	movw	r30, r24
    218c:	21 a3       	std	Z+33, r18	; 0x21
		buffer->no_in_buffer--;
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	9a 81       	ldd	r25, Y+2	; 0x02
    2192:	fc 01       	movw	r30, r24
    2194:	82 a1       	ldd	r24, Z+34	; 0x22
    2196:	2f ef       	ldi	r18, 0xFF	; 255
    2198:	28 0f       	add	r18, r24
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	9a 81       	ldd	r25, Y+2	; 0x02
    219e:	fc 01       	movw	r30, r24
    21a0:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	01 c0       	rjmp	.+2      	; 0x21a8 <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
    21a6:	81 e0       	ldi	r24, 0x01	; 1
}
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	08 95       	ret

000021b6 <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
    21ba:	00 d0       	rcall	.+0      	; 0x21bc <buffer_put_item+0x6>
    21bc:	1f 92       	push	r1
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	9a 83       	std	Y+2, r25	; 0x02
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	9a 81       	ldd	r25, Y+2	; 0x02
    21cc:	fc 01       	movw	r30, r24
    21ce:	82 a1       	ldd	r24, Z+34	; 0x22
    21d0:	80 32       	cpi	r24, 0x20	; 32
    21d2:	68 f5       	brcc	.+90     	; 0x222e <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	9a 81       	ldd	r25, Y+2	; 0x02
    21d8:	fc 01       	movw	r30, r24
    21da:	80 a1       	ldd	r24, Z+32	; 0x20
    21dc:	88 2f       	mov	r24, r24
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	29 81       	ldd	r18, Y+1	; 0x01
    21e2:	3a 81       	ldd	r19, Y+2	; 0x02
    21e4:	82 0f       	add	r24, r18
    21e6:	93 1f       	adc	r25, r19
    21e8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ea:	fc 01       	movw	r30, r24
    21ec:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	9a 81       	ldd	r25, Y+2	; 0x02
    21f2:	fc 01       	movw	r30, r24
    21f4:	80 a1       	ldd	r24, Z+32	; 0x20
    21f6:	88 2f       	mov	r24, r24
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	01 96       	adiw	r24, 0x01	; 1
    21fc:	8f 71       	andi	r24, 0x1F	; 31
    21fe:	90 78       	andi	r25, 0x80	; 128
    2200:	99 23       	and	r25, r25
    2202:	24 f4       	brge	.+8      	; 0x220c <buffer_put_item+0x56>
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	80 6e       	ori	r24, 0xE0	; 224
    2208:	9f 6f       	ori	r25, 0xFF	; 255
    220a:	01 96       	adiw	r24, 0x01	; 1
    220c:	28 2f       	mov	r18, r24
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	9a 81       	ldd	r25, Y+2	; 0x02
    2212:	fc 01       	movw	r30, r24
    2214:	20 a3       	std	Z+32, r18	; 0x20
		buffer->no_in_buffer++;
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	9a 81       	ldd	r25, Y+2	; 0x02
    221a:	fc 01       	movw	r30, r24
    221c:	82 a1       	ldd	r24, Z+34	; 0x22
    221e:	21 e0       	ldi	r18, 0x01	; 1
    2220:	28 0f       	add	r18, r24
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	9a 81       	ldd	r25, Y+2	; 0x02
    2226:	fc 01       	movw	r30, r24
    2228:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	01 c0       	rjmp	.+2      	; 0x2230 <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
    222e:	82 e0       	ldi	r24, 0x02	; 2
}
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	df 91       	pop	r29
    2238:	cf 91       	pop	r28
    223a:	08 95       	ret

0000223c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	00 d0       	rcall	.+0      	; 0x2242 <vListInitialise+0x6>
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	9a 83       	std	Y+2, r25	; 0x02
    2248:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	9a 81       	ldd	r25, Y+2	; 0x02
    224e:	9c 01       	movw	r18, r24
    2250:	2d 5f       	subi	r18, 0xFD	; 253
    2252:	3f 4f       	sbci	r19, 0xFF	; 255
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	9a 81       	ldd	r25, Y+2	; 0x02
    2258:	fc 01       	movw	r30, r24
    225a:	32 83       	std	Z+2, r19	; 0x02
    225c:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	9a 81       	ldd	r25, Y+2	; 0x02
    2262:	2f ef       	ldi	r18, 0xFF	; 255
    2264:	3f ef       	ldi	r19, 0xFF	; 255
    2266:	fc 01       	movw	r30, r24
    2268:	34 83       	std	Z+4, r19	; 0x04
    226a:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	9a 81       	ldd	r25, Y+2	; 0x02
    2270:	9c 01       	movw	r18, r24
    2272:	2d 5f       	subi	r18, 0xFD	; 253
    2274:	3f 4f       	sbci	r19, 0xFF	; 255
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	9a 81       	ldd	r25, Y+2	; 0x02
    227a:	fc 01       	movw	r30, r24
    227c:	36 83       	std	Z+6, r19	; 0x06
    227e:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	9a 81       	ldd	r25, Y+2	; 0x02
    2284:	9c 01       	movw	r18, r24
    2286:	2d 5f       	subi	r18, 0xFD	; 253
    2288:	3f 4f       	sbci	r19, 0xFF	; 255
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	9a 81       	ldd	r25, Y+2	; 0x02
    228e:	fc 01       	movw	r30, r24
    2290:	30 87       	std	Z+8, r19	; 0x08
    2292:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	9a 81       	ldd	r25, Y+2	; 0x02
    2298:	fc 01       	movw	r30, r24
    229a:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    229c:	00 00       	nop
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	df 91       	pop	r29
    22a4:	cf 91       	pop	r28
    22a6:	08 95       	ret

000022a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    22a8:	cf 93       	push	r28
    22aa:	df 93       	push	r29
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <vListInitialiseItem+0x6>
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	9a 83       	std	Y+2, r25	; 0x02
    22b4:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ba:	fc 01       	movw	r30, r24
    22bc:	11 86       	std	Z+9, r1	; 0x09
    22be:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    22c0:	00 00       	nop
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	08 95       	ret

000022cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    22cc:	cf 93       	push	r28
    22ce:	df 93       	push	r29
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <vListInsertEnd+0x6>
    22d2:	00 d0       	rcall	.+0      	; 0x22d4 <vListInsertEnd+0x8>
    22d4:	00 d0       	rcall	.+0      	; 0x22d6 <vListInsertEnd+0xa>
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	9c 83       	std	Y+4, r25	; 0x04
    22dc:	8b 83       	std	Y+3, r24	; 0x03
    22de:	7e 83       	std	Y+6, r23	; 0x06
    22e0:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	9c 81       	ldd	r25, Y+4	; 0x04
    22e6:	fc 01       	movw	r30, r24
    22e8:	81 81       	ldd	r24, Z+1	; 0x01
    22ea:	92 81       	ldd	r25, Z+2	; 0x02
    22ec:	9a 83       	std	Y+2, r25	; 0x02
    22ee:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    22f0:	8d 81       	ldd	r24, Y+5	; 0x05
    22f2:	9e 81       	ldd	r25, Y+6	; 0x06
    22f4:	29 81       	ldd	r18, Y+1	; 0x01
    22f6:	3a 81       	ldd	r19, Y+2	; 0x02
    22f8:	fc 01       	movw	r30, r24
    22fa:	33 83       	std	Z+3, r19	; 0x03
    22fc:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	9a 81       	ldd	r25, Y+2	; 0x02
    2302:	fc 01       	movw	r30, r24
    2304:	24 81       	ldd	r18, Z+4	; 0x04
    2306:	35 81       	ldd	r19, Z+5	; 0x05
    2308:	8d 81       	ldd	r24, Y+5	; 0x05
    230a:	9e 81       	ldd	r25, Y+6	; 0x06
    230c:	fc 01       	movw	r30, r24
    230e:	35 83       	std	Z+5, r19	; 0x05
    2310:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	9a 81       	ldd	r25, Y+2	; 0x02
    2316:	fc 01       	movw	r30, r24
    2318:	84 81       	ldd	r24, Z+4	; 0x04
    231a:	95 81       	ldd	r25, Z+5	; 0x05
    231c:	2d 81       	ldd	r18, Y+5	; 0x05
    231e:	3e 81       	ldd	r19, Y+6	; 0x06
    2320:	fc 01       	movw	r30, r24
    2322:	33 83       	std	Z+3, r19	; 0x03
    2324:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	9a 81       	ldd	r25, Y+2	; 0x02
    232a:	2d 81       	ldd	r18, Y+5	; 0x05
    232c:	3e 81       	ldd	r19, Y+6	; 0x06
    232e:	fc 01       	movw	r30, r24
    2330:	35 83       	std	Z+5, r19	; 0x05
    2332:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2334:	8d 81       	ldd	r24, Y+5	; 0x05
    2336:	9e 81       	ldd	r25, Y+6	; 0x06
    2338:	2b 81       	ldd	r18, Y+3	; 0x03
    233a:	3c 81       	ldd	r19, Y+4	; 0x04
    233c:	fc 01       	movw	r30, r24
    233e:	31 87       	std	Z+9, r19	; 0x09
    2340:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	9c 81       	ldd	r25, Y+4	; 0x04
    2346:	fc 01       	movw	r30, r24
    2348:	80 81       	ld	r24, Z
    234a:	21 e0       	ldi	r18, 0x01	; 1
    234c:	28 0f       	add	r18, r24
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	9c 81       	ldd	r25, Y+4	; 0x04
    2352:	fc 01       	movw	r30, r24
    2354:	20 83       	st	Z, r18
}
    2356:	00 00       	nop
    2358:	26 96       	adiw	r28, 0x06	; 6
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	df 91       	pop	r29
    2366:	cf 91       	pop	r28
    2368:	08 95       	ret

0000236a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	28 97       	sbiw	r28, 0x08	; 8
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	9e 83       	std	Y+6, r25	; 0x06
    2380:	8d 83       	std	Y+5, r24	; 0x05
    2382:	78 87       	std	Y+8, r23	; 0x08
    2384:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2386:	8f 81       	ldd	r24, Y+7	; 0x07
    2388:	98 85       	ldd	r25, Y+8	; 0x08
    238a:	fc 01       	movw	r30, r24
    238c:	80 81       	ld	r24, Z
    238e:	91 81       	ldd	r25, Z+1	; 0x01
    2390:	9c 83       	std	Y+4, r25	; 0x04
    2392:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	9c 81       	ldd	r25, Y+4	; 0x04
    2398:	01 96       	adiw	r24, 0x01	; 1
    239a:	41 f4       	brne	.+16     	; 0x23ac <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    239c:	8d 81       	ldd	r24, Y+5	; 0x05
    239e:	9e 81       	ldd	r25, Y+6	; 0x06
    23a0:	fc 01       	movw	r30, r24
    23a2:	87 81       	ldd	r24, Z+7	; 0x07
    23a4:	90 85       	ldd	r25, Z+8	; 0x08
    23a6:	9a 83       	std	Y+2, r25	; 0x02
    23a8:	89 83       	std	Y+1, r24	; 0x01
    23aa:	1a c0       	rjmp	.+52     	; 0x23e0 <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    23ac:	8d 81       	ldd	r24, Y+5	; 0x05
    23ae:	9e 81       	ldd	r25, Y+6	; 0x06
    23b0:	03 96       	adiw	r24, 0x03	; 3
    23b2:	9a 83       	std	Y+2, r25	; 0x02
    23b4:	89 83       	std	Y+1, r24	; 0x01
    23b6:	07 c0       	rjmp	.+14     	; 0x23c6 <vListInsert+0x5c>
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	9a 81       	ldd	r25, Y+2	; 0x02
    23bc:	fc 01       	movw	r30, r24
    23be:	82 81       	ldd	r24, Z+2	; 0x02
    23c0:	93 81       	ldd	r25, Z+3	; 0x03
    23c2:	9a 83       	std	Y+2, r25	; 0x02
    23c4:	89 83       	std	Y+1, r24	; 0x01
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ca:	fc 01       	movw	r30, r24
    23cc:	82 81       	ldd	r24, Z+2	; 0x02
    23ce:	93 81       	ldd	r25, Z+3	; 0x03
    23d0:	fc 01       	movw	r30, r24
    23d2:	20 81       	ld	r18, Z
    23d4:	31 81       	ldd	r19, Z+1	; 0x01
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	9c 81       	ldd	r25, Y+4	; 0x04
    23da:	82 17       	cp	r24, r18
    23dc:	93 07       	cpc	r25, r19
    23de:	60 f7       	brcc	.-40     	; 0x23b8 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	9a 81       	ldd	r25, Y+2	; 0x02
    23e4:	fc 01       	movw	r30, r24
    23e6:	22 81       	ldd	r18, Z+2	; 0x02
    23e8:	33 81       	ldd	r19, Z+3	; 0x03
    23ea:	8f 81       	ldd	r24, Y+7	; 0x07
    23ec:	98 85       	ldd	r25, Y+8	; 0x08
    23ee:	fc 01       	movw	r30, r24
    23f0:	33 83       	std	Z+3, r19	; 0x03
    23f2:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    23f4:	8f 81       	ldd	r24, Y+7	; 0x07
    23f6:	98 85       	ldd	r25, Y+8	; 0x08
    23f8:	fc 01       	movw	r30, r24
    23fa:	82 81       	ldd	r24, Z+2	; 0x02
    23fc:	93 81       	ldd	r25, Z+3	; 0x03
    23fe:	2f 81       	ldd	r18, Y+7	; 0x07
    2400:	38 85       	ldd	r19, Y+8	; 0x08
    2402:	fc 01       	movw	r30, r24
    2404:	35 83       	std	Z+5, r19	; 0x05
    2406:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    2408:	8f 81       	ldd	r24, Y+7	; 0x07
    240a:	98 85       	ldd	r25, Y+8	; 0x08
    240c:	29 81       	ldd	r18, Y+1	; 0x01
    240e:	3a 81       	ldd	r19, Y+2	; 0x02
    2410:	fc 01       	movw	r30, r24
    2412:	35 83       	std	Z+5, r19	; 0x05
    2414:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	9a 81       	ldd	r25, Y+2	; 0x02
    241a:	2f 81       	ldd	r18, Y+7	; 0x07
    241c:	38 85       	ldd	r19, Y+8	; 0x08
    241e:	fc 01       	movw	r30, r24
    2420:	33 83       	std	Z+3, r19	; 0x03
    2422:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2424:	8f 81       	ldd	r24, Y+7	; 0x07
    2426:	98 85       	ldd	r25, Y+8	; 0x08
    2428:	2d 81       	ldd	r18, Y+5	; 0x05
    242a:	3e 81       	ldd	r19, Y+6	; 0x06
    242c:	fc 01       	movw	r30, r24
    242e:	31 87       	std	Z+9, r19	; 0x09
    2430:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    2432:	8d 81       	ldd	r24, Y+5	; 0x05
    2434:	9e 81       	ldd	r25, Y+6	; 0x06
    2436:	fc 01       	movw	r30, r24
    2438:	80 81       	ld	r24, Z
    243a:	21 e0       	ldi	r18, 0x01	; 1
    243c:	28 0f       	add	r18, r24
    243e:	8d 81       	ldd	r24, Y+5	; 0x05
    2440:	9e 81       	ldd	r25, Y+6	; 0x06
    2442:	fc 01       	movw	r30, r24
    2444:	20 83       	st	Z, r18
}
    2446:	00 00       	nop
    2448:	28 96       	adiw	r28, 0x08	; 8
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	08 95       	ret

0000245a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	00 d0       	rcall	.+0      	; 0x2460 <uxListRemove+0x6>
    2460:	00 d0       	rcall	.+0      	; 0x2462 <uxListRemove+0x8>
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	9c 83       	std	Y+4, r25	; 0x04
    2468:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	9c 81       	ldd	r25, Y+4	; 0x04
    246e:	fc 01       	movw	r30, r24
    2470:	80 85       	ldd	r24, Z+8	; 0x08
    2472:	91 85       	ldd	r25, Z+9	; 0x09
    2474:	9a 83       	std	Y+2, r25	; 0x02
    2476:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	9c 81       	ldd	r25, Y+4	; 0x04
    247c:	fc 01       	movw	r30, r24
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	2b 81       	ldd	r18, Y+3	; 0x03
    2484:	3c 81       	ldd	r19, Y+4	; 0x04
    2486:	f9 01       	movw	r30, r18
    2488:	24 81       	ldd	r18, Z+4	; 0x04
    248a:	35 81       	ldd	r19, Z+5	; 0x05
    248c:	fc 01       	movw	r30, r24
    248e:	35 83       	std	Z+5, r19	; 0x05
    2490:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	9c 81       	ldd	r25, Y+4	; 0x04
    2496:	fc 01       	movw	r30, r24
    2498:	84 81       	ldd	r24, Z+4	; 0x04
    249a:	95 81       	ldd	r25, Z+5	; 0x05
    249c:	2b 81       	ldd	r18, Y+3	; 0x03
    249e:	3c 81       	ldd	r19, Y+4	; 0x04
    24a0:	f9 01       	movw	r30, r18
    24a2:	22 81       	ldd	r18, Z+2	; 0x02
    24a4:	33 81       	ldd	r19, Z+3	; 0x03
    24a6:	fc 01       	movw	r30, r24
    24a8:	33 83       	std	Z+3, r19	; 0x03
    24aa:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	9a 81       	ldd	r25, Y+2	; 0x02
    24b0:	fc 01       	movw	r30, r24
    24b2:	21 81       	ldd	r18, Z+1	; 0x01
    24b4:	32 81       	ldd	r19, Z+2	; 0x02
    24b6:	8b 81       	ldd	r24, Y+3	; 0x03
    24b8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ba:	28 17       	cp	r18, r24
    24bc:	39 07       	cpc	r19, r25
    24be:	51 f4       	brne	.+20     	; 0x24d4 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    24c0:	8b 81       	ldd	r24, Y+3	; 0x03
    24c2:	9c 81       	ldd	r25, Y+4	; 0x04
    24c4:	fc 01       	movw	r30, r24
    24c6:	24 81       	ldd	r18, Z+4	; 0x04
    24c8:	35 81       	ldd	r19, Z+5	; 0x05
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	9a 81       	ldd	r25, Y+2	; 0x02
    24ce:	fc 01       	movw	r30, r24
    24d0:	32 83       	std	Z+2, r19	; 0x02
    24d2:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    24d4:	8b 81       	ldd	r24, Y+3	; 0x03
    24d6:	9c 81       	ldd	r25, Y+4	; 0x04
    24d8:	fc 01       	movw	r30, r24
    24da:	11 86       	std	Z+9, r1	; 0x09
    24dc:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	9a 81       	ldd	r25, Y+2	; 0x02
    24e2:	fc 01       	movw	r30, r24
    24e4:	80 81       	ld	r24, Z
    24e6:	2f ef       	ldi	r18, 0xFF	; 255
    24e8:	28 0f       	add	r18, r24
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	9a 81       	ldd	r25, Y+2	; 0x02
    24ee:	fc 01       	movw	r30, r24
    24f0:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	9a 81       	ldd	r25, Y+2	; 0x02
    24f6:	fc 01       	movw	r30, r24
    24f8:	80 81       	ld	r24, Z
}
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	df 91       	pop	r29
    2504:	cf 91       	pop	r28
    2506:	08 95       	ret

00002508 <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    2508:	cf 93       	push	r28
    250a:	df 93       	push	r29
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	28 97       	sbiw	r28, 0x08	; 8
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	f8 94       	cli
    2516:	de bf       	out	0x3e, r29	; 62
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	cd bf       	out	0x3d, r28	; 61
    251c:	9c 83       	std	Y+4, r25	; 0x04
    251e:	8b 83       	std	Y+3, r24	; 0x03
    2520:	7e 83       	std	Y+6, r23	; 0x06
    2522:	6d 83       	std	Y+5, r22	; 0x05
    2524:	58 87       	std	Y+8, r21	; 0x08
    2526:	4f 83       	std	Y+7, r20	; 0x07
    2528:	8b 81       	ldd	r24, Y+3	; 0x03
    252a:	9c 81       	ldd	r25, Y+4	; 0x04
    252c:	21 e1       	ldi	r18, 0x11	; 17
    252e:	fc 01       	movw	r30, r24
    2530:	20 83       	st	Z, r18
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	9c 81       	ldd	r25, Y+4	; 0x04
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	9c 83       	std	Y+4, r25	; 0x04
    253a:	8b 83       	std	Y+3, r24	; 0x03
    253c:	8b 81       	ldd	r24, Y+3	; 0x03
    253e:	9c 81       	ldd	r25, Y+4	; 0x04
    2540:	22 e2       	ldi	r18, 0x22	; 34
    2542:	fc 01       	movw	r30, r24
    2544:	20 83       	st	Z, r18
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	9c 81       	ldd	r25, Y+4	; 0x04
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	9c 83       	std	Y+4, r25	; 0x04
    254e:	8b 83       	std	Y+3, r24	; 0x03
    2550:	8b 81       	ldd	r24, Y+3	; 0x03
    2552:	9c 81       	ldd	r25, Y+4	; 0x04
    2554:	23 e3       	ldi	r18, 0x33	; 51
    2556:	fc 01       	movw	r30, r24
    2558:	20 83       	st	Z, r18
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	9c 81       	ldd	r25, Y+4	; 0x04
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	9c 83       	std	Y+4, r25	; 0x04
    2562:	8b 83       	std	Y+3, r24	; 0x03
    2564:	8d 81       	ldd	r24, Y+5	; 0x05
    2566:	9e 81       	ldd	r25, Y+6	; 0x06
    2568:	9a 83       	std	Y+2, r25	; 0x02
    256a:	89 83       	std	Y+1, r24	; 0x01
    256c:	29 81       	ldd	r18, Y+1	; 0x01
    256e:	8b 81       	ldd	r24, Y+3	; 0x03
    2570:	9c 81       	ldd	r25, Y+4	; 0x04
    2572:	fc 01       	movw	r30, r24
    2574:	20 83       	st	Z, r18
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	9c 81       	ldd	r25, Y+4	; 0x04
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	9c 83       	std	Y+4, r25	; 0x04
    257e:	8b 83       	std	Y+3, r24	; 0x03
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	9a 81       	ldd	r25, Y+2	; 0x02
    2584:	89 2f       	mov	r24, r25
    2586:	99 27       	eor	r25, r25
    2588:	9a 83       	std	Y+2, r25	; 0x02
    258a:	89 83       	std	Y+1, r24	; 0x01
    258c:	29 81       	ldd	r18, Y+1	; 0x01
    258e:	8b 81       	ldd	r24, Y+3	; 0x03
    2590:	9c 81       	ldd	r25, Y+4	; 0x04
    2592:	fc 01       	movw	r30, r24
    2594:	20 83       	st	Z, r18
    2596:	8b 81       	ldd	r24, Y+3	; 0x03
    2598:	9c 81       	ldd	r25, Y+4	; 0x04
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	9c 83       	std	Y+4, r25	; 0x04
    259e:	8b 83       	std	Y+3, r24	; 0x03
    25a0:	8b 81       	ldd	r24, Y+3	; 0x03
    25a2:	9c 81       	ldd	r25, Y+4	; 0x04
    25a4:	fc 01       	movw	r30, r24
    25a6:	10 82       	st	Z, r1
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	9c 81       	ldd	r25, Y+4	; 0x04
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	9c 83       	std	Y+4, r25	; 0x04
    25b0:	8b 83       	std	Y+3, r24	; 0x03
    25b2:	8b 81       	ldd	r24, Y+3	; 0x03
    25b4:	9c 81       	ldd	r25, Y+4	; 0x04
    25b6:	20 e8       	ldi	r18, 0x80	; 128
    25b8:	fc 01       	movw	r30, r24
    25ba:	20 83       	st	Z, r18
    25bc:	8b 81       	ldd	r24, Y+3	; 0x03
    25be:	9c 81       	ldd	r25, Y+4	; 0x04
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	9c 83       	std	Y+4, r25	; 0x04
    25c4:	8b 83       	std	Y+3, r24	; 0x03
    25c6:	8b 81       	ldd	r24, Y+3	; 0x03
    25c8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ca:	fc 01       	movw	r30, r24
    25cc:	10 82       	st	Z, r1
    25ce:	8b 81       	ldd	r24, Y+3	; 0x03
    25d0:	9c 81       	ldd	r25, Y+4	; 0x04
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	9c 83       	std	Y+4, r25	; 0x04
    25d6:	8b 83       	std	Y+3, r24	; 0x03
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	9c 81       	ldd	r25, Y+4	; 0x04
    25dc:	22 e0       	ldi	r18, 0x02	; 2
    25de:	fc 01       	movw	r30, r24
    25e0:	20 83       	st	Z, r18
    25e2:	8b 81       	ldd	r24, Y+3	; 0x03
    25e4:	9c 81       	ldd	r25, Y+4	; 0x04
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	9c 83       	std	Y+4, r25	; 0x04
    25ea:	8b 83       	std	Y+3, r24	; 0x03
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	9c 81       	ldd	r25, Y+4	; 0x04
    25f0:	23 e0       	ldi	r18, 0x03	; 3
    25f2:	fc 01       	movw	r30, r24
    25f4:	20 83       	st	Z, r18
    25f6:	8b 81       	ldd	r24, Y+3	; 0x03
    25f8:	9c 81       	ldd	r25, Y+4	; 0x04
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	9c 83       	std	Y+4, r25	; 0x04
    25fe:	8b 83       	std	Y+3, r24	; 0x03
    2600:	8b 81       	ldd	r24, Y+3	; 0x03
    2602:	9c 81       	ldd	r25, Y+4	; 0x04
    2604:	24 e0       	ldi	r18, 0x04	; 4
    2606:	fc 01       	movw	r30, r24
    2608:	20 83       	st	Z, r18
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	9c 81       	ldd	r25, Y+4	; 0x04
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	9c 83       	std	Y+4, r25	; 0x04
    2612:	8b 83       	std	Y+3, r24	; 0x03
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	9c 81       	ldd	r25, Y+4	; 0x04
    2618:	25 e0       	ldi	r18, 0x05	; 5
    261a:	fc 01       	movw	r30, r24
    261c:	20 83       	st	Z, r18
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	9c 81       	ldd	r25, Y+4	; 0x04
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	9c 83       	std	Y+4, r25	; 0x04
    2626:	8b 83       	std	Y+3, r24	; 0x03
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	9c 81       	ldd	r25, Y+4	; 0x04
    262c:	26 e0       	ldi	r18, 0x06	; 6
    262e:	fc 01       	movw	r30, r24
    2630:	20 83       	st	Z, r18
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	9c 81       	ldd	r25, Y+4	; 0x04
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	9c 83       	std	Y+4, r25	; 0x04
    263a:	8b 83       	std	Y+3, r24	; 0x03
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	9c 81       	ldd	r25, Y+4	; 0x04
    2640:	27 e0       	ldi	r18, 0x07	; 7
    2642:	fc 01       	movw	r30, r24
    2644:	20 83       	st	Z, r18
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	9c 81       	ldd	r25, Y+4	; 0x04
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	9c 83       	std	Y+4, r25	; 0x04
    264e:	8b 83       	std	Y+3, r24	; 0x03
    2650:	8b 81       	ldd	r24, Y+3	; 0x03
    2652:	9c 81       	ldd	r25, Y+4	; 0x04
    2654:	28 e0       	ldi	r18, 0x08	; 8
    2656:	fc 01       	movw	r30, r24
    2658:	20 83       	st	Z, r18
    265a:	8b 81       	ldd	r24, Y+3	; 0x03
    265c:	9c 81       	ldd	r25, Y+4	; 0x04
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	9c 83       	std	Y+4, r25	; 0x04
    2662:	8b 83       	std	Y+3, r24	; 0x03
    2664:	8b 81       	ldd	r24, Y+3	; 0x03
    2666:	9c 81       	ldd	r25, Y+4	; 0x04
    2668:	29 e0       	ldi	r18, 0x09	; 9
    266a:	fc 01       	movw	r30, r24
    266c:	20 83       	st	Z, r18
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	9c 81       	ldd	r25, Y+4	; 0x04
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	9c 83       	std	Y+4, r25	; 0x04
    2676:	8b 83       	std	Y+3, r24	; 0x03
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	9c 81       	ldd	r25, Y+4	; 0x04
    267c:	20 e1       	ldi	r18, 0x10	; 16
    267e:	fc 01       	movw	r30, r24
    2680:	20 83       	st	Z, r18
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	9c 81       	ldd	r25, Y+4	; 0x04
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	9c 83       	std	Y+4, r25	; 0x04
    268a:	8b 83       	std	Y+3, r24	; 0x03
    268c:	8b 81       	ldd	r24, Y+3	; 0x03
    268e:	9c 81       	ldd	r25, Y+4	; 0x04
    2690:	21 e1       	ldi	r18, 0x11	; 17
    2692:	fc 01       	movw	r30, r24
    2694:	20 83       	st	Z, r18
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	9c 81       	ldd	r25, Y+4	; 0x04
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	9c 83       	std	Y+4, r25	; 0x04
    269e:	8b 83       	std	Y+3, r24	; 0x03
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	9c 81       	ldd	r25, Y+4	; 0x04
    26a4:	22 e1       	ldi	r18, 0x12	; 18
    26a6:	fc 01       	movw	r30, r24
    26a8:	20 83       	st	Z, r18
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	9c 81       	ldd	r25, Y+4	; 0x04
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	9c 83       	std	Y+4, r25	; 0x04
    26b2:	8b 83       	std	Y+3, r24	; 0x03
    26b4:	8b 81       	ldd	r24, Y+3	; 0x03
    26b6:	9c 81       	ldd	r25, Y+4	; 0x04
    26b8:	23 e1       	ldi	r18, 0x13	; 19
    26ba:	fc 01       	movw	r30, r24
    26bc:	20 83       	st	Z, r18
    26be:	8b 81       	ldd	r24, Y+3	; 0x03
    26c0:	9c 81       	ldd	r25, Y+4	; 0x04
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	9c 83       	std	Y+4, r25	; 0x04
    26c6:	8b 83       	std	Y+3, r24	; 0x03
    26c8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ca:	9c 81       	ldd	r25, Y+4	; 0x04
    26cc:	24 e1       	ldi	r18, 0x14	; 20
    26ce:	fc 01       	movw	r30, r24
    26d0:	20 83       	st	Z, r18
    26d2:	8b 81       	ldd	r24, Y+3	; 0x03
    26d4:	9c 81       	ldd	r25, Y+4	; 0x04
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	9c 83       	std	Y+4, r25	; 0x04
    26da:	8b 83       	std	Y+3, r24	; 0x03
    26dc:	8b 81       	ldd	r24, Y+3	; 0x03
    26de:	9c 81       	ldd	r25, Y+4	; 0x04
    26e0:	25 e1       	ldi	r18, 0x15	; 21
    26e2:	fc 01       	movw	r30, r24
    26e4:	20 83       	st	Z, r18
    26e6:	8b 81       	ldd	r24, Y+3	; 0x03
    26e8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	9c 83       	std	Y+4, r25	; 0x04
    26ee:	8b 83       	std	Y+3, r24	; 0x03
    26f0:	8b 81       	ldd	r24, Y+3	; 0x03
    26f2:	9c 81       	ldd	r25, Y+4	; 0x04
    26f4:	26 e1       	ldi	r18, 0x16	; 22
    26f6:	fc 01       	movw	r30, r24
    26f8:	20 83       	st	Z, r18
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	9c 81       	ldd	r25, Y+4	; 0x04
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	9c 83       	std	Y+4, r25	; 0x04
    2702:	8b 83       	std	Y+3, r24	; 0x03
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	9c 81       	ldd	r25, Y+4	; 0x04
    2708:	27 e1       	ldi	r18, 0x17	; 23
    270a:	fc 01       	movw	r30, r24
    270c:	20 83       	st	Z, r18
    270e:	8b 81       	ldd	r24, Y+3	; 0x03
    2710:	9c 81       	ldd	r25, Y+4	; 0x04
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	9c 83       	std	Y+4, r25	; 0x04
    2716:	8b 83       	std	Y+3, r24	; 0x03
    2718:	8b 81       	ldd	r24, Y+3	; 0x03
    271a:	9c 81       	ldd	r25, Y+4	; 0x04
    271c:	28 e1       	ldi	r18, 0x18	; 24
    271e:	fc 01       	movw	r30, r24
    2720:	20 83       	st	Z, r18
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	9c 81       	ldd	r25, Y+4	; 0x04
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	9c 83       	std	Y+4, r25	; 0x04
    272a:	8b 83       	std	Y+3, r24	; 0x03
    272c:	8b 81       	ldd	r24, Y+3	; 0x03
    272e:	9c 81       	ldd	r25, Y+4	; 0x04
    2730:	29 e1       	ldi	r18, 0x19	; 25
    2732:	fc 01       	movw	r30, r24
    2734:	20 83       	st	Z, r18
    2736:	8b 81       	ldd	r24, Y+3	; 0x03
    2738:	9c 81       	ldd	r25, Y+4	; 0x04
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	9c 83       	std	Y+4, r25	; 0x04
    273e:	8b 83       	std	Y+3, r24	; 0x03
    2740:	8b 81       	ldd	r24, Y+3	; 0x03
    2742:	9c 81       	ldd	r25, Y+4	; 0x04
    2744:	20 e2       	ldi	r18, 0x20	; 32
    2746:	fc 01       	movw	r30, r24
    2748:	20 83       	st	Z, r18
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	9c 81       	ldd	r25, Y+4	; 0x04
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	9c 83       	std	Y+4, r25	; 0x04
    2752:	8b 83       	std	Y+3, r24	; 0x03
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	9c 81       	ldd	r25, Y+4	; 0x04
    2758:	21 e2       	ldi	r18, 0x21	; 33
    275a:	fc 01       	movw	r30, r24
    275c:	20 83       	st	Z, r18
    275e:	8b 81       	ldd	r24, Y+3	; 0x03
    2760:	9c 81       	ldd	r25, Y+4	; 0x04
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	9c 83       	std	Y+4, r25	; 0x04
    2766:	8b 83       	std	Y+3, r24	; 0x03
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	9c 81       	ldd	r25, Y+4	; 0x04
    276c:	22 e2       	ldi	r18, 0x22	; 34
    276e:	fc 01       	movw	r30, r24
    2770:	20 83       	st	Z, r18
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	9c 81       	ldd	r25, Y+4	; 0x04
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	9c 83       	std	Y+4, r25	; 0x04
    277a:	8b 83       	std	Y+3, r24	; 0x03
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	9c 81       	ldd	r25, Y+4	; 0x04
    2780:	23 e2       	ldi	r18, 0x23	; 35
    2782:	fc 01       	movw	r30, r24
    2784:	20 83       	st	Z, r18
    2786:	8b 81       	ldd	r24, Y+3	; 0x03
    2788:	9c 81       	ldd	r25, Y+4	; 0x04
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	9c 83       	std	Y+4, r25	; 0x04
    278e:	8b 83       	std	Y+3, r24	; 0x03
    2790:	8f 81       	ldd	r24, Y+7	; 0x07
    2792:	98 85       	ldd	r25, Y+8	; 0x08
    2794:	9a 83       	std	Y+2, r25	; 0x02
    2796:	89 83       	std	Y+1, r24	; 0x01
    2798:	29 81       	ldd	r18, Y+1	; 0x01
    279a:	8b 81       	ldd	r24, Y+3	; 0x03
    279c:	9c 81       	ldd	r25, Y+4	; 0x04
    279e:	fc 01       	movw	r30, r24
    27a0:	20 83       	st	Z, r18
    27a2:	8b 81       	ldd	r24, Y+3	; 0x03
    27a4:	9c 81       	ldd	r25, Y+4	; 0x04
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	9c 83       	std	Y+4, r25	; 0x04
    27aa:	8b 83       	std	Y+3, r24	; 0x03
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	9a 81       	ldd	r25, Y+2	; 0x02
    27b0:	89 2f       	mov	r24, r25
    27b2:	99 27       	eor	r25, r25
    27b4:	9a 83       	std	Y+2, r25	; 0x02
    27b6:	89 83       	std	Y+1, r24	; 0x01
    27b8:	29 81       	ldd	r18, Y+1	; 0x01
    27ba:	8b 81       	ldd	r24, Y+3	; 0x03
    27bc:	9c 81       	ldd	r25, Y+4	; 0x04
    27be:	fc 01       	movw	r30, r24
    27c0:	20 83       	st	Z, r18
    27c2:	8b 81       	ldd	r24, Y+3	; 0x03
    27c4:	9c 81       	ldd	r25, Y+4	; 0x04
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	9c 83       	std	Y+4, r25	; 0x04
    27ca:	8b 83       	std	Y+3, r24	; 0x03
    27cc:	8b 81       	ldd	r24, Y+3	; 0x03
    27ce:	9c 81       	ldd	r25, Y+4	; 0x04
    27d0:	26 e2       	ldi	r18, 0x26	; 38
    27d2:	fc 01       	movw	r30, r24
    27d4:	20 83       	st	Z, r18
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	9c 81       	ldd	r25, Y+4	; 0x04
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	9c 83       	std	Y+4, r25	; 0x04
    27de:	8b 83       	std	Y+3, r24	; 0x03
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	9c 81       	ldd	r25, Y+4	; 0x04
    27e4:	27 e2       	ldi	r18, 0x27	; 39
    27e6:	fc 01       	movw	r30, r24
    27e8:	20 83       	st	Z, r18
    27ea:	8b 81       	ldd	r24, Y+3	; 0x03
    27ec:	9c 81       	ldd	r25, Y+4	; 0x04
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	9c 83       	std	Y+4, r25	; 0x04
    27f2:	8b 83       	std	Y+3, r24	; 0x03
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	9c 81       	ldd	r25, Y+4	; 0x04
    27f8:	28 e2       	ldi	r18, 0x28	; 40
    27fa:	fc 01       	movw	r30, r24
    27fc:	20 83       	st	Z, r18
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	9c 81       	ldd	r25, Y+4	; 0x04
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	9c 83       	std	Y+4, r25	; 0x04
    2806:	8b 83       	std	Y+3, r24	; 0x03
    2808:	8b 81       	ldd	r24, Y+3	; 0x03
    280a:	9c 81       	ldd	r25, Y+4	; 0x04
    280c:	29 e2       	ldi	r18, 0x29	; 41
    280e:	fc 01       	movw	r30, r24
    2810:	20 83       	st	Z, r18
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	9c 81       	ldd	r25, Y+4	; 0x04
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	9c 83       	std	Y+4, r25	; 0x04
    281a:	8b 83       	std	Y+3, r24	; 0x03
    281c:	8b 81       	ldd	r24, Y+3	; 0x03
    281e:	9c 81       	ldd	r25, Y+4	; 0x04
    2820:	20 e3       	ldi	r18, 0x30	; 48
    2822:	fc 01       	movw	r30, r24
    2824:	20 83       	st	Z, r18
    2826:	8b 81       	ldd	r24, Y+3	; 0x03
    2828:	9c 81       	ldd	r25, Y+4	; 0x04
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	9c 83       	std	Y+4, r25	; 0x04
    282e:	8b 83       	std	Y+3, r24	; 0x03
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	9c 81       	ldd	r25, Y+4	; 0x04
    2834:	21 e3       	ldi	r18, 0x31	; 49
    2836:	fc 01       	movw	r30, r24
    2838:	20 83       	st	Z, r18
    283a:	8b 81       	ldd	r24, Y+3	; 0x03
    283c:	9c 81       	ldd	r25, Y+4	; 0x04
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	9c 83       	std	Y+4, r25	; 0x04
    2842:	8b 83       	std	Y+3, r24	; 0x03
    2844:	8b 81       	ldd	r24, Y+3	; 0x03
    2846:	9c 81       	ldd	r25, Y+4	; 0x04
    2848:	28 96       	adiw	r28, 0x08	; 8
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	f8 94       	cli
    284e:	de bf       	out	0x3e, r29	; 62
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	cd bf       	out	0x3d, r28	; 61
    2854:	df 91       	pop	r29
    2856:	cf 91       	pop	r28
    2858:	08 95       	ret

0000285a <xPortStartScheduler>:
    285a:	cf 93       	push	r28
    285c:	df 93       	push	r29
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
    2862:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <prvSetupTimerInterrupt>
    2866:	a0 91 e8 07 	lds	r26, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    286a:	b0 91 e9 07 	lds	r27, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    286e:	cd 91       	ld	r28, X+
    2870:	cd bf       	out	0x3d, r28	; 61
    2872:	dd 91       	ld	r29, X+
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	ff 91       	pop	r31
    2878:	ef 91       	pop	r30
    287a:	df 91       	pop	r29
    287c:	cf 91       	pop	r28
    287e:	bf 91       	pop	r27
    2880:	af 91       	pop	r26
    2882:	9f 91       	pop	r25
    2884:	8f 91       	pop	r24
    2886:	7f 91       	pop	r23
    2888:	6f 91       	pop	r22
    288a:	5f 91       	pop	r21
    288c:	4f 91       	pop	r20
    288e:	3f 91       	pop	r19
    2890:	2f 91       	pop	r18
    2892:	1f 91       	pop	r17
    2894:	0f 91       	pop	r16
    2896:	ff 90       	pop	r15
    2898:	ef 90       	pop	r14
    289a:	df 90       	pop	r13
    289c:	cf 90       	pop	r12
    289e:	bf 90       	pop	r11
    28a0:	af 90       	pop	r10
    28a2:	9f 90       	pop	r9
    28a4:	8f 90       	pop	r8
    28a6:	7f 90       	pop	r7
    28a8:	6f 90       	pop	r6
    28aa:	5f 90       	pop	r5
    28ac:	4f 90       	pop	r4
    28ae:	3f 90       	pop	r3
    28b0:	2f 90       	pop	r2
    28b2:	1f 90       	pop	r1
    28b4:	0f 90       	pop	r0
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	0f 90       	pop	r0
    28ba:	08 95       	ret
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	df 91       	pop	r29
    28c0:	cf 91       	pop	r28
    28c2:	08 95       	ret

000028c4 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    28c4:	0f 92       	push	r0
    28c6:	0f b6       	in	r0, 0x3f	; 63
    28c8:	f8 94       	cli
    28ca:	0f 92       	push	r0
    28cc:	1f 92       	push	r1
    28ce:	11 24       	eor	r1, r1
    28d0:	2f 92       	push	r2
    28d2:	3f 92       	push	r3
    28d4:	4f 92       	push	r4
    28d6:	5f 92       	push	r5
    28d8:	6f 92       	push	r6
    28da:	7f 92       	push	r7
    28dc:	8f 92       	push	r8
    28de:	9f 92       	push	r9
    28e0:	af 92       	push	r10
    28e2:	bf 92       	push	r11
    28e4:	cf 92       	push	r12
    28e6:	df 92       	push	r13
    28e8:	ef 92       	push	r14
    28ea:	ff 92       	push	r15
    28ec:	0f 93       	push	r16
    28ee:	1f 93       	push	r17
    28f0:	2f 93       	push	r18
    28f2:	3f 93       	push	r19
    28f4:	4f 93       	push	r20
    28f6:	5f 93       	push	r21
    28f8:	6f 93       	push	r22
    28fa:	7f 93       	push	r23
    28fc:	8f 93       	push	r24
    28fe:	9f 93       	push	r25
    2900:	af 93       	push	r26
    2902:	bf 93       	push	r27
    2904:	cf 93       	push	r28
    2906:	df 93       	push	r29
    2908:	ef 93       	push	r30
    290a:	ff 93       	push	r31
    290c:	a0 91 e8 07 	lds	r26, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    2910:	b0 91 e9 07 	lds	r27, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    2914:	0d b6       	in	r0, 0x3d	; 61
    2916:	0d 92       	st	X+, r0
    2918:	0e b6       	in	r0, 0x3e	; 62
    291a:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    291c:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2920:	a0 91 e8 07 	lds	r26, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    2924:	b0 91 e9 07 	lds	r27, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    2928:	cd 91       	ld	r28, X+
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	dd 91       	ld	r29, X+
    292e:	de bf       	out	0x3e, r29	; 62
    2930:	ff 91       	pop	r31
    2932:	ef 91       	pop	r30
    2934:	df 91       	pop	r29
    2936:	cf 91       	pop	r28
    2938:	bf 91       	pop	r27
    293a:	af 91       	pop	r26
    293c:	9f 91       	pop	r25
    293e:	8f 91       	pop	r24
    2940:	7f 91       	pop	r23
    2942:	6f 91       	pop	r22
    2944:	5f 91       	pop	r21
    2946:	4f 91       	pop	r20
    2948:	3f 91       	pop	r19
    294a:	2f 91       	pop	r18
    294c:	1f 91       	pop	r17
    294e:	0f 91       	pop	r16
    2950:	ff 90       	pop	r15
    2952:	ef 90       	pop	r14
    2954:	df 90       	pop	r13
    2956:	cf 90       	pop	r12
    2958:	bf 90       	pop	r11
    295a:	af 90       	pop	r10
    295c:	9f 90       	pop	r9
    295e:	8f 90       	pop	r8
    2960:	7f 90       	pop	r7
    2962:	6f 90       	pop	r6
    2964:	5f 90       	pop	r5
    2966:	4f 90       	pop	r4
    2968:	3f 90       	pop	r3
    296a:	2f 90       	pop	r2
    296c:	1f 90       	pop	r1
    296e:	0f 90       	pop	r0
    2970:	0f be       	out	0x3f, r0	; 63
    2972:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2974:	08 95       	ret
	...

00002978 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2978:	0f 92       	push	r0
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	f8 94       	cli
    297e:	0f 92       	push	r0
    2980:	1f 92       	push	r1
    2982:	11 24       	eor	r1, r1
    2984:	2f 92       	push	r2
    2986:	3f 92       	push	r3
    2988:	4f 92       	push	r4
    298a:	5f 92       	push	r5
    298c:	6f 92       	push	r6
    298e:	7f 92       	push	r7
    2990:	8f 92       	push	r8
    2992:	9f 92       	push	r9
    2994:	af 92       	push	r10
    2996:	bf 92       	push	r11
    2998:	cf 92       	push	r12
    299a:	df 92       	push	r13
    299c:	ef 92       	push	r14
    299e:	ff 92       	push	r15
    29a0:	0f 93       	push	r16
    29a2:	1f 93       	push	r17
    29a4:	2f 93       	push	r18
    29a6:	3f 93       	push	r19
    29a8:	4f 93       	push	r20
    29aa:	5f 93       	push	r21
    29ac:	6f 93       	push	r22
    29ae:	7f 93       	push	r23
    29b0:	8f 93       	push	r24
    29b2:	9f 93       	push	r25
    29b4:	af 93       	push	r26
    29b6:	bf 93       	push	r27
    29b8:	cf 93       	push	r28
    29ba:	df 93       	push	r29
    29bc:	ef 93       	push	r30
    29be:	ff 93       	push	r31
    29c0:	a0 91 e8 07 	lds	r26, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    29c4:	b0 91 e9 07 	lds	r27, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    29c8:	0d b6       	in	r0, 0x3d	; 61
    29ca:	0d 92       	st	X+, r0
    29cc:	0e b6       	in	r0, 0x3e	; 62
    29ce:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    29d0:	0e 94 4e 22 	call	0x449c	; 0x449c <xTaskIncrementTick>
    29d4:	88 23       	and	r24, r24
    29d6:	11 f0       	breq	.+4      	; 0x29dc <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    29d8:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    29dc:	a0 91 e8 07 	lds	r26, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    29e0:	b0 91 e9 07 	lds	r27, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    29e4:	cd 91       	ld	r28, X+
    29e6:	cd bf       	out	0x3d, r28	; 61
    29e8:	dd 91       	ld	r29, X+
    29ea:	de bf       	out	0x3e, r29	; 62
    29ec:	ff 91       	pop	r31
    29ee:	ef 91       	pop	r30
    29f0:	df 91       	pop	r29
    29f2:	cf 91       	pop	r28
    29f4:	bf 91       	pop	r27
    29f6:	af 91       	pop	r26
    29f8:	9f 91       	pop	r25
    29fa:	8f 91       	pop	r24
    29fc:	7f 91       	pop	r23
    29fe:	6f 91       	pop	r22
    2a00:	5f 91       	pop	r21
    2a02:	4f 91       	pop	r20
    2a04:	3f 91       	pop	r19
    2a06:	2f 91       	pop	r18
    2a08:	1f 91       	pop	r17
    2a0a:	0f 91       	pop	r16
    2a0c:	ff 90       	pop	r15
    2a0e:	ef 90       	pop	r14
    2a10:	df 90       	pop	r13
    2a12:	cf 90       	pop	r12
    2a14:	bf 90       	pop	r11
    2a16:	af 90       	pop	r10
    2a18:	9f 90       	pop	r9
    2a1a:	8f 90       	pop	r8
    2a1c:	7f 90       	pop	r7
    2a1e:	6f 90       	pop	r6
    2a20:	5f 90       	pop	r5
    2a22:	4f 90       	pop	r4
    2a24:	3f 90       	pop	r3
    2a26:	2f 90       	pop	r2
    2a28:	1f 90       	pop	r1
    2a2a:	0f 90       	pop	r0
    2a2c:	0f be       	out	0x3f, r0	; 63
    2a2e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2a30:	08 95       	ret
	...

00002a34 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    2a34:	cf 93       	push	r28
    2a36:	df 93       	push	r29
    2a38:	00 d0       	rcall	.+0      	; 0x2a3a <prvSetupTimerInterrupt+0x6>
    2a3a:	00 d0       	rcall	.+0      	; 0x2a3c <prvSetupTimerInterrupt+0x8>
    2a3c:	00 d0       	rcall	.+0      	; 0x2a3e <prvSetupTimerInterrupt+0xa>
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    2a42:	89 e9       	ldi	r24, 0x99	; 153
    2a44:	99 e3       	ldi	r25, 0x39	; 57
    2a46:	a0 e0       	ldi	r26, 0x00	; 0
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	89 83       	std	Y+1, r24	; 0x01
    2a4c:	9a 83       	std	Y+2, r25	; 0x02
    2a4e:	ab 83       	std	Y+3, r26	; 0x03
    2a50:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	9a 81       	ldd	r25, Y+2	; 0x02
    2a56:	ab 81       	ldd	r26, Y+3	; 0x03
    2a58:	bc 81       	ldd	r27, Y+4	; 0x04
    2a5a:	68 94       	set
    2a5c:	15 f8       	bld	r1, 5
    2a5e:	b6 95       	lsr	r27
    2a60:	a7 95       	ror	r26
    2a62:	97 95       	ror	r25
    2a64:	87 95       	ror	r24
    2a66:	16 94       	lsr	r1
    2a68:	d1 f7       	brne	.-12     	; 0x2a5e <prvSetupTimerInterrupt+0x2a>
    2a6a:	89 83       	std	Y+1, r24	; 0x01
    2a6c:	9a 83       	std	Y+2, r25	; 0x02
    2a6e:	ab 83       	std	Y+3, r26	; 0x03
    2a70:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	9a 81       	ldd	r25, Y+2	; 0x02
    2a76:	ab 81       	ldd	r26, Y+3	; 0x03
    2a78:	bc 81       	ldd	r27, Y+4	; 0x04
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	a1 09       	sbc	r26, r1
    2a7e:	b1 09       	sbc	r27, r1
    2a80:	89 83       	std	Y+1, r24	; 0x01
    2a82:	9a 83       	std	Y+2, r25	; 0x02
    2a84:	ab 83       	std	Y+3, r26	; 0x03
    2a86:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a90:	ab 81       	ldd	r26, Y+3	; 0x03
    2a92:	bc 81       	ldd	r27, Y+4	; 0x04
    2a94:	89 2f       	mov	r24, r25
    2a96:	9a 2f       	mov	r25, r26
    2a98:	ab 2f       	mov	r26, r27
    2a9a:	bb 27       	eor	r27, r27
    2a9c:	89 83       	std	Y+1, r24	; 0x01
    2a9e:	9a 83       	std	Y+2, r25	; 0x02
    2aa0:	ab 83       	std	Y+3, r26	; 0x03
    2aa2:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    2aa8:	89 e8       	ldi	r24, 0x89	; 137
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	2e 81       	ldd	r18, Y+6	; 0x06
    2aae:	fc 01       	movw	r30, r24
    2ab0:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    2ab2:	88 e8       	ldi	r24, 0x88	; 136
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	2d 81       	ldd	r18, Y+5	; 0x05
    2ab8:	fc 01       	movw	r30, r24
    2aba:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    2abc:	8b e0       	ldi	r24, 0x0B	; 11
    2abe:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    2ac0:	81 e8       	ldi	r24, 0x81	; 129
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    2aca:	8f e6       	ldi	r24, 0x6F	; 111
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	fc 01       	movw	r30, r24
    2ad0:	80 81       	ld	r24, Z
    2ad2:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    2ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad6:	82 60       	ori	r24, 0x02	; 2
    2ad8:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    2ada:	8f e6       	ldi	r24, 0x6F	; 111
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	2d 81       	ldd	r18, Y+5	; 0x05
    2ae0:	fc 01       	movw	r30, r24
    2ae2:	20 83       	st	Z, r18
}
    2ae4:	00 00       	nop
    2ae6:	26 96       	adiw	r28, 0x06	; 6
    2ae8:	0f b6       	in	r0, 0x3f	; 63
    2aea:	f8 94       	cli
    2aec:	de bf       	out	0x3e, r29	; 62
    2aee:	0f be       	out	0x3f, r0	; 63
    2af0:	cd bf       	out	0x3d, r28	; 61
    2af2:	df 91       	pop	r29
    2af4:	cf 91       	pop	r28
    2af6:	08 95       	ret

00002af8 <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    2af8:	0e 94 bc 14 	call	0x2978	; 0x2978 <vPortYieldFromTick>
		asm volatile ( "reti" );
    2afc:	18 95       	reti
	...

00002b00 <_serial_tx_int_on>:
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
    2b00:	cf 93       	push	r28
    2b02:	df 93       	push	r29
    2b04:	00 d0       	rcall	.+0      	; 0x2b06 <_serial_tx_int_on+0x6>
    2b06:	cd b7       	in	r28, 0x3d	; 61
    2b08:	de b7       	in	r29, 0x3e	; 62
    2b0a:	9a 83       	std	Y+2, r25	; 0x02
    2b0c:	89 83       	std	Y+1, r24	; 0x01
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	9a 81       	ldd	r25, Y+2	; 0x02
    2b12:	05 97       	sbiw	r24, 0x05	; 5
    2b14:	29 81       	ldd	r18, Y+1	; 0x01
    2b16:	3a 81       	ldd	r19, Y+2	; 0x02
    2b18:	25 50       	subi	r18, 0x05	; 5
    2b1a:	31 09       	sbc	r19, r1
    2b1c:	f9 01       	movw	r30, r18
    2b1e:	20 81       	ld	r18, Z
    2b20:	20 62       	ori	r18, 0x20	; 32
    2b22:	fc 01       	movw	r30, r24
    2b24:	20 83       	st	Z, r18
    2b26:	00 00       	nop
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	df 91       	pop	r29
    2b2e:	cf 91       	pop	r28
    2b30:	08 95       	ret

00002b32 <serial_new_instance>:
    2b32:	8f 92       	push	r8
    2b34:	9f 92       	push	r9
    2b36:	af 92       	push	r10
    2b38:	bf 92       	push	r11
    2b3a:	cf 92       	push	r12
    2b3c:	df 92       	push	r13
    2b3e:	ef 92       	push	r14
    2b40:	0f 93       	push	r16
    2b42:	1f 93       	push	r17
    2b44:	cf 93       	push	r28
    2b46:	df 93       	push	r29
    2b48:	cd b7       	in	r28, 0x3d	; 61
    2b4a:	de b7       	in	r29, 0x3e	; 62
    2b4c:	61 97       	sbiw	r28, 0x11	; 17
    2b4e:	0f b6       	in	r0, 0x3f	; 63
    2b50:	f8 94       	cli
    2b52:	de bf       	out	0x3e, r29	; 62
    2b54:	0f be       	out	0x3f, r0	; 63
    2b56:	cd bf       	out	0x3d, r28	; 61
    2b58:	8c 83       	std	Y+4, r24	; 0x04
    2b5a:	4d 83       	std	Y+5, r20	; 0x05
    2b5c:	5e 83       	std	Y+6, r21	; 0x06
    2b5e:	6f 83       	std	Y+7, r22	; 0x07
    2b60:	78 87       	std	Y+8, r23	; 0x08
    2b62:	29 87       	std	Y+9, r18	; 0x09
    2b64:	0a 87       	std	Y+10, r16	; 0x0a
    2b66:	eb 86       	std	Y+11, r14	; 0x0b
    2b68:	dd 86       	std	Y+13, r13	; 0x0d
    2b6a:	cc 86       	std	Y+12, r12	; 0x0c
    2b6c:	bf 86       	std	Y+15, r11	; 0x0f
    2b6e:	ae 86       	std	Y+14, r10	; 0x0e
    2b70:	99 8a       	std	Y+17, r9	; 0x11
    2b72:	88 8a       	std	Y+16, r8	; 0x10
    2b74:	88 e0       	ldi	r24, 0x08	; 8
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <pvPortMalloc>
    2b7c:	9a 83       	std	Y+2, r25	; 0x02
    2b7e:	89 83       	std	Y+1, r24	; 0x01
    2b80:	8c 81       	ldd	r24, Y+4	; 0x04
    2b82:	88 2f       	mov	r24, r24
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	88 0f       	add	r24, r24
    2b88:	99 1f       	adc	r25, r25
    2b8a:	8d 59       	subi	r24, 0x9D	; 157
    2b8c:	9d 4f       	sbci	r25, 0xFD	; 253
    2b8e:	29 81       	ldd	r18, Y+1	; 0x01
    2b90:	3a 81       	ldd	r19, Y+2	; 0x02
    2b92:	fc 01       	movw	r30, r24
    2b94:	31 83       	std	Z+1, r19	; 0x01
    2b96:	20 83       	st	Z, r18
    2b98:	8c 81       	ldd	r24, Y+4	; 0x04
    2b9a:	88 2f       	mov	r24, r24
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	88 0f       	add	r24, r24
    2ba0:	99 1f       	adc	r25, r25
    2ba2:	80 5e       	subi	r24, 0xE0	; 224
    2ba4:	9e 4f       	sbci	r25, 0xFE	; 254
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	20 81       	ld	r18, Z
    2baa:	31 81       	ldd	r19, Z+1	; 0x01
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	31 83       	std	Z+1, r19	; 0x01
    2bb4:	20 83       	st	Z, r18
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bba:	2e 85       	ldd	r18, Y+14	; 0x0e
    2bbc:	3f 85       	ldd	r19, Y+15	; 0x0f
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	33 83       	std	Z+3, r19	; 0x03
    2bc2:	22 83       	std	Z+2, r18	; 0x02
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc8:	2c 85       	ldd	r18, Y+12	; 0x0c
    2bca:	3d 85       	ldd	r19, Y+13	; 0x0d
    2bcc:	fc 01       	movw	r30, r24
    2bce:	35 83       	std	Z+5, r19	; 0x05
    2bd0:	24 83       	std	Z+4, r18	; 0x04
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd6:	28 89       	ldd	r18, Y+16	; 0x10
    2bd8:	39 89       	ldd	r19, Y+17	; 0x11
    2bda:	fc 01       	movw	r30, r24
    2bdc:	37 83       	std	Z+7, r19	; 0x07
    2bde:	26 83       	std	Z+6, r18	; 0x06
    2be0:	8f e5       	ldi	r24, 0x5F	; 95
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	fc 01       	movw	r30, r24
    2be6:	80 81       	ld	r24, Z
    2be8:	8b 83       	std	Y+3, r24	; 0x03
    2bea:	f8 94       	cli
    2bec:	89 81       	ldd	r24, Y+1	; 0x01
    2bee:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	80 81       	ld	r24, Z
    2bf4:	91 81       	ldd	r25, Z+1	; 0x01
    2bf6:	06 97       	sbiw	r24, 0x06	; 6
    2bf8:	29 81       	ldd	r18, Y+1	; 0x01
    2bfa:	3a 81       	ldd	r19, Y+2	; 0x02
    2bfc:	f9 01       	movw	r30, r18
    2bfe:	20 81       	ld	r18, Z
    2c00:	31 81       	ldd	r19, Z+1	; 0x01
    2c02:	26 50       	subi	r18, 0x06	; 6
    2c04:	31 09       	sbc	r19, r1
    2c06:	f9 01       	movw	r30, r18
    2c08:	20 81       	ld	r18, Z
    2c0a:	22 60       	ori	r18, 0x02	; 2
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	20 83       	st	Z, r18
    2c10:	89 81       	ldd	r24, Y+1	; 0x01
    2c12:	9a 81       	ldd	r25, Y+2	; 0x02
    2c14:	fc 01       	movw	r30, r24
    2c16:	80 81       	ld	r24, Z
    2c18:	91 81       	ldd	r25, Z+1	; 0x01
    2c1a:	8c 01       	movw	r16, r24
    2c1c:	02 50       	subi	r16, 0x02	; 2
    2c1e:	11 09       	sbc	r17, r1
    2c20:	8d 81       	ldd	r24, Y+5	; 0x05
    2c22:	9e 81       	ldd	r25, Y+6	; 0x06
    2c24:	af 81       	ldd	r26, Y+7	; 0x07
    2c26:	b8 85       	ldd	r27, Y+8	; 0x08
    2c28:	88 0f       	add	r24, r24
    2c2a:	99 1f       	adc	r25, r25
    2c2c:	aa 1f       	adc	r26, r26
    2c2e:	bb 1f       	adc	r27, r27
    2c30:	88 0f       	add	r24, r24
    2c32:	99 1f       	adc	r25, r25
    2c34:	aa 1f       	adc	r26, r26
    2c36:	bb 1f       	adc	r27, r27
    2c38:	88 0f       	add	r24, r24
    2c3a:	99 1f       	adc	r25, r25
    2c3c:	aa 1f       	adc	r26, r26
    2c3e:	bb 1f       	adc	r27, r27
    2c40:	9c 01       	movw	r18, r24
    2c42:	ad 01       	movw	r20, r26
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	a1 ee       	ldi	r26, 0xE1	; 225
    2c4a:	b0 e0       	ldi	r27, 0x00	; 0
    2c4c:	bc 01       	movw	r22, r24
    2c4e:	cd 01       	movw	r24, r26
    2c50:	0e 94 10 28 	call	0x5020	; 0x5020 <__udivmodsi4>
    2c54:	da 01       	movw	r26, r20
    2c56:	c9 01       	movw	r24, r18
    2c58:	81 50       	subi	r24, 0x01	; 1
    2c5a:	f8 01       	movw	r30, r16
    2c5c:	80 83       	st	Z, r24
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
    2c60:	9a 81       	ldd	r25, Y+2	; 0x02
    2c62:	fc 01       	movw	r30, r24
    2c64:	80 81       	ld	r24, Z
    2c66:	91 81       	ldd	r25, Z+1	; 0x01
    2c68:	05 97       	sbiw	r24, 0x05	; 5
    2c6a:	28 e9       	ldi	r18, 0x98	; 152
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	20 83       	st	Z, r18
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	9a 81       	ldd	r25, Y+2	; 0x02
    2c74:	fc 01       	movw	r30, r24
    2c76:	80 81       	ld	r24, Z
    2c78:	91 81       	ldd	r25, Z+1	; 0x01
    2c7a:	04 97       	sbiw	r24, 0x04	; 4
    2c7c:	26 e0       	ldi	r18, 0x06	; 6
    2c7e:	fc 01       	movw	r30, r24
    2c80:	20 83       	st	Z, r18
    2c82:	8f e5       	ldi	r24, 0x5F	; 95
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	2b 81       	ldd	r18, Y+3	; 0x03
    2c88:	fc 01       	movw	r30, r24
    2c8a:	20 83       	st	Z, r18
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c90:	61 96       	adiw	r28, 0x11	; 17
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	1f 91       	pop	r17
    2ca2:	0f 91       	pop	r16
    2ca4:	ef 90       	pop	r14
    2ca6:	df 90       	pop	r13
    2ca8:	cf 90       	pop	r12
    2caa:	bf 90       	pop	r11
    2cac:	af 90       	pop	r10
    2cae:	9f 90       	pop	r9
    2cb0:	8f 90       	pop	r8
    2cb2:	08 95       	ret

00002cb4 <serial_send_byte>:
    2cb4:	cf 93       	push	r28
    2cb6:	df 93       	push	r29
    2cb8:	00 d0       	rcall	.+0      	; 0x2cba <serial_send_byte+0x6>
    2cba:	1f 92       	push	r1
    2cbc:	cd b7       	in	r28, 0x3d	; 61
    2cbe:	de b7       	in	r29, 0x3e	; 62
    2cc0:	9a 83       	std	Y+2, r25	; 0x02
    2cc2:	89 83       	std	Y+1, r24	; 0x01
    2cc4:	6b 83       	std	Y+3, r22	; 0x03
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cca:	fc 01       	movw	r30, r24
    2ccc:	82 81       	ldd	r24, Z+2	; 0x02
    2cce:	93 81       	ldd	r25, Z+3	; 0x03
    2cd0:	89 2b       	or	r24, r25
    2cd2:	99 f0       	breq	.+38     	; 0x2cfa <serial_send_byte+0x46>
    2cd4:	89 81       	ldd	r24, Y+1	; 0x01
    2cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd8:	fc 01       	movw	r30, r24
    2cda:	82 81       	ldd	r24, Z+2	; 0x02
    2cdc:	93 81       	ldd	r25, Z+3	; 0x03
    2cde:	6b 81       	ldd	r22, Y+3	; 0x03
    2ce0:	0e 94 db 10 	call	0x21b6	; 0x21b6 <buffer_put_item>
    2ce4:	88 23       	and	r24, r24
    2ce6:	49 f4       	brne	.+18     	; 0x2cfa <serial_send_byte+0x46>
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	9a 81       	ldd	r25, Y+2	; 0x02
    2cec:	fc 01       	movw	r30, r24
    2cee:	80 81       	ld	r24, Z
    2cf0:	91 81       	ldd	r25, Z+1	; 0x01
    2cf2:	0e 94 80 15 	call	0x2b00	; 0x2b00 <_serial_tx_int_on>
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	01 c0       	rjmp	.+2      	; 0x2cfc <serial_send_byte+0x48>
    2cfa:	82 e0       	ldi	r24, 0x02	; 2
    2cfc:	0f 90       	pop	r0
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	df 91       	pop	r29
    2d04:	cf 91       	pop	r28
    2d06:	08 95       	ret

00002d08 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    2d08:	1f 92       	push	r1
    2d0a:	0f 92       	push	r0
    2d0c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2d10:	0f 92       	push	r0
    2d12:	11 24       	eor	r1, r1
    2d14:	2f 93       	push	r18
    2d16:	3f 93       	push	r19
    2d18:	4f 93       	push	r20
    2d1a:	5f 93       	push	r21
    2d1c:	6f 93       	push	r22
    2d1e:	7f 93       	push	r23
    2d20:	8f 93       	push	r24
    2d22:	9f 93       	push	r25
    2d24:	af 93       	push	r26
    2d26:	bf 93       	push	r27
    2d28:	ef 93       	push	r30
    2d2a:	ff 93       	push	r31
    2d2c:	cf 93       	push	r28
    2d2e:	df 93       	push	r29
    2d30:	1f 92       	push	r1
    2d32:	cd b7       	in	r28, 0x3d	; 61
    2d34:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    2d36:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <_ser_handle>
    2d3a:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <_ser_handle+0x1>
    2d3e:	89 2b       	or	r24, r25
    2d40:	31 f1       	breq	.+76     	; 0x2d8e <__vector_20+0x86>
		item = UDR0;
    2d42:	86 ec       	ldi	r24, 0xC6	; 198
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	fc 01       	movw	r30, r24
    2d48:	80 81       	ld	r24, Z
    2d4a:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    2d4c:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <_ser_handle>
    2d50:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <_ser_handle+0x1>
    2d54:	fc 01       	movw	r30, r24
    2d56:	84 81       	ldd	r24, Z+4	; 0x04
    2d58:	95 81       	ldd	r25, Z+5	; 0x05
    2d5a:	69 81       	ldd	r22, Y+1	; 0x01
    2d5c:	0e 94 db 10 	call	0x21b6	; 0x21b6 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    2d60:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <_ser_handle>
    2d64:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <_ser_handle+0x1>
    2d68:	fc 01       	movw	r30, r24
    2d6a:	86 81       	ldd	r24, Z+6	; 0x06
    2d6c:	97 81       	ldd	r25, Z+7	; 0x07
    2d6e:	89 2b       	or	r24, r25
    2d70:	71 f0       	breq	.+28     	; 0x2d8e <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    2d72:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <_ser_handle>
    2d76:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <_ser_handle+0x1>
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	26 81       	ldd	r18, Z+6	; 0x06
    2d7e:	37 81       	ldd	r19, Z+7	; 0x07
    2d80:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <_ser_handle>
    2d84:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <_ser_handle+0x1>
    2d88:	69 81       	ldd	r22, Y+1	; 0x01
    2d8a:	f9 01       	movw	r30, r18
    2d8c:	09 95       	icall
		}
	}
}
    2d8e:	00 00       	nop
    2d90:	0f 90       	pop	r0
    2d92:	df 91       	pop	r29
    2d94:	cf 91       	pop	r28
    2d96:	ff 91       	pop	r31
    2d98:	ef 91       	pop	r30
    2d9a:	bf 91       	pop	r27
    2d9c:	af 91       	pop	r26
    2d9e:	9f 91       	pop	r25
    2da0:	8f 91       	pop	r24
    2da2:	7f 91       	pop	r23
    2da4:	6f 91       	pop	r22
    2da6:	5f 91       	pop	r21
    2da8:	4f 91       	pop	r20
    2daa:	3f 91       	pop	r19
    2dac:	2f 91       	pop	r18
    2dae:	0f 90       	pop	r0
    2db0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2db4:	0f 90       	pop	r0
    2db6:	1f 90       	pop	r1
    2db8:	18 95       	reti

00002dba <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    2dba:	1f 92       	push	r1
    2dbc:	0f 92       	push	r0
    2dbe:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2dc2:	0f 92       	push	r0
    2dc4:	11 24       	eor	r1, r1
    2dc6:	2f 93       	push	r18
    2dc8:	3f 93       	push	r19
    2dca:	4f 93       	push	r20
    2dcc:	5f 93       	push	r21
    2dce:	6f 93       	push	r22
    2dd0:	7f 93       	push	r23
    2dd2:	8f 93       	push	r24
    2dd4:	9f 93       	push	r25
    2dd6:	af 93       	push	r26
    2dd8:	bf 93       	push	r27
    2dda:	ef 93       	push	r30
    2ddc:	ff 93       	push	r31
    2dde:	cf 93       	push	r28
    2de0:	df 93       	push	r29
    2de2:	1f 92       	push	r1
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    2de8:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <_ser_handle>
    2dec:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <_ser_handle+0x1>
    2df0:	89 2b       	or	r24, r25
    2df2:	f9 f0       	breq	.+62     	; 0x2e32 <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    2df4:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <_ser_handle>
    2df8:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <_ser_handle+0x1>
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	82 81       	ldd	r24, Z+2	; 0x02
    2e00:	93 81       	ldd	r25, Z+3	; 0x03
    2e02:	9e 01       	movw	r18, r28
    2e04:	2f 5f       	subi	r18, 0xFF	; 255
    2e06:	3f 4f       	sbci	r19, 0xFF	; 255
    2e08:	b9 01       	movw	r22, r18
    2e0a:	0e 94 93 10 	call	0x2126	; 0x2126 <buffer_get_item>
    2e0e:	88 23       	and	r24, r24
    2e10:	31 f4       	brne	.+12     	; 0x2e1e <__vector_21+0x64>
			UDR0 = item;
    2e12:	86 ec       	ldi	r24, 0xC6	; 198
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	29 81       	ldd	r18, Y+1	; 0x01
    2e18:	fc 01       	movw	r30, r24
    2e1a:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    2e1c:	13 c0       	rjmp	.+38     	; 0x2e44 <__vector_21+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
			UDR0 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    2e1e:	81 ec       	ldi	r24, 0xC1	; 193
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	21 ec       	ldi	r18, 0xC1	; 193
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	f9 01       	movw	r30, r18
    2e28:	20 81       	ld	r18, Z
    2e2a:	2f 7d       	andi	r18, 0xDF	; 223
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    2e30:	09 c0       	rjmp	.+18     	; 0x2e44 <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    2e32:	81 ec       	ldi	r24, 0xC1	; 193
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	21 ec       	ldi	r18, 0xC1	; 193
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	f9 01       	movw	r30, r18
    2e3c:	20 81       	ld	r18, Z
    2e3e:	2f 7d       	andi	r18, 0xDF	; 223
    2e40:	fc 01       	movw	r30, r24
    2e42:	20 83       	st	Z, r18
	}
}
    2e44:	00 00       	nop
    2e46:	0f 90       	pop	r0
    2e48:	df 91       	pop	r29
    2e4a:	cf 91       	pop	r28
    2e4c:	ff 91       	pop	r31
    2e4e:	ef 91       	pop	r30
    2e50:	bf 91       	pop	r27
    2e52:	af 91       	pop	r26
    2e54:	9f 91       	pop	r25
    2e56:	8f 91       	pop	r24
    2e58:	7f 91       	pop	r23
    2e5a:	6f 91       	pop	r22
    2e5c:	5f 91       	pop	r21
    2e5e:	4f 91       	pop	r20
    2e60:	3f 91       	pop	r19
    2e62:	2f 91       	pop	r18
    2e64:	0f 90       	pop	r0
    2e66:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2e6a:	0f 90       	pop	r0
    2e6c:	1f 90       	pop	r1
    2e6e:	18 95       	reti

00002e70 <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    2e70:	1f 92       	push	r1
    2e72:	0f 92       	push	r0
    2e74:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2e78:	0f 92       	push	r0
    2e7a:	11 24       	eor	r1, r1
    2e7c:	2f 93       	push	r18
    2e7e:	3f 93       	push	r19
    2e80:	4f 93       	push	r20
    2e82:	5f 93       	push	r21
    2e84:	6f 93       	push	r22
    2e86:	7f 93       	push	r23
    2e88:	8f 93       	push	r24
    2e8a:	9f 93       	push	r25
    2e8c:	af 93       	push	r26
    2e8e:	bf 93       	push	r27
    2e90:	ef 93       	push	r30
    2e92:	ff 93       	push	r31
    2e94:	cf 93       	push	r28
    2e96:	df 93       	push	r29
    2e98:	1f 92       	push	r1
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    2e9e:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <_ser_handle+0x2>
    2ea2:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <_ser_handle+0x3>
    2ea6:	89 2b       	or	r24, r25
    2ea8:	31 f1       	breq	.+76     	; 0x2ef6 <__vector_28+0x86>
		item = UDR1;
    2eaa:	8e ec       	ldi	r24, 0xCE	; 206
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	fc 01       	movw	r30, r24
    2eb0:	80 81       	ld	r24, Z
    2eb2:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    2eb4:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <_ser_handle+0x2>
    2eb8:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <_ser_handle+0x3>
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	84 81       	ldd	r24, Z+4	; 0x04
    2ec0:	95 81       	ldd	r25, Z+5	; 0x05
    2ec2:	69 81       	ldd	r22, Y+1	; 0x01
    2ec4:	0e 94 db 10 	call	0x21b6	; 0x21b6 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    2ec8:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <_ser_handle+0x2>
    2ecc:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <_ser_handle+0x3>
    2ed0:	fc 01       	movw	r30, r24
    2ed2:	86 81       	ldd	r24, Z+6	; 0x06
    2ed4:	97 81       	ldd	r25, Z+7	; 0x07
    2ed6:	89 2b       	or	r24, r25
    2ed8:	71 f0       	breq	.+28     	; 0x2ef6 <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    2eda:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <_ser_handle+0x2>
    2ede:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <_ser_handle+0x3>
    2ee2:	fc 01       	movw	r30, r24
    2ee4:	26 81       	ldd	r18, Z+6	; 0x06
    2ee6:	37 81       	ldd	r19, Z+7	; 0x07
    2ee8:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <_ser_handle+0x2>
    2eec:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <_ser_handle+0x3>
    2ef0:	69 81       	ldd	r22, Y+1	; 0x01
    2ef2:	f9 01       	movw	r30, r18
    2ef4:	09 95       	icall
		}
	}
}
    2ef6:	00 00       	nop
    2ef8:	0f 90       	pop	r0
    2efa:	df 91       	pop	r29
    2efc:	cf 91       	pop	r28
    2efe:	ff 91       	pop	r31
    2f00:	ef 91       	pop	r30
    2f02:	bf 91       	pop	r27
    2f04:	af 91       	pop	r26
    2f06:	9f 91       	pop	r25
    2f08:	8f 91       	pop	r24
    2f0a:	7f 91       	pop	r23
    2f0c:	6f 91       	pop	r22
    2f0e:	5f 91       	pop	r21
    2f10:	4f 91       	pop	r20
    2f12:	3f 91       	pop	r19
    2f14:	2f 91       	pop	r18
    2f16:	0f 90       	pop	r0
    2f18:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2f1c:	0f 90       	pop	r0
    2f1e:	1f 90       	pop	r1
    2f20:	18 95       	reti

00002f22 <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    2f22:	1f 92       	push	r1
    2f24:	0f 92       	push	r0
    2f26:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2f2a:	0f 92       	push	r0
    2f2c:	11 24       	eor	r1, r1
    2f2e:	2f 93       	push	r18
    2f30:	3f 93       	push	r19
    2f32:	4f 93       	push	r20
    2f34:	5f 93       	push	r21
    2f36:	6f 93       	push	r22
    2f38:	7f 93       	push	r23
    2f3a:	8f 93       	push	r24
    2f3c:	9f 93       	push	r25
    2f3e:	af 93       	push	r26
    2f40:	bf 93       	push	r27
    2f42:	ef 93       	push	r30
    2f44:	ff 93       	push	r31
    2f46:	cf 93       	push	r28
    2f48:	df 93       	push	r29
    2f4a:	1f 92       	push	r1
    2f4c:	cd b7       	in	r28, 0x3d	; 61
    2f4e:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    2f50:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <_ser_handle+0x2>
    2f54:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <_ser_handle+0x3>
    2f58:	89 2b       	or	r24, r25
    2f5a:	f9 f0       	breq	.+62     	; 0x2f9a <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    2f5c:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <_ser_handle+0x2>
    2f60:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <_ser_handle+0x3>
    2f64:	fc 01       	movw	r30, r24
    2f66:	82 81       	ldd	r24, Z+2	; 0x02
    2f68:	93 81       	ldd	r25, Z+3	; 0x03
    2f6a:	9e 01       	movw	r18, r28
    2f6c:	2f 5f       	subi	r18, 0xFF	; 255
    2f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f70:	b9 01       	movw	r22, r18
    2f72:	0e 94 93 10 	call	0x2126	; 0x2126 <buffer_get_item>
    2f76:	88 23       	and	r24, r24
    2f78:	31 f4       	brne	.+12     	; 0x2f86 <__vector_29+0x64>
			UDR1 = item;
    2f7a:	8e ec       	ldi	r24, 0xCE	; 206
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	29 81       	ldd	r18, Y+1	; 0x01
    2f80:	fc 01       	movw	r30, r24
    2f82:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    2f84:	13 c0       	rjmp	.+38     	; 0x2fac <__vector_29+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
			UDR1 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    2f86:	89 ec       	ldi	r24, 0xC9	; 201
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	29 ec       	ldi	r18, 0xC9	; 201
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	f9 01       	movw	r30, r18
    2f90:	20 81       	ld	r18, Z
    2f92:	2f 7d       	andi	r18, 0xDF	; 223
    2f94:	fc 01       	movw	r30, r24
    2f96:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    2f98:	09 c0       	rjmp	.+18     	; 0x2fac <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    2f9a:	89 ec       	ldi	r24, 0xC9	; 201
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	29 ec       	ldi	r18, 0xC9	; 201
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	f9 01       	movw	r30, r18
    2fa4:	20 81       	ld	r18, Z
    2fa6:	2f 7d       	andi	r18, 0xDF	; 223
    2fa8:	fc 01       	movw	r30, r24
    2faa:	20 83       	st	Z, r18
	}
}
    2fac:	00 00       	nop
    2fae:	0f 90       	pop	r0
    2fb0:	df 91       	pop	r29
    2fb2:	cf 91       	pop	r28
    2fb4:	ff 91       	pop	r31
    2fb6:	ef 91       	pop	r30
    2fb8:	bf 91       	pop	r27
    2fba:	af 91       	pop	r26
    2fbc:	9f 91       	pop	r25
    2fbe:	8f 91       	pop	r24
    2fc0:	7f 91       	pop	r23
    2fc2:	6f 91       	pop	r22
    2fc4:	5f 91       	pop	r21
    2fc6:	4f 91       	pop	r20
    2fc8:	3f 91       	pop	r19
    2fca:	2f 91       	pop	r18
    2fcc:	0f 90       	pop	r0
    2fce:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2fd2:	0f 90       	pop	r0
    2fd4:	1f 90       	pop	r1
    2fd6:	18 95       	reti

00002fd8 <pvPortMalloc>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* This just exists to keep the linker quiet. */
}
    2fd8:	cf 93       	push	r28
    2fda:	df 93       	push	r29
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	2e 97       	sbiw	r28, 0x0e	; 14
    2fe2:	0f b6       	in	r0, 0x3f	; 63
    2fe4:	f8 94       	cli
    2fe6:	de bf       	out	0x3e, r29	; 62
    2fe8:	0f be       	out	0x3f, r0	; 63
    2fea:	cd bf       	out	0x3d, r28	; 61
    2fec:	9e 87       	std	Y+14, r25	; 0x0e
    2fee:	8d 87       	std	Y+13, r24	; 0x0d
    2ff0:	1e 82       	std	Y+6, r1	; 0x06
    2ff2:	1d 82       	std	Y+5, r1	; 0x05
    2ff4:	0e 94 93 21 	call	0x4326	; 0x4326 <vTaskSuspendAll>
    2ff8:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <xHeapHasBeenInitialised.2095>
    2ffc:	88 23       	and	r24, r24
    2ffe:	29 f4       	brne	.+10     	; 0x300a <pvPortMalloc+0x32>
    3000:	0e 94 53 19 	call	0x32a6	; 0x32a6 <prvHeapInit>
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <xHeapHasBeenInitialised.2095>
    300a:	8d 85       	ldd	r24, Y+13	; 0x0d
    300c:	9e 85       	ldd	r25, Y+14	; 0x0e
    300e:	89 2b       	or	r24, r25
    3010:	41 f0       	breq	.+16     	; 0x3022 <pvPortMalloc+0x4a>
    3012:	84 e0       	ldi	r24, 0x04	; 4
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	2d 85       	ldd	r18, Y+13	; 0x0d
    3018:	3e 85       	ldd	r19, Y+14	; 0x0e
    301a:	82 0f       	add	r24, r18
    301c:	93 1f       	adc	r25, r19
    301e:	9e 87       	std	Y+14, r25	; 0x0e
    3020:	8d 87       	std	Y+13, r24	; 0x0d
    3022:	8d 85       	ldd	r24, Y+13	; 0x0d
    3024:	9e 85       	ldd	r25, Y+14	; 0x0e
    3026:	89 2b       	or	r24, r25
    3028:	09 f4       	brne	.+2      	; 0x302c <pvPortMalloc+0x54>
    302a:	b8 c0       	rjmp	.+368    	; 0x319c <pvPortMalloc+0x1c4>
    302c:	8d 85       	ldd	r24, Y+13	; 0x0d
    302e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3030:	87 37       	cpi	r24, 0x77	; 119
    3032:	95 40       	sbci	r25, 0x05	; 5
    3034:	08 f0       	brcs	.+2      	; 0x3038 <pvPortMalloc+0x60>
    3036:	b2 c0       	rjmp	.+356    	; 0x319c <pvPortMalloc+0x1c4>
    3038:	8f ed       	ldi	r24, 0xDF	; 223
    303a:	97 e0       	ldi	r25, 0x07	; 7
    303c:	9c 83       	std	Y+4, r25	; 0x04
    303e:	8b 83       	std	Y+3, r24	; 0x03
    3040:	80 91 df 07 	lds	r24, 0x07DF	; 0x8007df <xStart>
    3044:	90 91 e0 07 	lds	r25, 0x07E0	; 0x8007e0 <xStart+0x1>
    3048:	9a 83       	std	Y+2, r25	; 0x02
    304a:	89 83       	std	Y+1, r24	; 0x01
    304c:	0b c0       	rjmp	.+22     	; 0x3064 <pvPortMalloc+0x8c>
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	9a 81       	ldd	r25, Y+2	; 0x02
    3052:	9c 83       	std	Y+4, r25	; 0x04
    3054:	8b 83       	std	Y+3, r24	; 0x03
    3056:	89 81       	ldd	r24, Y+1	; 0x01
    3058:	9a 81       	ldd	r25, Y+2	; 0x02
    305a:	fc 01       	movw	r30, r24
    305c:	80 81       	ld	r24, Z
    305e:	91 81       	ldd	r25, Z+1	; 0x01
    3060:	9a 83       	std	Y+2, r25	; 0x02
    3062:	89 83       	std	Y+1, r24	; 0x01
    3064:	89 81       	ldd	r24, Y+1	; 0x01
    3066:	9a 81       	ldd	r25, Y+2	; 0x02
    3068:	fc 01       	movw	r30, r24
    306a:	22 81       	ldd	r18, Z+2	; 0x02
    306c:	33 81       	ldd	r19, Z+3	; 0x03
    306e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3070:	9e 85       	ldd	r25, Y+14	; 0x0e
    3072:	28 17       	cp	r18, r24
    3074:	39 07       	cpc	r19, r25
    3076:	38 f4       	brcc	.+14     	; 0x3086 <pvPortMalloc+0xae>
    3078:	89 81       	ldd	r24, Y+1	; 0x01
    307a:	9a 81       	ldd	r25, Y+2	; 0x02
    307c:	fc 01       	movw	r30, r24
    307e:	80 81       	ld	r24, Z
    3080:	91 81       	ldd	r25, Z+1	; 0x01
    3082:	89 2b       	or	r24, r25
    3084:	21 f7       	brne	.-56     	; 0x304e <pvPortMalloc+0x76>
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	9a 81       	ldd	r25, Y+2	; 0x02
    308a:	83 5e       	subi	r24, 0xE3	; 227
    308c:	97 40       	sbci	r25, 0x07	; 7
    308e:	09 f4       	brne	.+2      	; 0x3092 <pvPortMalloc+0xba>
    3090:	85 c0       	rjmp	.+266    	; 0x319c <pvPortMalloc+0x1c4>
    3092:	8b 81       	ldd	r24, Y+3	; 0x03
    3094:	9c 81       	ldd	r25, Y+4	; 0x04
    3096:	fc 01       	movw	r30, r24
    3098:	20 81       	ld	r18, Z
    309a:	31 81       	ldd	r19, Z+1	; 0x01
    309c:	84 e0       	ldi	r24, 0x04	; 4
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	82 0f       	add	r24, r18
    30a2:	93 1f       	adc	r25, r19
    30a4:	9e 83       	std	Y+6, r25	; 0x06
    30a6:	8d 83       	std	Y+5, r24	; 0x05
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	9a 81       	ldd	r25, Y+2	; 0x02
    30ac:	fc 01       	movw	r30, r24
    30ae:	20 81       	ld	r18, Z
    30b0:	31 81       	ldd	r19, Z+1	; 0x01
    30b2:	8b 81       	ldd	r24, Y+3	; 0x03
    30b4:	9c 81       	ldd	r25, Y+4	; 0x04
    30b6:	fc 01       	movw	r30, r24
    30b8:	31 83       	std	Z+1, r19	; 0x01
    30ba:	20 83       	st	Z, r18
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
    30be:	9a 81       	ldd	r25, Y+2	; 0x02
    30c0:	fc 01       	movw	r30, r24
    30c2:	22 81       	ldd	r18, Z+2	; 0x02
    30c4:	33 81       	ldd	r19, Z+3	; 0x03
    30c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ca:	28 1b       	sub	r18, r24
    30cc:	39 0b       	sbc	r19, r25
    30ce:	84 e0       	ldi	r24, 0x04	; 4
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	88 0f       	add	r24, r24
    30d4:	99 1f       	adc	r25, r25
    30d6:	82 17       	cp	r24, r18
    30d8:	93 07       	cpc	r25, r19
    30da:	08 f0       	brcs	.+2      	; 0x30de <pvPortMalloc+0x106>
    30dc:	4e c0       	rjmp	.+156    	; 0x317a <pvPortMalloc+0x1a2>
    30de:	29 81       	ldd	r18, Y+1	; 0x01
    30e0:	3a 81       	ldd	r19, Y+2	; 0x02
    30e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e6:	82 0f       	add	r24, r18
    30e8:	93 1f       	adc	r25, r19
    30ea:	9a 87       	std	Y+10, r25	; 0x0a
    30ec:	89 87       	std	Y+9, r24	; 0x09
    30ee:	89 81       	ldd	r24, Y+1	; 0x01
    30f0:	9a 81       	ldd	r25, Y+2	; 0x02
    30f2:	fc 01       	movw	r30, r24
    30f4:	22 81       	ldd	r18, Z+2	; 0x02
    30f6:	33 81       	ldd	r19, Z+3	; 0x03
    30f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    30fc:	28 1b       	sub	r18, r24
    30fe:	39 0b       	sbc	r19, r25
    3100:	89 85       	ldd	r24, Y+9	; 0x09
    3102:	9a 85       	ldd	r25, Y+10	; 0x0a
    3104:	fc 01       	movw	r30, r24
    3106:	33 83       	std	Z+3, r19	; 0x03
    3108:	22 83       	std	Z+2, r18	; 0x02
    310a:	89 81       	ldd	r24, Y+1	; 0x01
    310c:	9a 81       	ldd	r25, Y+2	; 0x02
    310e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3110:	3e 85       	ldd	r19, Y+14	; 0x0e
    3112:	fc 01       	movw	r30, r24
    3114:	33 83       	std	Z+3, r19	; 0x03
    3116:	22 83       	std	Z+2, r18	; 0x02
    3118:	89 85       	ldd	r24, Y+9	; 0x09
    311a:	9a 85       	ldd	r25, Y+10	; 0x0a
    311c:	fc 01       	movw	r30, r24
    311e:	82 81       	ldd	r24, Z+2	; 0x02
    3120:	93 81       	ldd	r25, Z+3	; 0x03
    3122:	9c 87       	std	Y+12, r25	; 0x0c
    3124:	8b 87       	std	Y+11, r24	; 0x0b
    3126:	8f ed       	ldi	r24, 0xDF	; 223
    3128:	97 e0       	ldi	r25, 0x07	; 7
    312a:	98 87       	std	Y+8, r25	; 0x08
    312c:	8f 83       	std	Y+7, r24	; 0x07
    312e:	07 c0       	rjmp	.+14     	; 0x313e <pvPortMalloc+0x166>
    3130:	8f 81       	ldd	r24, Y+7	; 0x07
    3132:	98 85       	ldd	r25, Y+8	; 0x08
    3134:	fc 01       	movw	r30, r24
    3136:	80 81       	ld	r24, Z
    3138:	91 81       	ldd	r25, Z+1	; 0x01
    313a:	98 87       	std	Y+8, r25	; 0x08
    313c:	8f 83       	std	Y+7, r24	; 0x07
    313e:	8f 81       	ldd	r24, Y+7	; 0x07
    3140:	98 85       	ldd	r25, Y+8	; 0x08
    3142:	fc 01       	movw	r30, r24
    3144:	80 81       	ld	r24, Z
    3146:	91 81       	ldd	r25, Z+1	; 0x01
    3148:	fc 01       	movw	r30, r24
    314a:	22 81       	ldd	r18, Z+2	; 0x02
    314c:	33 81       	ldd	r19, Z+3	; 0x03
    314e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3150:	9c 85       	ldd	r25, Y+12	; 0x0c
    3152:	28 17       	cp	r18, r24
    3154:	39 07       	cpc	r19, r25
    3156:	60 f3       	brcs	.-40     	; 0x3130 <pvPortMalloc+0x158>
    3158:	8f 81       	ldd	r24, Y+7	; 0x07
    315a:	98 85       	ldd	r25, Y+8	; 0x08
    315c:	fc 01       	movw	r30, r24
    315e:	20 81       	ld	r18, Z
    3160:	31 81       	ldd	r19, Z+1	; 0x01
    3162:	89 85       	ldd	r24, Y+9	; 0x09
    3164:	9a 85       	ldd	r25, Y+10	; 0x0a
    3166:	fc 01       	movw	r30, r24
    3168:	31 83       	std	Z+1, r19	; 0x01
    316a:	20 83       	st	Z, r18
    316c:	8f 81       	ldd	r24, Y+7	; 0x07
    316e:	98 85       	ldd	r25, Y+8	; 0x08
    3170:	29 85       	ldd	r18, Y+9	; 0x09
    3172:	3a 85       	ldd	r19, Y+10	; 0x0a
    3174:	fc 01       	movw	r30, r24
    3176:	31 83       	std	Z+1, r19	; 0x01
    3178:	20 83       	st	Z, r18
    317a:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <xFreeBytesRemaining>
    317e:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <xFreeBytesRemaining+0x1>
    3182:	89 81       	ldd	r24, Y+1	; 0x01
    3184:	9a 81       	ldd	r25, Y+2	; 0x02
    3186:	fc 01       	movw	r30, r24
    3188:	82 81       	ldd	r24, Z+2	; 0x02
    318a:	93 81       	ldd	r25, Z+3	; 0x03
    318c:	a9 01       	movw	r20, r18
    318e:	48 1b       	sub	r20, r24
    3190:	59 0b       	sbc	r21, r25
    3192:	ca 01       	movw	r24, r20
    3194:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <xFreeBytesRemaining+0x1>
    3198:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <xFreeBytesRemaining>
    319c:	0e 94 a0 21 	call	0x4340	; 0x4340 <xTaskResumeAll>
    31a0:	8d 81       	ldd	r24, Y+5	; 0x05
    31a2:	9e 81       	ldd	r25, Y+6	; 0x06
    31a4:	89 2b       	or	r24, r25
    31a6:	11 f4       	brne	.+4      	; 0x31ac <pvPortMalloc+0x1d4>
    31a8:	0e 94 db 09 	call	0x13b6	; 0x13b6 <vApplicationMallocFailedHook>
    31ac:	8d 81       	ldd	r24, Y+5	; 0x05
    31ae:	9e 81       	ldd	r25, Y+6	; 0x06
    31b0:	2e 96       	adiw	r28, 0x0e	; 14
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	f8 94       	cli
    31b6:	de bf       	out	0x3e, r29	; 62
    31b8:	0f be       	out	0x3f, r0	; 63
    31ba:	cd bf       	out	0x3d, r28	; 61
    31bc:	df 91       	pop	r29
    31be:	cf 91       	pop	r28
    31c0:	08 95       	ret

000031c2 <vPortFree>:
    31c2:	cf 93       	push	r28
    31c4:	df 93       	push	r29
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
    31ca:	2a 97       	sbiw	r28, 0x0a	; 10
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	cd bf       	out	0x3d, r28	; 61
    31d6:	9a 87       	std	Y+10, r25	; 0x0a
    31d8:	89 87       	std	Y+9, r24	; 0x09
    31da:	89 85       	ldd	r24, Y+9	; 0x09
    31dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31de:	9c 83       	std	Y+4, r25	; 0x04
    31e0:	8b 83       	std	Y+3, r24	; 0x03
    31e2:	89 85       	ldd	r24, Y+9	; 0x09
    31e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e6:	89 2b       	or	r24, r25
    31e8:	09 f4       	brne	.+2      	; 0x31ec <vPortFree+0x2a>
    31ea:	53 c0       	rjmp	.+166    	; 0x3292 <vPortFree+0xd0>
    31ec:	84 e0       	ldi	r24, 0x04	; 4
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	91 95       	neg	r25
    31f2:	81 95       	neg	r24
    31f4:	91 09       	sbc	r25, r1
    31f6:	2b 81       	ldd	r18, Y+3	; 0x03
    31f8:	3c 81       	ldd	r19, Y+4	; 0x04
    31fa:	82 0f       	add	r24, r18
    31fc:	93 1f       	adc	r25, r19
    31fe:	9c 83       	std	Y+4, r25	; 0x04
    3200:	8b 83       	std	Y+3, r24	; 0x03
    3202:	8b 81       	ldd	r24, Y+3	; 0x03
    3204:	9c 81       	ldd	r25, Y+4	; 0x04
    3206:	9e 83       	std	Y+6, r25	; 0x06
    3208:	8d 83       	std	Y+5, r24	; 0x05
    320a:	0e 94 93 21 	call	0x4326	; 0x4326 <vTaskSuspendAll>
    320e:	8d 81       	ldd	r24, Y+5	; 0x05
    3210:	9e 81       	ldd	r25, Y+6	; 0x06
    3212:	fc 01       	movw	r30, r24
    3214:	82 81       	ldd	r24, Z+2	; 0x02
    3216:	93 81       	ldd	r25, Z+3	; 0x03
    3218:	98 87       	std	Y+8, r25	; 0x08
    321a:	8f 83       	std	Y+7, r24	; 0x07
    321c:	8f ed       	ldi	r24, 0xDF	; 223
    321e:	97 e0       	ldi	r25, 0x07	; 7
    3220:	9a 83       	std	Y+2, r25	; 0x02
    3222:	89 83       	std	Y+1, r24	; 0x01
    3224:	07 c0       	rjmp	.+14     	; 0x3234 <vPortFree+0x72>
    3226:	89 81       	ldd	r24, Y+1	; 0x01
    3228:	9a 81       	ldd	r25, Y+2	; 0x02
    322a:	fc 01       	movw	r30, r24
    322c:	80 81       	ld	r24, Z
    322e:	91 81       	ldd	r25, Z+1	; 0x01
    3230:	9a 83       	std	Y+2, r25	; 0x02
    3232:	89 83       	std	Y+1, r24	; 0x01
    3234:	89 81       	ldd	r24, Y+1	; 0x01
    3236:	9a 81       	ldd	r25, Y+2	; 0x02
    3238:	fc 01       	movw	r30, r24
    323a:	80 81       	ld	r24, Z
    323c:	91 81       	ldd	r25, Z+1	; 0x01
    323e:	fc 01       	movw	r30, r24
    3240:	22 81       	ldd	r18, Z+2	; 0x02
    3242:	33 81       	ldd	r19, Z+3	; 0x03
    3244:	8f 81       	ldd	r24, Y+7	; 0x07
    3246:	98 85       	ldd	r25, Y+8	; 0x08
    3248:	28 17       	cp	r18, r24
    324a:	39 07       	cpc	r19, r25
    324c:	60 f3       	brcs	.-40     	; 0x3226 <vPortFree+0x64>
    324e:	89 81       	ldd	r24, Y+1	; 0x01
    3250:	9a 81       	ldd	r25, Y+2	; 0x02
    3252:	fc 01       	movw	r30, r24
    3254:	20 81       	ld	r18, Z
    3256:	31 81       	ldd	r19, Z+1	; 0x01
    3258:	8d 81       	ldd	r24, Y+5	; 0x05
    325a:	9e 81       	ldd	r25, Y+6	; 0x06
    325c:	fc 01       	movw	r30, r24
    325e:	31 83       	std	Z+1, r19	; 0x01
    3260:	20 83       	st	Z, r18
    3262:	89 81       	ldd	r24, Y+1	; 0x01
    3264:	9a 81       	ldd	r25, Y+2	; 0x02
    3266:	2d 81       	ldd	r18, Y+5	; 0x05
    3268:	3e 81       	ldd	r19, Y+6	; 0x06
    326a:	fc 01       	movw	r30, r24
    326c:	31 83       	std	Z+1, r19	; 0x01
    326e:	20 83       	st	Z, r18
    3270:	8d 81       	ldd	r24, Y+5	; 0x05
    3272:	9e 81       	ldd	r25, Y+6	; 0x06
    3274:	fc 01       	movw	r30, r24
    3276:	22 81       	ldd	r18, Z+2	; 0x02
    3278:	33 81       	ldd	r19, Z+3	; 0x03
    327a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <xFreeBytesRemaining>
    327e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <xFreeBytesRemaining+0x1>
    3282:	82 0f       	add	r24, r18
    3284:	93 1f       	adc	r25, r19
    3286:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <xFreeBytesRemaining+0x1>
    328a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <xFreeBytesRemaining>
    328e:	0e 94 a0 21 	call	0x4340	; 0x4340 <xTaskResumeAll>
    3292:	00 00       	nop
    3294:	2a 96       	adiw	r28, 0x0a	; 10
    3296:	0f b6       	in	r0, 0x3f	; 63
    3298:	f8 94       	cli
    329a:	de bf       	out	0x3e, r29	; 62
    329c:	0f be       	out	0x3f, r0	; 63
    329e:	cd bf       	out	0x3d, r28	; 61
    32a0:	df 91       	pop	r29
    32a2:	cf 91       	pop	r28
    32a4:	08 95       	ret

000032a6 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    32a6:	cf 93       	push	r28
    32a8:	df 93       	push	r29
    32aa:	00 d0       	rcall	.+0      	; 0x32ac <prvHeapInit+0x6>
    32ac:	00 d0       	rcall	.+0      	; 0x32ae <prvHeapInit+0x8>
    32ae:	cd b7       	in	r28, 0x3d	; 61
    32b0:	de b7       	in	r29, 0x3e	; 62
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    32b2:	88 e6       	ldi	r24, 0x68	; 104
    32b4:	92 e0       	ldi	r25, 0x02	; 2
    32b6:	9a 83       	std	Y+2, r25	; 0x02
    32b8:	89 83       	std	Y+1, r24	; 0x01

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    32ba:	89 81       	ldd	r24, Y+1	; 0x01
    32bc:	9a 81       	ldd	r25, Y+2	; 0x02
    32be:	90 93 e0 07 	sts	0x07E0, r25	; 0x8007e0 <xStart+0x1>
    32c2:	80 93 df 07 	sts	0x07DF, r24	; 0x8007df <xStart>
	xStart.xBlockSize = ( size_t ) 0;
    32c6:	10 92 e2 07 	sts	0x07E2, r1	; 0x8007e2 <xStart+0x3>
    32ca:	10 92 e1 07 	sts	0x07E1, r1	; 0x8007e1 <xStart+0x2>

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    32ce:	87 e7       	ldi	r24, 0x77	; 119
    32d0:	95 e0       	ldi	r25, 0x05	; 5
    32d2:	90 93 e6 07 	sts	0x07E6, r25	; 0x8007e6 <xEnd+0x3>
    32d6:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <xEnd+0x2>
	xEnd.pxNextFreeBlock = NULL;
    32da:	10 92 e4 07 	sts	0x07E4, r1	; 0x8007e4 <xEnd+0x1>
    32de:	10 92 e3 07 	sts	0x07E3, r1	; 0x8007e3 <xEnd>

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    32e2:	89 81       	ldd	r24, Y+1	; 0x01
    32e4:	9a 81       	ldd	r25, Y+2	; 0x02
    32e6:	9c 83       	std	Y+4, r25	; 0x04
    32e8:	8b 83       	std	Y+3, r24	; 0x03
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    32ea:	8b 81       	ldd	r24, Y+3	; 0x03
    32ec:	9c 81       	ldd	r25, Y+4	; 0x04
    32ee:	27 e7       	ldi	r18, 0x77	; 119
    32f0:	35 e0       	ldi	r19, 0x05	; 5
    32f2:	fc 01       	movw	r30, r24
    32f4:	33 83       	std	Z+3, r19	; 0x03
    32f6:	22 83       	std	Z+2, r18	; 0x02
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    32f8:	8b 81       	ldd	r24, Y+3	; 0x03
    32fa:	9c 81       	ldd	r25, Y+4	; 0x04
    32fc:	23 ee       	ldi	r18, 0xE3	; 227
    32fe:	37 e0       	ldi	r19, 0x07	; 7
    3300:	fc 01       	movw	r30, r24
    3302:	31 83       	std	Z+1, r19	; 0x01
    3304:	20 83       	st	Z, r18
}
    3306:	00 00       	nop
    3308:	0f 90       	pop	r0
    330a:	0f 90       	pop	r0
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	df 91       	pop	r29
    3312:	cf 91       	pop	r28
    3314:	08 95       	ret

00003316 <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    3316:	cf 93       	push	r28
    3318:	df 93       	push	r29
    331a:	00 d0       	rcall	.+0      	; 0x331c <xQueueGenericReset+0x6>
    331c:	00 d0       	rcall	.+0      	; 0x331e <xQueueGenericReset+0x8>
    331e:	1f 92       	push	r1
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
    3324:	9c 83       	std	Y+4, r25	; 0x04
    3326:	8b 83       	std	Y+3, r24	; 0x03
    3328:	6d 83       	std	Y+5, r22	; 0x05
    332a:	8b 81       	ldd	r24, Y+3	; 0x03
    332c:	9c 81       	ldd	r25, Y+4	; 0x04
    332e:	9a 83       	std	Y+2, r25	; 0x02
    3330:	89 83       	std	Y+1, r24	; 0x01
    3332:	0f b6       	in	r0, 0x3f	; 63
    3334:	f8 94       	cli
    3336:	0f 92       	push	r0
    3338:	89 81       	ldd	r24, Y+1	; 0x01
    333a:	9a 81       	ldd	r25, Y+2	; 0x02
    333c:	fc 01       	movw	r30, r24
    333e:	80 81       	ld	r24, Z
    3340:	91 81       	ldd	r25, Z+1	; 0x01
    3342:	29 81       	ldd	r18, Y+1	; 0x01
    3344:	3a 81       	ldd	r19, Y+2	; 0x02
    3346:	f9 01       	movw	r30, r18
    3348:	23 8d       	ldd	r18, Z+27	; 0x1b
    334a:	42 2f       	mov	r20, r18
    334c:	50 e0       	ldi	r21, 0x00	; 0
    334e:	29 81       	ldd	r18, Y+1	; 0x01
    3350:	3a 81       	ldd	r19, Y+2	; 0x02
    3352:	f9 01       	movw	r30, r18
    3354:	24 8d       	ldd	r18, Z+28	; 0x1c
    3356:	22 2f       	mov	r18, r18
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	42 9f       	mul	r20, r18
    335c:	b0 01       	movw	r22, r0
    335e:	43 9f       	mul	r20, r19
    3360:	70 0d       	add	r23, r0
    3362:	52 9f       	mul	r21, r18
    3364:	70 0d       	add	r23, r0
    3366:	11 24       	eor	r1, r1
    3368:	9b 01       	movw	r18, r22
    336a:	28 0f       	add	r18, r24
    336c:	39 1f       	adc	r19, r25
    336e:	89 81       	ldd	r24, Y+1	; 0x01
    3370:	9a 81       	ldd	r25, Y+2	; 0x02
    3372:	fc 01       	movw	r30, r24
    3374:	33 83       	std	Z+3, r19	; 0x03
    3376:	22 83       	std	Z+2, r18	; 0x02
    3378:	89 81       	ldd	r24, Y+1	; 0x01
    337a:	9a 81       	ldd	r25, Y+2	; 0x02
    337c:	fc 01       	movw	r30, r24
    337e:	12 8e       	std	Z+26, r1	; 0x1a
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	9a 81       	ldd	r25, Y+2	; 0x02
    3384:	fc 01       	movw	r30, r24
    3386:	20 81       	ld	r18, Z
    3388:	31 81       	ldd	r19, Z+1	; 0x01
    338a:	89 81       	ldd	r24, Y+1	; 0x01
    338c:	9a 81       	ldd	r25, Y+2	; 0x02
    338e:	fc 01       	movw	r30, r24
    3390:	35 83       	std	Z+5, r19	; 0x05
    3392:	24 83       	std	Z+4, r18	; 0x04
    3394:	89 81       	ldd	r24, Y+1	; 0x01
    3396:	9a 81       	ldd	r25, Y+2	; 0x02
    3398:	fc 01       	movw	r30, r24
    339a:	80 81       	ld	r24, Z
    339c:	91 81       	ldd	r25, Z+1	; 0x01
    339e:	29 81       	ldd	r18, Y+1	; 0x01
    33a0:	3a 81       	ldd	r19, Y+2	; 0x02
    33a2:	f9 01       	movw	r30, r18
    33a4:	23 8d       	ldd	r18, Z+27	; 0x1b
    33a6:	22 2f       	mov	r18, r18
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	a9 01       	movw	r20, r18
    33ac:	41 50       	subi	r20, 0x01	; 1
    33ae:	51 09       	sbc	r21, r1
    33b0:	29 81       	ldd	r18, Y+1	; 0x01
    33b2:	3a 81       	ldd	r19, Y+2	; 0x02
    33b4:	f9 01       	movw	r30, r18
    33b6:	24 8d       	ldd	r18, Z+28	; 0x1c
    33b8:	22 2f       	mov	r18, r18
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	42 9f       	mul	r20, r18
    33be:	b0 01       	movw	r22, r0
    33c0:	43 9f       	mul	r20, r19
    33c2:	70 0d       	add	r23, r0
    33c4:	52 9f       	mul	r21, r18
    33c6:	70 0d       	add	r23, r0
    33c8:	11 24       	eor	r1, r1
    33ca:	9b 01       	movw	r18, r22
    33cc:	28 0f       	add	r18, r24
    33ce:	39 1f       	adc	r19, r25
    33d0:	89 81       	ldd	r24, Y+1	; 0x01
    33d2:	9a 81       	ldd	r25, Y+2	; 0x02
    33d4:	fc 01       	movw	r30, r24
    33d6:	37 83       	std	Z+7, r19	; 0x07
    33d8:	26 83       	std	Z+6, r18	; 0x06
    33da:	89 81       	ldd	r24, Y+1	; 0x01
    33dc:	9a 81       	ldd	r25, Y+2	; 0x02
    33de:	2f ef       	ldi	r18, 0xFF	; 255
    33e0:	fc 01       	movw	r30, r24
    33e2:	25 8f       	std	Z+29, r18	; 0x1d
    33e4:	89 81       	ldd	r24, Y+1	; 0x01
    33e6:	9a 81       	ldd	r25, Y+2	; 0x02
    33e8:	2f ef       	ldi	r18, 0xFF	; 255
    33ea:	fc 01       	movw	r30, r24
    33ec:	26 8f       	std	Z+30, r18	; 0x1e
    33ee:	8d 81       	ldd	r24, Y+5	; 0x05
    33f0:	88 23       	and	r24, r24
    33f2:	81 f4       	brne	.+32     	; 0x3414 <xQueueGenericReset+0xfe>
    33f4:	89 81       	ldd	r24, Y+1	; 0x01
    33f6:	9a 81       	ldd	r25, Y+2	; 0x02
    33f8:	fc 01       	movw	r30, r24
    33fa:	80 85       	ldd	r24, Z+8	; 0x08
    33fc:	88 23       	and	r24, r24
    33fe:	a1 f0       	breq	.+40     	; 0x3428 <xQueueGenericReset+0x112>
    3400:	89 81       	ldd	r24, Y+1	; 0x01
    3402:	9a 81       	ldd	r25, Y+2	; 0x02
    3404:	08 96       	adiw	r24, 0x08	; 8
    3406:	0e 94 33 24 	call	0x4866	; 0x4866 <xTaskRemoveFromEventList>
    340a:	88 23       	and	r24, r24
    340c:	69 f0       	breq	.+26     	; 0x3428 <xQueueGenericReset+0x112>
    340e:	0e 94 62 14 	call	0x28c4	; 0x28c4 <vPortYield>
    3412:	0a c0       	rjmp	.+20     	; 0x3428 <xQueueGenericReset+0x112>
    3414:	89 81       	ldd	r24, Y+1	; 0x01
    3416:	9a 81       	ldd	r25, Y+2	; 0x02
    3418:	08 96       	adiw	r24, 0x08	; 8
    341a:	0e 94 1e 11 	call	0x223c	; 0x223c <vListInitialise>
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	9a 81       	ldd	r25, Y+2	; 0x02
    3422:	41 96       	adiw	r24, 0x11	; 17
    3424:	0e 94 1e 11 	call	0x223c	; 0x223c <vListInitialise>
    3428:	0f 90       	pop	r0
    342a:	0f be       	out	0x3f, r0	; 63
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	0f 90       	pop	r0
    3430:	0f 90       	pop	r0
    3432:	0f 90       	pop	r0
    3434:	0f 90       	pop	r0
    3436:	0f 90       	pop	r0
    3438:	df 91       	pop	r29
    343a:	cf 91       	pop	r28
    343c:	08 95       	ret

0000343e <xQueueGenericCreate>:
    343e:	0f 93       	push	r16
    3440:	1f 93       	push	r17
    3442:	cf 93       	push	r28
    3444:	df 93       	push	r29
    3446:	cd b7       	in	r28, 0x3d	; 61
    3448:	de b7       	in	r29, 0x3e	; 62
    344a:	29 97       	sbiw	r28, 0x09	; 9
    344c:	0f b6       	in	r0, 0x3f	; 63
    344e:	f8 94       	cli
    3450:	de bf       	out	0x3e, r29	; 62
    3452:	0f be       	out	0x3f, r0	; 63
    3454:	cd bf       	out	0x3d, r28	; 61
    3456:	8f 83       	std	Y+7, r24	; 0x07
    3458:	68 87       	std	Y+8, r22	; 0x08
    345a:	49 87       	std	Y+9, r20	; 0x09
    345c:	88 85       	ldd	r24, Y+8	; 0x08
    345e:	88 23       	and	r24, r24
    3460:	19 f4       	brne	.+6      	; 0x3468 <xQueueGenericCreate+0x2a>
    3462:	1a 82       	std	Y+2, r1	; 0x02
    3464:	19 82       	std	Y+1, r1	; 0x01
    3466:	0f c0       	rjmp	.+30     	; 0x3486 <xQueueGenericCreate+0x48>
    3468:	8f 81       	ldd	r24, Y+7	; 0x07
    346a:	48 2f       	mov	r20, r24
    346c:	50 e0       	ldi	r21, 0x00	; 0
    346e:	88 85       	ldd	r24, Y+8	; 0x08
    3470:	28 2f       	mov	r18, r24
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	42 9f       	mul	r20, r18
    3476:	c0 01       	movw	r24, r0
    3478:	43 9f       	mul	r20, r19
    347a:	90 0d       	add	r25, r0
    347c:	52 9f       	mul	r21, r18
    347e:	90 0d       	add	r25, r0
    3480:	11 24       	eor	r1, r1
    3482:	9a 83       	std	Y+2, r25	; 0x02
    3484:	89 83       	std	Y+1, r24	; 0x01
    3486:	89 81       	ldd	r24, Y+1	; 0x01
    3488:	9a 81       	ldd	r25, Y+2	; 0x02
    348a:	81 96       	adiw	r24, 0x21	; 33
    348c:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <pvPortMalloc>
    3490:	9c 83       	std	Y+4, r25	; 0x04
    3492:	8b 83       	std	Y+3, r24	; 0x03
    3494:	8b 81       	ldd	r24, Y+3	; 0x03
    3496:	9c 81       	ldd	r25, Y+4	; 0x04
    3498:	89 2b       	or	r24, r25
    349a:	81 f0       	breq	.+32     	; 0x34bc <xQueueGenericCreate+0x7e>
    349c:	8b 81       	ldd	r24, Y+3	; 0x03
    349e:	9c 81       	ldd	r25, Y+4	; 0x04
    34a0:	81 96       	adiw	r24, 0x21	; 33
    34a2:	9e 83       	std	Y+6, r25	; 0x06
    34a4:	8d 83       	std	Y+5, r24	; 0x05
    34a6:	2b 81       	ldd	r18, Y+3	; 0x03
    34a8:	3c 81       	ldd	r19, Y+4	; 0x04
    34aa:	8d 81       	ldd	r24, Y+5	; 0x05
    34ac:	9e 81       	ldd	r25, Y+6	; 0x06
    34ae:	89 01       	movw	r16, r18
    34b0:	29 85       	ldd	r18, Y+9	; 0x09
    34b2:	ac 01       	movw	r20, r24
    34b4:	68 85       	ldd	r22, Y+8	; 0x08
    34b6:	8f 81       	ldd	r24, Y+7	; 0x07
    34b8:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <prvInitialiseNewQueue>
    34bc:	8b 81       	ldd	r24, Y+3	; 0x03
    34be:	9c 81       	ldd	r25, Y+4	; 0x04
    34c0:	29 96       	adiw	r28, 0x09	; 9
    34c2:	0f b6       	in	r0, 0x3f	; 63
    34c4:	f8 94       	cli
    34c6:	de bf       	out	0x3e, r29	; 62
    34c8:	0f be       	out	0x3f, r0	; 63
    34ca:	cd bf       	out	0x3d, r28	; 61
    34cc:	df 91       	pop	r29
    34ce:	cf 91       	pop	r28
    34d0:	1f 91       	pop	r17
    34d2:	0f 91       	pop	r16
    34d4:	08 95       	ret

000034d6 <prvInitialiseNewQueue>:
    34d6:	0f 93       	push	r16
    34d8:	1f 93       	push	r17
    34da:	cf 93       	push	r28
    34dc:	df 93       	push	r29
    34de:	cd b7       	in	r28, 0x3d	; 61
    34e0:	de b7       	in	r29, 0x3e	; 62
    34e2:	27 97       	sbiw	r28, 0x07	; 7
    34e4:	0f b6       	in	r0, 0x3f	; 63
    34e6:	f8 94       	cli
    34e8:	de bf       	out	0x3e, r29	; 62
    34ea:	0f be       	out	0x3f, r0	; 63
    34ec:	cd bf       	out	0x3d, r28	; 61
    34ee:	89 83       	std	Y+1, r24	; 0x01
    34f0:	6a 83       	std	Y+2, r22	; 0x02
    34f2:	5c 83       	std	Y+4, r21	; 0x04
    34f4:	4b 83       	std	Y+3, r20	; 0x03
    34f6:	2d 83       	std	Y+5, r18	; 0x05
    34f8:	1f 83       	std	Y+7, r17	; 0x07
    34fa:	0e 83       	std	Y+6, r16	; 0x06
    34fc:	8a 81       	ldd	r24, Y+2	; 0x02
    34fe:	88 23       	and	r24, r24
    3500:	41 f4       	brne	.+16     	; 0x3512 <prvInitialiseNewQueue+0x3c>
    3502:	8e 81       	ldd	r24, Y+6	; 0x06
    3504:	9f 81       	ldd	r25, Y+7	; 0x07
    3506:	2e 81       	ldd	r18, Y+6	; 0x06
    3508:	3f 81       	ldd	r19, Y+7	; 0x07
    350a:	fc 01       	movw	r30, r24
    350c:	31 83       	std	Z+1, r19	; 0x01
    350e:	20 83       	st	Z, r18
    3510:	07 c0       	rjmp	.+14     	; 0x3520 <prvInitialiseNewQueue+0x4a>
    3512:	8e 81       	ldd	r24, Y+6	; 0x06
    3514:	9f 81       	ldd	r25, Y+7	; 0x07
    3516:	2b 81       	ldd	r18, Y+3	; 0x03
    3518:	3c 81       	ldd	r19, Y+4	; 0x04
    351a:	fc 01       	movw	r30, r24
    351c:	31 83       	std	Z+1, r19	; 0x01
    351e:	20 83       	st	Z, r18
    3520:	8e 81       	ldd	r24, Y+6	; 0x06
    3522:	9f 81       	ldd	r25, Y+7	; 0x07
    3524:	29 81       	ldd	r18, Y+1	; 0x01
    3526:	fc 01       	movw	r30, r24
    3528:	23 8f       	std	Z+27, r18	; 0x1b
    352a:	8e 81       	ldd	r24, Y+6	; 0x06
    352c:	9f 81       	ldd	r25, Y+7	; 0x07
    352e:	2a 81       	ldd	r18, Y+2	; 0x02
    3530:	fc 01       	movw	r30, r24
    3532:	24 8f       	std	Z+28, r18	; 0x1c
    3534:	8e 81       	ldd	r24, Y+6	; 0x06
    3536:	9f 81       	ldd	r25, Y+7	; 0x07
    3538:	61 e0       	ldi	r22, 0x01	; 1
    353a:	0e 94 8b 19 	call	0x3316	; 0x3316 <xQueueGenericReset>
    353e:	8e 81       	ldd	r24, Y+6	; 0x06
    3540:	9f 81       	ldd	r25, Y+7	; 0x07
    3542:	2d 81       	ldd	r18, Y+5	; 0x05
    3544:	fc 01       	movw	r30, r24
    3546:	20 a3       	std	Z+32, r18	; 0x20
    3548:	00 00       	nop
    354a:	27 96       	adiw	r28, 0x07	; 7
    354c:	0f b6       	in	r0, 0x3f	; 63
    354e:	f8 94       	cli
    3550:	de bf       	out	0x3e, r29	; 62
    3552:	0f be       	out	0x3f, r0	; 63
    3554:	cd bf       	out	0x3d, r28	; 61
    3556:	df 91       	pop	r29
    3558:	cf 91       	pop	r28
    355a:	1f 91       	pop	r17
    355c:	0f 91       	pop	r16
    355e:	08 95       	ret

00003560 <prvInitialiseMutex>:
    3560:	cf 93       	push	r28
    3562:	df 93       	push	r29
    3564:	00 d0       	rcall	.+0      	; 0x3566 <prvInitialiseMutex+0x6>
    3566:	cd b7       	in	r28, 0x3d	; 61
    3568:	de b7       	in	r29, 0x3e	; 62
    356a:	9a 83       	std	Y+2, r25	; 0x02
    356c:	89 83       	std	Y+1, r24	; 0x01
    356e:	89 81       	ldd	r24, Y+1	; 0x01
    3570:	9a 81       	ldd	r25, Y+2	; 0x02
    3572:	89 2b       	or	r24, r25
    3574:	b9 f0       	breq	.+46     	; 0x35a4 <prvInitialiseMutex+0x44>
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	9a 81       	ldd	r25, Y+2	; 0x02
    357a:	fc 01       	movw	r30, r24
    357c:	13 82       	std	Z+3, r1	; 0x03
    357e:	12 82       	std	Z+2, r1	; 0x02
    3580:	89 81       	ldd	r24, Y+1	; 0x01
    3582:	9a 81       	ldd	r25, Y+2	; 0x02
    3584:	fc 01       	movw	r30, r24
    3586:	11 82       	std	Z+1, r1	; 0x01
    3588:	10 82       	st	Z, r1
    358a:	89 81       	ldd	r24, Y+1	; 0x01
    358c:	9a 81       	ldd	r25, Y+2	; 0x02
    358e:	fc 01       	movw	r30, r24
    3590:	16 82       	std	Z+6, r1	; 0x06
    3592:	89 81       	ldd	r24, Y+1	; 0x01
    3594:	9a 81       	ldd	r25, Y+2	; 0x02
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	40 e0       	ldi	r20, 0x00	; 0
    359a:	50 e0       	ldi	r21, 0x00	; 0
    359c:	60 e0       	ldi	r22, 0x00	; 0
    359e:	70 e0       	ldi	r23, 0x00	; 0
    35a0:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <xQueueGenericSend>
    35a4:	00 00       	nop
    35a6:	0f 90       	pop	r0
    35a8:	0f 90       	pop	r0
    35aa:	df 91       	pop	r29
    35ac:	cf 91       	pop	r28
    35ae:	08 95       	ret

000035b0 <xQueueCreateMutex>:
    35b0:	cf 93       	push	r28
    35b2:	df 93       	push	r29
    35b4:	00 d0       	rcall	.+0      	; 0x35b6 <xQueueCreateMutex+0x6>
    35b6:	00 d0       	rcall	.+0      	; 0x35b8 <xQueueCreateMutex+0x8>
    35b8:	1f 92       	push	r1
    35ba:	cd b7       	in	r28, 0x3d	; 61
    35bc:	de b7       	in	r29, 0x3e	; 62
    35be:	8d 83       	std	Y+5, r24	; 0x05
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	89 83       	std	Y+1, r24	; 0x01
    35c4:	1a 82       	std	Y+2, r1	; 0x02
    35c6:	4d 81       	ldd	r20, Y+5	; 0x05
    35c8:	6a 81       	ldd	r22, Y+2	; 0x02
    35ca:	89 81       	ldd	r24, Y+1	; 0x01
    35cc:	0e 94 1f 1a 	call	0x343e	; 0x343e <xQueueGenericCreate>
    35d0:	9c 83       	std	Y+4, r25	; 0x04
    35d2:	8b 83       	std	Y+3, r24	; 0x03
    35d4:	8b 81       	ldd	r24, Y+3	; 0x03
    35d6:	9c 81       	ldd	r25, Y+4	; 0x04
    35d8:	0e 94 b0 1a 	call	0x3560	; 0x3560 <prvInitialiseMutex>
    35dc:	8b 81       	ldd	r24, Y+3	; 0x03
    35de:	9c 81       	ldd	r25, Y+4	; 0x04
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	0f 90       	pop	r0
    35e6:	0f 90       	pop	r0
    35e8:	0f 90       	pop	r0
    35ea:	df 91       	pop	r29
    35ec:	cf 91       	pop	r28
    35ee:	08 95       	ret

000035f0 <xQueueGenericSend>:
    35f0:	cf 93       	push	r28
    35f2:	df 93       	push	r29
    35f4:	cd b7       	in	r28, 0x3d	; 61
    35f6:	de b7       	in	r29, 0x3e	; 62
    35f8:	2e 97       	sbiw	r28, 0x0e	; 14
    35fa:	0f b6       	in	r0, 0x3f	; 63
    35fc:	f8 94       	cli
    35fe:	de bf       	out	0x3e, r29	; 62
    3600:	0f be       	out	0x3f, r0	; 63
    3602:	cd bf       	out	0x3d, r28	; 61
    3604:	99 87       	std	Y+9, r25	; 0x09
    3606:	88 87       	std	Y+8, r24	; 0x08
    3608:	7b 87       	std	Y+11, r23	; 0x0b
    360a:	6a 87       	std	Y+10, r22	; 0x0a
    360c:	5d 87       	std	Y+13, r21	; 0x0d
    360e:	4c 87       	std	Y+12, r20	; 0x0c
    3610:	2e 87       	std	Y+14, r18	; 0x0e
    3612:	19 82       	std	Y+1, r1	; 0x01
    3614:	88 85       	ldd	r24, Y+8	; 0x08
    3616:	99 85       	ldd	r25, Y+9	; 0x09
    3618:	9b 83       	std	Y+3, r25	; 0x03
    361a:	8a 83       	std	Y+2, r24	; 0x02
    361c:	0f b6       	in	r0, 0x3f	; 63
    361e:	f8 94       	cli
    3620:	0f 92       	push	r0
    3622:	8a 81       	ldd	r24, Y+2	; 0x02
    3624:	9b 81       	ldd	r25, Y+3	; 0x03
    3626:	fc 01       	movw	r30, r24
    3628:	22 8d       	ldd	r18, Z+26	; 0x1a
    362a:	8a 81       	ldd	r24, Y+2	; 0x02
    362c:	9b 81       	ldd	r25, Y+3	; 0x03
    362e:	fc 01       	movw	r30, r24
    3630:	83 8d       	ldd	r24, Z+27	; 0x1b
    3632:	28 17       	cp	r18, r24
    3634:	18 f0       	brcs	.+6      	; 0x363c <xQueueGenericSend+0x4c>
    3636:	8e 85       	ldd	r24, Y+14	; 0x0e
    3638:	82 30       	cpi	r24, 0x02	; 2
    363a:	11 f5       	brne	.+68     	; 0x3680 <xQueueGenericSend+0x90>
    363c:	2a 85       	ldd	r18, Y+10	; 0x0a
    363e:	3b 85       	ldd	r19, Y+11	; 0x0b
    3640:	8a 81       	ldd	r24, Y+2	; 0x02
    3642:	9b 81       	ldd	r25, Y+3	; 0x03
    3644:	4e 85       	ldd	r20, Y+14	; 0x0e
    3646:	b9 01       	movw	r22, r18
    3648:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <prvCopyDataToQueue>
    364c:	8c 83       	std	Y+4, r24	; 0x04
    364e:	8a 81       	ldd	r24, Y+2	; 0x02
    3650:	9b 81       	ldd	r25, Y+3	; 0x03
    3652:	fc 01       	movw	r30, r24
    3654:	81 89       	ldd	r24, Z+17	; 0x11
    3656:	88 23       	and	r24, r24
    3658:	51 f0       	breq	.+20     	; 0x366e <xQueueGenericSend+0x7e>
    365a:	8a 81       	ldd	r24, Y+2	; 0x02
    365c:	9b 81       	ldd	r25, Y+3	; 0x03
    365e:	41 96       	adiw	r24, 0x11	; 17
    3660:	0e 94 33 24 	call	0x4866	; 0x4866 <xTaskRemoveFromEventList>
    3664:	88 23       	and	r24, r24
    3666:	41 f0       	breq	.+16     	; 0x3678 <xQueueGenericSend+0x88>
    3668:	0e 94 62 14 	call	0x28c4	; 0x28c4 <vPortYield>
    366c:	05 c0       	rjmp	.+10     	; 0x3678 <xQueueGenericSend+0x88>
    366e:	8c 81       	ldd	r24, Y+4	; 0x04
    3670:	88 23       	and	r24, r24
    3672:	11 f0       	breq	.+4      	; 0x3678 <xQueueGenericSend+0x88>
    3674:	0e 94 62 14 	call	0x28c4	; 0x28c4 <vPortYield>
    3678:	0f 90       	pop	r0
    367a:	0f be       	out	0x3f, r0	; 63
    367c:	81 e0       	ldi	r24, 0x01	; 1
    367e:	60 c0       	rjmp	.+192    	; 0x3740 <xQueueGenericSend+0x150>
    3680:	8c 85       	ldd	r24, Y+12	; 0x0c
    3682:	9d 85       	ldd	r25, Y+13	; 0x0d
    3684:	89 2b       	or	r24, r25
    3686:	21 f4       	brne	.+8      	; 0x3690 <xQueueGenericSend+0xa0>
    3688:	0f 90       	pop	r0
    368a:	0f be       	out	0x3f, r0	; 63
    368c:	80 e0       	ldi	r24, 0x00	; 0
    368e:	58 c0       	rjmp	.+176    	; 0x3740 <xQueueGenericSend+0x150>
    3690:	89 81       	ldd	r24, Y+1	; 0x01
    3692:	88 23       	and	r24, r24
    3694:	31 f4       	brne	.+12     	; 0x36a2 <xQueueGenericSend+0xb2>
    3696:	ce 01       	movw	r24, r28
    3698:	05 96       	adiw	r24, 0x05	; 5
    369a:	0e 94 a0 24 	call	0x4940	; 0x4940 <vTaskSetTimeOutState>
    369e:	81 e0       	ldi	r24, 0x01	; 1
    36a0:	89 83       	std	Y+1, r24	; 0x01
    36a2:	0f 90       	pop	r0
    36a4:	0f be       	out	0x3f, r0	; 63
    36a6:	0e 94 93 21 	call	0x4326	; 0x4326 <vTaskSuspendAll>
    36aa:	0f b6       	in	r0, 0x3f	; 63
    36ac:	f8 94       	cli
    36ae:	0f 92       	push	r0
    36b0:	8a 81       	ldd	r24, Y+2	; 0x02
    36b2:	9b 81       	ldd	r25, Y+3	; 0x03
    36b4:	fc 01       	movw	r30, r24
    36b6:	85 8d       	ldd	r24, Z+29	; 0x1d
    36b8:	8f 3f       	cpi	r24, 0xFF	; 255
    36ba:	21 f4       	brne	.+8      	; 0x36c4 <xQueueGenericSend+0xd4>
    36bc:	8a 81       	ldd	r24, Y+2	; 0x02
    36be:	9b 81       	ldd	r25, Y+3	; 0x03
    36c0:	fc 01       	movw	r30, r24
    36c2:	15 8e       	std	Z+29, r1	; 0x1d
    36c4:	8a 81       	ldd	r24, Y+2	; 0x02
    36c6:	9b 81       	ldd	r25, Y+3	; 0x03
    36c8:	fc 01       	movw	r30, r24
    36ca:	86 8d       	ldd	r24, Z+30	; 0x1e
    36cc:	8f 3f       	cpi	r24, 0xFF	; 255
    36ce:	21 f4       	brne	.+8      	; 0x36d8 <xQueueGenericSend+0xe8>
    36d0:	8a 81       	ldd	r24, Y+2	; 0x02
    36d2:	9b 81       	ldd	r25, Y+3	; 0x03
    36d4:	fc 01       	movw	r30, r24
    36d6:	16 8e       	std	Z+30, r1	; 0x1e
    36d8:	0f 90       	pop	r0
    36da:	0f be       	out	0x3f, r0	; 63
    36dc:	9e 01       	movw	r18, r28
    36de:	24 5f       	subi	r18, 0xF4	; 244
    36e0:	3f 4f       	sbci	r19, 0xFF	; 255
    36e2:	ce 01       	movw	r24, r28
    36e4:	05 96       	adiw	r24, 0x05	; 5
    36e6:	b9 01       	movw	r22, r18
    36e8:	0e 94 bc 24 	call	0x4978	; 0x4978 <xTaskCheckForTimeOut>
    36ec:	88 23       	and	r24, r24
    36ee:	09 f5       	brne	.+66     	; 0x3732 <xQueueGenericSend+0x142>
    36f0:	8a 81       	ldd	r24, Y+2	; 0x02
    36f2:	9b 81       	ldd	r25, Y+3	; 0x03
    36f4:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <prvIsQueueFull>
    36f8:	88 23       	and	r24, r24
    36fa:	a1 f0       	breq	.+40     	; 0x3724 <xQueueGenericSend+0x134>
    36fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    36fe:	3d 85       	ldd	r19, Y+13	; 0x0d
    3700:	8a 81       	ldd	r24, Y+2	; 0x02
    3702:	9b 81       	ldd	r25, Y+3	; 0x03
    3704:	08 96       	adiw	r24, 0x08	; 8
    3706:	b9 01       	movw	r22, r18
    3708:	0e 94 10 24 	call	0x4820	; 0x4820 <vTaskPlaceOnEventList>
    370c:	8a 81       	ldd	r24, Y+2	; 0x02
    370e:	9b 81       	ldd	r25, Y+3	; 0x03
    3710:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <prvUnlockQueue>
    3714:	0e 94 a0 21 	call	0x4340	; 0x4340 <xTaskResumeAll>
    3718:	88 23       	and	r24, r24
    371a:	09 f0       	breq	.+2      	; 0x371e <xQueueGenericSend+0x12e>
    371c:	7f cf       	rjmp	.-258    	; 0x361c <xQueueGenericSend+0x2c>
    371e:	0e 94 62 14 	call	0x28c4	; 0x28c4 <vPortYield>
    3722:	7c cf       	rjmp	.-264    	; 0x361c <xQueueGenericSend+0x2c>
    3724:	8a 81       	ldd	r24, Y+2	; 0x02
    3726:	9b 81       	ldd	r25, Y+3	; 0x03
    3728:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <prvUnlockQueue>
    372c:	0e 94 a0 21 	call	0x4340	; 0x4340 <xTaskResumeAll>
    3730:	75 cf       	rjmp	.-278    	; 0x361c <xQueueGenericSend+0x2c>
    3732:	8a 81       	ldd	r24, Y+2	; 0x02
    3734:	9b 81       	ldd	r25, Y+3	; 0x03
    3736:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <prvUnlockQueue>
    373a:	0e 94 a0 21 	call	0x4340	; 0x4340 <xTaskResumeAll>
    373e:	80 e0       	ldi	r24, 0x00	; 0
    3740:	2e 96       	adiw	r28, 0x0e	; 14
    3742:	0f b6       	in	r0, 0x3f	; 63
    3744:	f8 94       	cli
    3746:	de bf       	out	0x3e, r29	; 62
    3748:	0f be       	out	0x3f, r0	; 63
    374a:	cd bf       	out	0x3d, r28	; 61
    374c:	df 91       	pop	r29
    374e:	cf 91       	pop	r28
    3750:	08 95       	ret

00003752 <xQueueGenericSendFromISR>:
    3752:	cf 93       	push	r28
    3754:	df 93       	push	r29
    3756:	cd b7       	in	r28, 0x3d	; 61
    3758:	de b7       	in	r29, 0x3e	; 62
    375a:	2c 97       	sbiw	r28, 0x0c	; 12
    375c:	0f b6       	in	r0, 0x3f	; 63
    375e:	f8 94       	cli
    3760:	de bf       	out	0x3e, r29	; 62
    3762:	0f be       	out	0x3f, r0	; 63
    3764:	cd bf       	out	0x3d, r28	; 61
    3766:	9f 83       	std	Y+7, r25	; 0x07
    3768:	8e 83       	std	Y+6, r24	; 0x06
    376a:	79 87       	std	Y+9, r23	; 0x09
    376c:	68 87       	std	Y+8, r22	; 0x08
    376e:	5b 87       	std	Y+11, r21	; 0x0b
    3770:	4a 87       	std	Y+10, r20	; 0x0a
    3772:	2c 87       	std	Y+12, r18	; 0x0c
    3774:	8e 81       	ldd	r24, Y+6	; 0x06
    3776:	9f 81       	ldd	r25, Y+7	; 0x07
    3778:	9b 83       	std	Y+3, r25	; 0x03
    377a:	8a 83       	std	Y+2, r24	; 0x02
    377c:	1c 82       	std	Y+4, r1	; 0x04
    377e:	8a 81       	ldd	r24, Y+2	; 0x02
    3780:	9b 81       	ldd	r25, Y+3	; 0x03
    3782:	fc 01       	movw	r30, r24
    3784:	22 8d       	ldd	r18, Z+26	; 0x1a
    3786:	8a 81       	ldd	r24, Y+2	; 0x02
    3788:	9b 81       	ldd	r25, Y+3	; 0x03
    378a:	fc 01       	movw	r30, r24
    378c:	83 8d       	ldd	r24, Z+27	; 0x1b
    378e:	28 17       	cp	r18, r24
    3790:	18 f0       	brcs	.+6      	; 0x3798 <xQueueGenericSendFromISR+0x46>
    3792:	8c 85       	ldd	r24, Y+12	; 0x0c
    3794:	82 30       	cpi	r24, 0x02	; 2
    3796:	89 f5       	brne	.+98     	; 0x37fa <xQueueGenericSendFromISR+0xa8>
    3798:	8a 81       	ldd	r24, Y+2	; 0x02
    379a:	9b 81       	ldd	r25, Y+3	; 0x03
    379c:	fc 01       	movw	r30, r24
    379e:	86 8d       	ldd	r24, Z+30	; 0x1e
    37a0:	8d 83       	std	Y+5, r24	; 0x05
    37a2:	28 85       	ldd	r18, Y+8	; 0x08
    37a4:	39 85       	ldd	r19, Y+9	; 0x09
    37a6:	8a 81       	ldd	r24, Y+2	; 0x02
    37a8:	9b 81       	ldd	r25, Y+3	; 0x03
    37aa:	4c 85       	ldd	r20, Y+12	; 0x0c
    37ac:	b9 01       	movw	r22, r18
    37ae:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <prvCopyDataToQueue>
    37b2:	8d 81       	ldd	r24, Y+5	; 0x05
    37b4:	8f 3f       	cpi	r24, 0xFF	; 255
    37b6:	b9 f4       	brne	.+46     	; 0x37e6 <xQueueGenericSendFromISR+0x94>
    37b8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ba:	9b 81       	ldd	r25, Y+3	; 0x03
    37bc:	fc 01       	movw	r30, r24
    37be:	81 89       	ldd	r24, Z+17	; 0x11
    37c0:	88 23       	and	r24, r24
    37c2:	c1 f0       	breq	.+48     	; 0x37f4 <xQueueGenericSendFromISR+0xa2>
    37c4:	8a 81       	ldd	r24, Y+2	; 0x02
    37c6:	9b 81       	ldd	r25, Y+3	; 0x03
    37c8:	41 96       	adiw	r24, 0x11	; 17
    37ca:	0e 94 33 24 	call	0x4866	; 0x4866 <xTaskRemoveFromEventList>
    37ce:	88 23       	and	r24, r24
    37d0:	89 f0       	breq	.+34     	; 0x37f4 <xQueueGenericSendFromISR+0xa2>
    37d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    37d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    37d6:	89 2b       	or	r24, r25
    37d8:	69 f0       	breq	.+26     	; 0x37f4 <xQueueGenericSendFromISR+0xa2>
    37da:	8a 85       	ldd	r24, Y+10	; 0x0a
    37dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    37de:	21 e0       	ldi	r18, 0x01	; 1
    37e0:	fc 01       	movw	r30, r24
    37e2:	20 83       	st	Z, r18
    37e4:	07 c0       	rjmp	.+14     	; 0x37f4 <xQueueGenericSendFromISR+0xa2>
    37e6:	8d 81       	ldd	r24, Y+5	; 0x05
    37e8:	8f 5f       	subi	r24, 0xFF	; 255
    37ea:	28 2f       	mov	r18, r24
    37ec:	8a 81       	ldd	r24, Y+2	; 0x02
    37ee:	9b 81       	ldd	r25, Y+3	; 0x03
    37f0:	fc 01       	movw	r30, r24
    37f2:	26 8f       	std	Z+30, r18	; 0x1e
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	89 83       	std	Y+1, r24	; 0x01
    37f8:	01 c0       	rjmp	.+2      	; 0x37fc <xQueueGenericSendFromISR+0xaa>
    37fa:	19 82       	std	Y+1, r1	; 0x01
    37fc:	89 81       	ldd	r24, Y+1	; 0x01
    37fe:	2c 96       	adiw	r28, 0x0c	; 12
    3800:	0f b6       	in	r0, 0x3f	; 63
    3802:	f8 94       	cli
    3804:	de bf       	out	0x3e, r29	; 62
    3806:	0f be       	out	0x3f, r0	; 63
    3808:	cd bf       	out	0x3d, r28	; 61
    380a:	df 91       	pop	r29
    380c:	cf 91       	pop	r28
    380e:	08 95       	ret

00003810 <xQueueGenericReceive>:
    3810:	cf 93       	push	r28
    3812:	df 93       	push	r29
    3814:	cd b7       	in	r28, 0x3d	; 61
    3816:	de b7       	in	r29, 0x3e	; 62
    3818:	60 97       	sbiw	r28, 0x10	; 16
    381a:	0f b6       	in	r0, 0x3f	; 63
    381c:	f8 94       	cli
    381e:	de bf       	out	0x3e, r29	; 62
    3820:	0f be       	out	0x3f, r0	; 63
    3822:	cd bf       	out	0x3d, r28	; 61
    3824:	9b 87       	std	Y+11, r25	; 0x0b
    3826:	8a 87       	std	Y+10, r24	; 0x0a
    3828:	7d 87       	std	Y+13, r23	; 0x0d
    382a:	6c 87       	std	Y+12, r22	; 0x0c
    382c:	5f 87       	std	Y+15, r21	; 0x0f
    382e:	4e 87       	std	Y+14, r20	; 0x0e
    3830:	28 8b       	std	Y+16, r18	; 0x10
    3832:	19 82       	std	Y+1, r1	; 0x01
    3834:	8a 85       	ldd	r24, Y+10	; 0x0a
    3836:	9b 85       	ldd	r25, Y+11	; 0x0b
    3838:	9b 83       	std	Y+3, r25	; 0x03
    383a:	8a 83       	std	Y+2, r24	; 0x02
    383c:	0f b6       	in	r0, 0x3f	; 63
    383e:	f8 94       	cli
    3840:	0f 92       	push	r0
    3842:	8a 81       	ldd	r24, Y+2	; 0x02
    3844:	9b 81       	ldd	r25, Y+3	; 0x03
    3846:	fc 01       	movw	r30, r24
    3848:	82 8d       	ldd	r24, Z+26	; 0x1a
    384a:	8c 83       	std	Y+4, r24	; 0x04
    384c:	8c 81       	ldd	r24, Y+4	; 0x04
    384e:	88 23       	and	r24, r24
    3850:	09 f4       	brne	.+2      	; 0x3854 <xQueueGenericReceive+0x44>
    3852:	51 c0       	rjmp	.+162    	; 0x38f6 <xQueueGenericReceive+0xe6>
    3854:	8a 81       	ldd	r24, Y+2	; 0x02
    3856:	9b 81       	ldd	r25, Y+3	; 0x03
    3858:	fc 01       	movw	r30, r24
    385a:	86 81       	ldd	r24, Z+6	; 0x06
    385c:	97 81       	ldd	r25, Z+7	; 0x07
    385e:	9e 83       	std	Y+6, r25	; 0x06
    3860:	8d 83       	std	Y+5, r24	; 0x05
    3862:	2c 85       	ldd	r18, Y+12	; 0x0c
    3864:	3d 85       	ldd	r19, Y+13	; 0x0d
    3866:	8a 81       	ldd	r24, Y+2	; 0x02
    3868:	9b 81       	ldd	r25, Y+3	; 0x03
    386a:	b9 01       	movw	r22, r18
    386c:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <prvCopyDataFromQueue>
    3870:	88 89       	ldd	r24, Y+16	; 0x10
    3872:	88 23       	and	r24, r24
    3874:	31 f5       	brne	.+76     	; 0x38c2 <xQueueGenericReceive+0xb2>
    3876:	8c 81       	ldd	r24, Y+4	; 0x04
    3878:	2f ef       	ldi	r18, 0xFF	; 255
    387a:	28 0f       	add	r18, r24
    387c:	8a 81       	ldd	r24, Y+2	; 0x02
    387e:	9b 81       	ldd	r25, Y+3	; 0x03
    3880:	fc 01       	movw	r30, r24
    3882:	22 8f       	std	Z+26, r18	; 0x1a
    3884:	8a 81       	ldd	r24, Y+2	; 0x02
    3886:	9b 81       	ldd	r25, Y+3	; 0x03
    3888:	fc 01       	movw	r30, r24
    388a:	80 81       	ld	r24, Z
    388c:	91 81       	ldd	r25, Z+1	; 0x01
    388e:	89 2b       	or	r24, r25
    3890:	41 f4       	brne	.+16     	; 0x38a2 <xQueueGenericReceive+0x92>
    3892:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <pvTaskIncrementMutexHeldCount>
    3896:	9c 01       	movw	r18, r24
    3898:	8a 81       	ldd	r24, Y+2	; 0x02
    389a:	9b 81       	ldd	r25, Y+3	; 0x03
    389c:	fc 01       	movw	r30, r24
    389e:	33 83       	std	Z+3, r19	; 0x03
    38a0:	22 83       	std	Z+2, r18	; 0x02
    38a2:	8a 81       	ldd	r24, Y+2	; 0x02
    38a4:	9b 81       	ldd	r25, Y+3	; 0x03
    38a6:	fc 01       	movw	r30, r24
    38a8:	80 85       	ldd	r24, Z+8	; 0x08
    38aa:	88 23       	and	r24, r24
    38ac:	01 f1       	breq	.+64     	; 0x38ee <xQueueGenericReceive+0xde>
    38ae:	8a 81       	ldd	r24, Y+2	; 0x02
    38b0:	9b 81       	ldd	r25, Y+3	; 0x03
    38b2:	08 96       	adiw	r24, 0x08	; 8
    38b4:	0e 94 33 24 	call	0x4866	; 0x4866 <xTaskRemoveFromEventList>
    38b8:	88 23       	and	r24, r24
    38ba:	c9 f0       	breq	.+50     	; 0x38ee <xQueueGenericReceive+0xde>
    38bc:	0e 94 62 14 	call	0x28c4	; 0x28c4 <vPortYield>
    38c0:	16 c0       	rjmp	.+44     	; 0x38ee <xQueueGenericReceive+0xde>
    38c2:	8a 81       	ldd	r24, Y+2	; 0x02
    38c4:	9b 81       	ldd	r25, Y+3	; 0x03
    38c6:	2d 81       	ldd	r18, Y+5	; 0x05
    38c8:	3e 81       	ldd	r19, Y+6	; 0x06
    38ca:	fc 01       	movw	r30, r24
    38cc:	37 83       	std	Z+7, r19	; 0x07
    38ce:	26 83       	std	Z+6, r18	; 0x06
    38d0:	8a 81       	ldd	r24, Y+2	; 0x02
    38d2:	9b 81       	ldd	r25, Y+3	; 0x03
    38d4:	fc 01       	movw	r30, r24
    38d6:	81 89       	ldd	r24, Z+17	; 0x11
    38d8:	88 23       	and	r24, r24
    38da:	49 f0       	breq	.+18     	; 0x38ee <xQueueGenericReceive+0xde>
    38dc:	8a 81       	ldd	r24, Y+2	; 0x02
    38de:	9b 81       	ldd	r25, Y+3	; 0x03
    38e0:	41 96       	adiw	r24, 0x11	; 17
    38e2:	0e 94 33 24 	call	0x4866	; 0x4866 <xTaskRemoveFromEventList>
    38e6:	88 23       	and	r24, r24
    38e8:	11 f0       	breq	.+4      	; 0x38ee <xQueueGenericReceive+0xde>
    38ea:	0e 94 62 14 	call	0x28c4	; 0x28c4 <vPortYield>
    38ee:	0f 90       	pop	r0
    38f0:	0f be       	out	0x3f, r0	; 63
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	7a c0       	rjmp	.+244    	; 0x39ea <xQueueGenericReceive+0x1da>
    38f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    38f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    38fa:	89 2b       	or	r24, r25
    38fc:	21 f4       	brne	.+8      	; 0x3906 <xQueueGenericReceive+0xf6>
    38fe:	0f 90       	pop	r0
    3900:	0f be       	out	0x3f, r0	; 63
    3902:	80 e0       	ldi	r24, 0x00	; 0
    3904:	72 c0       	rjmp	.+228    	; 0x39ea <xQueueGenericReceive+0x1da>
    3906:	89 81       	ldd	r24, Y+1	; 0x01
    3908:	88 23       	and	r24, r24
    390a:	31 f4       	brne	.+12     	; 0x3918 <xQueueGenericReceive+0x108>
    390c:	ce 01       	movw	r24, r28
    390e:	07 96       	adiw	r24, 0x07	; 7
    3910:	0e 94 a0 24 	call	0x4940	; 0x4940 <vTaskSetTimeOutState>
    3914:	81 e0       	ldi	r24, 0x01	; 1
    3916:	89 83       	std	Y+1, r24	; 0x01
    3918:	0f 90       	pop	r0
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	0e 94 93 21 	call	0x4326	; 0x4326 <vTaskSuspendAll>
    3920:	0f b6       	in	r0, 0x3f	; 63
    3922:	f8 94       	cli
    3924:	0f 92       	push	r0
    3926:	8a 81       	ldd	r24, Y+2	; 0x02
    3928:	9b 81       	ldd	r25, Y+3	; 0x03
    392a:	fc 01       	movw	r30, r24
    392c:	85 8d       	ldd	r24, Z+29	; 0x1d
    392e:	8f 3f       	cpi	r24, 0xFF	; 255
    3930:	21 f4       	brne	.+8      	; 0x393a <xQueueGenericReceive+0x12a>
    3932:	8a 81       	ldd	r24, Y+2	; 0x02
    3934:	9b 81       	ldd	r25, Y+3	; 0x03
    3936:	fc 01       	movw	r30, r24
    3938:	15 8e       	std	Z+29, r1	; 0x1d
    393a:	8a 81       	ldd	r24, Y+2	; 0x02
    393c:	9b 81       	ldd	r25, Y+3	; 0x03
    393e:	fc 01       	movw	r30, r24
    3940:	86 8d       	ldd	r24, Z+30	; 0x1e
    3942:	8f 3f       	cpi	r24, 0xFF	; 255
    3944:	21 f4       	brne	.+8      	; 0x394e <xQueueGenericReceive+0x13e>
    3946:	8a 81       	ldd	r24, Y+2	; 0x02
    3948:	9b 81       	ldd	r25, Y+3	; 0x03
    394a:	fc 01       	movw	r30, r24
    394c:	16 8e       	std	Z+30, r1	; 0x1e
    394e:	0f 90       	pop	r0
    3950:	0f be       	out	0x3f, r0	; 63
    3952:	9e 01       	movw	r18, r28
    3954:	22 5f       	subi	r18, 0xF2	; 242
    3956:	3f 4f       	sbci	r19, 0xFF	; 255
    3958:	ce 01       	movw	r24, r28
    395a:	07 96       	adiw	r24, 0x07	; 7
    395c:	b9 01       	movw	r22, r18
    395e:	0e 94 bc 24 	call	0x4978	; 0x4978 <xTaskCheckForTimeOut>
    3962:	88 23       	and	r24, r24
    3964:	a1 f5       	brne	.+104    	; 0x39ce <xQueueGenericReceive+0x1be>
    3966:	8a 81       	ldd	r24, Y+2	; 0x02
    3968:	9b 81       	ldd	r25, Y+3	; 0x03
    396a:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <prvIsQueueEmpty>
    396e:	88 23       	and	r24, r24
    3970:	39 f1       	breq	.+78     	; 0x39c0 <xQueueGenericReceive+0x1b0>
    3972:	8a 81       	ldd	r24, Y+2	; 0x02
    3974:	9b 81       	ldd	r25, Y+3	; 0x03
    3976:	fc 01       	movw	r30, r24
    3978:	80 81       	ld	r24, Z
    397a:	91 81       	ldd	r25, Z+1	; 0x01
    397c:	89 2b       	or	r24, r25
    397e:	61 f4       	brne	.+24     	; 0x3998 <xQueueGenericReceive+0x188>
    3980:	0f b6       	in	r0, 0x3f	; 63
    3982:	f8 94       	cli
    3984:	0f 92       	push	r0
    3986:	8a 81       	ldd	r24, Y+2	; 0x02
    3988:	9b 81       	ldd	r25, Y+3	; 0x03
    398a:	fc 01       	movw	r30, r24
    398c:	82 81       	ldd	r24, Z+2	; 0x02
    398e:	93 81       	ldd	r25, Z+3	; 0x03
    3990:	0e 94 65 26 	call	0x4cca	; 0x4cca <vTaskPriorityInherit>
    3994:	0f 90       	pop	r0
    3996:	0f be       	out	0x3f, r0	; 63
    3998:	2e 85       	ldd	r18, Y+14	; 0x0e
    399a:	3f 85       	ldd	r19, Y+15	; 0x0f
    399c:	8a 81       	ldd	r24, Y+2	; 0x02
    399e:	9b 81       	ldd	r25, Y+3	; 0x03
    39a0:	41 96       	adiw	r24, 0x11	; 17
    39a2:	b9 01       	movw	r22, r18
    39a4:	0e 94 10 24 	call	0x4820	; 0x4820 <vTaskPlaceOnEventList>
    39a8:	8a 81       	ldd	r24, Y+2	; 0x02
    39aa:	9b 81       	ldd	r25, Y+3	; 0x03
    39ac:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <prvUnlockQueue>
    39b0:	0e 94 a0 21 	call	0x4340	; 0x4340 <xTaskResumeAll>
    39b4:	88 23       	and	r24, r24
    39b6:	09 f0       	breq	.+2      	; 0x39ba <xQueueGenericReceive+0x1aa>
    39b8:	41 cf       	rjmp	.-382    	; 0x383c <xQueueGenericReceive+0x2c>
    39ba:	0e 94 62 14 	call	0x28c4	; 0x28c4 <vPortYield>
    39be:	3e cf       	rjmp	.-388    	; 0x383c <xQueueGenericReceive+0x2c>
    39c0:	8a 81       	ldd	r24, Y+2	; 0x02
    39c2:	9b 81       	ldd	r25, Y+3	; 0x03
    39c4:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <prvUnlockQueue>
    39c8:	0e 94 a0 21 	call	0x4340	; 0x4340 <xTaskResumeAll>
    39cc:	37 cf       	rjmp	.-402    	; 0x383c <xQueueGenericReceive+0x2c>
    39ce:	8a 81       	ldd	r24, Y+2	; 0x02
    39d0:	9b 81       	ldd	r25, Y+3	; 0x03
    39d2:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <prvUnlockQueue>
    39d6:	0e 94 a0 21 	call	0x4340	; 0x4340 <xTaskResumeAll>
    39da:	8a 81       	ldd	r24, Y+2	; 0x02
    39dc:	9b 81       	ldd	r25, Y+3	; 0x03
    39de:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <prvIsQueueEmpty>
    39e2:	88 23       	and	r24, r24
    39e4:	09 f4       	brne	.+2      	; 0x39e8 <xQueueGenericReceive+0x1d8>
    39e6:	2a cf       	rjmp	.-428    	; 0x383c <xQueueGenericReceive+0x2c>
    39e8:	80 e0       	ldi	r24, 0x00	; 0
    39ea:	60 96       	adiw	r28, 0x10	; 16
    39ec:	0f b6       	in	r0, 0x3f	; 63
    39ee:	f8 94       	cli
    39f0:	de bf       	out	0x3e, r29	; 62
    39f2:	0f be       	out	0x3f, r0	; 63
    39f4:	cd bf       	out	0x3d, r28	; 61
    39f6:	df 91       	pop	r29
    39f8:	cf 91       	pop	r28
    39fa:	08 95       	ret

000039fc <uxQueueSpacesAvailable>:
    39fc:	cf 93       	push	r28
    39fe:	df 93       	push	r29
    3a00:	00 d0       	rcall	.+0      	; 0x3a02 <uxQueueSpacesAvailable+0x6>
    3a02:	00 d0       	rcall	.+0      	; 0x3a04 <uxQueueSpacesAvailable+0x8>
    3a04:	1f 92       	push	r1
    3a06:	cd b7       	in	r28, 0x3d	; 61
    3a08:	de b7       	in	r29, 0x3e	; 62
    3a0a:	9d 83       	std	Y+5, r25	; 0x05
    3a0c:	8c 83       	std	Y+4, r24	; 0x04
    3a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    3a10:	9d 81       	ldd	r25, Y+5	; 0x05
    3a12:	9a 83       	std	Y+2, r25	; 0x02
    3a14:	89 83       	std	Y+1, r24	; 0x01
    3a16:	0f b6       	in	r0, 0x3f	; 63
    3a18:	f8 94       	cli
    3a1a:	0f 92       	push	r0
    3a1c:	89 81       	ldd	r24, Y+1	; 0x01
    3a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a20:	fc 01       	movw	r30, r24
    3a22:	23 8d       	ldd	r18, Z+27	; 0x1b
    3a24:	89 81       	ldd	r24, Y+1	; 0x01
    3a26:	9a 81       	ldd	r25, Y+2	; 0x02
    3a28:	fc 01       	movw	r30, r24
    3a2a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a2c:	f2 2f       	mov	r31, r18
    3a2e:	f8 1b       	sub	r31, r24
    3a30:	8f 2f       	mov	r24, r31
    3a32:	8b 83       	std	Y+3, r24	; 0x03
    3a34:	0f 90       	pop	r0
    3a36:	0f be       	out	0x3f, r0	; 63
    3a38:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3a:	0f 90       	pop	r0
    3a3c:	0f 90       	pop	r0
    3a3e:	0f 90       	pop	r0
    3a40:	0f 90       	pop	r0
    3a42:	0f 90       	pop	r0
    3a44:	df 91       	pop	r29
    3a46:	cf 91       	pop	r28
    3a48:	08 95       	ret

00003a4a <prvCopyDataToQueue>:
    3a4a:	cf 93       	push	r28
    3a4c:	df 93       	push	r29
    3a4e:	cd b7       	in	r28, 0x3d	; 61
    3a50:	de b7       	in	r29, 0x3e	; 62
    3a52:	27 97       	sbiw	r28, 0x07	; 7
    3a54:	0f b6       	in	r0, 0x3f	; 63
    3a56:	f8 94       	cli
    3a58:	de bf       	out	0x3e, r29	; 62
    3a5a:	0f be       	out	0x3f, r0	; 63
    3a5c:	cd bf       	out	0x3d, r28	; 61
    3a5e:	9c 83       	std	Y+4, r25	; 0x04
    3a60:	8b 83       	std	Y+3, r24	; 0x03
    3a62:	7e 83       	std	Y+6, r23	; 0x06
    3a64:	6d 83       	std	Y+5, r22	; 0x05
    3a66:	4f 83       	std	Y+7, r20	; 0x07
    3a68:	19 82       	std	Y+1, r1	; 0x01
    3a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a6e:	fc 01       	movw	r30, r24
    3a70:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a72:	8a 83       	std	Y+2, r24	; 0x02
    3a74:	8b 81       	ldd	r24, Y+3	; 0x03
    3a76:	9c 81       	ldd	r25, Y+4	; 0x04
    3a78:	fc 01       	movw	r30, r24
    3a7a:	84 8d       	ldd	r24, Z+28	; 0x1c
    3a7c:	88 23       	and	r24, r24
    3a7e:	b1 f4       	brne	.+44     	; 0x3aac <prvCopyDataToQueue+0x62>
    3a80:	8b 81       	ldd	r24, Y+3	; 0x03
    3a82:	9c 81       	ldd	r25, Y+4	; 0x04
    3a84:	fc 01       	movw	r30, r24
    3a86:	80 81       	ld	r24, Z
    3a88:	91 81       	ldd	r25, Z+1	; 0x01
    3a8a:	89 2b       	or	r24, r25
    3a8c:	09 f0       	breq	.+2      	; 0x3a90 <prvCopyDataToQueue+0x46>
    3a8e:	9c c0       	rjmp	.+312    	; 0x3bc8 <prvCopyDataToQueue+0x17e>
    3a90:	8b 81       	ldd	r24, Y+3	; 0x03
    3a92:	9c 81       	ldd	r25, Y+4	; 0x04
    3a94:	fc 01       	movw	r30, r24
    3a96:	82 81       	ldd	r24, Z+2	; 0x02
    3a98:	93 81       	ldd	r25, Z+3	; 0x03
    3a9a:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <xTaskPriorityDisinherit>
    3a9e:	89 83       	std	Y+1, r24	; 0x01
    3aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    3aa4:	fc 01       	movw	r30, r24
    3aa6:	13 82       	std	Z+3, r1	; 0x03
    3aa8:	12 82       	std	Z+2, r1	; 0x02
    3aaa:	8e c0       	rjmp	.+284    	; 0x3bc8 <prvCopyDataToQueue+0x17e>
    3aac:	8f 81       	ldd	r24, Y+7	; 0x07
    3aae:	88 23       	and	r24, r24
    3ab0:	d9 f5       	brne	.+118    	; 0x3b28 <prvCopyDataToQueue+0xde>
    3ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ab6:	fc 01       	movw	r30, r24
    3ab8:	84 8d       	ldd	r24, Z+28	; 0x1c
    3aba:	48 2f       	mov	r20, r24
    3abc:	50 e0       	ldi	r21, 0x00	; 0
    3abe:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ac2:	fc 01       	movw	r30, r24
    3ac4:	84 81       	ldd	r24, Z+4	; 0x04
    3ac6:	95 81       	ldd	r25, Z+5	; 0x05
    3ac8:	2d 81       	ldd	r18, Y+5	; 0x05
    3aca:	3e 81       	ldd	r19, Y+6	; 0x06
    3acc:	b9 01       	movw	r22, r18
    3ace:	0e 94 46 28 	call	0x508c	; 0x508c <memcpy>
    3ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad6:	fc 01       	movw	r30, r24
    3ad8:	24 81       	ldd	r18, Z+4	; 0x04
    3ada:	35 81       	ldd	r19, Z+5	; 0x05
    3adc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ade:	9c 81       	ldd	r25, Y+4	; 0x04
    3ae0:	fc 01       	movw	r30, r24
    3ae2:	84 8d       	ldd	r24, Z+28	; 0x1c
    3ae4:	88 2f       	mov	r24, r24
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	28 0f       	add	r18, r24
    3aea:	39 1f       	adc	r19, r25
    3aec:	8b 81       	ldd	r24, Y+3	; 0x03
    3aee:	9c 81       	ldd	r25, Y+4	; 0x04
    3af0:	fc 01       	movw	r30, r24
    3af2:	35 83       	std	Z+5, r19	; 0x05
    3af4:	24 83       	std	Z+4, r18	; 0x04
    3af6:	8b 81       	ldd	r24, Y+3	; 0x03
    3af8:	9c 81       	ldd	r25, Y+4	; 0x04
    3afa:	fc 01       	movw	r30, r24
    3afc:	24 81       	ldd	r18, Z+4	; 0x04
    3afe:	35 81       	ldd	r19, Z+5	; 0x05
    3b00:	8b 81       	ldd	r24, Y+3	; 0x03
    3b02:	9c 81       	ldd	r25, Y+4	; 0x04
    3b04:	fc 01       	movw	r30, r24
    3b06:	82 81       	ldd	r24, Z+2	; 0x02
    3b08:	93 81       	ldd	r25, Z+3	; 0x03
    3b0a:	28 17       	cp	r18, r24
    3b0c:	39 07       	cpc	r19, r25
    3b0e:	08 f4       	brcc	.+2      	; 0x3b12 <prvCopyDataToQueue+0xc8>
    3b10:	5b c0       	rjmp	.+182    	; 0x3bc8 <prvCopyDataToQueue+0x17e>
    3b12:	8b 81       	ldd	r24, Y+3	; 0x03
    3b14:	9c 81       	ldd	r25, Y+4	; 0x04
    3b16:	fc 01       	movw	r30, r24
    3b18:	20 81       	ld	r18, Z
    3b1a:	31 81       	ldd	r19, Z+1	; 0x01
    3b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b20:	fc 01       	movw	r30, r24
    3b22:	35 83       	std	Z+5, r19	; 0x05
    3b24:	24 83       	std	Z+4, r18	; 0x04
    3b26:	50 c0       	rjmp	.+160    	; 0x3bc8 <prvCopyDataToQueue+0x17e>
    3b28:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b2c:	fc 01       	movw	r30, r24
    3b2e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b30:	48 2f       	mov	r20, r24
    3b32:	50 e0       	ldi	r21, 0x00	; 0
    3b34:	8b 81       	ldd	r24, Y+3	; 0x03
    3b36:	9c 81       	ldd	r25, Y+4	; 0x04
    3b38:	fc 01       	movw	r30, r24
    3b3a:	86 81       	ldd	r24, Z+6	; 0x06
    3b3c:	97 81       	ldd	r25, Z+7	; 0x07
    3b3e:	2d 81       	ldd	r18, Y+5	; 0x05
    3b40:	3e 81       	ldd	r19, Y+6	; 0x06
    3b42:	b9 01       	movw	r22, r18
    3b44:	0e 94 46 28 	call	0x508c	; 0x508c <memcpy>
    3b48:	8b 81       	ldd	r24, Y+3	; 0x03
    3b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b4c:	fc 01       	movw	r30, r24
    3b4e:	26 81       	ldd	r18, Z+6	; 0x06
    3b50:	37 81       	ldd	r19, Z+7	; 0x07
    3b52:	8b 81       	ldd	r24, Y+3	; 0x03
    3b54:	9c 81       	ldd	r25, Y+4	; 0x04
    3b56:	fc 01       	movw	r30, r24
    3b58:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b5a:	88 2f       	mov	r24, r24
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	91 95       	neg	r25
    3b60:	81 95       	neg	r24
    3b62:	91 09       	sbc	r25, r1
    3b64:	28 0f       	add	r18, r24
    3b66:	39 1f       	adc	r19, r25
    3b68:	8b 81       	ldd	r24, Y+3	; 0x03
    3b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b6c:	fc 01       	movw	r30, r24
    3b6e:	37 83       	std	Z+7, r19	; 0x07
    3b70:	26 83       	std	Z+6, r18	; 0x06
    3b72:	8b 81       	ldd	r24, Y+3	; 0x03
    3b74:	9c 81       	ldd	r25, Y+4	; 0x04
    3b76:	fc 01       	movw	r30, r24
    3b78:	26 81       	ldd	r18, Z+6	; 0x06
    3b7a:	37 81       	ldd	r19, Z+7	; 0x07
    3b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b80:	fc 01       	movw	r30, r24
    3b82:	80 81       	ld	r24, Z
    3b84:	91 81       	ldd	r25, Z+1	; 0x01
    3b86:	28 17       	cp	r18, r24
    3b88:	39 07       	cpc	r19, r25
    3b8a:	a8 f4       	brcc	.+42     	; 0x3bb6 <prvCopyDataToQueue+0x16c>
    3b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b90:	fc 01       	movw	r30, r24
    3b92:	22 81       	ldd	r18, Z+2	; 0x02
    3b94:	33 81       	ldd	r19, Z+3	; 0x03
    3b96:	8b 81       	ldd	r24, Y+3	; 0x03
    3b98:	9c 81       	ldd	r25, Y+4	; 0x04
    3b9a:	fc 01       	movw	r30, r24
    3b9c:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b9e:	88 2f       	mov	r24, r24
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	91 95       	neg	r25
    3ba4:	81 95       	neg	r24
    3ba6:	91 09       	sbc	r25, r1
    3ba8:	28 0f       	add	r18, r24
    3baa:	39 1f       	adc	r19, r25
    3bac:	8b 81       	ldd	r24, Y+3	; 0x03
    3bae:	9c 81       	ldd	r25, Y+4	; 0x04
    3bb0:	fc 01       	movw	r30, r24
    3bb2:	37 83       	std	Z+7, r19	; 0x07
    3bb4:	26 83       	std	Z+6, r18	; 0x06
    3bb6:	8f 81       	ldd	r24, Y+7	; 0x07
    3bb8:	82 30       	cpi	r24, 0x02	; 2
    3bba:	31 f4       	brne	.+12     	; 0x3bc8 <prvCopyDataToQueue+0x17e>
    3bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bbe:	88 23       	and	r24, r24
    3bc0:	19 f0       	breq	.+6      	; 0x3bc8 <prvCopyDataToQueue+0x17e>
    3bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc4:	81 50       	subi	r24, 0x01	; 1
    3bc6:	8a 83       	std	Y+2, r24	; 0x02
    3bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bca:	21 e0       	ldi	r18, 0x01	; 1
    3bcc:	28 0f       	add	r18, r24
    3bce:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    3bd2:	fc 01       	movw	r30, r24
    3bd4:	22 8f       	std	Z+26, r18	; 0x1a
    3bd6:	89 81       	ldd	r24, Y+1	; 0x01
    3bd8:	27 96       	adiw	r28, 0x07	; 7
    3bda:	0f b6       	in	r0, 0x3f	; 63
    3bdc:	f8 94       	cli
    3bde:	de bf       	out	0x3e, r29	; 62
    3be0:	0f be       	out	0x3f, r0	; 63
    3be2:	cd bf       	out	0x3d, r28	; 61
    3be4:	df 91       	pop	r29
    3be6:	cf 91       	pop	r28
    3be8:	08 95       	ret

00003bea <prvCopyDataFromQueue>:
    3bea:	cf 93       	push	r28
    3bec:	df 93       	push	r29
    3bee:	00 d0       	rcall	.+0      	; 0x3bf0 <prvCopyDataFromQueue+0x6>
    3bf0:	00 d0       	rcall	.+0      	; 0x3bf2 <prvCopyDataFromQueue+0x8>
    3bf2:	cd b7       	in	r28, 0x3d	; 61
    3bf4:	de b7       	in	r29, 0x3e	; 62
    3bf6:	9a 83       	std	Y+2, r25	; 0x02
    3bf8:	89 83       	std	Y+1, r24	; 0x01
    3bfa:	7c 83       	std	Y+4, r23	; 0x04
    3bfc:	6b 83       	std	Y+3, r22	; 0x03
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01
    3c00:	9a 81       	ldd	r25, Y+2	; 0x02
    3c02:	fc 01       	movw	r30, r24
    3c04:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c06:	88 23       	and	r24, r24
    3c08:	c9 f1       	breq	.+114    	; 0x3c7c <prvCopyDataFromQueue+0x92>
    3c0a:	89 81       	ldd	r24, Y+1	; 0x01
    3c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0e:	fc 01       	movw	r30, r24
    3c10:	26 81       	ldd	r18, Z+6	; 0x06
    3c12:	37 81       	ldd	r19, Z+7	; 0x07
    3c14:	89 81       	ldd	r24, Y+1	; 0x01
    3c16:	9a 81       	ldd	r25, Y+2	; 0x02
    3c18:	fc 01       	movw	r30, r24
    3c1a:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c1c:	88 2f       	mov	r24, r24
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	28 0f       	add	r18, r24
    3c22:	39 1f       	adc	r19, r25
    3c24:	89 81       	ldd	r24, Y+1	; 0x01
    3c26:	9a 81       	ldd	r25, Y+2	; 0x02
    3c28:	fc 01       	movw	r30, r24
    3c2a:	37 83       	std	Z+7, r19	; 0x07
    3c2c:	26 83       	std	Z+6, r18	; 0x06
    3c2e:	89 81       	ldd	r24, Y+1	; 0x01
    3c30:	9a 81       	ldd	r25, Y+2	; 0x02
    3c32:	fc 01       	movw	r30, r24
    3c34:	26 81       	ldd	r18, Z+6	; 0x06
    3c36:	37 81       	ldd	r19, Z+7	; 0x07
    3c38:	89 81       	ldd	r24, Y+1	; 0x01
    3c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c3c:	fc 01       	movw	r30, r24
    3c3e:	82 81       	ldd	r24, Z+2	; 0x02
    3c40:	93 81       	ldd	r25, Z+3	; 0x03
    3c42:	28 17       	cp	r18, r24
    3c44:	39 07       	cpc	r19, r25
    3c46:	50 f0       	brcs	.+20     	; 0x3c5c <prvCopyDataFromQueue+0x72>
    3c48:	89 81       	ldd	r24, Y+1	; 0x01
    3c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c4c:	fc 01       	movw	r30, r24
    3c4e:	20 81       	ld	r18, Z
    3c50:	31 81       	ldd	r19, Z+1	; 0x01
    3c52:	89 81       	ldd	r24, Y+1	; 0x01
    3c54:	9a 81       	ldd	r25, Y+2	; 0x02
    3c56:	fc 01       	movw	r30, r24
    3c58:	37 83       	std	Z+7, r19	; 0x07
    3c5a:	26 83       	std	Z+6, r18	; 0x06
    3c5c:	89 81       	ldd	r24, Y+1	; 0x01
    3c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c60:	fc 01       	movw	r30, r24
    3c62:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c64:	48 2f       	mov	r20, r24
    3c66:	50 e0       	ldi	r21, 0x00	; 0
    3c68:	89 81       	ldd	r24, Y+1	; 0x01
    3c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c6c:	fc 01       	movw	r30, r24
    3c6e:	26 81       	ldd	r18, Z+6	; 0x06
    3c70:	37 81       	ldd	r19, Z+7	; 0x07
    3c72:	8b 81       	ldd	r24, Y+3	; 0x03
    3c74:	9c 81       	ldd	r25, Y+4	; 0x04
    3c76:	b9 01       	movw	r22, r18
    3c78:	0e 94 46 28 	call	0x508c	; 0x508c <memcpy>
    3c7c:	00 00       	nop
    3c7e:	0f 90       	pop	r0
    3c80:	0f 90       	pop	r0
    3c82:	0f 90       	pop	r0
    3c84:	0f 90       	pop	r0
    3c86:	df 91       	pop	r29
    3c88:	cf 91       	pop	r28
    3c8a:	08 95       	ret

00003c8c <prvUnlockQueue>:
    3c8c:	cf 93       	push	r28
    3c8e:	df 93       	push	r29
    3c90:	00 d0       	rcall	.+0      	; 0x3c92 <prvUnlockQueue+0x6>
    3c92:	00 d0       	rcall	.+0      	; 0x3c94 <prvUnlockQueue+0x8>
    3c94:	cd b7       	in	r28, 0x3d	; 61
    3c96:	de b7       	in	r29, 0x3e	; 62
    3c98:	9c 83       	std	Y+4, r25	; 0x04
    3c9a:	8b 83       	std	Y+3, r24	; 0x03
    3c9c:	0f b6       	in	r0, 0x3f	; 63
    3c9e:	f8 94       	cli
    3ca0:	0f 92       	push	r0
    3ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca6:	fc 01       	movw	r30, r24
    3ca8:	86 8d       	ldd	r24, Z+30	; 0x1e
    3caa:	89 83       	std	Y+1, r24	; 0x01
    3cac:	12 c0       	rjmp	.+36     	; 0x3cd2 <prvUnlockQueue+0x46>
    3cae:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb2:	fc 01       	movw	r30, r24
    3cb4:	81 89       	ldd	r24, Z+17	; 0x11
    3cb6:	88 23       	and	r24, r24
    3cb8:	81 f0       	breq	.+32     	; 0x3cda <prvUnlockQueue+0x4e>
    3cba:	8b 81       	ldd	r24, Y+3	; 0x03
    3cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    3cbe:	41 96       	adiw	r24, 0x11	; 17
    3cc0:	0e 94 33 24 	call	0x4866	; 0x4866 <xTaskRemoveFromEventList>
    3cc4:	88 23       	and	r24, r24
    3cc6:	11 f0       	breq	.+4      	; 0x3ccc <prvUnlockQueue+0x40>
    3cc8:	0e 94 24 25 	call	0x4a48	; 0x4a48 <vTaskMissedYield>
    3ccc:	89 81       	ldd	r24, Y+1	; 0x01
    3cce:	81 50       	subi	r24, 0x01	; 1
    3cd0:	89 83       	std	Y+1, r24	; 0x01
    3cd2:	89 81       	ldd	r24, Y+1	; 0x01
    3cd4:	18 16       	cp	r1, r24
    3cd6:	5c f3       	brlt	.-42     	; 0x3cae <prvUnlockQueue+0x22>
    3cd8:	01 c0       	rjmp	.+2      	; 0x3cdc <prvUnlockQueue+0x50>
    3cda:	00 00       	nop
    3cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    3cde:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce0:	2f ef       	ldi	r18, 0xFF	; 255
    3ce2:	fc 01       	movw	r30, r24
    3ce4:	26 8f       	std	Z+30, r18	; 0x1e
    3ce6:	0f 90       	pop	r0
    3ce8:	0f be       	out	0x3f, r0	; 63
    3cea:	0f b6       	in	r0, 0x3f	; 63
    3cec:	f8 94       	cli
    3cee:	0f 92       	push	r0
    3cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf4:	fc 01       	movw	r30, r24
    3cf6:	85 8d       	ldd	r24, Z+29	; 0x1d
    3cf8:	8a 83       	std	Y+2, r24	; 0x02
    3cfa:	12 c0       	rjmp	.+36     	; 0x3d20 <prvUnlockQueue+0x94>
    3cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    3cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    3d00:	fc 01       	movw	r30, r24
    3d02:	80 85       	ldd	r24, Z+8	; 0x08
    3d04:	88 23       	and	r24, r24
    3d06:	81 f0       	breq	.+32     	; 0x3d28 <prvUnlockQueue+0x9c>
    3d08:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d0c:	08 96       	adiw	r24, 0x08	; 8
    3d0e:	0e 94 33 24 	call	0x4866	; 0x4866 <xTaskRemoveFromEventList>
    3d12:	88 23       	and	r24, r24
    3d14:	11 f0       	breq	.+4      	; 0x3d1a <prvUnlockQueue+0x8e>
    3d16:	0e 94 24 25 	call	0x4a48	; 0x4a48 <vTaskMissedYield>
    3d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d1c:	81 50       	subi	r24, 0x01	; 1
    3d1e:	8a 83       	std	Y+2, r24	; 0x02
    3d20:	8a 81       	ldd	r24, Y+2	; 0x02
    3d22:	18 16       	cp	r1, r24
    3d24:	5c f3       	brlt	.-42     	; 0x3cfc <prvUnlockQueue+0x70>
    3d26:	01 c0       	rjmp	.+2      	; 0x3d2a <prvUnlockQueue+0x9e>
    3d28:	00 00       	nop
    3d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d2e:	2f ef       	ldi	r18, 0xFF	; 255
    3d30:	fc 01       	movw	r30, r24
    3d32:	25 8f       	std	Z+29, r18	; 0x1d
    3d34:	0f 90       	pop	r0
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	00 00       	nop
    3d3a:	0f 90       	pop	r0
    3d3c:	0f 90       	pop	r0
    3d3e:	0f 90       	pop	r0
    3d40:	0f 90       	pop	r0
    3d42:	df 91       	pop	r29
    3d44:	cf 91       	pop	r28
    3d46:	08 95       	ret

00003d48 <prvIsQueueEmpty>:
    3d48:	cf 93       	push	r28
    3d4a:	df 93       	push	r29
    3d4c:	00 d0       	rcall	.+0      	; 0x3d4e <prvIsQueueEmpty+0x6>
    3d4e:	1f 92       	push	r1
    3d50:	cd b7       	in	r28, 0x3d	; 61
    3d52:	de b7       	in	r29, 0x3e	; 62
    3d54:	9b 83       	std	Y+3, r25	; 0x03
    3d56:	8a 83       	std	Y+2, r24	; 0x02
    3d58:	0f b6       	in	r0, 0x3f	; 63
    3d5a:	f8 94       	cli
    3d5c:	0f 92       	push	r0
    3d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d60:	9b 81       	ldd	r25, Y+3	; 0x03
    3d62:	fc 01       	movw	r30, r24
    3d64:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d66:	88 23       	and	r24, r24
    3d68:	19 f4       	brne	.+6      	; 0x3d70 <prvIsQueueEmpty+0x28>
    3d6a:	81 e0       	ldi	r24, 0x01	; 1
    3d6c:	89 83       	std	Y+1, r24	; 0x01
    3d6e:	01 c0       	rjmp	.+2      	; 0x3d72 <prvIsQueueEmpty+0x2a>
    3d70:	19 82       	std	Y+1, r1	; 0x01
    3d72:	0f 90       	pop	r0
    3d74:	0f be       	out	0x3f, r0	; 63
    3d76:	89 81       	ldd	r24, Y+1	; 0x01
    3d78:	0f 90       	pop	r0
    3d7a:	0f 90       	pop	r0
    3d7c:	0f 90       	pop	r0
    3d7e:	df 91       	pop	r29
    3d80:	cf 91       	pop	r28
    3d82:	08 95       	ret

00003d84 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    3d84:	cf 93       	push	r28
    3d86:	df 93       	push	r29
    3d88:	00 d0       	rcall	.+0      	; 0x3d8a <prvIsQueueFull+0x6>
    3d8a:	1f 92       	push	r1
    3d8c:	cd b7       	in	r28, 0x3d	; 61
    3d8e:	de b7       	in	r29, 0x3e	; 62
    3d90:	9b 83       	std	Y+3, r25	; 0x03
    3d92:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3d94:	0f b6       	in	r0, 0x3f	; 63
    3d96:	f8 94       	cli
    3d98:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    3d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d9c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d9e:	fc 01       	movw	r30, r24
    3da0:	22 8d       	ldd	r18, Z+26	; 0x1a
    3da2:	8a 81       	ldd	r24, Y+2	; 0x02
    3da4:	9b 81       	ldd	r25, Y+3	; 0x03
    3da6:	fc 01       	movw	r30, r24
    3da8:	83 8d       	ldd	r24, Z+27	; 0x1b
    3daa:	28 17       	cp	r18, r24
    3dac:	19 f4       	brne	.+6      	; 0x3db4 <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    3dae:	81 e0       	ldi	r24, 0x01	; 1
    3db0:	89 83       	std	Y+1, r24	; 0x01
    3db2:	01 c0       	rjmp	.+2      	; 0x3db6 <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    3db4:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    3db6:	0f 90       	pop	r0
    3db8:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dbc:	0f 90       	pop	r0
    3dbe:	0f 90       	pop	r0
    3dc0:	0f 90       	pop	r0
    3dc2:	df 91       	pop	r29
    3dc4:	cf 91       	pop	r28
    3dc6:	08 95       	ret

00003dc8 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    3dc8:	8f 92       	push	r8
    3dca:	9f 92       	push	r9
    3dcc:	af 92       	push	r10
    3dce:	bf 92       	push	r11
    3dd0:	cf 92       	push	r12
    3dd2:	df 92       	push	r13
    3dd4:	ef 92       	push	r14
    3dd6:	ff 92       	push	r15
    3dd8:	0f 93       	push	r16
    3dda:	1f 93       	push	r17
    3ddc:	cf 93       	push	r28
    3dde:	df 93       	push	r29
    3de0:	cd b7       	in	r28, 0x3d	; 61
    3de2:	de b7       	in	r29, 0x3e	; 62
    3de4:	60 97       	sbiw	r28, 0x10	; 16
    3de6:	0f b6       	in	r0, 0x3f	; 63
    3de8:	f8 94       	cli
    3dea:	de bf       	out	0x3e, r29	; 62
    3dec:	0f be       	out	0x3f, r0	; 63
    3dee:	cd bf       	out	0x3d, r28	; 61
    3df0:	9f 83       	std	Y+7, r25	; 0x07
    3df2:	8e 83       	std	Y+6, r24	; 0x06
    3df4:	79 87       	std	Y+9, r23	; 0x09
    3df6:	68 87       	std	Y+8, r22	; 0x08
    3df8:	5b 87       	std	Y+11, r21	; 0x0b
    3dfa:	4a 87       	std	Y+10, r20	; 0x0a
    3dfc:	3d 87       	std	Y+13, r19	; 0x0d
    3dfe:	2c 87       	std	Y+12, r18	; 0x0c
    3e00:	0e 87       	std	Y+14, r16	; 0x0e
    3e02:	f8 8a       	std	Y+16, r15	; 0x10
    3e04:	ef 86       	std	Y+15, r14	; 0x0f
    3e06:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e08:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e0a:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <pvPortMalloc>
    3e0e:	9d 83       	std	Y+5, r25	; 0x05
    3e10:	8c 83       	std	Y+4, r24	; 0x04
    3e12:	8c 81       	ldd	r24, Y+4	; 0x04
    3e14:	9d 81       	ldd	r25, Y+5	; 0x05
    3e16:	89 2b       	or	r24, r25
    3e18:	b9 f0       	breq	.+46     	; 0x3e48 <xTaskCreate+0x80>
    3e1a:	8c e2       	ldi	r24, 0x2C	; 44
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <pvPortMalloc>
    3e22:	9a 83       	std	Y+2, r25	; 0x02
    3e24:	89 83       	std	Y+1, r24	; 0x01
    3e26:	89 81       	ldd	r24, Y+1	; 0x01
    3e28:	9a 81       	ldd	r25, Y+2	; 0x02
    3e2a:	89 2b       	or	r24, r25
    3e2c:	41 f0       	breq	.+16     	; 0x3e3e <xTaskCreate+0x76>
    3e2e:	89 81       	ldd	r24, Y+1	; 0x01
    3e30:	9a 81       	ldd	r25, Y+2	; 0x02
    3e32:	2c 81       	ldd	r18, Y+4	; 0x04
    3e34:	3d 81       	ldd	r19, Y+5	; 0x05
    3e36:	fc 01       	movw	r30, r24
    3e38:	30 8f       	std	Z+24, r19	; 0x18
    3e3a:	27 8b       	std	Z+23, r18	; 0x17
    3e3c:	07 c0       	rjmp	.+14     	; 0x3e4c <xTaskCreate+0x84>
    3e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    3e40:	9d 81       	ldd	r25, Y+5	; 0x05
    3e42:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <vPortFree>
    3e46:	02 c0       	rjmp	.+4      	; 0x3e4c <xTaskCreate+0x84>
    3e48:	1a 82       	std	Y+2, r1	; 0x02
    3e4a:	19 82       	std	Y+1, r1	; 0x01
    3e4c:	89 81       	ldd	r24, Y+1	; 0x01
    3e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e50:	89 2b       	or	r24, r25
    3e52:	09 f1       	breq	.+66     	; 0x3e96 <xTaskCreate+0xce>
    3e54:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e56:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e58:	cc 01       	movw	r24, r24
    3e5a:	a0 e0       	ldi	r26, 0x00	; 0
    3e5c:	b0 e0       	ldi	r27, 0x00	; 0
    3e5e:	09 81       	ldd	r16, Y+1	; 0x01
    3e60:	1a 81       	ldd	r17, Y+2	; 0x02
    3e62:	4f 85       	ldd	r20, Y+15	; 0x0f
    3e64:	58 89       	ldd	r21, Y+16	; 0x10
    3e66:	2c 85       	ldd	r18, Y+12	; 0x0c
    3e68:	3d 85       	ldd	r19, Y+13	; 0x0d
    3e6a:	68 85       	ldd	r22, Y+8	; 0x08
    3e6c:	79 85       	ldd	r23, Y+9	; 0x09
    3e6e:	ee 81       	ldd	r30, Y+6	; 0x06
    3e70:	ff 81       	ldd	r31, Y+7	; 0x07
    3e72:	81 2c       	mov	r8, r1
    3e74:	91 2c       	mov	r9, r1
    3e76:	58 01       	movw	r10, r16
    3e78:	6a 01       	movw	r12, r20
    3e7a:	ee 84       	ldd	r14, Y+14	; 0x0e
    3e7c:	89 01       	movw	r16, r18
    3e7e:	9c 01       	movw	r18, r24
    3e80:	ad 01       	movw	r20, r26
    3e82:	cf 01       	movw	r24, r30
    3e84:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <prvInitialiseNewTask>
    3e88:	89 81       	ldd	r24, Y+1	; 0x01
    3e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e8c:	0e 94 3d 20 	call	0x407a	; 0x407a <prvAddNewTaskToReadyList>
    3e90:	81 e0       	ldi	r24, 0x01	; 1
    3e92:	8b 83       	std	Y+3, r24	; 0x03
    3e94:	02 c0       	rjmp	.+4      	; 0x3e9a <xTaskCreate+0xd2>
    3e96:	8f ef       	ldi	r24, 0xFF	; 255
    3e98:	8b 83       	std	Y+3, r24	; 0x03
    3e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e9c:	60 96       	adiw	r28, 0x10	; 16
    3e9e:	0f b6       	in	r0, 0x3f	; 63
    3ea0:	f8 94       	cli
    3ea2:	de bf       	out	0x3e, r29	; 62
    3ea4:	0f be       	out	0x3f, r0	; 63
    3ea6:	cd bf       	out	0x3d, r28	; 61
    3ea8:	df 91       	pop	r29
    3eaa:	cf 91       	pop	r28
    3eac:	1f 91       	pop	r17
    3eae:	0f 91       	pop	r16
    3eb0:	ff 90       	pop	r15
    3eb2:	ef 90       	pop	r14
    3eb4:	df 90       	pop	r13
    3eb6:	cf 90       	pop	r12
    3eb8:	bf 90       	pop	r11
    3eba:	af 90       	pop	r10
    3ebc:	9f 90       	pop	r9
    3ebe:	8f 90       	pop	r8
    3ec0:	08 95       	ret

00003ec2 <prvInitialiseNewTask>:
    3ec2:	8f 92       	push	r8
    3ec4:	9f 92       	push	r9
    3ec6:	af 92       	push	r10
    3ec8:	bf 92       	push	r11
    3eca:	cf 92       	push	r12
    3ecc:	df 92       	push	r13
    3ece:	ef 92       	push	r14
    3ed0:	0f 93       	push	r16
    3ed2:	1f 93       	push	r17
    3ed4:	cf 93       	push	r28
    3ed6:	df 93       	push	r29
    3ed8:	cd b7       	in	r28, 0x3d	; 61
    3eda:	de b7       	in	r29, 0x3e	; 62
    3edc:	64 97       	sbiw	r28, 0x14	; 20
    3ede:	0f b6       	in	r0, 0x3f	; 63
    3ee0:	f8 94       	cli
    3ee2:	de bf       	out	0x3e, r29	; 62
    3ee4:	0f be       	out	0x3f, r0	; 63
    3ee6:	cd bf       	out	0x3d, r28	; 61
    3ee8:	9d 83       	std	Y+5, r25	; 0x05
    3eea:	8c 83       	std	Y+4, r24	; 0x04
    3eec:	7f 83       	std	Y+7, r23	; 0x07
    3eee:	6e 83       	std	Y+6, r22	; 0x06
    3ef0:	28 87       	std	Y+8, r18	; 0x08
    3ef2:	39 87       	std	Y+9, r19	; 0x09
    3ef4:	4a 87       	std	Y+10, r20	; 0x0a
    3ef6:	5b 87       	std	Y+11, r21	; 0x0b
    3ef8:	1d 87       	std	Y+13, r17	; 0x0d
    3efa:	0c 87       	std	Y+12, r16	; 0x0c
    3efc:	ee 86       	std	Y+14, r14	; 0x0e
    3efe:	d8 8a       	std	Y+16, r13	; 0x10
    3f00:	cf 86       	std	Y+15, r12	; 0x0f
    3f02:	ba 8a       	std	Y+18, r11	; 0x12
    3f04:	a9 8a       	std	Y+17, r10	; 0x11
    3f06:	9c 8a       	std	Y+20, r9	; 0x14
    3f08:	8b 8a       	std	Y+19, r8	; 0x13
    3f0a:	28 85       	ldd	r18, Y+8	; 0x08
    3f0c:	39 85       	ldd	r19, Y+9	; 0x09
    3f0e:	89 89       	ldd	r24, Y+17	; 0x11
    3f10:	9a 89       	ldd	r25, Y+18	; 0x12
    3f12:	fc 01       	movw	r30, r24
    3f14:	87 89       	ldd	r24, Z+23	; 0x17
    3f16:	90 8d       	ldd	r25, Z+24	; 0x18
    3f18:	a9 01       	movw	r20, r18
    3f1a:	65 ea       	ldi	r22, 0xA5	; 165
    3f1c:	70 e0       	ldi	r23, 0x00	; 0
    3f1e:	0e 94 4f 28 	call	0x509e	; 0x509e <memset>
    3f22:	89 89       	ldd	r24, Y+17	; 0x11
    3f24:	9a 89       	ldd	r25, Y+18	; 0x12
    3f26:	fc 01       	movw	r30, r24
    3f28:	27 89       	ldd	r18, Z+23	; 0x17
    3f2a:	30 8d       	ldd	r19, Z+24	; 0x18
    3f2c:	88 85       	ldd	r24, Y+8	; 0x08
    3f2e:	99 85       	ldd	r25, Y+9	; 0x09
    3f30:	01 97       	sbiw	r24, 0x01	; 1
    3f32:	82 0f       	add	r24, r18
    3f34:	93 1f       	adc	r25, r19
    3f36:	9b 83       	std	Y+3, r25	; 0x03
    3f38:	8a 83       	std	Y+2, r24	; 0x02
    3f3a:	19 82       	std	Y+1, r1	; 0x01
    3f3c:	21 c0       	rjmp	.+66     	; 0x3f80 <prvInitialiseNewTask+0xbe>
    3f3e:	89 81       	ldd	r24, Y+1	; 0x01
    3f40:	88 2f       	mov	r24, r24
    3f42:	90 e0       	ldi	r25, 0x00	; 0
    3f44:	29 81       	ldd	r18, Y+1	; 0x01
    3f46:	22 2f       	mov	r18, r18
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	4e 81       	ldd	r20, Y+6	; 0x06
    3f4c:	5f 81       	ldd	r21, Y+7	; 0x07
    3f4e:	24 0f       	add	r18, r20
    3f50:	35 1f       	adc	r19, r21
    3f52:	f9 01       	movw	r30, r18
    3f54:	40 81       	ld	r20, Z
    3f56:	29 89       	ldd	r18, Y+17	; 0x11
    3f58:	3a 89       	ldd	r19, Y+18	; 0x12
    3f5a:	82 0f       	add	r24, r18
    3f5c:	93 1f       	adc	r25, r19
    3f5e:	49 96       	adiw	r24, 0x19	; 25
    3f60:	fc 01       	movw	r30, r24
    3f62:	40 83       	st	Z, r20
    3f64:	89 81       	ldd	r24, Y+1	; 0x01
    3f66:	88 2f       	mov	r24, r24
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	2e 81       	ldd	r18, Y+6	; 0x06
    3f6c:	3f 81       	ldd	r19, Y+7	; 0x07
    3f6e:	82 0f       	add	r24, r18
    3f70:	93 1f       	adc	r25, r19
    3f72:	fc 01       	movw	r30, r24
    3f74:	80 81       	ld	r24, Z
    3f76:	88 23       	and	r24, r24
    3f78:	39 f0       	breq	.+14     	; 0x3f88 <prvInitialiseNewTask+0xc6>
    3f7a:	89 81       	ldd	r24, Y+1	; 0x01
    3f7c:	8f 5f       	subi	r24, 0xFF	; 255
    3f7e:	89 83       	std	Y+1, r24	; 0x01
    3f80:	89 81       	ldd	r24, Y+1	; 0x01
    3f82:	88 30       	cpi	r24, 0x08	; 8
    3f84:	e0 f2       	brcs	.-72     	; 0x3f3e <prvInitialiseNewTask+0x7c>
    3f86:	01 c0       	rjmp	.+2      	; 0x3f8a <prvInitialiseNewTask+0xc8>
    3f88:	00 00       	nop
    3f8a:	89 89       	ldd	r24, Y+17	; 0x11
    3f8c:	9a 89       	ldd	r25, Y+18	; 0x12
    3f8e:	fc 01       	movw	r30, r24
    3f90:	10 a2       	std	Z+32, r1	; 0x20
    3f92:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f94:	84 30       	cpi	r24, 0x04	; 4
    3f96:	10 f0       	brcs	.+4      	; 0x3f9c <prvInitialiseNewTask+0xda>
    3f98:	83 e0       	ldi	r24, 0x03	; 3
    3f9a:	8e 87       	std	Y+14, r24	; 0x0e
    3f9c:	89 89       	ldd	r24, Y+17	; 0x11
    3f9e:	9a 89       	ldd	r25, Y+18	; 0x12
    3fa0:	2e 85       	ldd	r18, Y+14	; 0x0e
    3fa2:	fc 01       	movw	r30, r24
    3fa4:	26 8b       	std	Z+22, r18	; 0x16
    3fa6:	89 89       	ldd	r24, Y+17	; 0x11
    3fa8:	9a 89       	ldd	r25, Y+18	; 0x12
    3faa:	2e 85       	ldd	r18, Y+14	; 0x0e
    3fac:	fc 01       	movw	r30, r24
    3fae:	23 a3       	std	Z+35, r18	; 0x23
    3fb0:	89 89       	ldd	r24, Y+17	; 0x11
    3fb2:	9a 89       	ldd	r25, Y+18	; 0x12
    3fb4:	fc 01       	movw	r30, r24
    3fb6:	14 a2       	std	Z+36, r1	; 0x24
    3fb8:	89 89       	ldd	r24, Y+17	; 0x11
    3fba:	9a 89       	ldd	r25, Y+18	; 0x12
    3fbc:	02 96       	adiw	r24, 0x02	; 2
    3fbe:	0e 94 54 11 	call	0x22a8	; 0x22a8 <vListInitialiseItem>
    3fc2:	89 89       	ldd	r24, Y+17	; 0x11
    3fc4:	9a 89       	ldd	r25, Y+18	; 0x12
    3fc6:	0c 96       	adiw	r24, 0x0c	; 12
    3fc8:	0e 94 54 11 	call	0x22a8	; 0x22a8 <vListInitialiseItem>
    3fcc:	89 89       	ldd	r24, Y+17	; 0x11
    3fce:	9a 89       	ldd	r25, Y+18	; 0x12
    3fd0:	29 89       	ldd	r18, Y+17	; 0x11
    3fd2:	3a 89       	ldd	r19, Y+18	; 0x12
    3fd4:	fc 01       	movw	r30, r24
    3fd6:	31 87       	std	Z+9, r19	; 0x09
    3fd8:	20 87       	std	Z+8, r18	; 0x08
    3fda:	8e 85       	ldd	r24, Y+14	; 0x0e
    3fdc:	88 2f       	mov	r24, r24
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	24 e0       	ldi	r18, 0x04	; 4
    3fe2:	30 e0       	ldi	r19, 0x00	; 0
    3fe4:	28 1b       	sub	r18, r24
    3fe6:	39 0b       	sbc	r19, r25
    3fe8:	89 89       	ldd	r24, Y+17	; 0x11
    3fea:	9a 89       	ldd	r25, Y+18	; 0x12
    3fec:	fc 01       	movw	r30, r24
    3fee:	35 87       	std	Z+13, r19	; 0x0d
    3ff0:	24 87       	std	Z+12, r18	; 0x0c
    3ff2:	89 89       	ldd	r24, Y+17	; 0x11
    3ff4:	9a 89       	ldd	r25, Y+18	; 0x12
    3ff6:	29 89       	ldd	r18, Y+17	; 0x11
    3ff8:	3a 89       	ldd	r19, Y+18	; 0x12
    3ffa:	fc 01       	movw	r30, r24
    3ffc:	33 8b       	std	Z+19, r19	; 0x13
    3ffe:	22 8b       	std	Z+18, r18	; 0x12
    4000:	89 89       	ldd	r24, Y+17	; 0x11
    4002:	9a 89       	ldd	r25, Y+18	; 0x12
    4004:	fc 01       	movw	r30, r24
    4006:	16 a2       	std	Z+38, r1	; 0x26
    4008:	15 a2       	std	Z+37, r1	; 0x25
    400a:	89 89       	ldd	r24, Y+17	; 0x11
    400c:	9a 89       	ldd	r25, Y+18	; 0x12
    400e:	fc 01       	movw	r30, r24
    4010:	17 a2       	std	Z+39, r1	; 0x27
    4012:	10 a6       	std	Z+40, r1	; 0x28
    4014:	11 a6       	std	Z+41, r1	; 0x29
    4016:	12 a6       	std	Z+42, r1	; 0x2a
    4018:	89 89       	ldd	r24, Y+17	; 0x11
    401a:	9a 89       	ldd	r25, Y+18	; 0x12
    401c:	fc 01       	movw	r30, r24
    401e:	13 a6       	std	Z+43, r1	; 0x2b
    4020:	4c 85       	ldd	r20, Y+12	; 0x0c
    4022:	5d 85       	ldd	r21, Y+13	; 0x0d
    4024:	2c 81       	ldd	r18, Y+4	; 0x04
    4026:	3d 81       	ldd	r19, Y+5	; 0x05
    4028:	8a 81       	ldd	r24, Y+2	; 0x02
    402a:	9b 81       	ldd	r25, Y+3	; 0x03
    402c:	b9 01       	movw	r22, r18
    402e:	0e 94 84 12 	call	0x2508	; 0x2508 <pxPortInitialiseStack>
    4032:	9c 01       	movw	r18, r24
    4034:	89 89       	ldd	r24, Y+17	; 0x11
    4036:	9a 89       	ldd	r25, Y+18	; 0x12
    4038:	fc 01       	movw	r30, r24
    403a:	31 83       	std	Z+1, r19	; 0x01
    403c:	20 83       	st	Z, r18
    403e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4040:	98 89       	ldd	r25, Y+16	; 0x10
    4042:	89 2b       	or	r24, r25
    4044:	39 f0       	breq	.+14     	; 0x4054 <prvInitialiseNewTask+0x192>
    4046:	8f 85       	ldd	r24, Y+15	; 0x0f
    4048:	98 89       	ldd	r25, Y+16	; 0x10
    404a:	29 89       	ldd	r18, Y+17	; 0x11
    404c:	3a 89       	ldd	r19, Y+18	; 0x12
    404e:	fc 01       	movw	r30, r24
    4050:	31 83       	std	Z+1, r19	; 0x01
    4052:	20 83       	st	Z, r18
    4054:	00 00       	nop
    4056:	64 96       	adiw	r28, 0x14	; 20
    4058:	0f b6       	in	r0, 0x3f	; 63
    405a:	f8 94       	cli
    405c:	de bf       	out	0x3e, r29	; 62
    405e:	0f be       	out	0x3f, r0	; 63
    4060:	cd bf       	out	0x3d, r28	; 61
    4062:	df 91       	pop	r29
    4064:	cf 91       	pop	r28
    4066:	1f 91       	pop	r17
    4068:	0f 91       	pop	r16
    406a:	ef 90       	pop	r14
    406c:	df 90       	pop	r13
    406e:	cf 90       	pop	r12
    4070:	bf 90       	pop	r11
    4072:	af 90       	pop	r10
    4074:	9f 90       	pop	r9
    4076:	8f 90       	pop	r8
    4078:	08 95       	ret

0000407a <prvAddNewTaskToReadyList>:
    407a:	cf 93       	push	r28
    407c:	df 93       	push	r29
    407e:	00 d0       	rcall	.+0      	; 0x4080 <prvAddNewTaskToReadyList+0x6>
    4080:	cd b7       	in	r28, 0x3d	; 61
    4082:	de b7       	in	r29, 0x3e	; 62
    4084:	9a 83       	std	Y+2, r25	; 0x02
    4086:	89 83       	std	Y+1, r24	; 0x01
    4088:	0f b6       	in	r0, 0x3f	; 63
    408a:	f8 94       	cli
    408c:	0f 92       	push	r0
    408e:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <uxCurrentNumberOfTasks>
    4092:	8f 5f       	subi	r24, 0xFF	; 255
    4094:	80 93 37 08 	sts	0x0837, r24	; 0x800837 <uxCurrentNumberOfTasks>
    4098:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    409c:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    40a0:	89 2b       	or	r24, r25
    40a2:	69 f4       	brne	.+26     	; 0x40be <prvAddNewTaskToReadyList+0x44>
    40a4:	89 81       	ldd	r24, Y+1	; 0x01
    40a6:	9a 81       	ldd	r25, Y+2	; 0x02
    40a8:	90 93 e9 07 	sts	0x07E9, r25	; 0x8007e9 <pxCurrentTCB+0x1>
    40ac:	80 93 e8 07 	sts	0x07E8, r24	; 0x8007e8 <pxCurrentTCB>
    40b0:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <uxCurrentNumberOfTasks>
    40b4:	81 30       	cpi	r24, 0x01	; 1
    40b6:	c9 f4       	brne	.+50     	; 0x40ea <prvAddNewTaskToReadyList+0x70>
    40b8:	0e 94 41 25 	call	0x4a82	; 0x4a82 <prvInitialiseTaskLists>
    40bc:	16 c0       	rjmp	.+44     	; 0x40ea <prvAddNewTaskToReadyList+0x70>
    40be:	80 91 3b 08 	lds	r24, 0x083B	; 0x80083b <xSchedulerRunning>
    40c2:	88 23       	and	r24, r24
    40c4:	91 f4       	brne	.+36     	; 0x40ea <prvAddNewTaskToReadyList+0x70>
    40c6:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    40ca:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    40ce:	fc 01       	movw	r30, r24
    40d0:	26 89       	ldd	r18, Z+22	; 0x16
    40d2:	89 81       	ldd	r24, Y+1	; 0x01
    40d4:	9a 81       	ldd	r25, Y+2	; 0x02
    40d6:	fc 01       	movw	r30, r24
    40d8:	86 89       	ldd	r24, Z+22	; 0x16
    40da:	82 17       	cp	r24, r18
    40dc:	30 f0       	brcs	.+12     	; 0x40ea <prvAddNewTaskToReadyList+0x70>
    40de:	89 81       	ldd	r24, Y+1	; 0x01
    40e0:	9a 81       	ldd	r25, Y+2	; 0x02
    40e2:	90 93 e9 07 	sts	0x07E9, r25	; 0x8007e9 <pxCurrentTCB+0x1>
    40e6:	80 93 e8 07 	sts	0x07E8, r24	; 0x8007e8 <pxCurrentTCB>
    40ea:	80 91 3f 08 	lds	r24, 0x083F	; 0x80083f <uxTaskNumber>
    40ee:	8f 5f       	subi	r24, 0xFF	; 255
    40f0:	80 93 3f 08 	sts	0x083F, r24	; 0x80083f <uxTaskNumber>
    40f4:	20 91 3f 08 	lds	r18, 0x083F	; 0x80083f <uxTaskNumber>
    40f8:	89 81       	ldd	r24, Y+1	; 0x01
    40fa:	9a 81       	ldd	r25, Y+2	; 0x02
    40fc:	fc 01       	movw	r30, r24
    40fe:	21 a3       	std	Z+33, r18	; 0x21
    4100:	89 81       	ldd	r24, Y+1	; 0x01
    4102:	9a 81       	ldd	r25, Y+2	; 0x02
    4104:	fc 01       	movw	r30, r24
    4106:	96 89       	ldd	r25, Z+22	; 0x16
    4108:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <uxTopReadyPriority>
    410c:	89 17       	cp	r24, r25
    410e:	30 f4       	brcc	.+12     	; 0x411c <prvAddNewTaskToReadyList+0xa2>
    4110:	89 81       	ldd	r24, Y+1	; 0x01
    4112:	9a 81       	ldd	r25, Y+2	; 0x02
    4114:	fc 01       	movw	r30, r24
    4116:	86 89       	ldd	r24, Z+22	; 0x16
    4118:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <uxTopReadyPriority>
    411c:	89 81       	ldd	r24, Y+1	; 0x01
    411e:	9a 81       	ldd	r25, Y+2	; 0x02
    4120:	ac 01       	movw	r20, r24
    4122:	4e 5f       	subi	r20, 0xFE	; 254
    4124:	5f 4f       	sbci	r21, 0xFF	; 255
    4126:	89 81       	ldd	r24, Y+1	; 0x01
    4128:	9a 81       	ldd	r25, Y+2	; 0x02
    412a:	fc 01       	movw	r30, r24
    412c:	86 89       	ldd	r24, Z+22	; 0x16
    412e:	28 2f       	mov	r18, r24
    4130:	30 e0       	ldi	r19, 0x00	; 0
    4132:	c9 01       	movw	r24, r18
    4134:	88 0f       	add	r24, r24
    4136:	99 1f       	adc	r25, r25
    4138:	88 0f       	add	r24, r24
    413a:	99 1f       	adc	r25, r25
    413c:	88 0f       	add	r24, r24
    413e:	99 1f       	adc	r25, r25
    4140:	82 0f       	add	r24, r18
    4142:	93 1f       	adc	r25, r19
    4144:	86 51       	subi	r24, 0x16	; 22
    4146:	98 4f       	sbci	r25, 0xF8	; 248
    4148:	ba 01       	movw	r22, r20
    414a:	0e 94 66 11 	call	0x22cc	; 0x22cc <vListInsertEnd>
    414e:	0f 90       	pop	r0
    4150:	0f be       	out	0x3f, r0	; 63
    4152:	80 91 3b 08 	lds	r24, 0x083B	; 0x80083b <xSchedulerRunning>
    4156:	88 23       	and	r24, r24
    4158:	71 f0       	breq	.+28     	; 0x4176 <prvAddNewTaskToReadyList+0xfc>
    415a:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    415e:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    4162:	fc 01       	movw	r30, r24
    4164:	26 89       	ldd	r18, Z+22	; 0x16
    4166:	89 81       	ldd	r24, Y+1	; 0x01
    4168:	9a 81       	ldd	r25, Y+2	; 0x02
    416a:	fc 01       	movw	r30, r24
    416c:	86 89       	ldd	r24, Z+22	; 0x16
    416e:	28 17       	cp	r18, r24
    4170:	10 f4       	brcc	.+4      	; 0x4176 <prvAddNewTaskToReadyList+0xfc>
    4172:	0e 94 62 14 	call	0x28c4	; 0x28c4 <vPortYield>
    4176:	00 00       	nop
    4178:	0f 90       	pop	r0
    417a:	0f 90       	pop	r0
    417c:	df 91       	pop	r29
    417e:	cf 91       	pop	r28
    4180:	08 95       	ret

00004182 <vTaskDelayUntil>:
    4182:	cf 93       	push	r28
    4184:	df 93       	push	r29
    4186:	cd b7       	in	r28, 0x3d	; 61
    4188:	de b7       	in	r29, 0x3e	; 62
    418a:	2a 97       	sbiw	r28, 0x0a	; 10
    418c:	0f b6       	in	r0, 0x3f	; 63
    418e:	f8 94       	cli
    4190:	de bf       	out	0x3e, r29	; 62
    4192:	0f be       	out	0x3f, r0	; 63
    4194:	cd bf       	out	0x3d, r28	; 61
    4196:	98 87       	std	Y+8, r25	; 0x08
    4198:	8f 83       	std	Y+7, r24	; 0x07
    419a:	7a 87       	std	Y+10, r23	; 0x0a
    419c:	69 87       	std	Y+9, r22	; 0x09
    419e:	19 82       	std	Y+1, r1	; 0x01
    41a0:	0e 94 93 21 	call	0x4326	; 0x4326 <vTaskSuspendAll>
    41a4:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <xTickCount>
    41a8:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <xTickCount+0x1>
    41ac:	9b 83       	std	Y+3, r25	; 0x03
    41ae:	8a 83       	std	Y+2, r24	; 0x02
    41b0:	8f 81       	ldd	r24, Y+7	; 0x07
    41b2:	98 85       	ldd	r25, Y+8	; 0x08
    41b4:	fc 01       	movw	r30, r24
    41b6:	20 81       	ld	r18, Z
    41b8:	31 81       	ldd	r19, Z+1	; 0x01
    41ba:	89 85       	ldd	r24, Y+9	; 0x09
    41bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    41be:	82 0f       	add	r24, r18
    41c0:	93 1f       	adc	r25, r19
    41c2:	9d 83       	std	Y+5, r25	; 0x05
    41c4:	8c 83       	std	Y+4, r24	; 0x04
    41c6:	8f 81       	ldd	r24, Y+7	; 0x07
    41c8:	98 85       	ldd	r25, Y+8	; 0x08
    41ca:	fc 01       	movw	r30, r24
    41cc:	20 81       	ld	r18, Z
    41ce:	31 81       	ldd	r19, Z+1	; 0x01
    41d0:	8a 81       	ldd	r24, Y+2	; 0x02
    41d2:	9b 81       	ldd	r25, Y+3	; 0x03
    41d4:	82 17       	cp	r24, r18
    41d6:	93 07       	cpc	r25, r19
    41d8:	a0 f4       	brcc	.+40     	; 0x4202 <vTaskDelayUntil+0x80>
    41da:	8f 81       	ldd	r24, Y+7	; 0x07
    41dc:	98 85       	ldd	r25, Y+8	; 0x08
    41de:	fc 01       	movw	r30, r24
    41e0:	20 81       	ld	r18, Z
    41e2:	31 81       	ldd	r19, Z+1	; 0x01
    41e4:	8c 81       	ldd	r24, Y+4	; 0x04
    41e6:	9d 81       	ldd	r25, Y+5	; 0x05
    41e8:	82 17       	cp	r24, r18
    41ea:	93 07       	cpc	r25, r19
    41ec:	e8 f4       	brcc	.+58     	; 0x4228 <vTaskDelayUntil+0xa6>
    41ee:	2c 81       	ldd	r18, Y+4	; 0x04
    41f0:	3d 81       	ldd	r19, Y+5	; 0x05
    41f2:	8a 81       	ldd	r24, Y+2	; 0x02
    41f4:	9b 81       	ldd	r25, Y+3	; 0x03
    41f6:	82 17       	cp	r24, r18
    41f8:	93 07       	cpc	r25, r19
    41fa:	b0 f4       	brcc	.+44     	; 0x4228 <vTaskDelayUntil+0xa6>
    41fc:	81 e0       	ldi	r24, 0x01	; 1
    41fe:	89 83       	std	Y+1, r24	; 0x01
    4200:	13 c0       	rjmp	.+38     	; 0x4228 <vTaskDelayUntil+0xa6>
    4202:	8f 81       	ldd	r24, Y+7	; 0x07
    4204:	98 85       	ldd	r25, Y+8	; 0x08
    4206:	fc 01       	movw	r30, r24
    4208:	20 81       	ld	r18, Z
    420a:	31 81       	ldd	r19, Z+1	; 0x01
    420c:	8c 81       	ldd	r24, Y+4	; 0x04
    420e:	9d 81       	ldd	r25, Y+5	; 0x05
    4210:	82 17       	cp	r24, r18
    4212:	93 07       	cpc	r25, r19
    4214:	38 f0       	brcs	.+14     	; 0x4224 <vTaskDelayUntil+0xa2>
    4216:	2c 81       	ldd	r18, Y+4	; 0x04
    4218:	3d 81       	ldd	r19, Y+5	; 0x05
    421a:	8a 81       	ldd	r24, Y+2	; 0x02
    421c:	9b 81       	ldd	r25, Y+3	; 0x03
    421e:	82 17       	cp	r24, r18
    4220:	93 07       	cpc	r25, r19
    4222:	10 f4       	brcc	.+4      	; 0x4228 <vTaskDelayUntil+0xa6>
    4224:	81 e0       	ldi	r24, 0x01	; 1
    4226:	89 83       	std	Y+1, r24	; 0x01
    4228:	8f 81       	ldd	r24, Y+7	; 0x07
    422a:	98 85       	ldd	r25, Y+8	; 0x08
    422c:	2c 81       	ldd	r18, Y+4	; 0x04
    422e:	3d 81       	ldd	r19, Y+5	; 0x05
    4230:	fc 01       	movw	r30, r24
    4232:	31 83       	std	Z+1, r19	; 0x01
    4234:	20 83       	st	Z, r18
    4236:	89 81       	ldd	r24, Y+1	; 0x01
    4238:	88 23       	and	r24, r24
    423a:	59 f0       	breq	.+22     	; 0x4252 <vTaskDelayUntil+0xd0>
    423c:	2c 81       	ldd	r18, Y+4	; 0x04
    423e:	3d 81       	ldd	r19, Y+5	; 0x05
    4240:	8a 81       	ldd	r24, Y+2	; 0x02
    4242:	9b 81       	ldd	r25, Y+3	; 0x03
    4244:	a9 01       	movw	r20, r18
    4246:	48 1b       	sub	r20, r24
    4248:	59 0b       	sbc	r21, r25
    424a:	ca 01       	movw	r24, r20
    424c:	60 e0       	ldi	r22, 0x00	; 0
    424e:	0e 94 94 27 	call	0x4f28	; 0x4f28 <prvAddCurrentTaskToDelayedList>
    4252:	0e 94 a0 21 	call	0x4340	; 0x4340 <xTaskResumeAll>
    4256:	8e 83       	std	Y+6, r24	; 0x06
    4258:	8e 81       	ldd	r24, Y+6	; 0x06
    425a:	88 23       	and	r24, r24
    425c:	11 f4       	brne	.+4      	; 0x4262 <vTaskDelayUntil+0xe0>
    425e:	0e 94 62 14 	call	0x28c4	; 0x28c4 <vPortYield>
    4262:	00 00       	nop
    4264:	2a 96       	adiw	r28, 0x0a	; 10
    4266:	0f b6       	in	r0, 0x3f	; 63
    4268:	f8 94       	cli
    426a:	de bf       	out	0x3e, r29	; 62
    426c:	0f be       	out	0x3f, r0	; 63
    426e:	cd bf       	out	0x3d, r28	; 61
    4270:	df 91       	pop	r29
    4272:	cf 91       	pop	r28
    4274:	08 95       	ret

00004276 <vTaskDelay>:
    4276:	cf 93       	push	r28
    4278:	df 93       	push	r29
    427a:	00 d0       	rcall	.+0      	; 0x427c <vTaskDelay+0x6>
    427c:	1f 92       	push	r1
    427e:	cd b7       	in	r28, 0x3d	; 61
    4280:	de b7       	in	r29, 0x3e	; 62
    4282:	9b 83       	std	Y+3, r25	; 0x03
    4284:	8a 83       	std	Y+2, r24	; 0x02
    4286:	19 82       	std	Y+1, r1	; 0x01
    4288:	8a 81       	ldd	r24, Y+2	; 0x02
    428a:	9b 81       	ldd	r25, Y+3	; 0x03
    428c:	89 2b       	or	r24, r25
    428e:	51 f0       	breq	.+20     	; 0x42a4 <vTaskDelay+0x2e>
    4290:	0e 94 93 21 	call	0x4326	; 0x4326 <vTaskSuspendAll>
    4294:	8a 81       	ldd	r24, Y+2	; 0x02
    4296:	9b 81       	ldd	r25, Y+3	; 0x03
    4298:	60 e0       	ldi	r22, 0x00	; 0
    429a:	0e 94 94 27 	call	0x4f28	; 0x4f28 <prvAddCurrentTaskToDelayedList>
    429e:	0e 94 a0 21 	call	0x4340	; 0x4340 <xTaskResumeAll>
    42a2:	89 83       	std	Y+1, r24	; 0x01
    42a4:	89 81       	ldd	r24, Y+1	; 0x01
    42a6:	88 23       	and	r24, r24
    42a8:	11 f4       	brne	.+4      	; 0x42ae <vTaskDelay+0x38>
    42aa:	0e 94 62 14 	call	0x28c4	; 0x28c4 <vPortYield>
    42ae:	00 00       	nop
    42b0:	0f 90       	pop	r0
    42b2:	0f 90       	pop	r0
    42b4:	0f 90       	pop	r0
    42b6:	df 91       	pop	r29
    42b8:	cf 91       	pop	r28
    42ba:	08 95       	ret

000042bc <vTaskStartScheduler>:
    42bc:	ef 92       	push	r14
    42be:	ff 92       	push	r15
    42c0:	0f 93       	push	r16
    42c2:	cf 93       	push	r28
    42c4:	df 93       	push	r29
    42c6:	1f 92       	push	r1
    42c8:	cd b7       	in	r28, 0x3d	; 61
    42ca:	de b7       	in	r29, 0x3e	; 62
    42cc:	0f 2e       	mov	r0, r31
    42ce:	f2 e4       	ldi	r31, 0x42	; 66
    42d0:	ef 2e       	mov	r14, r31
    42d2:	f8 e0       	ldi	r31, 0x08	; 8
    42d4:	ff 2e       	mov	r15, r31
    42d6:	f0 2d       	mov	r31, r0
    42d8:	00 e0       	ldi	r16, 0x00	; 0
    42da:	20 e0       	ldi	r18, 0x00	; 0
    42dc:	30 e0       	ldi	r19, 0x00	; 0
    42de:	45 e5       	ldi	r20, 0x55	; 85
    42e0:	50 e0       	ldi	r21, 0x00	; 0
    42e2:	63 e9       	ldi	r22, 0x93	; 147
    42e4:	71 e0       	ldi	r23, 0x01	; 1
    42e6:	8f e2       	ldi	r24, 0x2F	; 47
    42e8:	95 e2       	ldi	r25, 0x25	; 37
    42ea:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <xTaskCreate>
    42ee:	89 83       	std	Y+1, r24	; 0x01
    42f0:	89 81       	ldd	r24, Y+1	; 0x01
    42f2:	81 30       	cpi	r24, 0x01	; 1
    42f4:	81 f4       	brne	.+32     	; 0x4316 <vTaskStartScheduler+0x5a>
    42f6:	f8 94       	cli
    42f8:	8f ef       	ldi	r24, 0xFF	; 255
    42fa:	9f ef       	ldi	r25, 0xFF	; 255
    42fc:	90 93 41 08 	sts	0x0841, r25	; 0x800841 <xNextTaskUnblockTime+0x1>
    4300:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <xNextTaskUnblockTime>
    4304:	81 e0       	ldi	r24, 0x01	; 1
    4306:	80 93 3b 08 	sts	0x083B, r24	; 0x80083b <xSchedulerRunning>
    430a:	10 92 39 08 	sts	0x0839, r1	; 0x800839 <xTickCount+0x1>
    430e:	10 92 38 08 	sts	0x0838, r1	; 0x800838 <xTickCount>
    4312:	0e 94 2d 14 	call	0x285a	; 0x285a <xPortStartScheduler>
    4316:	00 00       	nop
    4318:	0f 90       	pop	r0
    431a:	df 91       	pop	r29
    431c:	cf 91       	pop	r28
    431e:	0f 91       	pop	r16
    4320:	ff 90       	pop	r15
    4322:	ef 90       	pop	r14
    4324:	08 95       	ret

00004326 <vTaskSuspendAll>:
    4326:	cf 93       	push	r28
    4328:	df 93       	push	r29
    432a:	cd b7       	in	r28, 0x3d	; 61
    432c:	de b7       	in	r29, 0x3e	; 62
    432e:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <uxSchedulerSuspended>
    4332:	8f 5f       	subi	r24, 0xFF	; 255
    4334:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <uxSchedulerSuspended>
    4338:	00 00       	nop
    433a:	df 91       	pop	r29
    433c:	cf 91       	pop	r28
    433e:	08 95       	ret

00004340 <xTaskResumeAll>:
    4340:	cf 93       	push	r28
    4342:	df 93       	push	r29
    4344:	00 d0       	rcall	.+0      	; 0x4346 <xTaskResumeAll+0x6>
    4346:	00 d0       	rcall	.+0      	; 0x4348 <xTaskResumeAll+0x8>
    4348:	cd b7       	in	r28, 0x3d	; 61
    434a:	de b7       	in	r29, 0x3e	; 62
    434c:	1a 82       	std	Y+2, r1	; 0x02
    434e:	19 82       	std	Y+1, r1	; 0x01
    4350:	1b 82       	std	Y+3, r1	; 0x03
    4352:	0f b6       	in	r0, 0x3f	; 63
    4354:	f8 94       	cli
    4356:	0f 92       	push	r0
    4358:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <uxSchedulerSuspended>
    435c:	81 50       	subi	r24, 0x01	; 1
    435e:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <uxSchedulerSuspended>
    4362:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <uxSchedulerSuspended>
    4366:	88 23       	and	r24, r24
    4368:	09 f0       	breq	.+2      	; 0x436c <xTaskResumeAll+0x2c>
    436a:	77 c0       	rjmp	.+238    	; 0x445a <xTaskResumeAll+0x11a>
    436c:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <uxCurrentNumberOfTasks>
    4370:	88 23       	and	r24, r24
    4372:	09 f4       	brne	.+2      	; 0x4376 <xTaskResumeAll+0x36>
    4374:	72 c0       	rjmp	.+228    	; 0x445a <xTaskResumeAll+0x11a>
    4376:	49 c0       	rjmp	.+146    	; 0x440a <xTaskResumeAll+0xca>
    4378:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <xPendingReadyList+0x5>
    437c:	90 91 2a 08 	lds	r25, 0x082A	; 0x80082a <xPendingReadyList+0x6>
    4380:	fc 01       	movw	r30, r24
    4382:	86 81       	ldd	r24, Z+6	; 0x06
    4384:	97 81       	ldd	r25, Z+7	; 0x07
    4386:	9a 83       	std	Y+2, r25	; 0x02
    4388:	89 83       	std	Y+1, r24	; 0x01
    438a:	89 81       	ldd	r24, Y+1	; 0x01
    438c:	9a 81       	ldd	r25, Y+2	; 0x02
    438e:	0c 96       	adiw	r24, 0x0c	; 12
    4390:	0e 94 2d 12 	call	0x245a	; 0x245a <uxListRemove>
    4394:	89 81       	ldd	r24, Y+1	; 0x01
    4396:	9a 81       	ldd	r25, Y+2	; 0x02
    4398:	02 96       	adiw	r24, 0x02	; 2
    439a:	0e 94 2d 12 	call	0x245a	; 0x245a <uxListRemove>
    439e:	89 81       	ldd	r24, Y+1	; 0x01
    43a0:	9a 81       	ldd	r25, Y+2	; 0x02
    43a2:	fc 01       	movw	r30, r24
    43a4:	96 89       	ldd	r25, Z+22	; 0x16
    43a6:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <uxTopReadyPriority>
    43aa:	89 17       	cp	r24, r25
    43ac:	30 f4       	brcc	.+12     	; 0x43ba <xTaskResumeAll+0x7a>
    43ae:	89 81       	ldd	r24, Y+1	; 0x01
    43b0:	9a 81       	ldd	r25, Y+2	; 0x02
    43b2:	fc 01       	movw	r30, r24
    43b4:	86 89       	ldd	r24, Z+22	; 0x16
    43b6:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <uxTopReadyPriority>
    43ba:	89 81       	ldd	r24, Y+1	; 0x01
    43bc:	9a 81       	ldd	r25, Y+2	; 0x02
    43be:	ac 01       	movw	r20, r24
    43c0:	4e 5f       	subi	r20, 0xFE	; 254
    43c2:	5f 4f       	sbci	r21, 0xFF	; 255
    43c4:	89 81       	ldd	r24, Y+1	; 0x01
    43c6:	9a 81       	ldd	r25, Y+2	; 0x02
    43c8:	fc 01       	movw	r30, r24
    43ca:	86 89       	ldd	r24, Z+22	; 0x16
    43cc:	28 2f       	mov	r18, r24
    43ce:	30 e0       	ldi	r19, 0x00	; 0
    43d0:	c9 01       	movw	r24, r18
    43d2:	88 0f       	add	r24, r24
    43d4:	99 1f       	adc	r25, r25
    43d6:	88 0f       	add	r24, r24
    43d8:	99 1f       	adc	r25, r25
    43da:	88 0f       	add	r24, r24
    43dc:	99 1f       	adc	r25, r25
    43de:	82 0f       	add	r24, r18
    43e0:	93 1f       	adc	r25, r19
    43e2:	86 51       	subi	r24, 0x16	; 22
    43e4:	98 4f       	sbci	r25, 0xF8	; 248
    43e6:	ba 01       	movw	r22, r20
    43e8:	0e 94 66 11 	call	0x22cc	; 0x22cc <vListInsertEnd>
    43ec:	89 81       	ldd	r24, Y+1	; 0x01
    43ee:	9a 81       	ldd	r25, Y+2	; 0x02
    43f0:	fc 01       	movw	r30, r24
    43f2:	26 89       	ldd	r18, Z+22	; 0x16
    43f4:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    43f8:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    43fc:	fc 01       	movw	r30, r24
    43fe:	86 89       	ldd	r24, Z+22	; 0x16
    4400:	28 17       	cp	r18, r24
    4402:	18 f0       	brcs	.+6      	; 0x440a <xTaskResumeAll+0xca>
    4404:	81 e0       	ldi	r24, 0x01	; 1
    4406:	80 93 3d 08 	sts	0x083D, r24	; 0x80083d <xYieldPending>
    440a:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <xPendingReadyList>
    440e:	88 23       	and	r24, r24
    4410:	09 f0       	breq	.+2      	; 0x4414 <xTaskResumeAll+0xd4>
    4412:	b2 cf       	rjmp	.-156    	; 0x4378 <xTaskResumeAll+0x38>
    4414:	89 81       	ldd	r24, Y+1	; 0x01
    4416:	9a 81       	ldd	r25, Y+2	; 0x02
    4418:	89 2b       	or	r24, r25
    441a:	11 f0       	breq	.+4      	; 0x4420 <xTaskResumeAll+0xe0>
    441c:	0e 94 36 26 	call	0x4c6c	; 0x4c6c <prvResetNextTaskUnblockTime>
    4420:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <uxPendedTicks>
    4424:	8c 83       	std	Y+4, r24	; 0x04
    4426:	8c 81       	ldd	r24, Y+4	; 0x04
    4428:	88 23       	and	r24, r24
    442a:	79 f0       	breq	.+30     	; 0x444a <xTaskResumeAll+0x10a>
    442c:	0e 94 4e 22 	call	0x449c	; 0x449c <xTaskIncrementTick>
    4430:	88 23       	and	r24, r24
    4432:	19 f0       	breq	.+6      	; 0x443a <xTaskResumeAll+0xfa>
    4434:	81 e0       	ldi	r24, 0x01	; 1
    4436:	80 93 3d 08 	sts	0x083D, r24	; 0x80083d <xYieldPending>
    443a:	8c 81       	ldd	r24, Y+4	; 0x04
    443c:	81 50       	subi	r24, 0x01	; 1
    443e:	8c 83       	std	Y+4, r24	; 0x04
    4440:	8c 81       	ldd	r24, Y+4	; 0x04
    4442:	88 23       	and	r24, r24
    4444:	99 f7       	brne	.-26     	; 0x442c <xTaskResumeAll+0xec>
    4446:	10 92 3c 08 	sts	0x083C, r1	; 0x80083c <uxPendedTicks>
    444a:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <xYieldPending>
    444e:	88 23       	and	r24, r24
    4450:	21 f0       	breq	.+8      	; 0x445a <xTaskResumeAll+0x11a>
    4452:	81 e0       	ldi	r24, 0x01	; 1
    4454:	8b 83       	std	Y+3, r24	; 0x03
    4456:	0e 94 62 14 	call	0x28c4	; 0x28c4 <vPortYield>
    445a:	0f 90       	pop	r0
    445c:	0f be       	out	0x3f, r0	; 63
    445e:	8b 81       	ldd	r24, Y+3	; 0x03
    4460:	0f 90       	pop	r0
    4462:	0f 90       	pop	r0
    4464:	0f 90       	pop	r0
    4466:	0f 90       	pop	r0
    4468:	df 91       	pop	r29
    446a:	cf 91       	pop	r28
    446c:	08 95       	ret

0000446e <xTaskGetTickCount>:
    446e:	cf 93       	push	r28
    4470:	df 93       	push	r29
    4472:	00 d0       	rcall	.+0      	; 0x4474 <xTaskGetTickCount+0x6>
    4474:	cd b7       	in	r28, 0x3d	; 61
    4476:	de b7       	in	r29, 0x3e	; 62
    4478:	0f b6       	in	r0, 0x3f	; 63
    447a:	f8 94       	cli
    447c:	0f 92       	push	r0
    447e:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <xTickCount>
    4482:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <xTickCount+0x1>
    4486:	9a 83       	std	Y+2, r25	; 0x02
    4488:	89 83       	std	Y+1, r24	; 0x01
    448a:	0f 90       	pop	r0
    448c:	0f be       	out	0x3f, r0	; 63
    448e:	89 81       	ldd	r24, Y+1	; 0x01
    4490:	9a 81       	ldd	r25, Y+2	; 0x02
    4492:	0f 90       	pop	r0
    4494:	0f 90       	pop	r0
    4496:	df 91       	pop	r29
    4498:	cf 91       	pop	r28
    449a:	08 95       	ret

0000449c <xTaskIncrementTick>:
    449c:	cf 93       	push	r28
    449e:	df 93       	push	r29
    44a0:	cd b7       	in	r28, 0x3d	; 61
    44a2:	de b7       	in	r29, 0x3e	; 62
    44a4:	29 97       	sbiw	r28, 0x09	; 9
    44a6:	0f b6       	in	r0, 0x3f	; 63
    44a8:	f8 94       	cli
    44aa:	de bf       	out	0x3e, r29	; 62
    44ac:	0f be       	out	0x3f, r0	; 63
    44ae:	cd bf       	out	0x3d, r28	; 61
    44b0:	19 82       	std	Y+1, r1	; 0x01
    44b2:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <uxSchedulerSuspended>
    44b6:	88 23       	and	r24, r24
    44b8:	09 f0       	breq	.+2      	; 0x44bc <xTaskIncrementTick+0x20>
    44ba:	c8 c0       	rjmp	.+400    	; 0x464c <xTaskIncrementTick+0x1b0>
    44bc:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <xTickCount>
    44c0:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <xTickCount+0x1>
    44c4:	01 96       	adiw	r24, 0x01	; 1
    44c6:	9b 83       	std	Y+3, r25	; 0x03
    44c8:	8a 83       	std	Y+2, r24	; 0x02
    44ca:	8a 81       	ldd	r24, Y+2	; 0x02
    44cc:	9b 81       	ldd	r25, Y+3	; 0x03
    44ce:	90 93 39 08 	sts	0x0839, r25	; 0x800839 <xTickCount+0x1>
    44d2:	80 93 38 08 	sts	0x0838, r24	; 0x800838 <xTickCount>
    44d6:	8a 81       	ldd	r24, Y+2	; 0x02
    44d8:	9b 81       	ldd	r25, Y+3	; 0x03
    44da:	89 2b       	or	r24, r25
    44dc:	d9 f4       	brne	.+54     	; 0x4514 <xTaskIncrementTick+0x78>
    44de:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <pxDelayedTaskList>
    44e2:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <pxDelayedTaskList+0x1>
    44e6:	9d 83       	std	Y+5, r25	; 0x05
    44e8:	8c 83       	std	Y+4, r24	; 0x04
    44ea:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <pxOverflowDelayedTaskList>
    44ee:	90 91 23 08 	lds	r25, 0x0823	; 0x800823 <pxOverflowDelayedTaskList+0x1>
    44f2:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <pxDelayedTaskList+0x1>
    44f6:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <pxDelayedTaskList>
    44fa:	8c 81       	ldd	r24, Y+4	; 0x04
    44fc:	9d 81       	ldd	r25, Y+5	; 0x05
    44fe:	90 93 23 08 	sts	0x0823, r25	; 0x800823 <pxOverflowDelayedTaskList+0x1>
    4502:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <pxOverflowDelayedTaskList>
    4506:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <xNumOfOverflows>
    450a:	8f 5f       	subi	r24, 0xFF	; 255
    450c:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <xNumOfOverflows>
    4510:	0e 94 36 26 	call	0x4c6c	; 0x4c6c <prvResetNextTaskUnblockTime>
    4514:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <xNextTaskUnblockTime>
    4518:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <xNextTaskUnblockTime+0x1>
    451c:	2a 81       	ldd	r18, Y+2	; 0x02
    451e:	3b 81       	ldd	r19, Y+3	; 0x03
    4520:	28 17       	cp	r18, r24
    4522:	39 07       	cpc	r19, r25
    4524:	08 f4       	brcc	.+2      	; 0x4528 <xTaskIncrementTick+0x8c>
    4526:	78 c0       	rjmp	.+240    	; 0x4618 <xTaskIncrementTick+0x17c>
    4528:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <pxDelayedTaskList>
    452c:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <pxDelayedTaskList+0x1>
    4530:	fc 01       	movw	r30, r24
    4532:	80 81       	ld	r24, Z
    4534:	88 23       	and	r24, r24
    4536:	39 f4       	brne	.+14     	; 0x4546 <xTaskIncrementTick+0xaa>
    4538:	8f ef       	ldi	r24, 0xFF	; 255
    453a:	9f ef       	ldi	r25, 0xFF	; 255
    453c:	90 93 41 08 	sts	0x0841, r25	; 0x800841 <xNextTaskUnblockTime+0x1>
    4540:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <xNextTaskUnblockTime>
    4544:	69 c0       	rjmp	.+210    	; 0x4618 <xTaskIncrementTick+0x17c>
    4546:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <pxDelayedTaskList>
    454a:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <pxDelayedTaskList+0x1>
    454e:	fc 01       	movw	r30, r24
    4550:	85 81       	ldd	r24, Z+5	; 0x05
    4552:	96 81       	ldd	r25, Z+6	; 0x06
    4554:	fc 01       	movw	r30, r24
    4556:	86 81       	ldd	r24, Z+6	; 0x06
    4558:	97 81       	ldd	r25, Z+7	; 0x07
    455a:	9f 83       	std	Y+7, r25	; 0x07
    455c:	8e 83       	std	Y+6, r24	; 0x06
    455e:	8e 81       	ldd	r24, Y+6	; 0x06
    4560:	9f 81       	ldd	r25, Y+7	; 0x07
    4562:	fc 01       	movw	r30, r24
    4564:	82 81       	ldd	r24, Z+2	; 0x02
    4566:	93 81       	ldd	r25, Z+3	; 0x03
    4568:	99 87       	std	Y+9, r25	; 0x09
    456a:	88 87       	std	Y+8, r24	; 0x08
    456c:	2a 81       	ldd	r18, Y+2	; 0x02
    456e:	3b 81       	ldd	r19, Y+3	; 0x03
    4570:	88 85       	ldd	r24, Y+8	; 0x08
    4572:	99 85       	ldd	r25, Y+9	; 0x09
    4574:	28 17       	cp	r18, r24
    4576:	39 07       	cpc	r19, r25
    4578:	38 f4       	brcc	.+14     	; 0x4588 <xTaskIncrementTick+0xec>
    457a:	88 85       	ldd	r24, Y+8	; 0x08
    457c:	99 85       	ldd	r25, Y+9	; 0x09
    457e:	90 93 41 08 	sts	0x0841, r25	; 0x800841 <xNextTaskUnblockTime+0x1>
    4582:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <xNextTaskUnblockTime>
    4586:	48 c0       	rjmp	.+144    	; 0x4618 <xTaskIncrementTick+0x17c>
    4588:	8e 81       	ldd	r24, Y+6	; 0x06
    458a:	9f 81       	ldd	r25, Y+7	; 0x07
    458c:	02 96       	adiw	r24, 0x02	; 2
    458e:	0e 94 2d 12 	call	0x245a	; 0x245a <uxListRemove>
    4592:	8e 81       	ldd	r24, Y+6	; 0x06
    4594:	9f 81       	ldd	r25, Y+7	; 0x07
    4596:	fc 01       	movw	r30, r24
    4598:	84 89       	ldd	r24, Z+20	; 0x14
    459a:	95 89       	ldd	r25, Z+21	; 0x15
    459c:	89 2b       	or	r24, r25
    459e:	29 f0       	breq	.+10     	; 0x45aa <xTaskIncrementTick+0x10e>
    45a0:	8e 81       	ldd	r24, Y+6	; 0x06
    45a2:	9f 81       	ldd	r25, Y+7	; 0x07
    45a4:	0c 96       	adiw	r24, 0x0c	; 12
    45a6:	0e 94 2d 12 	call	0x245a	; 0x245a <uxListRemove>
    45aa:	8e 81       	ldd	r24, Y+6	; 0x06
    45ac:	9f 81       	ldd	r25, Y+7	; 0x07
    45ae:	fc 01       	movw	r30, r24
    45b0:	96 89       	ldd	r25, Z+22	; 0x16
    45b2:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <uxTopReadyPriority>
    45b6:	89 17       	cp	r24, r25
    45b8:	30 f4       	brcc	.+12     	; 0x45c6 <xTaskIncrementTick+0x12a>
    45ba:	8e 81       	ldd	r24, Y+6	; 0x06
    45bc:	9f 81       	ldd	r25, Y+7	; 0x07
    45be:	fc 01       	movw	r30, r24
    45c0:	86 89       	ldd	r24, Z+22	; 0x16
    45c2:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <uxTopReadyPriority>
    45c6:	8e 81       	ldd	r24, Y+6	; 0x06
    45c8:	9f 81       	ldd	r25, Y+7	; 0x07
    45ca:	ac 01       	movw	r20, r24
    45cc:	4e 5f       	subi	r20, 0xFE	; 254
    45ce:	5f 4f       	sbci	r21, 0xFF	; 255
    45d0:	8e 81       	ldd	r24, Y+6	; 0x06
    45d2:	9f 81       	ldd	r25, Y+7	; 0x07
    45d4:	fc 01       	movw	r30, r24
    45d6:	86 89       	ldd	r24, Z+22	; 0x16
    45d8:	28 2f       	mov	r18, r24
    45da:	30 e0       	ldi	r19, 0x00	; 0
    45dc:	c9 01       	movw	r24, r18
    45de:	88 0f       	add	r24, r24
    45e0:	99 1f       	adc	r25, r25
    45e2:	88 0f       	add	r24, r24
    45e4:	99 1f       	adc	r25, r25
    45e6:	88 0f       	add	r24, r24
    45e8:	99 1f       	adc	r25, r25
    45ea:	82 0f       	add	r24, r18
    45ec:	93 1f       	adc	r25, r19
    45ee:	86 51       	subi	r24, 0x16	; 22
    45f0:	98 4f       	sbci	r25, 0xF8	; 248
    45f2:	ba 01       	movw	r22, r20
    45f4:	0e 94 66 11 	call	0x22cc	; 0x22cc <vListInsertEnd>
    45f8:	8e 81       	ldd	r24, Y+6	; 0x06
    45fa:	9f 81       	ldd	r25, Y+7	; 0x07
    45fc:	fc 01       	movw	r30, r24
    45fe:	26 89       	ldd	r18, Z+22	; 0x16
    4600:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    4604:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    4608:	fc 01       	movw	r30, r24
    460a:	86 89       	ldd	r24, Z+22	; 0x16
    460c:	28 17       	cp	r18, r24
    460e:	08 f4       	brcc	.+2      	; 0x4612 <xTaskIncrementTick+0x176>
    4610:	8b cf       	rjmp	.-234    	; 0x4528 <xTaskIncrementTick+0x8c>
    4612:	81 e0       	ldi	r24, 0x01	; 1
    4614:	89 83       	std	Y+1, r24	; 0x01
    4616:	88 cf       	rjmp	.-240    	; 0x4528 <xTaskIncrementTick+0x8c>
    4618:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    461c:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    4620:	fc 01       	movw	r30, r24
    4622:	86 89       	ldd	r24, Z+22	; 0x16
    4624:	28 2f       	mov	r18, r24
    4626:	30 e0       	ldi	r19, 0x00	; 0
    4628:	c9 01       	movw	r24, r18
    462a:	88 0f       	add	r24, r24
    462c:	99 1f       	adc	r25, r25
    462e:	88 0f       	add	r24, r24
    4630:	99 1f       	adc	r25, r25
    4632:	88 0f       	add	r24, r24
    4634:	99 1f       	adc	r25, r25
    4636:	82 0f       	add	r24, r18
    4638:	93 1f       	adc	r25, r19
    463a:	86 51       	subi	r24, 0x16	; 22
    463c:	98 4f       	sbci	r25, 0xF8	; 248
    463e:	fc 01       	movw	r30, r24
    4640:	80 81       	ld	r24, Z
    4642:	82 30       	cpi	r24, 0x02	; 2
    4644:	40 f0       	brcs	.+16     	; 0x4656 <xTaskIncrementTick+0x1ba>
    4646:	81 e0       	ldi	r24, 0x01	; 1
    4648:	89 83       	std	Y+1, r24	; 0x01
    464a:	05 c0       	rjmp	.+10     	; 0x4656 <xTaskIncrementTick+0x1ba>
    464c:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <uxPendedTicks>
    4650:	8f 5f       	subi	r24, 0xFF	; 255
    4652:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <uxPendedTicks>
    4656:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <xYieldPending>
    465a:	88 23       	and	r24, r24
    465c:	11 f0       	breq	.+4      	; 0x4662 <xTaskIncrementTick+0x1c6>
    465e:	81 e0       	ldi	r24, 0x01	; 1
    4660:	89 83       	std	Y+1, r24	; 0x01
    4662:	89 81       	ldd	r24, Y+1	; 0x01
    4664:	29 96       	adiw	r28, 0x09	; 9
    4666:	0f b6       	in	r0, 0x3f	; 63
    4668:	f8 94       	cli
    466a:	de bf       	out	0x3e, r29	; 62
    466c:	0f be       	out	0x3f, r0	; 63
    466e:	cd bf       	out	0x3d, r28	; 61
    4670:	df 91       	pop	r29
    4672:	cf 91       	pop	r28
    4674:	08 95       	ret

00004676 <vTaskSetApplicationTaskTag>:
    4676:	cf 93       	push	r28
    4678:	df 93       	push	r29
    467a:	00 d0       	rcall	.+0      	; 0x467c <vTaskSetApplicationTaskTag+0x6>
    467c:	00 d0       	rcall	.+0      	; 0x467e <vTaskSetApplicationTaskTag+0x8>
    467e:	00 d0       	rcall	.+0      	; 0x4680 <vTaskSetApplicationTaskTag+0xa>
    4680:	cd b7       	in	r28, 0x3d	; 61
    4682:	de b7       	in	r29, 0x3e	; 62
    4684:	9c 83       	std	Y+4, r25	; 0x04
    4686:	8b 83       	std	Y+3, r24	; 0x03
    4688:	7e 83       	std	Y+6, r23	; 0x06
    468a:	6d 83       	std	Y+5, r22	; 0x05
    468c:	8b 81       	ldd	r24, Y+3	; 0x03
    468e:	9c 81       	ldd	r25, Y+4	; 0x04
    4690:	89 2b       	or	r24, r25
    4692:	39 f4       	brne	.+14     	; 0x46a2 <vTaskSetApplicationTaskTag+0x2c>
    4694:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    4698:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    469c:	9a 83       	std	Y+2, r25	; 0x02
    469e:	89 83       	std	Y+1, r24	; 0x01
    46a0:	04 c0       	rjmp	.+8      	; 0x46aa <vTaskSetApplicationTaskTag+0x34>
    46a2:	8b 81       	ldd	r24, Y+3	; 0x03
    46a4:	9c 81       	ldd	r25, Y+4	; 0x04
    46a6:	9a 83       	std	Y+2, r25	; 0x02
    46a8:	89 83       	std	Y+1, r24	; 0x01
    46aa:	0f b6       	in	r0, 0x3f	; 63
    46ac:	f8 94       	cli
    46ae:	0f 92       	push	r0
    46b0:	89 81       	ldd	r24, Y+1	; 0x01
    46b2:	9a 81       	ldd	r25, Y+2	; 0x02
    46b4:	2d 81       	ldd	r18, Y+5	; 0x05
    46b6:	3e 81       	ldd	r19, Y+6	; 0x06
    46b8:	fc 01       	movw	r30, r24
    46ba:	36 a3       	std	Z+38, r19	; 0x26
    46bc:	25 a3       	std	Z+37, r18	; 0x25
    46be:	0f 90       	pop	r0
    46c0:	0f be       	out	0x3f, r0	; 63
    46c2:	00 00       	nop
    46c4:	26 96       	adiw	r28, 0x06	; 6
    46c6:	0f b6       	in	r0, 0x3f	; 63
    46c8:	f8 94       	cli
    46ca:	de bf       	out	0x3e, r29	; 62
    46cc:	0f be       	out	0x3f, r0	; 63
    46ce:	cd bf       	out	0x3d, r28	; 61
    46d0:	df 91       	pop	r29
    46d2:	cf 91       	pop	r28
    46d4:	08 95       	ret

000046d6 <vTaskSwitchContext>:
    46d6:	cf 93       	push	r28
    46d8:	df 93       	push	r29
    46da:	00 d0       	rcall	.+0      	; 0x46dc <vTaskSwitchContext+0x6>
    46dc:	1f 92       	push	r1
    46de:	cd b7       	in	r28, 0x3d	; 61
    46e0:	de b7       	in	r29, 0x3e	; 62
    46e2:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <uxSchedulerSuspended>
    46e6:	88 23       	and	r24, r24
    46e8:	21 f0       	breq	.+8      	; 0x46f2 <vTaskSwitchContext+0x1c>
    46ea:	81 e0       	ldi	r24, 0x01	; 1
    46ec:	80 93 3d 08 	sts	0x083D, r24	; 0x80083d <xYieldPending>
    46f0:	90 c0       	rjmp	.+288    	; 0x4812 <vTaskSwitchContext+0x13c>
    46f2:	10 92 3d 08 	sts	0x083D, r1	; 0x80083d <xYieldPending>
    46f6:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    46fa:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    46fe:	fc 01       	movw	r30, r24
    4700:	85 a1       	ldd	r24, Z+37	; 0x25
    4702:	96 a1       	ldd	r25, Z+38	; 0x26
    4704:	0e 94 66 10 	call	0x20cc	; 0x20cc <switch_out>
    4708:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    470c:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    4710:	fc 01       	movw	r30, r24
    4712:	20 81       	ld	r18, Z
    4714:	31 81       	ldd	r19, Z+1	; 0x01
    4716:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    471a:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    471e:	fc 01       	movw	r30, r24
    4720:	87 89       	ldd	r24, Z+23	; 0x17
    4722:	90 8d       	ldd	r25, Z+24	; 0x18
    4724:	82 17       	cp	r24, r18
    4726:	93 07       	cpc	r25, r19
    4728:	70 f0       	brcs	.+28     	; 0x4746 <vTaskSwitchContext+0x70>
    472a:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    472e:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    4732:	9c 01       	movw	r18, r24
    4734:	27 5e       	subi	r18, 0xE7	; 231
    4736:	3f 4f       	sbci	r19, 0xFF	; 255
    4738:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    473c:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    4740:	b9 01       	movw	r22, r18
    4742:	0e 94 c9 09 	call	0x1392	; 0x1392 <vApplicationStackOverflowHook>
    4746:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <uxTopReadyPriority>
    474a:	89 83       	std	Y+1, r24	; 0x01
    474c:	03 c0       	rjmp	.+6      	; 0x4754 <vTaskSwitchContext+0x7e>
    474e:	89 81       	ldd	r24, Y+1	; 0x01
    4750:	81 50       	subi	r24, 0x01	; 1
    4752:	89 83       	std	Y+1, r24	; 0x01
    4754:	89 81       	ldd	r24, Y+1	; 0x01
    4756:	28 2f       	mov	r18, r24
    4758:	30 e0       	ldi	r19, 0x00	; 0
    475a:	c9 01       	movw	r24, r18
    475c:	88 0f       	add	r24, r24
    475e:	99 1f       	adc	r25, r25
    4760:	88 0f       	add	r24, r24
    4762:	99 1f       	adc	r25, r25
    4764:	88 0f       	add	r24, r24
    4766:	99 1f       	adc	r25, r25
    4768:	82 0f       	add	r24, r18
    476a:	93 1f       	adc	r25, r19
    476c:	86 51       	subi	r24, 0x16	; 22
    476e:	98 4f       	sbci	r25, 0xF8	; 248
    4770:	fc 01       	movw	r30, r24
    4772:	80 81       	ld	r24, Z
    4774:	88 23       	and	r24, r24
    4776:	59 f3       	breq	.-42     	; 0x474e <vTaskSwitchContext+0x78>
    4778:	89 81       	ldd	r24, Y+1	; 0x01
    477a:	28 2f       	mov	r18, r24
    477c:	30 e0       	ldi	r19, 0x00	; 0
    477e:	c9 01       	movw	r24, r18
    4780:	88 0f       	add	r24, r24
    4782:	99 1f       	adc	r25, r25
    4784:	88 0f       	add	r24, r24
    4786:	99 1f       	adc	r25, r25
    4788:	88 0f       	add	r24, r24
    478a:	99 1f       	adc	r25, r25
    478c:	82 0f       	add	r24, r18
    478e:	93 1f       	adc	r25, r19
    4790:	86 51       	subi	r24, 0x16	; 22
    4792:	98 4f       	sbci	r25, 0xF8	; 248
    4794:	9b 83       	std	Y+3, r25	; 0x03
    4796:	8a 83       	std	Y+2, r24	; 0x02
    4798:	8a 81       	ldd	r24, Y+2	; 0x02
    479a:	9b 81       	ldd	r25, Y+3	; 0x03
    479c:	fc 01       	movw	r30, r24
    479e:	81 81       	ldd	r24, Z+1	; 0x01
    47a0:	92 81       	ldd	r25, Z+2	; 0x02
    47a2:	fc 01       	movw	r30, r24
    47a4:	22 81       	ldd	r18, Z+2	; 0x02
    47a6:	33 81       	ldd	r19, Z+3	; 0x03
    47a8:	8a 81       	ldd	r24, Y+2	; 0x02
    47aa:	9b 81       	ldd	r25, Y+3	; 0x03
    47ac:	fc 01       	movw	r30, r24
    47ae:	32 83       	std	Z+2, r19	; 0x02
    47b0:	21 83       	std	Z+1, r18	; 0x01
    47b2:	8a 81       	ldd	r24, Y+2	; 0x02
    47b4:	9b 81       	ldd	r25, Y+3	; 0x03
    47b6:	fc 01       	movw	r30, r24
    47b8:	21 81       	ldd	r18, Z+1	; 0x01
    47ba:	32 81       	ldd	r19, Z+2	; 0x02
    47bc:	8a 81       	ldd	r24, Y+2	; 0x02
    47be:	9b 81       	ldd	r25, Y+3	; 0x03
    47c0:	03 96       	adiw	r24, 0x03	; 3
    47c2:	28 17       	cp	r18, r24
    47c4:	39 07       	cpc	r19, r25
    47c6:	69 f4       	brne	.+26     	; 0x47e2 <vTaskSwitchContext+0x10c>
    47c8:	8a 81       	ldd	r24, Y+2	; 0x02
    47ca:	9b 81       	ldd	r25, Y+3	; 0x03
    47cc:	fc 01       	movw	r30, r24
    47ce:	81 81       	ldd	r24, Z+1	; 0x01
    47d0:	92 81       	ldd	r25, Z+2	; 0x02
    47d2:	fc 01       	movw	r30, r24
    47d4:	22 81       	ldd	r18, Z+2	; 0x02
    47d6:	33 81       	ldd	r19, Z+3	; 0x03
    47d8:	8a 81       	ldd	r24, Y+2	; 0x02
    47da:	9b 81       	ldd	r25, Y+3	; 0x03
    47dc:	fc 01       	movw	r30, r24
    47de:	32 83       	std	Z+2, r19	; 0x02
    47e0:	21 83       	std	Z+1, r18	; 0x01
    47e2:	8a 81       	ldd	r24, Y+2	; 0x02
    47e4:	9b 81       	ldd	r25, Y+3	; 0x03
    47e6:	fc 01       	movw	r30, r24
    47e8:	81 81       	ldd	r24, Z+1	; 0x01
    47ea:	92 81       	ldd	r25, Z+2	; 0x02
    47ec:	fc 01       	movw	r30, r24
    47ee:	86 81       	ldd	r24, Z+6	; 0x06
    47f0:	97 81       	ldd	r25, Z+7	; 0x07
    47f2:	90 93 e9 07 	sts	0x07E9, r25	; 0x8007e9 <pxCurrentTCB+0x1>
    47f6:	80 93 e8 07 	sts	0x07E8, r24	; 0x8007e8 <pxCurrentTCB>
    47fa:	89 81       	ldd	r24, Y+1	; 0x01
    47fc:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <uxTopReadyPriority>
    4800:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    4804:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    4808:	fc 01       	movw	r30, r24
    480a:	85 a1       	ldd	r24, Z+37	; 0x25
    480c:	96 a1       	ldd	r25, Z+38	; 0x26
    480e:	0e 94 41 10 	call	0x2082	; 0x2082 <switch_in>
    4812:	00 00       	nop
    4814:	0f 90       	pop	r0
    4816:	0f 90       	pop	r0
    4818:	0f 90       	pop	r0
    481a:	df 91       	pop	r29
    481c:	cf 91       	pop	r28
    481e:	08 95       	ret

00004820 <vTaskPlaceOnEventList>:
    4820:	cf 93       	push	r28
    4822:	df 93       	push	r29
    4824:	00 d0       	rcall	.+0      	; 0x4826 <vTaskPlaceOnEventList+0x6>
    4826:	00 d0       	rcall	.+0      	; 0x4828 <vTaskPlaceOnEventList+0x8>
    4828:	cd b7       	in	r28, 0x3d	; 61
    482a:	de b7       	in	r29, 0x3e	; 62
    482c:	9a 83       	std	Y+2, r25	; 0x02
    482e:	89 83       	std	Y+1, r24	; 0x01
    4830:	7c 83       	std	Y+4, r23	; 0x04
    4832:	6b 83       	std	Y+3, r22	; 0x03
    4834:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    4838:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    483c:	9c 01       	movw	r18, r24
    483e:	24 5f       	subi	r18, 0xF4	; 244
    4840:	3f 4f       	sbci	r19, 0xFF	; 255
    4842:	89 81       	ldd	r24, Y+1	; 0x01
    4844:	9a 81       	ldd	r25, Y+2	; 0x02
    4846:	b9 01       	movw	r22, r18
    4848:	0e 94 b5 11 	call	0x236a	; 0x236a <vListInsert>
    484c:	8b 81       	ldd	r24, Y+3	; 0x03
    484e:	9c 81       	ldd	r25, Y+4	; 0x04
    4850:	61 e0       	ldi	r22, 0x01	; 1
    4852:	0e 94 94 27 	call	0x4f28	; 0x4f28 <prvAddCurrentTaskToDelayedList>
    4856:	00 00       	nop
    4858:	0f 90       	pop	r0
    485a:	0f 90       	pop	r0
    485c:	0f 90       	pop	r0
    485e:	0f 90       	pop	r0
    4860:	df 91       	pop	r29
    4862:	cf 91       	pop	r28
    4864:	08 95       	ret

00004866 <xTaskRemoveFromEventList>:
    4866:	cf 93       	push	r28
    4868:	df 93       	push	r29
    486a:	00 d0       	rcall	.+0      	; 0x486c <xTaskRemoveFromEventList+0x6>
    486c:	00 d0       	rcall	.+0      	; 0x486e <xTaskRemoveFromEventList+0x8>
    486e:	1f 92       	push	r1
    4870:	cd b7       	in	r28, 0x3d	; 61
    4872:	de b7       	in	r29, 0x3e	; 62
    4874:	9d 83       	std	Y+5, r25	; 0x05
    4876:	8c 83       	std	Y+4, r24	; 0x04
    4878:	8c 81       	ldd	r24, Y+4	; 0x04
    487a:	9d 81       	ldd	r25, Y+5	; 0x05
    487c:	fc 01       	movw	r30, r24
    487e:	85 81       	ldd	r24, Z+5	; 0x05
    4880:	96 81       	ldd	r25, Z+6	; 0x06
    4882:	fc 01       	movw	r30, r24
    4884:	86 81       	ldd	r24, Z+6	; 0x06
    4886:	97 81       	ldd	r25, Z+7	; 0x07
    4888:	9b 83       	std	Y+3, r25	; 0x03
    488a:	8a 83       	std	Y+2, r24	; 0x02
    488c:	8a 81       	ldd	r24, Y+2	; 0x02
    488e:	9b 81       	ldd	r25, Y+3	; 0x03
    4890:	0c 96       	adiw	r24, 0x0c	; 12
    4892:	0e 94 2d 12 	call	0x245a	; 0x245a <uxListRemove>
    4896:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <uxSchedulerSuspended>
    489a:	88 23       	and	r24, r24
    489c:	69 f5       	brne	.+90     	; 0x48f8 <xTaskRemoveFromEventList+0x92>
    489e:	8a 81       	ldd	r24, Y+2	; 0x02
    48a0:	9b 81       	ldd	r25, Y+3	; 0x03
    48a2:	02 96       	adiw	r24, 0x02	; 2
    48a4:	0e 94 2d 12 	call	0x245a	; 0x245a <uxListRemove>
    48a8:	8a 81       	ldd	r24, Y+2	; 0x02
    48aa:	9b 81       	ldd	r25, Y+3	; 0x03
    48ac:	fc 01       	movw	r30, r24
    48ae:	96 89       	ldd	r25, Z+22	; 0x16
    48b0:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <uxTopReadyPriority>
    48b4:	89 17       	cp	r24, r25
    48b6:	30 f4       	brcc	.+12     	; 0x48c4 <xTaskRemoveFromEventList+0x5e>
    48b8:	8a 81       	ldd	r24, Y+2	; 0x02
    48ba:	9b 81       	ldd	r25, Y+3	; 0x03
    48bc:	fc 01       	movw	r30, r24
    48be:	86 89       	ldd	r24, Z+22	; 0x16
    48c0:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <uxTopReadyPriority>
    48c4:	8a 81       	ldd	r24, Y+2	; 0x02
    48c6:	9b 81       	ldd	r25, Y+3	; 0x03
    48c8:	ac 01       	movw	r20, r24
    48ca:	4e 5f       	subi	r20, 0xFE	; 254
    48cc:	5f 4f       	sbci	r21, 0xFF	; 255
    48ce:	8a 81       	ldd	r24, Y+2	; 0x02
    48d0:	9b 81       	ldd	r25, Y+3	; 0x03
    48d2:	fc 01       	movw	r30, r24
    48d4:	86 89       	ldd	r24, Z+22	; 0x16
    48d6:	28 2f       	mov	r18, r24
    48d8:	30 e0       	ldi	r19, 0x00	; 0
    48da:	c9 01       	movw	r24, r18
    48dc:	88 0f       	add	r24, r24
    48de:	99 1f       	adc	r25, r25
    48e0:	88 0f       	add	r24, r24
    48e2:	99 1f       	adc	r25, r25
    48e4:	88 0f       	add	r24, r24
    48e6:	99 1f       	adc	r25, r25
    48e8:	82 0f       	add	r24, r18
    48ea:	93 1f       	adc	r25, r19
    48ec:	86 51       	subi	r24, 0x16	; 22
    48ee:	98 4f       	sbci	r25, 0xF8	; 248
    48f0:	ba 01       	movw	r22, r20
    48f2:	0e 94 66 11 	call	0x22cc	; 0x22cc <vListInsertEnd>
    48f6:	08 c0       	rjmp	.+16     	; 0x4908 <xTaskRemoveFromEventList+0xa2>
    48f8:	8a 81       	ldd	r24, Y+2	; 0x02
    48fa:	9b 81       	ldd	r25, Y+3	; 0x03
    48fc:	0c 96       	adiw	r24, 0x0c	; 12
    48fe:	bc 01       	movw	r22, r24
    4900:	84 e2       	ldi	r24, 0x24	; 36
    4902:	98 e0       	ldi	r25, 0x08	; 8
    4904:	0e 94 66 11 	call	0x22cc	; 0x22cc <vListInsertEnd>
    4908:	8a 81       	ldd	r24, Y+2	; 0x02
    490a:	9b 81       	ldd	r25, Y+3	; 0x03
    490c:	fc 01       	movw	r30, r24
    490e:	26 89       	ldd	r18, Z+22	; 0x16
    4910:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    4914:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    4918:	fc 01       	movw	r30, r24
    491a:	86 89       	ldd	r24, Z+22	; 0x16
    491c:	82 17       	cp	r24, r18
    491e:	30 f4       	brcc	.+12     	; 0x492c <xTaskRemoveFromEventList+0xc6>
    4920:	81 e0       	ldi	r24, 0x01	; 1
    4922:	89 83       	std	Y+1, r24	; 0x01
    4924:	81 e0       	ldi	r24, 0x01	; 1
    4926:	80 93 3d 08 	sts	0x083D, r24	; 0x80083d <xYieldPending>
    492a:	01 c0       	rjmp	.+2      	; 0x492e <xTaskRemoveFromEventList+0xc8>
    492c:	19 82       	std	Y+1, r1	; 0x01
    492e:	89 81       	ldd	r24, Y+1	; 0x01
    4930:	0f 90       	pop	r0
    4932:	0f 90       	pop	r0
    4934:	0f 90       	pop	r0
    4936:	0f 90       	pop	r0
    4938:	0f 90       	pop	r0
    493a:	df 91       	pop	r29
    493c:	cf 91       	pop	r28
    493e:	08 95       	ret

00004940 <vTaskSetTimeOutState>:
    4940:	cf 93       	push	r28
    4942:	df 93       	push	r29
    4944:	00 d0       	rcall	.+0      	; 0x4946 <vTaskSetTimeOutState+0x6>
    4946:	cd b7       	in	r28, 0x3d	; 61
    4948:	de b7       	in	r29, 0x3e	; 62
    494a:	9a 83       	std	Y+2, r25	; 0x02
    494c:	89 83       	std	Y+1, r24	; 0x01
    494e:	20 91 3e 08 	lds	r18, 0x083E	; 0x80083e <xNumOfOverflows>
    4952:	89 81       	ldd	r24, Y+1	; 0x01
    4954:	9a 81       	ldd	r25, Y+2	; 0x02
    4956:	fc 01       	movw	r30, r24
    4958:	20 83       	st	Z, r18
    495a:	20 91 38 08 	lds	r18, 0x0838	; 0x800838 <xTickCount>
    495e:	30 91 39 08 	lds	r19, 0x0839	; 0x800839 <xTickCount+0x1>
    4962:	89 81       	ldd	r24, Y+1	; 0x01
    4964:	9a 81       	ldd	r25, Y+2	; 0x02
    4966:	fc 01       	movw	r30, r24
    4968:	32 83       	std	Z+2, r19	; 0x02
    496a:	21 83       	std	Z+1, r18	; 0x01
    496c:	00 00       	nop
    496e:	0f 90       	pop	r0
    4970:	0f 90       	pop	r0
    4972:	df 91       	pop	r29
    4974:	cf 91       	pop	r28
    4976:	08 95       	ret

00004978 <xTaskCheckForTimeOut>:
    4978:	cf 93       	push	r28
    497a:	df 93       	push	r29
    497c:	cd b7       	in	r28, 0x3d	; 61
    497e:	de b7       	in	r29, 0x3e	; 62
    4980:	27 97       	sbiw	r28, 0x07	; 7
    4982:	0f b6       	in	r0, 0x3f	; 63
    4984:	f8 94       	cli
    4986:	de bf       	out	0x3e, r29	; 62
    4988:	0f be       	out	0x3f, r0	; 63
    498a:	cd bf       	out	0x3d, r28	; 61
    498c:	9d 83       	std	Y+5, r25	; 0x05
    498e:	8c 83       	std	Y+4, r24	; 0x04
    4990:	7f 83       	std	Y+7, r23	; 0x07
    4992:	6e 83       	std	Y+6, r22	; 0x06
    4994:	0f b6       	in	r0, 0x3f	; 63
    4996:	f8 94       	cli
    4998:	0f 92       	push	r0
    499a:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <xTickCount>
    499e:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <xTickCount+0x1>
    49a2:	9b 83       	std	Y+3, r25	; 0x03
    49a4:	8a 83       	std	Y+2, r24	; 0x02
    49a6:	8c 81       	ldd	r24, Y+4	; 0x04
    49a8:	9d 81       	ldd	r25, Y+5	; 0x05
    49aa:	fc 01       	movw	r30, r24
    49ac:	90 81       	ld	r25, Z
    49ae:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <xNumOfOverflows>
    49b2:	98 17       	cp	r25, r24
    49b4:	69 f0       	breq	.+26     	; 0x49d0 <xTaskCheckForTimeOut+0x58>
    49b6:	8c 81       	ldd	r24, Y+4	; 0x04
    49b8:	9d 81       	ldd	r25, Y+5	; 0x05
    49ba:	fc 01       	movw	r30, r24
    49bc:	21 81       	ldd	r18, Z+1	; 0x01
    49be:	32 81       	ldd	r19, Z+2	; 0x02
    49c0:	8a 81       	ldd	r24, Y+2	; 0x02
    49c2:	9b 81       	ldd	r25, Y+3	; 0x03
    49c4:	82 17       	cp	r24, r18
    49c6:	93 07       	cpc	r25, r19
    49c8:	18 f0       	brcs	.+6      	; 0x49d0 <xTaskCheckForTimeOut+0x58>
    49ca:	81 e0       	ldi	r24, 0x01	; 1
    49cc:	89 83       	std	Y+1, r24	; 0x01
    49ce:	30 c0       	rjmp	.+96     	; 0x4a30 <xTaskCheckForTimeOut+0xb8>
    49d0:	8c 81       	ldd	r24, Y+4	; 0x04
    49d2:	9d 81       	ldd	r25, Y+5	; 0x05
    49d4:	fc 01       	movw	r30, r24
    49d6:	81 81       	ldd	r24, Z+1	; 0x01
    49d8:	92 81       	ldd	r25, Z+2	; 0x02
    49da:	2a 81       	ldd	r18, Y+2	; 0x02
    49dc:	3b 81       	ldd	r19, Y+3	; 0x03
    49de:	28 1b       	sub	r18, r24
    49e0:	39 0b       	sbc	r19, r25
    49e2:	8e 81       	ldd	r24, Y+6	; 0x06
    49e4:	9f 81       	ldd	r25, Y+7	; 0x07
    49e6:	fc 01       	movw	r30, r24
    49e8:	80 81       	ld	r24, Z
    49ea:	91 81       	ldd	r25, Z+1	; 0x01
    49ec:	28 17       	cp	r18, r24
    49ee:	39 07       	cpc	r19, r25
    49f0:	e8 f4       	brcc	.+58     	; 0x4a2c <xTaskCheckForTimeOut+0xb4>
    49f2:	8e 81       	ldd	r24, Y+6	; 0x06
    49f4:	9f 81       	ldd	r25, Y+7	; 0x07
    49f6:	fc 01       	movw	r30, r24
    49f8:	20 81       	ld	r18, Z
    49fa:	31 81       	ldd	r19, Z+1	; 0x01
    49fc:	8c 81       	ldd	r24, Y+4	; 0x04
    49fe:	9d 81       	ldd	r25, Y+5	; 0x05
    4a00:	fc 01       	movw	r30, r24
    4a02:	41 81       	ldd	r20, Z+1	; 0x01
    4a04:	52 81       	ldd	r21, Z+2	; 0x02
    4a06:	8a 81       	ldd	r24, Y+2	; 0x02
    4a08:	9b 81       	ldd	r25, Y+3	; 0x03
    4a0a:	ba 01       	movw	r22, r20
    4a0c:	68 1b       	sub	r22, r24
    4a0e:	79 0b       	sbc	r23, r25
    4a10:	cb 01       	movw	r24, r22
    4a12:	28 0f       	add	r18, r24
    4a14:	39 1f       	adc	r19, r25
    4a16:	8e 81       	ldd	r24, Y+6	; 0x06
    4a18:	9f 81       	ldd	r25, Y+7	; 0x07
    4a1a:	fc 01       	movw	r30, r24
    4a1c:	31 83       	std	Z+1, r19	; 0x01
    4a1e:	20 83       	st	Z, r18
    4a20:	8c 81       	ldd	r24, Y+4	; 0x04
    4a22:	9d 81       	ldd	r25, Y+5	; 0x05
    4a24:	0e 94 a0 24 	call	0x4940	; 0x4940 <vTaskSetTimeOutState>
    4a28:	19 82       	std	Y+1, r1	; 0x01
    4a2a:	02 c0       	rjmp	.+4      	; 0x4a30 <xTaskCheckForTimeOut+0xb8>
    4a2c:	81 e0       	ldi	r24, 0x01	; 1
    4a2e:	89 83       	std	Y+1, r24	; 0x01
    4a30:	0f 90       	pop	r0
    4a32:	0f be       	out	0x3f, r0	; 63
    4a34:	89 81       	ldd	r24, Y+1	; 0x01
    4a36:	27 96       	adiw	r28, 0x07	; 7
    4a38:	0f b6       	in	r0, 0x3f	; 63
    4a3a:	f8 94       	cli
    4a3c:	de bf       	out	0x3e, r29	; 62
    4a3e:	0f be       	out	0x3f, r0	; 63
    4a40:	cd bf       	out	0x3d, r28	; 61
    4a42:	df 91       	pop	r29
    4a44:	cf 91       	pop	r28
    4a46:	08 95       	ret

00004a48 <vTaskMissedYield>:
    4a48:	cf 93       	push	r28
    4a4a:	df 93       	push	r29
    4a4c:	cd b7       	in	r28, 0x3d	; 61
    4a4e:	de b7       	in	r29, 0x3e	; 62
    4a50:	81 e0       	ldi	r24, 0x01	; 1
    4a52:	80 93 3d 08 	sts	0x083D, r24	; 0x80083d <xYieldPending>
    4a56:	00 00       	nop
    4a58:	df 91       	pop	r29
    4a5a:	cf 91       	pop	r28
    4a5c:	08 95       	ret

00004a5e <prvIdleTask>:
    4a5e:	cf 93       	push	r28
    4a60:	df 93       	push	r29
    4a62:	00 d0       	rcall	.+0      	; 0x4a64 <prvIdleTask+0x6>
    4a64:	cd b7       	in	r28, 0x3d	; 61
    4a66:	de b7       	in	r29, 0x3e	; 62
    4a68:	9a 83       	std	Y+2, r25	; 0x02
    4a6a:	89 83       	std	Y+1, r24	; 0x01
    4a6c:	0e 94 7f 25 	call	0x4afe	; 0x4afe <prvCheckTasksWaitingTermination>
    4a70:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <pxReadyTasksLists>
    4a74:	82 30       	cpi	r24, 0x02	; 2
    4a76:	10 f0       	brcs	.+4      	; 0x4a7c <prvIdleTask+0x1e>
    4a78:	0e 94 62 14 	call	0x28c4	; 0x28c4 <vPortYield>
    4a7c:	0e 94 28 09 	call	0x1250	; 0x1250 <vApplicationIdleHook>
    4a80:	f5 cf       	rjmp	.-22     	; 0x4a6c <prvIdleTask+0xe>

00004a82 <prvInitialiseTaskLists>:
    4a82:	cf 93       	push	r28
    4a84:	df 93       	push	r29
    4a86:	1f 92       	push	r1
    4a88:	cd b7       	in	r28, 0x3d	; 61
    4a8a:	de b7       	in	r29, 0x3e	; 62
    4a8c:	19 82       	std	Y+1, r1	; 0x01
    4a8e:	13 c0       	rjmp	.+38     	; 0x4ab6 <prvInitialiseTaskLists+0x34>
    4a90:	89 81       	ldd	r24, Y+1	; 0x01
    4a92:	28 2f       	mov	r18, r24
    4a94:	30 e0       	ldi	r19, 0x00	; 0
    4a96:	c9 01       	movw	r24, r18
    4a98:	88 0f       	add	r24, r24
    4a9a:	99 1f       	adc	r25, r25
    4a9c:	88 0f       	add	r24, r24
    4a9e:	99 1f       	adc	r25, r25
    4aa0:	88 0f       	add	r24, r24
    4aa2:	99 1f       	adc	r25, r25
    4aa4:	82 0f       	add	r24, r18
    4aa6:	93 1f       	adc	r25, r19
    4aa8:	86 51       	subi	r24, 0x16	; 22
    4aaa:	98 4f       	sbci	r25, 0xF8	; 248
    4aac:	0e 94 1e 11 	call	0x223c	; 0x223c <vListInitialise>
    4ab0:	89 81       	ldd	r24, Y+1	; 0x01
    4ab2:	8f 5f       	subi	r24, 0xFF	; 255
    4ab4:	89 83       	std	Y+1, r24	; 0x01
    4ab6:	89 81       	ldd	r24, Y+1	; 0x01
    4ab8:	84 30       	cpi	r24, 0x04	; 4
    4aba:	50 f3       	brcs	.-44     	; 0x4a90 <prvInitialiseTaskLists+0xe>
    4abc:	8e e0       	ldi	r24, 0x0E	; 14
    4abe:	98 e0       	ldi	r25, 0x08	; 8
    4ac0:	0e 94 1e 11 	call	0x223c	; 0x223c <vListInitialise>
    4ac4:	87 e1       	ldi	r24, 0x17	; 23
    4ac6:	98 e0       	ldi	r25, 0x08	; 8
    4ac8:	0e 94 1e 11 	call	0x223c	; 0x223c <vListInitialise>
    4acc:	84 e2       	ldi	r24, 0x24	; 36
    4ace:	98 e0       	ldi	r25, 0x08	; 8
    4ad0:	0e 94 1e 11 	call	0x223c	; 0x223c <vListInitialise>
    4ad4:	8d e2       	ldi	r24, 0x2D	; 45
    4ad6:	98 e0       	ldi	r25, 0x08	; 8
    4ad8:	0e 94 1e 11 	call	0x223c	; 0x223c <vListInitialise>
    4adc:	8e e0       	ldi	r24, 0x0E	; 14
    4ade:	98 e0       	ldi	r25, 0x08	; 8
    4ae0:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <pxDelayedTaskList+0x1>
    4ae4:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <pxDelayedTaskList>
    4ae8:	87 e1       	ldi	r24, 0x17	; 23
    4aea:	98 e0       	ldi	r25, 0x08	; 8
    4aec:	90 93 23 08 	sts	0x0823, r25	; 0x800823 <pxOverflowDelayedTaskList+0x1>
    4af0:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <pxOverflowDelayedTaskList>
    4af4:	00 00       	nop
    4af6:	0f 90       	pop	r0
    4af8:	df 91       	pop	r29
    4afa:	cf 91       	pop	r28
    4afc:	08 95       	ret

00004afe <prvCheckTasksWaitingTermination>:
    4afe:	cf 93       	push	r28
    4b00:	df 93       	push	r29
    4b02:	00 d0       	rcall	.+0      	; 0x4b04 <prvCheckTasksWaitingTermination+0x6>
    4b04:	1f 92       	push	r1
    4b06:	cd b7       	in	r28, 0x3d	; 61
    4b08:	de b7       	in	r29, 0x3e	; 62
    4b0a:	2f c0       	rjmp	.+94     	; 0x4b6a <prvCheckTasksWaitingTermination+0x6c>
    4b0c:	0e 94 93 21 	call	0x4326	; 0x4326 <vTaskSuspendAll>
    4b10:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <xTasksWaitingTermination>
    4b14:	81 e0       	ldi	r24, 0x01	; 1
    4b16:	99 23       	and	r25, r25
    4b18:	09 f0       	breq	.+2      	; 0x4b1c <prvCheckTasksWaitingTermination+0x1e>
    4b1a:	80 e0       	ldi	r24, 0x00	; 0
    4b1c:	89 83       	std	Y+1, r24	; 0x01
    4b1e:	0e 94 a0 21 	call	0x4340	; 0x4340 <xTaskResumeAll>
    4b22:	89 81       	ldd	r24, Y+1	; 0x01
    4b24:	88 23       	and	r24, r24
    4b26:	09 f5       	brne	.+66     	; 0x4b6a <prvCheckTasksWaitingTermination+0x6c>
    4b28:	0f b6       	in	r0, 0x3f	; 63
    4b2a:	f8 94       	cli
    4b2c:	0f 92       	push	r0
    4b2e:	80 91 32 08 	lds	r24, 0x0832	; 0x800832 <xTasksWaitingTermination+0x5>
    4b32:	90 91 33 08 	lds	r25, 0x0833	; 0x800833 <xTasksWaitingTermination+0x6>
    4b36:	fc 01       	movw	r30, r24
    4b38:	86 81       	ldd	r24, Z+6	; 0x06
    4b3a:	97 81       	ldd	r25, Z+7	; 0x07
    4b3c:	9b 83       	std	Y+3, r25	; 0x03
    4b3e:	8a 83       	std	Y+2, r24	; 0x02
    4b40:	8a 81       	ldd	r24, Y+2	; 0x02
    4b42:	9b 81       	ldd	r25, Y+3	; 0x03
    4b44:	02 96       	adiw	r24, 0x02	; 2
    4b46:	0e 94 2d 12 	call	0x245a	; 0x245a <uxListRemove>
    4b4a:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <uxCurrentNumberOfTasks>
    4b4e:	81 50       	subi	r24, 0x01	; 1
    4b50:	80 93 37 08 	sts	0x0837, r24	; 0x800837 <uxCurrentNumberOfTasks>
    4b54:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <uxDeletedTasksWaitingCleanUp>
    4b58:	81 50       	subi	r24, 0x01	; 1
    4b5a:	80 93 36 08 	sts	0x0836, r24	; 0x800836 <uxDeletedTasksWaitingCleanUp>
    4b5e:	0f 90       	pop	r0
    4b60:	0f be       	out	0x3f, r0	; 63
    4b62:	8a 81       	ldd	r24, Y+2	; 0x02
    4b64:	9b 81       	ldd	r25, Y+3	; 0x03
    4b66:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <prvDeleteTCB>
    4b6a:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <uxDeletedTasksWaitingCleanUp>
    4b6e:	88 23       	and	r24, r24
    4b70:	69 f6       	brne	.-102    	; 0x4b0c <prvCheckTasksWaitingTermination+0xe>
    4b72:	00 00       	nop
    4b74:	0f 90       	pop	r0
    4b76:	0f 90       	pop	r0
    4b78:	0f 90       	pop	r0
    4b7a:	df 91       	pop	r29
    4b7c:	cf 91       	pop	r28
    4b7e:	08 95       	ret

00004b80 <prvTaskCheckFreeStackSpace>:
    4b80:	cf 93       	push	r28
    4b82:	df 93       	push	r29
    4b84:	00 d0       	rcall	.+0      	; 0x4b86 <prvTaskCheckFreeStackSpace+0x6>
    4b86:	00 d0       	rcall	.+0      	; 0x4b88 <prvTaskCheckFreeStackSpace+0x8>
    4b88:	00 d0       	rcall	.+0      	; 0x4b8a <prvTaskCheckFreeStackSpace+0xa>
    4b8a:	cd b7       	in	r28, 0x3d	; 61
    4b8c:	de b7       	in	r29, 0x3e	; 62
    4b8e:	9e 83       	std	Y+6, r25	; 0x06
    4b90:	8d 83       	std	Y+5, r24	; 0x05
    4b92:	19 82       	std	Y+1, r1	; 0x01
    4b94:	1a 82       	std	Y+2, r1	; 0x02
    4b96:	1b 82       	std	Y+3, r1	; 0x03
    4b98:	1c 82       	std	Y+4, r1	; 0x04
    4b9a:	10 c0       	rjmp	.+32     	; 0x4bbc <prvTaskCheckFreeStackSpace+0x3c>
    4b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    4b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    4ba0:	01 96       	adiw	r24, 0x01	; 1
    4ba2:	9e 83       	std	Y+6, r25	; 0x06
    4ba4:	8d 83       	std	Y+5, r24	; 0x05
    4ba6:	89 81       	ldd	r24, Y+1	; 0x01
    4ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    4baa:	ab 81       	ldd	r26, Y+3	; 0x03
    4bac:	bc 81       	ldd	r27, Y+4	; 0x04
    4bae:	01 96       	adiw	r24, 0x01	; 1
    4bb0:	a1 1d       	adc	r26, r1
    4bb2:	b1 1d       	adc	r27, r1
    4bb4:	89 83       	std	Y+1, r24	; 0x01
    4bb6:	9a 83       	std	Y+2, r25	; 0x02
    4bb8:	ab 83       	std	Y+3, r26	; 0x03
    4bba:	bc 83       	std	Y+4, r27	; 0x04
    4bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    4bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    4bc0:	fc 01       	movw	r30, r24
    4bc2:	80 81       	ld	r24, Z
    4bc4:	85 3a       	cpi	r24, 0xA5	; 165
    4bc6:	51 f3       	breq	.-44     	; 0x4b9c <prvTaskCheckFreeStackSpace+0x1c>
    4bc8:	89 81       	ldd	r24, Y+1	; 0x01
    4bca:	9a 81       	ldd	r25, Y+2	; 0x02
    4bcc:	26 96       	adiw	r28, 0x06	; 6
    4bce:	0f b6       	in	r0, 0x3f	; 63
    4bd0:	f8 94       	cli
    4bd2:	de bf       	out	0x3e, r29	; 62
    4bd4:	0f be       	out	0x3f, r0	; 63
    4bd6:	cd bf       	out	0x3d, r28	; 61
    4bd8:	df 91       	pop	r29
    4bda:	cf 91       	pop	r28
    4bdc:	08 95       	ret

00004bde <uxTaskGetStackHighWaterMark>:
    4bde:	cf 93       	push	r28
    4be0:	df 93       	push	r29
    4be2:	cd b7       	in	r28, 0x3d	; 61
    4be4:	de b7       	in	r29, 0x3e	; 62
    4be6:	27 97       	sbiw	r28, 0x07	; 7
    4be8:	0f b6       	in	r0, 0x3f	; 63
    4bea:	f8 94       	cli
    4bec:	de bf       	out	0x3e, r29	; 62
    4bee:	0f be       	out	0x3f, r0	; 63
    4bf0:	cd bf       	out	0x3d, r28	; 61
    4bf2:	9f 83       	std	Y+7, r25	; 0x07
    4bf4:	8e 83       	std	Y+6, r24	; 0x06
    4bf6:	8e 81       	ldd	r24, Y+6	; 0x06
    4bf8:	9f 81       	ldd	r25, Y+7	; 0x07
    4bfa:	89 2b       	or	r24, r25
    4bfc:	29 f4       	brne	.+10     	; 0x4c08 <uxTaskGetStackHighWaterMark+0x2a>
    4bfe:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    4c02:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    4c06:	02 c0       	rjmp	.+4      	; 0x4c0c <uxTaskGetStackHighWaterMark+0x2e>
    4c08:	8e 81       	ldd	r24, Y+6	; 0x06
    4c0a:	9f 81       	ldd	r25, Y+7	; 0x07
    4c0c:	9a 83       	std	Y+2, r25	; 0x02
    4c0e:	89 83       	std	Y+1, r24	; 0x01
    4c10:	89 81       	ldd	r24, Y+1	; 0x01
    4c12:	9a 81       	ldd	r25, Y+2	; 0x02
    4c14:	fc 01       	movw	r30, r24
    4c16:	87 89       	ldd	r24, Z+23	; 0x17
    4c18:	90 8d       	ldd	r25, Z+24	; 0x18
    4c1a:	9c 83       	std	Y+4, r25	; 0x04
    4c1c:	8b 83       	std	Y+3, r24	; 0x03
    4c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c20:	9c 81       	ldd	r25, Y+4	; 0x04
    4c22:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <prvTaskCheckFreeStackSpace>
    4c26:	8d 83       	std	Y+5, r24	; 0x05
    4c28:	8d 81       	ldd	r24, Y+5	; 0x05
    4c2a:	27 96       	adiw	r28, 0x07	; 7
    4c2c:	0f b6       	in	r0, 0x3f	; 63
    4c2e:	f8 94       	cli
    4c30:	de bf       	out	0x3e, r29	; 62
    4c32:	0f be       	out	0x3f, r0	; 63
    4c34:	cd bf       	out	0x3d, r28	; 61
    4c36:	df 91       	pop	r29
    4c38:	cf 91       	pop	r28
    4c3a:	08 95       	ret

00004c3c <prvDeleteTCB>:
    4c3c:	cf 93       	push	r28
    4c3e:	df 93       	push	r29
    4c40:	00 d0       	rcall	.+0      	; 0x4c42 <prvDeleteTCB+0x6>
    4c42:	cd b7       	in	r28, 0x3d	; 61
    4c44:	de b7       	in	r29, 0x3e	; 62
    4c46:	9a 83       	std	Y+2, r25	; 0x02
    4c48:	89 83       	std	Y+1, r24	; 0x01
    4c4a:	89 81       	ldd	r24, Y+1	; 0x01
    4c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c4e:	fc 01       	movw	r30, r24
    4c50:	87 89       	ldd	r24, Z+23	; 0x17
    4c52:	90 8d       	ldd	r25, Z+24	; 0x18
    4c54:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <vPortFree>
    4c58:	89 81       	ldd	r24, Y+1	; 0x01
    4c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c5c:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <vPortFree>
    4c60:	00 00       	nop
    4c62:	0f 90       	pop	r0
    4c64:	0f 90       	pop	r0
    4c66:	df 91       	pop	r29
    4c68:	cf 91       	pop	r28
    4c6a:	08 95       	ret

00004c6c <prvResetNextTaskUnblockTime>:
    4c6c:	cf 93       	push	r28
    4c6e:	df 93       	push	r29
    4c70:	00 d0       	rcall	.+0      	; 0x4c72 <prvResetNextTaskUnblockTime+0x6>
    4c72:	cd b7       	in	r28, 0x3d	; 61
    4c74:	de b7       	in	r29, 0x3e	; 62
    4c76:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <pxDelayedTaskList>
    4c7a:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <pxDelayedTaskList+0x1>
    4c7e:	fc 01       	movw	r30, r24
    4c80:	80 81       	ld	r24, Z
    4c82:	88 23       	and	r24, r24
    4c84:	39 f4       	brne	.+14     	; 0x4c94 <prvResetNextTaskUnblockTime+0x28>
    4c86:	8f ef       	ldi	r24, 0xFF	; 255
    4c88:	9f ef       	ldi	r25, 0xFF	; 255
    4c8a:	90 93 41 08 	sts	0x0841, r25	; 0x800841 <xNextTaskUnblockTime+0x1>
    4c8e:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <xNextTaskUnblockTime>
    4c92:	15 c0       	rjmp	.+42     	; 0x4cbe <prvResetNextTaskUnblockTime+0x52>
    4c94:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <pxDelayedTaskList>
    4c98:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <pxDelayedTaskList+0x1>
    4c9c:	fc 01       	movw	r30, r24
    4c9e:	85 81       	ldd	r24, Z+5	; 0x05
    4ca0:	96 81       	ldd	r25, Z+6	; 0x06
    4ca2:	fc 01       	movw	r30, r24
    4ca4:	86 81       	ldd	r24, Z+6	; 0x06
    4ca6:	97 81       	ldd	r25, Z+7	; 0x07
    4ca8:	9a 83       	std	Y+2, r25	; 0x02
    4caa:	89 83       	std	Y+1, r24	; 0x01
    4cac:	89 81       	ldd	r24, Y+1	; 0x01
    4cae:	9a 81       	ldd	r25, Y+2	; 0x02
    4cb0:	fc 01       	movw	r30, r24
    4cb2:	82 81       	ldd	r24, Z+2	; 0x02
    4cb4:	93 81       	ldd	r25, Z+3	; 0x03
    4cb6:	90 93 41 08 	sts	0x0841, r25	; 0x800841 <xNextTaskUnblockTime+0x1>
    4cba:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <xNextTaskUnblockTime>
    4cbe:	00 00       	nop
    4cc0:	0f 90       	pop	r0
    4cc2:	0f 90       	pop	r0
    4cc4:	df 91       	pop	r29
    4cc6:	cf 91       	pop	r28
    4cc8:	08 95       	ret

00004cca <vTaskPriorityInherit>:
    4cca:	cf 93       	push	r28
    4ccc:	df 93       	push	r29
    4cce:	00 d0       	rcall	.+0      	; 0x4cd0 <vTaskPriorityInherit+0x6>
    4cd0:	00 d0       	rcall	.+0      	; 0x4cd2 <vTaskPriorityInherit+0x8>
    4cd2:	cd b7       	in	r28, 0x3d	; 61
    4cd4:	de b7       	in	r29, 0x3e	; 62
    4cd6:	9c 83       	std	Y+4, r25	; 0x04
    4cd8:	8b 83       	std	Y+3, r24	; 0x03
    4cda:	8b 81       	ldd	r24, Y+3	; 0x03
    4cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    4cde:	9a 83       	std	Y+2, r25	; 0x02
    4ce0:	89 83       	std	Y+1, r24	; 0x01
    4ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ce6:	89 2b       	or	r24, r25
    4ce8:	09 f4       	brne	.+2      	; 0x4cec <vTaskPriorityInherit+0x22>
    4cea:	7f c0       	rjmp	.+254    	; 0x4dea <vTaskPriorityInherit+0x120>
    4cec:	89 81       	ldd	r24, Y+1	; 0x01
    4cee:	9a 81       	ldd	r25, Y+2	; 0x02
    4cf0:	fc 01       	movw	r30, r24
    4cf2:	26 89       	ldd	r18, Z+22	; 0x16
    4cf4:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    4cf8:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    4cfc:	fc 01       	movw	r30, r24
    4cfe:	86 89       	ldd	r24, Z+22	; 0x16
    4d00:	28 17       	cp	r18, r24
    4d02:	08 f0       	brcs	.+2      	; 0x4d06 <vTaskPriorityInherit+0x3c>
    4d04:	72 c0       	rjmp	.+228    	; 0x4dea <vTaskPriorityInherit+0x120>
    4d06:	89 81       	ldd	r24, Y+1	; 0x01
    4d08:	9a 81       	ldd	r25, Y+2	; 0x02
    4d0a:	fc 01       	movw	r30, r24
    4d0c:	84 85       	ldd	r24, Z+12	; 0x0c
    4d0e:	95 85       	ldd	r25, Z+13	; 0x0d
    4d10:	99 23       	and	r25, r25
    4d12:	8c f0       	brlt	.+34     	; 0x4d36 <vTaskPriorityInherit+0x6c>
    4d14:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    4d18:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    4d1c:	fc 01       	movw	r30, r24
    4d1e:	86 89       	ldd	r24, Z+22	; 0x16
    4d20:	88 2f       	mov	r24, r24
    4d22:	90 e0       	ldi	r25, 0x00	; 0
    4d24:	24 e0       	ldi	r18, 0x04	; 4
    4d26:	30 e0       	ldi	r19, 0x00	; 0
    4d28:	28 1b       	sub	r18, r24
    4d2a:	39 0b       	sbc	r19, r25
    4d2c:	89 81       	ldd	r24, Y+1	; 0x01
    4d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    4d30:	fc 01       	movw	r30, r24
    4d32:	35 87       	std	Z+13, r19	; 0x0d
    4d34:	24 87       	std	Z+12, r18	; 0x0c
    4d36:	89 81       	ldd	r24, Y+1	; 0x01
    4d38:	9a 81       	ldd	r25, Y+2	; 0x02
    4d3a:	fc 01       	movw	r30, r24
    4d3c:	42 85       	ldd	r20, Z+10	; 0x0a
    4d3e:	53 85       	ldd	r21, Z+11	; 0x0b
    4d40:	89 81       	ldd	r24, Y+1	; 0x01
    4d42:	9a 81       	ldd	r25, Y+2	; 0x02
    4d44:	fc 01       	movw	r30, r24
    4d46:	86 89       	ldd	r24, Z+22	; 0x16
    4d48:	28 2f       	mov	r18, r24
    4d4a:	30 e0       	ldi	r19, 0x00	; 0
    4d4c:	c9 01       	movw	r24, r18
    4d4e:	88 0f       	add	r24, r24
    4d50:	99 1f       	adc	r25, r25
    4d52:	88 0f       	add	r24, r24
    4d54:	99 1f       	adc	r25, r25
    4d56:	88 0f       	add	r24, r24
    4d58:	99 1f       	adc	r25, r25
    4d5a:	82 0f       	add	r24, r18
    4d5c:	93 1f       	adc	r25, r19
    4d5e:	86 51       	subi	r24, 0x16	; 22
    4d60:	98 4f       	sbci	r25, 0xF8	; 248
    4d62:	48 17       	cp	r20, r24
    4d64:	59 07       	cpc	r21, r25
    4d66:	b9 f5       	brne	.+110    	; 0x4dd6 <vTaskPriorityInherit+0x10c>
    4d68:	89 81       	ldd	r24, Y+1	; 0x01
    4d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d6c:	02 96       	adiw	r24, 0x02	; 2
    4d6e:	0e 94 2d 12 	call	0x245a	; 0x245a <uxListRemove>
    4d72:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    4d76:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    4d7a:	fc 01       	movw	r30, r24
    4d7c:	26 89       	ldd	r18, Z+22	; 0x16
    4d7e:	89 81       	ldd	r24, Y+1	; 0x01
    4d80:	9a 81       	ldd	r25, Y+2	; 0x02
    4d82:	fc 01       	movw	r30, r24
    4d84:	26 8b       	std	Z+22, r18	; 0x16
    4d86:	89 81       	ldd	r24, Y+1	; 0x01
    4d88:	9a 81       	ldd	r25, Y+2	; 0x02
    4d8a:	fc 01       	movw	r30, r24
    4d8c:	96 89       	ldd	r25, Z+22	; 0x16
    4d8e:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <uxTopReadyPriority>
    4d92:	89 17       	cp	r24, r25
    4d94:	30 f4       	brcc	.+12     	; 0x4da2 <vTaskPriorityInherit+0xd8>
    4d96:	89 81       	ldd	r24, Y+1	; 0x01
    4d98:	9a 81       	ldd	r25, Y+2	; 0x02
    4d9a:	fc 01       	movw	r30, r24
    4d9c:	86 89       	ldd	r24, Z+22	; 0x16
    4d9e:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <uxTopReadyPriority>
    4da2:	89 81       	ldd	r24, Y+1	; 0x01
    4da4:	9a 81       	ldd	r25, Y+2	; 0x02
    4da6:	ac 01       	movw	r20, r24
    4da8:	4e 5f       	subi	r20, 0xFE	; 254
    4daa:	5f 4f       	sbci	r21, 0xFF	; 255
    4dac:	89 81       	ldd	r24, Y+1	; 0x01
    4dae:	9a 81       	ldd	r25, Y+2	; 0x02
    4db0:	fc 01       	movw	r30, r24
    4db2:	86 89       	ldd	r24, Z+22	; 0x16
    4db4:	28 2f       	mov	r18, r24
    4db6:	30 e0       	ldi	r19, 0x00	; 0
    4db8:	c9 01       	movw	r24, r18
    4dba:	88 0f       	add	r24, r24
    4dbc:	99 1f       	adc	r25, r25
    4dbe:	88 0f       	add	r24, r24
    4dc0:	99 1f       	adc	r25, r25
    4dc2:	88 0f       	add	r24, r24
    4dc4:	99 1f       	adc	r25, r25
    4dc6:	82 0f       	add	r24, r18
    4dc8:	93 1f       	adc	r25, r19
    4dca:	86 51       	subi	r24, 0x16	; 22
    4dcc:	98 4f       	sbci	r25, 0xF8	; 248
    4dce:	ba 01       	movw	r22, r20
    4dd0:	0e 94 66 11 	call	0x22cc	; 0x22cc <vListInsertEnd>
    4dd4:	0a c0       	rjmp	.+20     	; 0x4dea <vTaskPriorityInherit+0x120>
    4dd6:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    4dda:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    4dde:	fc 01       	movw	r30, r24
    4de0:	26 89       	ldd	r18, Z+22	; 0x16
    4de2:	89 81       	ldd	r24, Y+1	; 0x01
    4de4:	9a 81       	ldd	r25, Y+2	; 0x02
    4de6:	fc 01       	movw	r30, r24
    4de8:	26 8b       	std	Z+22, r18	; 0x16
    4dea:	00 00       	nop
    4dec:	0f 90       	pop	r0
    4dee:	0f 90       	pop	r0
    4df0:	0f 90       	pop	r0
    4df2:	0f 90       	pop	r0
    4df4:	df 91       	pop	r29
    4df6:	cf 91       	pop	r28
    4df8:	08 95       	ret

00004dfa <xTaskPriorityDisinherit>:
    4dfa:	cf 93       	push	r28
    4dfc:	df 93       	push	r29
    4dfe:	00 d0       	rcall	.+0      	; 0x4e00 <xTaskPriorityDisinherit+0x6>
    4e00:	00 d0       	rcall	.+0      	; 0x4e02 <xTaskPriorityDisinherit+0x8>
    4e02:	1f 92       	push	r1
    4e04:	cd b7       	in	r28, 0x3d	; 61
    4e06:	de b7       	in	r29, 0x3e	; 62
    4e08:	9d 83       	std	Y+5, r25	; 0x05
    4e0a:	8c 83       	std	Y+4, r24	; 0x04
    4e0c:	8c 81       	ldd	r24, Y+4	; 0x04
    4e0e:	9d 81       	ldd	r25, Y+5	; 0x05
    4e10:	9b 83       	std	Y+3, r25	; 0x03
    4e12:	8a 83       	std	Y+2, r24	; 0x02
    4e14:	19 82       	std	Y+1, r1	; 0x01
    4e16:	8c 81       	ldd	r24, Y+4	; 0x04
    4e18:	9d 81       	ldd	r25, Y+5	; 0x05
    4e1a:	89 2b       	or	r24, r25
    4e1c:	09 f4       	brne	.+2      	; 0x4e20 <xTaskPriorityDisinherit+0x26>
    4e1e:	61 c0       	rjmp	.+194    	; 0x4ee2 <xTaskPriorityDisinherit+0xe8>
    4e20:	8a 81       	ldd	r24, Y+2	; 0x02
    4e22:	9b 81       	ldd	r25, Y+3	; 0x03
    4e24:	fc 01       	movw	r30, r24
    4e26:	84 a1       	ldd	r24, Z+36	; 0x24
    4e28:	2f ef       	ldi	r18, 0xFF	; 255
    4e2a:	28 0f       	add	r18, r24
    4e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    4e30:	fc 01       	movw	r30, r24
    4e32:	24 a3       	std	Z+36, r18	; 0x24
    4e34:	8a 81       	ldd	r24, Y+2	; 0x02
    4e36:	9b 81       	ldd	r25, Y+3	; 0x03
    4e38:	fc 01       	movw	r30, r24
    4e3a:	26 89       	ldd	r18, Z+22	; 0x16
    4e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    4e40:	fc 01       	movw	r30, r24
    4e42:	83 a1       	ldd	r24, Z+35	; 0x23
    4e44:	28 17       	cp	r18, r24
    4e46:	09 f4       	brne	.+2      	; 0x4e4a <xTaskPriorityDisinherit+0x50>
    4e48:	4c c0       	rjmp	.+152    	; 0x4ee2 <xTaskPriorityDisinherit+0xe8>
    4e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    4e4e:	fc 01       	movw	r30, r24
    4e50:	84 a1       	ldd	r24, Z+36	; 0x24
    4e52:	88 23       	and	r24, r24
    4e54:	09 f0       	breq	.+2      	; 0x4e58 <xTaskPriorityDisinherit+0x5e>
    4e56:	45 c0       	rjmp	.+138    	; 0x4ee2 <xTaskPriorityDisinherit+0xe8>
    4e58:	8a 81       	ldd	r24, Y+2	; 0x02
    4e5a:	9b 81       	ldd	r25, Y+3	; 0x03
    4e5c:	02 96       	adiw	r24, 0x02	; 2
    4e5e:	0e 94 2d 12 	call	0x245a	; 0x245a <uxListRemove>
    4e62:	8a 81       	ldd	r24, Y+2	; 0x02
    4e64:	9b 81       	ldd	r25, Y+3	; 0x03
    4e66:	fc 01       	movw	r30, r24
    4e68:	23 a1       	ldd	r18, Z+35	; 0x23
    4e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    4e6e:	fc 01       	movw	r30, r24
    4e70:	26 8b       	std	Z+22, r18	; 0x16
    4e72:	8a 81       	ldd	r24, Y+2	; 0x02
    4e74:	9b 81       	ldd	r25, Y+3	; 0x03
    4e76:	fc 01       	movw	r30, r24
    4e78:	86 89       	ldd	r24, Z+22	; 0x16
    4e7a:	88 2f       	mov	r24, r24
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
    4e7e:	24 e0       	ldi	r18, 0x04	; 4
    4e80:	30 e0       	ldi	r19, 0x00	; 0
    4e82:	28 1b       	sub	r18, r24
    4e84:	39 0b       	sbc	r19, r25
    4e86:	8a 81       	ldd	r24, Y+2	; 0x02
    4e88:	9b 81       	ldd	r25, Y+3	; 0x03
    4e8a:	fc 01       	movw	r30, r24
    4e8c:	35 87       	std	Z+13, r19	; 0x0d
    4e8e:	24 87       	std	Z+12, r18	; 0x0c
    4e90:	8a 81       	ldd	r24, Y+2	; 0x02
    4e92:	9b 81       	ldd	r25, Y+3	; 0x03
    4e94:	fc 01       	movw	r30, r24
    4e96:	96 89       	ldd	r25, Z+22	; 0x16
    4e98:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <uxTopReadyPriority>
    4e9c:	89 17       	cp	r24, r25
    4e9e:	30 f4       	brcc	.+12     	; 0x4eac <xTaskPriorityDisinherit+0xb2>
    4ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ea2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ea4:	fc 01       	movw	r30, r24
    4ea6:	86 89       	ldd	r24, Z+22	; 0x16
    4ea8:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <uxTopReadyPriority>
    4eac:	8a 81       	ldd	r24, Y+2	; 0x02
    4eae:	9b 81       	ldd	r25, Y+3	; 0x03
    4eb0:	ac 01       	movw	r20, r24
    4eb2:	4e 5f       	subi	r20, 0xFE	; 254
    4eb4:	5f 4f       	sbci	r21, 0xFF	; 255
    4eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    4eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    4eba:	fc 01       	movw	r30, r24
    4ebc:	86 89       	ldd	r24, Z+22	; 0x16
    4ebe:	28 2f       	mov	r18, r24
    4ec0:	30 e0       	ldi	r19, 0x00	; 0
    4ec2:	c9 01       	movw	r24, r18
    4ec4:	88 0f       	add	r24, r24
    4ec6:	99 1f       	adc	r25, r25
    4ec8:	88 0f       	add	r24, r24
    4eca:	99 1f       	adc	r25, r25
    4ecc:	88 0f       	add	r24, r24
    4ece:	99 1f       	adc	r25, r25
    4ed0:	82 0f       	add	r24, r18
    4ed2:	93 1f       	adc	r25, r19
    4ed4:	86 51       	subi	r24, 0x16	; 22
    4ed6:	98 4f       	sbci	r25, 0xF8	; 248
    4ed8:	ba 01       	movw	r22, r20
    4eda:	0e 94 66 11 	call	0x22cc	; 0x22cc <vListInsertEnd>
    4ede:	81 e0       	ldi	r24, 0x01	; 1
    4ee0:	89 83       	std	Y+1, r24	; 0x01
    4ee2:	89 81       	ldd	r24, Y+1	; 0x01
    4ee4:	0f 90       	pop	r0
    4ee6:	0f 90       	pop	r0
    4ee8:	0f 90       	pop	r0
    4eea:	0f 90       	pop	r0
    4eec:	0f 90       	pop	r0
    4eee:	df 91       	pop	r29
    4ef0:	cf 91       	pop	r28
    4ef2:	08 95       	ret

00004ef4 <pvTaskIncrementMutexHeldCount>:
    4ef4:	cf 93       	push	r28
    4ef6:	df 93       	push	r29
    4ef8:	cd b7       	in	r28, 0x3d	; 61
    4efa:	de b7       	in	r29, 0x3e	; 62
    4efc:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    4f00:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    4f04:	89 2b       	or	r24, r25
    4f06:	49 f0       	breq	.+18     	; 0x4f1a <pvTaskIncrementMutexHeldCount+0x26>
    4f08:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    4f0c:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    4f10:	fc 01       	movw	r30, r24
    4f12:	24 a1       	ldd	r18, Z+36	; 0x24
    4f14:	2f 5f       	subi	r18, 0xFF	; 255
    4f16:	fc 01       	movw	r30, r24
    4f18:	24 a3       	std	Z+36, r18	; 0x24
    4f1a:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    4f1e:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    4f22:	df 91       	pop	r29
    4f24:	cf 91       	pop	r28
    4f26:	08 95       	ret

00004f28 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    4f28:	cf 93       	push	r28
    4f2a:	df 93       	push	r29
    4f2c:	cd b7       	in	r28, 0x3d	; 61
    4f2e:	de b7       	in	r29, 0x3e	; 62
    4f30:	27 97       	sbiw	r28, 0x07	; 7
    4f32:	0f b6       	in	r0, 0x3f	; 63
    4f34:	f8 94       	cli
    4f36:	de bf       	out	0x3e, r29	; 62
    4f38:	0f be       	out	0x3f, r0	; 63
    4f3a:	cd bf       	out	0x3d, r28	; 61
    4f3c:	9e 83       	std	Y+6, r25	; 0x06
    4f3e:	8d 83       	std	Y+5, r24	; 0x05
    4f40:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    4f42:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <xTickCount>
    4f46:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <xTickCount+0x1>
    4f4a:	9a 83       	std	Y+2, r25	; 0x02
    4f4c:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4f4e:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    4f52:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    4f56:	02 96       	adiw	r24, 0x02	; 2
    4f58:	0e 94 2d 12 	call	0x245a	; 0x245a <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    4f5c:	29 81       	ldd	r18, Y+1	; 0x01
    4f5e:	3a 81       	ldd	r19, Y+2	; 0x02
    4f60:	8d 81       	ldd	r24, Y+5	; 0x05
    4f62:	9e 81       	ldd	r25, Y+6	; 0x06
    4f64:	82 0f       	add	r24, r18
    4f66:	93 1f       	adc	r25, r19
    4f68:	9c 83       	std	Y+4, r25	; 0x04
    4f6a:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    4f6c:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    4f70:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    4f74:	2b 81       	ldd	r18, Y+3	; 0x03
    4f76:	3c 81       	ldd	r19, Y+4	; 0x04
    4f78:	fc 01       	movw	r30, r24
    4f7a:	33 83       	std	Z+3, r19	; 0x03
    4f7c:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    4f7e:	2b 81       	ldd	r18, Y+3	; 0x03
    4f80:	3c 81       	ldd	r19, Y+4	; 0x04
    4f82:	89 81       	ldd	r24, Y+1	; 0x01
    4f84:	9a 81       	ldd	r25, Y+2	; 0x02
    4f86:	28 17       	cp	r18, r24
    4f88:	39 07       	cpc	r19, r25
    4f8a:	78 f4       	brcc	.+30     	; 0x4faa <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4f8c:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    4f90:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    4f94:	9c 01       	movw	r18, r24
    4f96:	2e 5f       	subi	r18, 0xFE	; 254
    4f98:	3f 4f       	sbci	r19, 0xFF	; 255
    4f9a:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <pxOverflowDelayedTaskList>
    4f9e:	90 91 23 08 	lds	r25, 0x0823	; 0x800823 <pxOverflowDelayedTaskList+0x1>
    4fa2:	b9 01       	movw	r22, r18
    4fa4:	0e 94 b5 11 	call	0x236a	; 0x236a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    4fa8:	1d c0       	rjmp	.+58     	; 0x4fe4 <prvAddCurrentTaskToDelayedList+0xbc>
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4faa:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxCurrentTCB>
    4fae:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxCurrentTCB+0x1>
    4fb2:	9c 01       	movw	r18, r24
    4fb4:	2e 5f       	subi	r18, 0xFE	; 254
    4fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    4fb8:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <pxDelayedTaskList>
    4fbc:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <pxDelayedTaskList+0x1>
    4fc0:	b9 01       	movw	r22, r18
    4fc2:	0e 94 b5 11 	call	0x236a	; 0x236a <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    4fc6:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <xNextTaskUnblockTime>
    4fca:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <xNextTaskUnblockTime+0x1>
    4fce:	2b 81       	ldd	r18, Y+3	; 0x03
    4fd0:	3c 81       	ldd	r19, Y+4	; 0x04
    4fd2:	28 17       	cp	r18, r24
    4fd4:	39 07       	cpc	r19, r25
    4fd6:	30 f4       	brcc	.+12     	; 0x4fe4 <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    4fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    4fda:	9c 81       	ldd	r25, Y+4	; 0x04
    4fdc:	90 93 41 08 	sts	0x0841, r25	; 0x800841 <xNextTaskUnblockTime+0x1>
    4fe0:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    4fe4:	00 00       	nop
    4fe6:	27 96       	adiw	r28, 0x07	; 7
    4fe8:	0f b6       	in	r0, 0x3f	; 63
    4fea:	f8 94       	cli
    4fec:	de bf       	out	0x3e, r29	; 62
    4fee:	0f be       	out	0x3f, r0	; 63
    4ff0:	cd bf       	out	0x3d, r28	; 61
    4ff2:	df 91       	pop	r29
    4ff4:	cf 91       	pop	r28
    4ff6:	08 95       	ret

00004ff8 <__divmodhi4>:
    4ff8:	97 fb       	bst	r25, 7
    4ffa:	07 2e       	mov	r0, r23
    4ffc:	16 f4       	brtc	.+4      	; 0x5002 <__divmodhi4+0xa>
    4ffe:	00 94       	com	r0
    5000:	07 d0       	rcall	.+14     	; 0x5010 <__divmodhi4_neg1>
    5002:	77 fd       	sbrc	r23, 7
    5004:	09 d0       	rcall	.+18     	; 0x5018 <__divmodhi4_neg2>
    5006:	0e 94 32 28 	call	0x5064	; 0x5064 <__udivmodhi4>
    500a:	07 fc       	sbrc	r0, 7
    500c:	05 d0       	rcall	.+10     	; 0x5018 <__divmodhi4_neg2>
    500e:	3e f4       	brtc	.+14     	; 0x501e <__divmodhi4_exit>

00005010 <__divmodhi4_neg1>:
    5010:	90 95       	com	r25
    5012:	81 95       	neg	r24
    5014:	9f 4f       	sbci	r25, 0xFF	; 255
    5016:	08 95       	ret

00005018 <__divmodhi4_neg2>:
    5018:	70 95       	com	r23
    501a:	61 95       	neg	r22
    501c:	7f 4f       	sbci	r23, 0xFF	; 255

0000501e <__divmodhi4_exit>:
    501e:	08 95       	ret

00005020 <__udivmodsi4>:
    5020:	a1 e2       	ldi	r26, 0x21	; 33
    5022:	1a 2e       	mov	r1, r26
    5024:	aa 1b       	sub	r26, r26
    5026:	bb 1b       	sub	r27, r27
    5028:	fd 01       	movw	r30, r26
    502a:	0d c0       	rjmp	.+26     	; 0x5046 <__udivmodsi4_ep>

0000502c <__udivmodsi4_loop>:
    502c:	aa 1f       	adc	r26, r26
    502e:	bb 1f       	adc	r27, r27
    5030:	ee 1f       	adc	r30, r30
    5032:	ff 1f       	adc	r31, r31
    5034:	a2 17       	cp	r26, r18
    5036:	b3 07       	cpc	r27, r19
    5038:	e4 07       	cpc	r30, r20
    503a:	f5 07       	cpc	r31, r21
    503c:	20 f0       	brcs	.+8      	; 0x5046 <__udivmodsi4_ep>
    503e:	a2 1b       	sub	r26, r18
    5040:	b3 0b       	sbc	r27, r19
    5042:	e4 0b       	sbc	r30, r20
    5044:	f5 0b       	sbc	r31, r21

00005046 <__udivmodsi4_ep>:
    5046:	66 1f       	adc	r22, r22
    5048:	77 1f       	adc	r23, r23
    504a:	88 1f       	adc	r24, r24
    504c:	99 1f       	adc	r25, r25
    504e:	1a 94       	dec	r1
    5050:	69 f7       	brne	.-38     	; 0x502c <__udivmodsi4_loop>
    5052:	60 95       	com	r22
    5054:	70 95       	com	r23
    5056:	80 95       	com	r24
    5058:	90 95       	com	r25
    505a:	9b 01       	movw	r18, r22
    505c:	ac 01       	movw	r20, r24
    505e:	bd 01       	movw	r22, r26
    5060:	cf 01       	movw	r24, r30
    5062:	08 95       	ret

00005064 <__udivmodhi4>:
    5064:	aa 1b       	sub	r26, r26
    5066:	bb 1b       	sub	r27, r27
    5068:	51 e1       	ldi	r21, 0x11	; 17
    506a:	07 c0       	rjmp	.+14     	; 0x507a <__udivmodhi4_ep>

0000506c <__udivmodhi4_loop>:
    506c:	aa 1f       	adc	r26, r26
    506e:	bb 1f       	adc	r27, r27
    5070:	a6 17       	cp	r26, r22
    5072:	b7 07       	cpc	r27, r23
    5074:	10 f0       	brcs	.+4      	; 0x507a <__udivmodhi4_ep>
    5076:	a6 1b       	sub	r26, r22
    5078:	b7 0b       	sbc	r27, r23

0000507a <__udivmodhi4_ep>:
    507a:	88 1f       	adc	r24, r24
    507c:	99 1f       	adc	r25, r25
    507e:	5a 95       	dec	r21
    5080:	a9 f7       	brne	.-22     	; 0x506c <__udivmodhi4_loop>
    5082:	80 95       	com	r24
    5084:	90 95       	com	r25
    5086:	bc 01       	movw	r22, r24
    5088:	cd 01       	movw	r24, r26
    508a:	08 95       	ret

0000508c <memcpy>:
    508c:	fb 01       	movw	r30, r22
    508e:	dc 01       	movw	r26, r24
    5090:	02 c0       	rjmp	.+4      	; 0x5096 <memcpy+0xa>
    5092:	01 90       	ld	r0, Z+
    5094:	0d 92       	st	X+, r0
    5096:	41 50       	subi	r20, 0x01	; 1
    5098:	50 40       	sbci	r21, 0x00	; 0
    509a:	d8 f7       	brcc	.-10     	; 0x5092 <memcpy+0x6>
    509c:	08 95       	ret

0000509e <memset>:
    509e:	dc 01       	movw	r26, r24
    50a0:	01 c0       	rjmp	.+2      	; 0x50a4 <memset+0x6>
    50a2:	6d 93       	st	X+, r22
    50a4:	41 50       	subi	r20, 0x01	; 1
    50a6:	50 40       	sbci	r21, 0x00	; 0
    50a8:	e0 f7       	brcc	.-8      	; 0x50a2 <memset+0x4>
    50aa:	08 95       	ret

000050ac <strlen>:
    50ac:	fc 01       	movw	r30, r24
    50ae:	01 90       	ld	r0, Z+
    50b0:	00 20       	and	r0, r0
    50b2:	e9 f7       	brne	.-6      	; 0x50ae <strlen+0x2>
    50b4:	80 95       	com	r24
    50b6:	90 95       	com	r25
    50b8:	8e 0f       	add	r24, r30
    50ba:	9f 1f       	adc	r25, r31
    50bc:	08 95       	ret

000050be <_exit>:
    50be:	f8 94       	cli

000050c0 <__stop_program>:
    50c0:	ff cf       	rjmp	.-2      	; 0x50c0 <__stop_program>
