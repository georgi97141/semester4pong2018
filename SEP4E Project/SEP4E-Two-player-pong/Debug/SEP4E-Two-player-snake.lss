
SEP4E-Two-player-snake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00005046  000050da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005046  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006ad  00800176  00800176  00005150  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005150  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005180  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000660  00000000  00000000  000051c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000050f6  00000000  00000000  00005820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001857  00000000  00000000  0000a916  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004784  00000000  00000000  0000c16d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000017e4  00000000  00000000  000108f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002177  00000000  00000000  000120d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003261  00000000  00000000  0001424f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000580  00000000  00000000  000174b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__vector_16>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__vector_20>
      54:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__vector_21>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__vector_28>
      74:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <__vector_29>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e6 e4       	ldi	r30, 0x46	; 70
      90:	f0 e5       	ldi	r31, 0x50	; 80
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a6 37       	cpi	r26, 0x76	; 118
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	28 e0       	ldi	r18, 0x08	; 8
      a0:	a6 e7       	ldi	r26, 0x76	; 118
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a3 32       	cpi	r26, 0x23	; 35
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 d5 09 	call	0x13aa	; 0x13aa <main>
      b2:	0c 94 21 28 	jmp	0x5042	; 0x5042 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <byte_stuff>:
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	cd b7       	in	r28, 0x3d	; 61
      c0:	de b7       	in	r29, 0x3e	; 62
      c2:	2c 97       	sbiw	r28, 0x0c	; 12
      c4:	0f b6       	in	r0, 0x3f	; 63
      c6:	f8 94       	cli
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	0f be       	out	0x3f, r0	; 63
      cc:	cd bf       	out	0x3d, r28	; 61
      ce:	98 87       	std	Y+8, r25	; 0x08
      d0:	8f 83       	std	Y+7, r24	; 0x07
      d2:	69 87       	std	Y+9, r22	; 0x09
      d4:	5b 87       	std	Y+11, r21	; 0x0b
      d6:	4a 87       	std	Y+10, r20	; 0x0a
      d8:	2c 87       	std	Y+12, r18	; 0x0c
      da:	8a 85       	ldd	r24, Y+10	; 0x0a
      dc:	9b 85       	ldd	r25, Y+11	; 0x0b
      de:	9a 83       	std	Y+2, r25	; 0x02
      e0:	89 83       	std	Y+1, r24	; 0x01
      e2:	8c 85       	ldd	r24, Y+12	; 0x0c
      e4:	88 2f       	mov	r24, r24
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	2a 85       	ldd	r18, Y+10	; 0x0a
      ea:	3b 85       	ldd	r19, Y+11	; 0x0b
      ec:	82 0f       	add	r24, r18
      ee:	93 1f       	adc	r25, r19
      f0:	9c 83       	std	Y+4, r25	; 0x04
      f2:	8b 83       	std	Y+3, r24	; 0x03
      f4:	89 85       	ldd	r24, Y+9	; 0x09
      f6:	88 2f       	mov	r24, r24
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	2f 81       	ldd	r18, Y+7	; 0x07
      fc:	38 85       	ldd	r19, Y+8	; 0x08
      fe:	82 0f       	add	r24, r18
     100:	93 1f       	adc	r25, r19
     102:	9e 83       	std	Y+6, r25	; 0x06
     104:	8d 83       	std	Y+5, r24	; 0x05
     106:	69 c0       	rjmp	.+210    	; 0x1da <byte_stuff+0x120>
     108:	8f 81       	ldd	r24, Y+7	; 0x07
     10a:	98 85       	ldd	r25, Y+8	; 0x08
     10c:	fc 01       	movw	r30, r24
     10e:	80 81       	ld	r24, Z
     110:	88 2f       	mov	r24, r24
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	00 97       	sbiw	r24, 0x00	; 0
     116:	21 f0       	breq	.+8      	; 0x120 <byte_stuff+0x66>
     118:	8f 3f       	cpi	r24, 0xFF	; 255
     11a:	91 05       	cpc	r25, r1
     11c:	41 f1       	breq	.+80     	; 0x16e <byte_stuff+0xb4>
     11e:	4a c0       	rjmp	.+148    	; 0x1b4 <byte_stuff+0xfa>
     120:	8b 81       	ldd	r24, Y+3	; 0x03
     122:	9c 81       	ldd	r25, Y+4	; 0x04
     124:	9c 01       	movw	r18, r24
     126:	21 50       	subi	r18, 0x01	; 1
     128:	31 09       	sbc	r19, r1
     12a:	8a 85       	ldd	r24, Y+10	; 0x0a
     12c:	9b 85       	ldd	r25, Y+11	; 0x0b
     12e:	82 17       	cp	r24, r18
     130:	93 07       	cpc	r25, r19
     132:	d8 f4       	brcc	.+54     	; 0x16a <byte_stuff+0xb0>
     134:	8a 85       	ldd	r24, Y+10	; 0x0a
     136:	9b 85       	ldd	r25, Y+11	; 0x0b
     138:	9c 01       	movw	r18, r24
     13a:	2f 5f       	subi	r18, 0xFF	; 255
     13c:	3f 4f       	sbci	r19, 0xFF	; 255
     13e:	3b 87       	std	Y+11, r19	; 0x0b
     140:	2a 87       	std	Y+10, r18	; 0x0a
     142:	2f 81       	ldd	r18, Y+7	; 0x07
     144:	38 85       	ldd	r19, Y+8	; 0x08
     146:	f9 01       	movw	r30, r18
     148:	20 81       	ld	r18, Z
     14a:	fc 01       	movw	r30, r24
     14c:	20 83       	st	Z, r18
     14e:	8a 85       	ldd	r24, Y+10	; 0x0a
     150:	9b 85       	ldd	r25, Y+11	; 0x0b
     152:	9c 01       	movw	r18, r24
     154:	2f 5f       	subi	r18, 0xFF	; 255
     156:	3f 4f       	sbci	r19, 0xFF	; 255
     158:	3b 87       	std	Y+11, r19	; 0x0b
     15a:	2a 87       	std	Y+10, r18	; 0x0a
     15c:	2f 81       	ldd	r18, Y+7	; 0x07
     15e:	38 85       	ldd	r19, Y+8	; 0x08
     160:	f9 01       	movw	r30, r18
     162:	20 81       	ld	r18, Z
     164:	fc 01       	movw	r30, r24
     166:	20 83       	st	Z, r18
     168:	33 c0       	rjmp	.+102    	; 0x1d0 <byte_stuff+0x116>
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	4d c0       	rjmp	.+154    	; 0x208 <byte_stuff+0x14e>
     16e:	8b 81       	ldd	r24, Y+3	; 0x03
     170:	9c 81       	ldd	r25, Y+4	; 0x04
     172:	9c 01       	movw	r18, r24
     174:	21 50       	subi	r18, 0x01	; 1
     176:	31 09       	sbc	r19, r1
     178:	8a 85       	ldd	r24, Y+10	; 0x0a
     17a:	9b 85       	ldd	r25, Y+11	; 0x0b
     17c:	82 17       	cp	r24, r18
     17e:	93 07       	cpc	r25, r19
     180:	b8 f4       	brcc	.+46     	; 0x1b0 <byte_stuff+0xf6>
     182:	8a 85       	ldd	r24, Y+10	; 0x0a
     184:	9b 85       	ldd	r25, Y+11	; 0x0b
     186:	9c 01       	movw	r18, r24
     188:	2f 5f       	subi	r18, 0xFF	; 255
     18a:	3f 4f       	sbci	r19, 0xFF	; 255
     18c:	3b 87       	std	Y+11, r19	; 0x0b
     18e:	2a 87       	std	Y+10, r18	; 0x0a
     190:	fc 01       	movw	r30, r24
     192:	10 82       	st	Z, r1
     194:	8a 85       	ldd	r24, Y+10	; 0x0a
     196:	9b 85       	ldd	r25, Y+11	; 0x0b
     198:	9c 01       	movw	r18, r24
     19a:	2f 5f       	subi	r18, 0xFF	; 255
     19c:	3f 4f       	sbci	r19, 0xFF	; 255
     19e:	3b 87       	std	Y+11, r19	; 0x0b
     1a0:	2a 87       	std	Y+10, r18	; 0x0a
     1a2:	2f 81       	ldd	r18, Y+7	; 0x07
     1a4:	38 85       	ldd	r19, Y+8	; 0x08
     1a6:	f9 01       	movw	r30, r18
     1a8:	20 81       	ld	r18, Z
     1aa:	fc 01       	movw	r30, r24
     1ac:	20 83       	st	Z, r18
     1ae:	10 c0       	rjmp	.+32     	; 0x1d0 <byte_stuff+0x116>
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	2a c0       	rjmp	.+84     	; 0x208 <byte_stuff+0x14e>
     1b4:	8a 85       	ldd	r24, Y+10	; 0x0a
     1b6:	9b 85       	ldd	r25, Y+11	; 0x0b
     1b8:	9c 01       	movw	r18, r24
     1ba:	2f 5f       	subi	r18, 0xFF	; 255
     1bc:	3f 4f       	sbci	r19, 0xFF	; 255
     1be:	3b 87       	std	Y+11, r19	; 0x0b
     1c0:	2a 87       	std	Y+10, r18	; 0x0a
     1c2:	2f 81       	ldd	r18, Y+7	; 0x07
     1c4:	38 85       	ldd	r19, Y+8	; 0x08
     1c6:	f9 01       	movw	r30, r18
     1c8:	20 81       	ld	r18, Z
     1ca:	fc 01       	movw	r30, r24
     1cc:	20 83       	st	Z, r18
     1ce:	00 00       	nop
     1d0:	8f 81       	ldd	r24, Y+7	; 0x07
     1d2:	98 85       	ldd	r25, Y+8	; 0x08
     1d4:	01 96       	adiw	r24, 0x01	; 1
     1d6:	98 87       	std	Y+8, r25	; 0x08
     1d8:	8f 83       	std	Y+7, r24	; 0x07
     1da:	2f 81       	ldd	r18, Y+7	; 0x07
     1dc:	38 85       	ldd	r19, Y+8	; 0x08
     1de:	8d 81       	ldd	r24, Y+5	; 0x05
     1e0:	9e 81       	ldd	r25, Y+6	; 0x06
     1e2:	28 17       	cp	r18, r24
     1e4:	39 07       	cpc	r19, r25
     1e6:	40 f4       	brcc	.+16     	; 0x1f8 <byte_stuff+0x13e>
     1e8:	2a 85       	ldd	r18, Y+10	; 0x0a
     1ea:	3b 85       	ldd	r19, Y+11	; 0x0b
     1ec:	8b 81       	ldd	r24, Y+3	; 0x03
     1ee:	9c 81       	ldd	r25, Y+4	; 0x04
     1f0:	28 17       	cp	r18, r24
     1f2:	39 07       	cpc	r19, r25
     1f4:	08 f4       	brcc	.+2      	; 0x1f8 <byte_stuff+0x13e>
     1f6:	88 cf       	rjmp	.-240    	; 0x108 <byte_stuff+0x4e>
     1f8:	2a 85       	ldd	r18, Y+10	; 0x0a
     1fa:	3b 85       	ldd	r19, Y+11	; 0x0b
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
     1fe:	9a 81       	ldd	r25, Y+2	; 0x02
     200:	a9 01       	movw	r20, r18
     202:	48 1b       	sub	r20, r24
     204:	59 0b       	sbc	r21, r25
     206:	ca 01       	movw	r24, r20
     208:	2c 96       	adiw	r28, 0x0c	; 12
     20a:	0f b6       	in	r0, 0x3f	; 63
     20c:	f8 94       	cli
     20e:	de bf       	out	0x3e, r29	; 62
     210:	0f be       	out	0x3f, r0	; 63
     212:	cd bf       	out	0x3d, r28	; 61
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	08 95       	ret

0000021a <byte_unstuff>:
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
     222:	2c 97       	sbiw	r28, 0x0c	; 12
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	f8 94       	cli
     228:	de bf       	out	0x3e, r29	; 62
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	cd bf       	out	0x3d, r28	; 61
     22e:	98 87       	std	Y+8, r25	; 0x08
     230:	8f 83       	std	Y+7, r24	; 0x07
     232:	69 87       	std	Y+9, r22	; 0x09
     234:	5b 87       	std	Y+11, r21	; 0x0b
     236:	4a 87       	std	Y+10, r20	; 0x0a
     238:	2c 87       	std	Y+12, r18	; 0x0c
     23a:	8f 81       	ldd	r24, Y+7	; 0x07
     23c:	98 85       	ldd	r25, Y+8	; 0x08
     23e:	9a 83       	std	Y+2, r25	; 0x02
     240:	89 83       	std	Y+1, r24	; 0x01
     242:	89 85       	ldd	r24, Y+9	; 0x09
     244:	88 2f       	mov	r24, r24
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	2f 81       	ldd	r18, Y+7	; 0x07
     24a:	38 85       	ldd	r19, Y+8	; 0x08
     24c:	82 0f       	add	r24, r18
     24e:	93 1f       	adc	r25, r19
     250:	9c 83       	std	Y+4, r25	; 0x04
     252:	8b 83       	std	Y+3, r24	; 0x03
     254:	8c 85       	ldd	r24, Y+12	; 0x0c
     256:	88 2f       	mov	r24, r24
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	2a 85       	ldd	r18, Y+10	; 0x0a
     25c:	3b 85       	ldd	r19, Y+11	; 0x0b
     25e:	82 0f       	add	r24, r18
     260:	93 1f       	adc	r25, r19
     262:	9e 83       	std	Y+6, r25	; 0x06
     264:	8d 83       	std	Y+5, r24	; 0x05
     266:	39 c0       	rjmp	.+114    	; 0x2da <byte_unstuff+0xc0>
     268:	8a 85       	ldd	r24, Y+10	; 0x0a
     26a:	9b 85       	ldd	r25, Y+11	; 0x0b
     26c:	fc 01       	movw	r30, r24
     26e:	80 81       	ld	r24, Z
     270:	88 23       	and	r24, r24
     272:	09 f5       	brne	.+66     	; 0x2b6 <byte_unstuff+0x9c>
     274:	8a 85       	ldd	r24, Y+10	; 0x0a
     276:	9b 85       	ldd	r25, Y+11	; 0x0b
     278:	01 96       	adiw	r24, 0x01	; 1
     27a:	9b 87       	std	Y+11, r25	; 0x0b
     27c:	8a 87       	std	Y+10, r24	; 0x0a
     27e:	8a 85       	ldd	r24, Y+10	; 0x0a
     280:	9b 85       	ldd	r25, Y+11	; 0x0b
     282:	fc 01       	movw	r30, r24
     284:	80 81       	ld	r24, Z
     286:	88 23       	and	r24, r24
     288:	31 f0       	breq	.+12     	; 0x296 <byte_unstuff+0x7c>
     28a:	8a 85       	ldd	r24, Y+10	; 0x0a
     28c:	9b 85       	ldd	r25, Y+11	; 0x0b
     28e:	fc 01       	movw	r30, r24
     290:	80 81       	ld	r24, Z
     292:	8f 3f       	cpi	r24, 0xFF	; 255
     294:	71 f4       	brne	.+28     	; 0x2b2 <byte_unstuff+0x98>
     296:	8f 81       	ldd	r24, Y+7	; 0x07
     298:	98 85       	ldd	r25, Y+8	; 0x08
     29a:	9c 01       	movw	r18, r24
     29c:	2f 5f       	subi	r18, 0xFF	; 255
     29e:	3f 4f       	sbci	r19, 0xFF	; 255
     2a0:	38 87       	std	Y+8, r19	; 0x08
     2a2:	2f 83       	std	Y+7, r18	; 0x07
     2a4:	2a 85       	ldd	r18, Y+10	; 0x0a
     2a6:	3b 85       	ldd	r19, Y+11	; 0x0b
     2a8:	f9 01       	movw	r30, r18
     2aa:	20 81       	ld	r18, Z
     2ac:	fc 01       	movw	r30, r24
     2ae:	20 83       	st	Z, r18
     2b0:	0f c0       	rjmp	.+30     	; 0x2d0 <byte_unstuff+0xb6>
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	29 c0       	rjmp	.+82     	; 0x308 <byte_unstuff+0xee>
     2b6:	8f 81       	ldd	r24, Y+7	; 0x07
     2b8:	98 85       	ldd	r25, Y+8	; 0x08
     2ba:	9c 01       	movw	r18, r24
     2bc:	2f 5f       	subi	r18, 0xFF	; 255
     2be:	3f 4f       	sbci	r19, 0xFF	; 255
     2c0:	38 87       	std	Y+8, r19	; 0x08
     2c2:	2f 83       	std	Y+7, r18	; 0x07
     2c4:	2a 85       	ldd	r18, Y+10	; 0x0a
     2c6:	3b 85       	ldd	r19, Y+11	; 0x0b
     2c8:	f9 01       	movw	r30, r18
     2ca:	20 81       	ld	r18, Z
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 83       	st	Z, r18
     2d0:	8a 85       	ldd	r24, Y+10	; 0x0a
     2d2:	9b 85       	ldd	r25, Y+11	; 0x0b
     2d4:	01 96       	adiw	r24, 0x01	; 1
     2d6:	9b 87       	std	Y+11, r25	; 0x0b
     2d8:	8a 87       	std	Y+10, r24	; 0x0a
     2da:	2f 81       	ldd	r18, Y+7	; 0x07
     2dc:	38 85       	ldd	r19, Y+8	; 0x08
     2de:	8b 81       	ldd	r24, Y+3	; 0x03
     2e0:	9c 81       	ldd	r25, Y+4	; 0x04
     2e2:	28 17       	cp	r18, r24
     2e4:	39 07       	cpc	r19, r25
     2e6:	40 f4       	brcc	.+16     	; 0x2f8 <byte_unstuff+0xde>
     2e8:	2a 85       	ldd	r18, Y+10	; 0x0a
     2ea:	3b 85       	ldd	r19, Y+11	; 0x0b
     2ec:	8d 81       	ldd	r24, Y+5	; 0x05
     2ee:	9e 81       	ldd	r25, Y+6	; 0x06
     2f0:	28 17       	cp	r18, r24
     2f2:	39 07       	cpc	r19, r25
     2f4:	08 f4       	brcc	.+2      	; 0x2f8 <byte_unstuff+0xde>
     2f6:	b8 cf       	rjmp	.-144    	; 0x268 <byte_unstuff+0x4e>
     2f8:	2f 81       	ldd	r18, Y+7	; 0x07
     2fa:	38 85       	ldd	r19, Y+8	; 0x08
     2fc:	89 81       	ldd	r24, Y+1	; 0x01
     2fe:	9a 81       	ldd	r25, Y+2	; 0x02
     300:	a9 01       	movw	r20, r18
     302:	48 1b       	sub	r20, r24
     304:	59 0b       	sbc	r21, r25
     306:	ca 01       	movw	r24, r20
     308:	2c 96       	adiw	r28, 0x0c	; 12
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	f8 94       	cli
     30e:	de bf       	out	0x3e, r29	; 62
     310:	0f be       	out	0x3f, r0	; 63
     312:	cd bf       	out	0x3d, r28	; 61
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <bat_move>:
bool score=false;
int* bata[3];
int* batb[3];

void bat_move(Player_t player, Direction_t direction)
{
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	00 d0       	rcall	.+0      	; 0x320 <bat_move+0x6>
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	89 83       	std	Y+1, r24	; 0x01
     326:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(direction)
     328:	8a 81       	ldd	r24, Y+2	; 0x02
     32a:	88 2f       	mov	r24, r24
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	81 30       	cpi	r24, 0x01	; 1
     330:	91 05       	cpc	r25, r1
     332:	09 f4       	brne	.+2      	; 0x336 <bat_move+0x1c>
     334:	73 c0       	rjmp	.+230    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     336:	02 97       	sbiw	r24, 0x02	; 2
     338:	09 f0       	breq	.+2      	; 0x33c <bat_move+0x22>
		bats[player]->pixels[1] -=14;
		bats[player]->pixels[2] -=14;}
		break;
	}

}
     33a:	e3 c0       	rjmp	.+454    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
{
	
	switch(direction)
	{ //interrupt messing the exec time. no mutex
		case D_UP:
		if( (player==PL_ONE&& bats[player]->pixels[0]<127 )|| (player==PL_TWO && bats[player]->pixels[0]<138)){
     33c:	89 81       	ldd	r24, Y+1	; 0x01
     33e:	88 23       	and	r24, r24
     340:	71 f4       	brne	.+28     	; 0x35e <bat_move+0x44>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 2f       	mov	r24, r24
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	88 0f       	add	r24, r24
     34a:	99 1f       	adc	r25, r25
     34c:	8a 58       	subi	r24, 0x8A	; 138
     34e:	9e 4f       	sbci	r25, 0xFE	; 254
     350:	fc 01       	movw	r30, r24
     352:	80 81       	ld	r24, Z
     354:	91 81       	ldd	r25, Z+1	; 0x01
     356:	fc 01       	movw	r30, r24
     358:	81 81       	ldd	r24, Z+1	; 0x01
     35a:	8f 37       	cpi	r24, 0x7F	; 127
     35c:	98 f0       	brcs	.+38     	; 0x384 <bat_move+0x6a>
     35e:	89 81       	ldd	r24, Y+1	; 0x01
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	09 f0       	breq	.+2      	; 0x366 <bat_move+0x4c>
     364:	cb c0       	rjmp	.+406    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	88 2f       	mov	r24, r24
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	88 0f       	add	r24, r24
     36e:	99 1f       	adc	r25, r25
     370:	8a 58       	subi	r24, 0x8A	; 138
     372:	9e 4f       	sbci	r25, 0xFE	; 254
     374:	fc 01       	movw	r30, r24
     376:	80 81       	ld	r24, Z
     378:	91 81       	ldd	r25, Z+1	; 0x01
     37a:	fc 01       	movw	r30, r24
     37c:	81 81       	ldd	r24, Z+1	; 0x01
     37e:	8a 38       	cpi	r24, 0x8A	; 138
     380:	08 f0       	brcs	.+2      	; 0x384 <bat_move+0x6a>
     382:	bc c0       	rjmp	.+376    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
		bats[player]->pixels[0] += 14;
     384:	89 81       	ldd	r24, Y+1	; 0x01
     386:	88 2f       	mov	r24, r24
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	88 0f       	add	r24, r24
     38c:	99 1f       	adc	r25, r25
     38e:	8a 58       	subi	r24, 0x8A	; 138
     390:	9e 4f       	sbci	r25, 0xFE	; 254
     392:	fc 01       	movw	r30, r24
     394:	80 81       	ld	r24, Z
     396:	91 81       	ldd	r25, Z+1	; 0x01
     398:	29 81       	ldd	r18, Y+1	; 0x01
     39a:	22 2f       	mov	r18, r18
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	22 0f       	add	r18, r18
     3a0:	33 1f       	adc	r19, r19
     3a2:	2a 58       	subi	r18, 0x8A	; 138
     3a4:	3e 4f       	sbci	r19, 0xFE	; 254
     3a6:	f9 01       	movw	r30, r18
     3a8:	20 81       	ld	r18, Z
     3aa:	31 81       	ldd	r19, Z+1	; 0x01
     3ac:	f9 01       	movw	r30, r18
     3ae:	21 81       	ldd	r18, Z+1	; 0x01
     3b0:	22 5f       	subi	r18, 0xF2	; 242
     3b2:	fc 01       	movw	r30, r24
     3b4:	21 83       	std	Z+1, r18	; 0x01
		bats[player]->pixels[1] +=14;
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	88 2f       	mov	r24, r24
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	88 0f       	add	r24, r24
     3be:	99 1f       	adc	r25, r25
     3c0:	8a 58       	subi	r24, 0x8A	; 138
     3c2:	9e 4f       	sbci	r25, 0xFE	; 254
     3c4:	fc 01       	movw	r30, r24
     3c6:	80 81       	ld	r24, Z
     3c8:	91 81       	ldd	r25, Z+1	; 0x01
     3ca:	29 81       	ldd	r18, Y+1	; 0x01
     3cc:	22 2f       	mov	r18, r18
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	22 0f       	add	r18, r18
     3d2:	33 1f       	adc	r19, r19
     3d4:	2a 58       	subi	r18, 0x8A	; 138
     3d6:	3e 4f       	sbci	r19, 0xFE	; 254
     3d8:	f9 01       	movw	r30, r18
     3da:	20 81       	ld	r18, Z
     3dc:	31 81       	ldd	r19, Z+1	; 0x01
     3de:	f9 01       	movw	r30, r18
     3e0:	22 81       	ldd	r18, Z+2	; 0x02
     3e2:	22 5f       	subi	r18, 0xF2	; 242
     3e4:	fc 01       	movw	r30, r24
     3e6:	22 83       	std	Z+2, r18	; 0x02
		bats[player]->pixels[2] +=14;
     3e8:	89 81       	ldd	r24, Y+1	; 0x01
     3ea:	88 2f       	mov	r24, r24
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	88 0f       	add	r24, r24
     3f0:	99 1f       	adc	r25, r25
     3f2:	8a 58       	subi	r24, 0x8A	; 138
     3f4:	9e 4f       	sbci	r25, 0xFE	; 254
     3f6:	fc 01       	movw	r30, r24
     3f8:	80 81       	ld	r24, Z
     3fa:	91 81       	ldd	r25, Z+1	; 0x01
     3fc:	29 81       	ldd	r18, Y+1	; 0x01
     3fe:	22 2f       	mov	r18, r18
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	22 0f       	add	r18, r18
     404:	33 1f       	adc	r19, r19
     406:	2a 58       	subi	r18, 0x8A	; 138
     408:	3e 4f       	sbci	r19, 0xFE	; 254
     40a:	f9 01       	movw	r30, r18
     40c:	20 81       	ld	r18, Z
     40e:	31 81       	ldd	r19, Z+1	; 0x01
     410:	f9 01       	movw	r30, r18
     412:	23 81       	ldd	r18, Z+3	; 0x03
     414:	22 5f       	subi	r18, 0xF2	; 242
     416:	fc 01       	movw	r30, r24
     418:	23 83       	std	Z+3, r18	; 0x03
		}
		
		break;
     41a:	70 c0       	rjmp	.+224    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
		case D_DOWN:
		if((player==PL_ONE&& bats[player]->pixels[2]>1)||(player==PL_TWO&& bats[player]->pixels[2]>12)){
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	88 23       	and	r24, r24
     420:	71 f4       	brne	.+28     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	88 2f       	mov	r24, r24
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	8a 58       	subi	r24, 0x8A	; 138
     42e:	9e 4f       	sbci	r25, 0xFE	; 254
     430:	fc 01       	movw	r30, r24
     432:	80 81       	ld	r24, Z
     434:	91 81       	ldd	r25, Z+1	; 0x01
     436:	fc 01       	movw	r30, r24
     438:	83 81       	ldd	r24, Z+3	; 0x03
     43a:	82 30       	cpi	r24, 0x02	; 2
     43c:	98 f4       	brcc	.+38     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	81 30       	cpi	r24, 0x01	; 1
     442:	09 f0       	breq	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     444:	5d c0       	rjmp	.+186    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	88 2f       	mov	r24, r24
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	88 0f       	add	r24, r24
     44e:	99 1f       	adc	r25, r25
     450:	8a 58       	subi	r24, 0x8A	; 138
     452:	9e 4f       	sbci	r25, 0xFE	; 254
     454:	fc 01       	movw	r30, r24
     456:	80 81       	ld	r24, Z
     458:	91 81       	ldd	r25, Z+1	; 0x01
     45a:	fc 01       	movw	r30, r24
     45c:	83 81       	ldd	r24, Z+3	; 0x03
     45e:	8d 30       	cpi	r24, 0x0D	; 13
     460:	08 f4       	brcc	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     462:	4e c0       	rjmp	.+156    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		bats[player]->pixels[0] -= 14;
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	88 2f       	mov	r24, r24
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	8a 58       	subi	r24, 0x8A	; 138
     470:	9e 4f       	sbci	r25, 0xFE	; 254
     472:	fc 01       	movw	r30, r24
     474:	80 81       	ld	r24, Z
     476:	91 81       	ldd	r25, Z+1	; 0x01
     478:	29 81       	ldd	r18, Y+1	; 0x01
     47a:	22 2f       	mov	r18, r18
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	22 0f       	add	r18, r18
     480:	33 1f       	adc	r19, r19
     482:	2a 58       	subi	r18, 0x8A	; 138
     484:	3e 4f       	sbci	r19, 0xFE	; 254
     486:	f9 01       	movw	r30, r18
     488:	20 81       	ld	r18, Z
     48a:	31 81       	ldd	r19, Z+1	; 0x01
     48c:	f9 01       	movw	r30, r18
     48e:	21 81       	ldd	r18, Z+1	; 0x01
     490:	2e 50       	subi	r18, 0x0E	; 14
     492:	fc 01       	movw	r30, r24
     494:	21 83       	std	Z+1, r18	; 0x01
		bats[player]->pixels[1] -=14;
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	88 2f       	mov	r24, r24
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	88 0f       	add	r24, r24
     49e:	99 1f       	adc	r25, r25
     4a0:	8a 58       	subi	r24, 0x8A	; 138
     4a2:	9e 4f       	sbci	r25, 0xFE	; 254
     4a4:	fc 01       	movw	r30, r24
     4a6:	80 81       	ld	r24, Z
     4a8:	91 81       	ldd	r25, Z+1	; 0x01
     4aa:	29 81       	ldd	r18, Y+1	; 0x01
     4ac:	22 2f       	mov	r18, r18
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	22 0f       	add	r18, r18
     4b2:	33 1f       	adc	r19, r19
     4b4:	2a 58       	subi	r18, 0x8A	; 138
     4b6:	3e 4f       	sbci	r19, 0xFE	; 254
     4b8:	f9 01       	movw	r30, r18
     4ba:	20 81       	ld	r18, Z
     4bc:	31 81       	ldd	r19, Z+1	; 0x01
     4be:	f9 01       	movw	r30, r18
     4c0:	22 81       	ldd	r18, Z+2	; 0x02
     4c2:	2e 50       	subi	r18, 0x0E	; 14
     4c4:	fc 01       	movw	r30, r24
     4c6:	22 83       	std	Z+2, r18	; 0x02
		bats[player]->pixels[2] -=14;}
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	88 2f       	mov	r24, r24
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	8a 58       	subi	r24, 0x8A	; 138
     4d4:	9e 4f       	sbci	r25, 0xFE	; 254
     4d6:	fc 01       	movw	r30, r24
     4d8:	80 81       	ld	r24, Z
     4da:	91 81       	ldd	r25, Z+1	; 0x01
     4dc:	29 81       	ldd	r18, Y+1	; 0x01
     4de:	22 2f       	mov	r18, r18
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	22 0f       	add	r18, r18
     4e4:	33 1f       	adc	r19, r19
     4e6:	2a 58       	subi	r18, 0x8A	; 138
     4e8:	3e 4f       	sbci	r19, 0xFE	; 254
     4ea:	f9 01       	movw	r30, r18
     4ec:	20 81       	ld	r18, Z
     4ee:	31 81       	ldd	r19, Z+1	; 0x01
     4f0:	f9 01       	movw	r30, r18
     4f2:	23 81       	ldd	r18, Z+3	; 0x03
     4f4:	2e 50       	subi	r18, 0x0E	; 14
     4f6:	fc 01       	movw	r30, r24
     4f8:	23 83       	std	Z+3, r18	; 0x03
		break;
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		bats[player]->pixels[0] += 14;
		bats[player]->pixels[1] +=14;
		bats[player]->pixels[2] +=14;
		}
		
		break;
     4fc:	00 00       	nop
     4fe:	01 c0       	rjmp	.+2      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		case D_DOWN:
		if((player==PL_ONE&& bats[player]->pixels[2]>1)||(player==PL_TWO&& bats[player]->pixels[2]>12)){
		bats[player]->pixels[0] -= 14;
		bats[player]->pixels[1] -=14;
		bats[player]->pixels[2] -=14;}
		break;
     500:	00 00       	nop
	}

}
     502:	00 00       	nop
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <restart_game>:

void restart_game()
{
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
	if(!run_game)
     516:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <run_game>
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	89 27       	eor	r24, r25
     51e:	88 23       	and	r24, r24
     520:	a9 f0       	breq	.+42     	; 0x54c <restart_game+0x3e>
	{	score=false;
     522:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <score>
		scoreone = 0;
     526:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <scoreone+0x1>
     52a:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <scoreone>
		scoretwo=0;
     52e:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <scoretwo+0x1>
     532:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <scoretwo>
		run_game = true;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <run_game>
		com_send_string("Game is restarted!");
     53c:	86 e2       	ldi	r24, 0x26	; 38
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	0e 94 c9 02 	call	0x592	; 0x592 <com_send_string>
		init_game(bats);
     544:	86 e7       	ldi	r24, 0x76	; 118
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	0e 94 a7 05 	call	0xb4e	; 0xb4e <init_game>
	    
	}
}
     54c:	00 00       	nop
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <end_game>:
void end_game()
{
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
	run_game = false;
     55c:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <run_game>
}
     560:	00 00       	nop
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <xy_to_pixel_id>:

uint8_t xy_to_pixel_id(uint8_t x, uint8_t y)
{
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	00 d0       	rcall	.+0      	; 0x56e <xy_to_pixel_id+0x6>
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	89 83       	std	Y+1, r24	; 0x01
     574:	6a 83       	std	Y+2, r22	; 0x02
	return x + y * SCREEN_DIMENSION_X;
     576:	8a 81       	ldd	r24, Y+2	; 0x02
     578:	88 0f       	add	r24, r24
     57a:	98 2f       	mov	r25, r24
     57c:	99 0f       	add	r25, r25
     57e:	99 0f       	add	r25, r25
     580:	99 0f       	add	r25, r25
     582:	98 1b       	sub	r25, r24
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	89 0f       	add	r24, r25
}
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <com_send_string>:

void com_send_string(char *str)
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	00 d0       	rcall	.+0      	; 0x598 <com_send_string+0x6>
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
     59c:	9a 83       	std	Y+2, r25	; 0x02
     59e:	89 83       	std	Y+1, r24	; 0x01
	send_bytes(str, strlen(str)+1);
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	9a 81       	ldd	r25, Y+2	; 0x02
     5a4:	0e 94 18 28 	call	0x5030	; 0x5030 <strlen>
     5a8:	21 e0       	ldi	r18, 0x01	; 1
     5aa:	28 0f       	add	r18, r24
     5ac:	89 81       	ldd	r24, Y+1	; 0x01
     5ae:	9a 81       	ldd	r25, Y+2	; 0x02
     5b0:	62 2f       	mov	r22, r18
     5b2:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <send_bytes>
}
     5b6:	00 00       	nop
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	08 95       	ret

000005c2 <game_renderer_task>:


void game_renderer_task(void *pvParameters)
{
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
     5ce:	2a 97       	sbiw	r28, 0x0a	; 10
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	9a 87       	std	Y+10, r25	; 0x0a
     5dc:	89 87       	std	Y+9, r24	; 0x09
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	//vTaskSetApplicationTaskTag( NULL, ( void * ) 3 );
	#endif

	uint16_t* frame_buf = pvParameters;
     5de:	89 85       	ldd	r24, Y+9	; 0x09
     5e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5e2:	9d 83       	std	Y+5, r25	; 0x05
     5e4:	8c 83       	std	Y+4, r24	; 0x04

	for(uint8_t i = 0; i < 2; i++)
     5e6:	19 82       	std	Y+1, r1	; 0x01
     5e8:	11 c0       	rjmp	.+34     	; 0x60c <game_renderer_task+0x4a>
	{
		bats[i] = bat_new_instance();
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	08 2f       	mov	r16, r24
     5ee:	10 e0       	ldi	r17, 0x00	; 0
     5f0:	0e 94 8a 05 	call	0xb14	; 0xb14 <bat_new_instance>
     5f4:	9c 01       	movw	r18, r24
     5f6:	c8 01       	movw	r24, r16
     5f8:	88 0f       	add	r24, r24
     5fa:	99 1f       	adc	r25, r25
     5fc:	8a 58       	subi	r24, 0x8A	; 138
     5fe:	9e 4f       	sbci	r25, 0xFE	; 254
     600:	fc 01       	movw	r30, r24
     602:	31 83       	std	Z+1, r19	; 0x01
     604:	20 83       	st	Z, r18
	//vTaskSetApplicationTaskTag( NULL, ( void * ) 3 );
	#endif

	uint16_t* frame_buf = pvParameters;

	for(uint8_t i = 0; i < 2; i++)
     606:	89 81       	ldd	r24, Y+1	; 0x01
     608:	8f 5f       	subi	r24, 0xFF	; 255
     60a:	89 83       	std	Y+1, r24	; 0x01
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	82 30       	cpi	r24, 0x02	; 2
     610:	60 f3       	brcs	.-40     	; 0x5ea <game_renderer_task+0x28>
	{
		bats[i] = bat_new_instance();
	}

	TickType_t game_renderer_task_lastwake = xTaskGetTickCount();
     612:	0e 94 29 22 	call	0x4452	; 0x4452 <xTaskGetTickCount>
     616:	98 87       	std	Y+8, r25	; 0x08
     618:	8f 83       	std	Y+7, r24	; 0x07
	

	clear_screen(frame_buf);			//clearing from the screen from bootup display.
     61a:	8c 81       	ldd	r24, Y+4	; 0x04
     61c:	9d 81       	ldd	r25, Y+5	; 0x05
     61e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <clear_screen>
	init_game(bats);
     622:	86 e7       	ldi	r24, 0x76	; 118
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	0e 94 a7 05 	call	0xb4e	; 0xb4e <init_game>
	
	draw_game(frame_buf, bats, ball_location);
     62a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     62e:	8c 81       	ldd	r24, Y+4	; 0x04
     630:	9d 81       	ldd	r25, Y+5	; 0x05
     632:	42 2f       	mov	r20, r18
     634:	66 e7       	ldi	r22, 0x76	; 118
     636:	71 e0       	ldi	r23, 0x01	; 1
     638:	0e 94 63 06 	call	0xcc6	; 0xcc6 <draw_game>
	
	while(1)
	{
		UBaseType_t stackUsage = uxTaskGetStackHighWaterMark(NULL);
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <uxTaskGetStackHighWaterMark>
     644:	8e 83       	std	Y+6, r24	; 0x06
		//Set task period
		vTaskDelayUntil(&game_renderer_task_lastwake, GAME_RENDERER_TASK_PERIOD);
     646:	ce 01       	movw	r24, r28
     648:	07 96       	adiw	r24, 0x07	; 7
     64a:	62 e3       	ldi	r22, 0x32	; 50
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	0e 94 b3 20 	call	0x4166	; 0x4166 <vTaskDelayUntil>
		//Action5
		
		if(score==true){timer++;}
     652:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <score>
     656:	88 23       	and	r24, r24
     658:	49 f0       	breq	.+18     	; 0x66c <game_renderer_task+0xaa>
     65a:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <timer>
     65e:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <timer+0x1>
     662:	01 96       	adiw	r24, 0x01	; 1
     664:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <timer+0x1>
     668:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <timer>
		if(timer%123==0&&run_game==false&&score==true){run_game=true; score=false;}
     66c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <timer>
     670:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <timer+0x1>
     674:	2b e7       	ldi	r18, 0x7B	; 123
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	b9 01       	movw	r22, r18
     67a:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <__divmodhi4>
     67e:	89 2b       	or	r24, r25
     680:	79 f4       	brne	.+30     	; 0x6a0 <game_renderer_task+0xde>
     682:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <run_game>
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	89 27       	eor	r24, r25
     68a:	88 23       	and	r24, r24
     68c:	49 f0       	breq	.+18     	; 0x6a0 <game_renderer_task+0xde>
     68e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <score>
     692:	88 23       	and	r24, r24
     694:	29 f0       	breq	.+10     	; 0x6a0 <game_renderer_task+0xde>
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <run_game>
     69c:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <score>
		if(timer==356){timer=0;}
     6a0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <timer>
     6a4:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <timer+0x1>
     6a8:	84 36       	cpi	r24, 0x64	; 100
     6aa:	91 40       	sbci	r25, 0x01	; 1
     6ac:	21 f4       	brne	.+8      	; 0x6b6 <game_renderer_task+0xf4>
     6ae:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <timer+0x1>
     6b2:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <timer>
			
		if(run_game)
     6b6:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <run_game>
     6ba:	88 23       	and	r24, r24
     6bc:	09 f4       	brne	.+2      	; 0x6c0 <game_renderer_task+0xfe>
     6be:	be cf       	rjmp	.-132    	; 0x63c <game_renderer_task+0x7a>
		{
			clear_screen(frame_buf);
     6c0:	8c 81       	ldd	r24, Y+4	; 0x04
     6c2:	9d 81       	ldd	r25, Y+5	; 0x05
     6c4:	0e 94 0e 06 	call	0xc1c	; 0xc1c <clear_screen>
			//remove this for
			for(int i = 0; i < 2; i++)
     6c8:	1b 82       	std	Y+3, r1	; 0x03
     6ca:	1a 82       	std	Y+2, r1	; 0x02
     6cc:	9c c1       	rjmp	.+824    	; 0xa06 <__stack+0x107>
			{
				
			if(ball_location%13==ball_location/13-1)			//first player scores 
     6ce:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     6d2:	8f e4       	ldi	r24, 0x4F	; 79
     6d4:	98 9f       	mul	r25, r24
     6d6:	81 2d       	mov	r24, r1
     6d8:	11 24       	eor	r1, r1
     6da:	86 95       	lsr	r24
     6dc:	86 95       	lsr	r24
     6de:	2d e0       	ldi	r18, 0x0D	; 13
     6e0:	82 9f       	mul	r24, r18
     6e2:	80 2d       	mov	r24, r0
     6e4:	11 24       	eor	r1, r1
     6e6:	29 2f       	mov	r18, r25
     6e8:	28 1b       	sub	r18, r24
     6ea:	82 2f       	mov	r24, r18
     6ec:	28 2f       	mov	r18, r24
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     6f4:	8f e4       	ldi	r24, 0x4F	; 79
     6f6:	98 9f       	mul	r25, r24
     6f8:	81 2d       	mov	r24, r1
     6fa:	11 24       	eor	r1, r1
     6fc:	86 95       	lsr	r24
     6fe:	86 95       	lsr	r24
     700:	88 2f       	mov	r24, r24
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	28 17       	cp	r18, r24
     708:	39 07       	cpc	r19, r25
     70a:	29 f5       	brne	.+74     	; 0x756 <game_renderer_task+0x194>
			{
				scoreone++;
     70c:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <scoreone>
     710:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <scoreone+0x1>
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <scoreone+0x1>
     71a:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <scoreone>
				ball_location=21;
     71e:	85 e1       	ldi	r24, 0x15	; 21
     720:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				dir=2;
     724:	82 e0       	ldi	r24, 0x02	; 2
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     72c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
				//hide_game(frame_buf, bats);
				draw_scores(frame_buf, scoreone, scoretwo);
     730:	40 91 7d 01 	lds	r20, 0x017D	; 0x80017d <scoretwo>
     734:	50 91 7e 01 	lds	r21, 0x017E	; 0x80017e <scoretwo+0x1>
     738:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <scoreone>
     73c:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <scoreone+0x1>
     740:	8c 81       	ldd	r24, Y+4	; 0x04
     742:	9d 81       	ldd	r25, Y+5	; 0x05
     744:	b9 01       	movw	r22, r18
     746:	0e 94 22 07 	call	0xe44	; 0xe44 <draw_scores>
				run_game=false;
     74a:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <run_game>
				score=true;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <score>
     754:	66 c0       	rjmp	.+204    	; 0x822 <game_renderer_task+0x260>
				
					} //score
				
				else if
				((ball_location-12)%14==0 && ball_location==bats[PL_TWO]->pixels[0]	)
     756:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     75a:	88 2f       	mov	r24, r24
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0c 97       	sbiw	r24, 0x0c	; 12
     760:	2e e0       	ldi	r18, 0x0E	; 14
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	b9 01       	movw	r22, r18
     766:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <__divmodhi4>
     76a:	89 2b       	or	r24, r25
     76c:	b9 f4       	brne	.+46     	; 0x79c <game_renderer_task+0x1da>
     76e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <__data_end+0x2>
     772:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <__data_end+0x3>
     776:	fc 01       	movw	r30, r24
     778:	91 81       	ldd	r25, Z+1	; 0x01
     77a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     77e:	98 17       	cp	r25, r24
     780:	69 f4       	brne	.+26     	; 0x79c <game_renderer_task+0x1da>
				{
					dir=2;
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     78a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
					up=1;
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <up+0x1>
     796:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <up>
     79a:	43 c0       	rjmp	.+134    	; 0x822 <game_renderer_task+0x260>
				}
					else if
					((ball_location-12)%14==0 && ball_location==bats[PL_TWO]->pixels[1]	)
     79c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     7a0:	88 2f       	mov	r24, r24
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0c 97       	sbiw	r24, 0x0c	; 12
     7a6:	2e e0       	ldi	r18, 0x0E	; 14
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	b9 01       	movw	r22, r18
     7ac:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <__divmodhi4>
     7b0:	89 2b       	or	r24, r25
     7b2:	b9 f4       	brne	.+46     	; 0x7e2 <game_renderer_task+0x220>
     7b4:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <__data_end+0x2>
     7b8:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <__data_end+0x3>
     7bc:	fc 01       	movw	r30, r24
     7be:	92 81       	ldd	r25, Z+2	; 0x02
     7c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     7c4:	98 17       	cp	r25, r24
     7c6:	69 f4       	brne	.+26     	; 0x7e2 <game_renderer_task+0x220>
					{
						dir=2;
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     7d0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
						up=2;
     7d4:	82 e0       	ldi	r24, 0x02	; 2
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <up+0x1>
     7dc:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <up>
     7e0:	20 c0       	rjmp	.+64     	; 0x822 <game_renderer_task+0x260>
					}
					//
					else if
					((ball_location-12)%14==0 && ball_location==bats[PL_TWO]->pixels[2]	)
     7e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     7e6:	88 2f       	mov	r24, r24
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0c 97       	sbiw	r24, 0x0c	; 12
     7ec:	2e e0       	ldi	r18, 0x0E	; 14
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	b9 01       	movw	r22, r18
     7f2:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <__divmodhi4>
     7f6:	89 2b       	or	r24, r25
     7f8:	a1 f4       	brne	.+40     	; 0x822 <game_renderer_task+0x260>
     7fa:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <__data_end+0x2>
     7fe:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <__data_end+0x3>
     802:	fc 01       	movw	r30, r24
     804:	93 81       	ldd	r25, Z+3	; 0x03
     806:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     80a:	98 17       	cp	r25, r24
     80c:	51 f4       	brne	.+20     	; 0x822 <game_renderer_task+0x260>
					{
						dir=2;
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     816:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
						up=0;
     81a:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <up+0x1>
     81e:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <up>
					}
					
				if(ball_location%14==0)							//second player scores.
     822:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     826:	92 2f       	mov	r25, r18
     828:	96 95       	lsr	r25
     82a:	83 e9       	ldi	r24, 0x93	; 147
     82c:	98 9f       	mul	r25, r24
     82e:	81 2d       	mov	r24, r1
     830:	11 24       	eor	r1, r1
     832:	86 95       	lsr	r24
     834:	86 95       	lsr	r24
     836:	98 2f       	mov	r25, r24
     838:	89 2f       	mov	r24, r25
     83a:	88 0f       	add	r24, r24
     83c:	98 2f       	mov	r25, r24
     83e:	89 2f       	mov	r24, r25
     840:	88 0f       	add	r24, r24
     842:	88 0f       	add	r24, r24
     844:	88 0f       	add	r24, r24
     846:	89 1b       	sub	r24, r25
     848:	f2 2f       	mov	r31, r18
     84a:	f8 1b       	sub	r31, r24
     84c:	8f 2f       	mov	r24, r31
     84e:	88 23       	and	r24, r24
     850:	29 f5       	brne	.+74     	; 0x89c <game_renderer_task+0x2da>
					{
				scoretwo++;
     852:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <scoretwo>
     856:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <scoretwo+0x1>
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <scoretwo+0x1>
     860:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <scoretwo>
				dir=1;	
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     86c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
				ball_location = 21;
     870:	85 e1       	ldi	r24, 0x15	; 21
     872:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				//hide_game(frame_buf, bats);
				draw_scores(frame_buf, scoreone, scoretwo);
     876:	40 91 7d 01 	lds	r20, 0x017D	; 0x80017d <scoretwo>
     87a:	50 91 7e 01 	lds	r21, 0x017E	; 0x80017e <scoretwo+0x1>
     87e:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <scoreone>
     882:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <scoreone+0x1>
     886:	8c 81       	ldd	r24, Y+4	; 0x04
     888:	9d 81       	ldd	r25, Y+5	; 0x05
     88a:	b9 01       	movw	r22, r18
     88c:	0e 94 22 07 	call	0xe44	; 0xe44 <draw_scores>
				run_game=false;
     890:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <run_game>
				score=true;
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <score>
     89a:	66 c0       	rjmp	.+204    	; 0x968 <__stack+0x69>
				
					} //SCORE
				else if((ball_location-1)%14==0 && ball_location==bats[PL_ONE]->pixels[0])
     89c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     8a0:	88 2f       	mov	r24, r24
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	01 97       	sbiw	r24, 0x01	; 1
     8a6:	2e e0       	ldi	r18, 0x0E	; 14
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	b9 01       	movw	r22, r18
     8ac:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <__divmodhi4>
     8b0:	89 2b       	or	r24, r25
     8b2:	b9 f4       	brne	.+46     	; 0x8e2 <game_renderer_task+0x320>
     8b4:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
     8b8:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <__data_end+0x1>
     8bc:	fc 01       	movw	r30, r24
     8be:	91 81       	ldd	r25, Z+1	; 0x01
     8c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     8c4:	98 17       	cp	r25, r24
     8c6:	69 f4       	brne	.+26     	; 0x8e2 <game_renderer_task+0x320>
				{
				
					dir=1;
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     8d0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
					up=1;
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <up+0x1>
     8dc:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <up>
     8e0:	43 c0       	rjmp	.+134    	; 0x968 <__stack+0x69>
				}
			
				//
				else if((ball_location-1)%14==0 && ball_location==bats[PL_ONE]->pixels[1])
     8e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     8e6:	88 2f       	mov	r24, r24
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	2e e0       	ldi	r18, 0x0E	; 14
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	b9 01       	movw	r22, r18
     8f2:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <__divmodhi4>
     8f6:	89 2b       	or	r24, r25
     8f8:	b9 f4       	brne	.+46     	; 0x928 <__stack+0x29>
     8fa:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
     8fe:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <__data_end+0x1>
     902:	fc 01       	movw	r30, r24
     904:	92 81       	ldd	r25, Z+2	; 0x02
     906:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     90a:	98 17       	cp	r25, r24
     90c:	69 f4       	brne	.+26     	; 0x928 <__stack+0x29>
						{	
							dir=1;
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     916:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
							up=2;	
     91a:	82 e0       	ldi	r24, 0x02	; 2
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <up+0x1>
     922:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <up>
     926:	20 c0       	rjmp	.+64     	; 0x968 <__stack+0x69>
						}
			
				//
					else if((ball_location-1)%14==0 && ball_location==bats[PL_ONE]->pixels[2])
     928:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     92c:	88 2f       	mov	r24, r24
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	2e e0       	ldi	r18, 0x0E	; 14
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	b9 01       	movw	r22, r18
     938:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <__divmodhi4>
     93c:	89 2b       	or	r24, r25
     93e:	a1 f4       	brne	.+40     	; 0x968 <__stack+0x69>
     940:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
     944:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <__data_end+0x1>
     948:	fc 01       	movw	r30, r24
     94a:	93 81       	ldd	r25, Z+3	; 0x03
     94c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     950:	98 17       	cp	r25, r24
     952:	51 f4       	brne	.+20     	; 0x968 <__stack+0x69>
					{
						dir=1;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     95c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
						up=0;
     960:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <up+0x1>
     964:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <up>
					}
				
				if(z%27==0)				//z is the ball period.
     968:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <z>
     96c:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <z+0x1>
     970:	2b e1       	ldi	r18, 0x1B	; 27
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	b9 01       	movw	r22, r18
     976:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <__divmodhi4>
     97a:	89 2b       	or	r24, r25
     97c:	49 f4       	brne	.+18     	; 0x990 <__stack+0x91>
					{
					move_ball(&ball_location,dir);
     97e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dir>
     982:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <dir+0x1>
     986:	bc 01       	movw	r22, r24
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	0e 94 12 05 	call	0xa24	; 0xa24 <move_ball>
					}
				z++;
     990:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <z>
     994:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <z+0x1>
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <z+0x1>
     99e:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <z>
				if(z==270)
     9a2:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <z>
     9a6:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <z+0x1>
     9aa:	8e 30       	cpi	r24, 0x0E	; 14
     9ac:	91 40       	sbci	r25, 0x01	; 1
     9ae:	21 f4       	brne	.+8      	; 0x9b8 <__stack+0xb9>
				z=0;
     9b0:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <z+0x1>
     9b4:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <z>
				
				if(scoreone>=2||scoretwo>=2)
     9b8:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <scoreone>
     9bc:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <scoreone+0x1>
     9c0:	02 97       	sbiw	r24, 0x02	; 2
     9c2:	30 f4       	brcc	.+12     	; 0x9d0 <__stack+0xd1>
     9c4:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <scoretwo>
     9c8:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <scoretwo+0x1>
     9cc:	02 97       	sbiw	r24, 0x02	; 2
     9ce:	b0 f0       	brcs	.+44     	; 0x9fc <__stack+0xfd>
					{
						if(scoreone>=2)
     9d0:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <scoreone>
     9d4:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <scoreone+0x1>
     9d8:	02 97       	sbiw	r24, 0x02	; 2
     9da:	20 f0       	brcs	.+8      	; 0x9e4 <__stack+0xe5>
						com_send_string("player 1 won");
     9dc:	89 e3       	ldi	r24, 0x39	; 57
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	0e 94 c9 02 	call	0x592	; 0x592 <com_send_string>
						if(scoretwo>=2)
     9e4:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <scoretwo>
     9e8:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <scoretwo+0x1>
     9ec:	02 97       	sbiw	r24, 0x02	; 2
     9ee:	20 f0       	brcs	.+8      	; 0x9f8 <__stack+0xf9>
						com_send_string("player 2 won");
     9f0:	86 e4       	ldi	r24, 0x46	; 70
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	0e 94 c9 02 	call	0x592	; 0x592 <com_send_string>
						 end_game();
     9f8:	0e 94 aa 02 	call	0x554	; 0x554 <end_game>
			
		if(run_game)
		{
			clear_screen(frame_buf);
			//remove this for
			for(int i = 0; i < 2; i++)
     9fc:	8a 81       	ldd	r24, Y+2	; 0x02
     9fe:	9b 81       	ldd	r25, Y+3	; 0x03
     a00:	01 96       	adiw	r24, 0x01	; 1
     a02:	9b 83       	std	Y+3, r25	; 0x03
     a04:	8a 83       	std	Y+2, r24	; 0x02
     a06:	8a 81       	ldd	r24, Y+2	; 0x02
     a08:	9b 81       	ldd	r25, Y+3	; 0x03
     a0a:	02 97       	sbiw	r24, 0x02	; 2
     a0c:	0c f4       	brge	.+2      	; 0xa10 <__stack+0x111>
     a0e:	5f ce       	rjmp	.-834    	; 0x6ce <game_renderer_task+0x10c>
						 end_game();
					}
				
			}
			
			draw_game(frame_buf, bats, ball_location);
     a10:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     a14:	8c 81       	ldd	r24, Y+4	; 0x04
     a16:	9d 81       	ldd	r25, Y+5	; 0x05
     a18:	42 2f       	mov	r20, r18
     a1a:	66 e7       	ldi	r22, 0x76	; 118
     a1c:	71 e0       	ldi	r23, 0x01	; 1
     a1e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <draw_game>
		}
	}
     a22:	0c ce       	rjmp	.-1000   	; 0x63c <game_renderer_task+0x7a>

00000a24 <move_ball>:
}

void move_ball(uint8_t *location, uint8_t* dir)
{
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	00 d0       	rcall	.+0      	; 0xa2a <move_ball+0x6>
     a2a:	00 d0       	rcall	.+0      	; 0xa2c <move_ball+0x8>
     a2c:	1f 92       	push	r1
     a2e:	cd b7       	in	r28, 0x3d	; 61
     a30:	de b7       	in	r29, 0x3e	; 62
     a32:	9b 83       	std	Y+3, r25	; 0x03
     a34:	8a 83       	std	Y+2, r24	; 0x02
     a36:	7d 83       	std	Y+5, r23	; 0x05
     a38:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t x = *location;
     a3a:	8a 81       	ldd	r24, Y+2	; 0x02
     a3c:	9b 81       	ldd	r25, Y+3	; 0x03
     a3e:	fc 01       	movw	r30, r24
     a40:	80 81       	ld	r24, Z
     a42:	89 83       	std	Y+1, r24	; 0x01
	
	//boolean up 
	if(x>125) up = 0; //bouncing of the ball from the wall
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	8e 37       	cpi	r24, 0x7E	; 126
     a48:	20 f0       	brcs	.+8      	; 0xa52 <move_ball+0x2e>
     a4a:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <up+0x1>
     a4e:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <up>
	if(x<13) up = 1;  //bouncing of the ball from the wall
     a52:	89 81       	ldd	r24, Y+1	; 0x01
     a54:	8d 30       	cpi	r24, 0x0D	; 13
     a56:	30 f4       	brcc	.+12     	; 0xa64 <move_ball+0x40>
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <up+0x1>
     a60:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <up>
	
	if(dir==1)
     a64:	8c 81       	ldd	r24, Y+4	; 0x04
     a66:	9d 81       	ldd	r25, Y+5	; 0x05
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	f1 f4       	brne	.+60     	; 0xaa8 <move_ball+0x84>
	{
		if(up==1) x=x+15;
     a6c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <up>
     a70:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <up+0x1>
     a74:	01 97       	sbiw	r24, 0x01	; 1
     a76:	21 f4       	brne	.+8      	; 0xa80 <move_ball+0x5c>
     a78:	89 81       	ldd	r24, Y+1	; 0x01
     a7a:	81 5f       	subi	r24, 0xF1	; 241
     a7c:	89 83       	std	Y+1, r24	; 0x01
     a7e:	31 c0       	rjmp	.+98     	; 0xae2 <move_ball+0xbe>
		else if(up==0) x=x-13; //move down; keep the direction 
     a80:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <up>
     a84:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <up+0x1>
     a88:	89 2b       	or	r24, r25
     a8a:	21 f4       	brne	.+8      	; 0xa94 <move_ball+0x70>
     a8c:	89 81       	ldd	r24, Y+1	; 0x01
     a8e:	8d 50       	subi	r24, 0x0D	; 13
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	27 c0       	rjmp	.+78     	; 0xae2 <move_ball+0xbe>
		else if(up==2) x=x+1;	//when up=2 move straight
     a94:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <up>
     a98:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <up+0x1>
     a9c:	02 97       	sbiw	r24, 0x02	; 2
     a9e:	09 f5       	brne	.+66     	; 0xae2 <move_ball+0xbe>
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	8f 5f       	subi	r24, 0xFF	; 255
     aa4:	89 83       	std	Y+1, r24	; 0x01
     aa6:	1d c0       	rjmp	.+58     	; 0xae2 <move_ball+0xbe>
	}
	else  
	{
		if(up==1) x=x+13;
     aa8:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <up>
     aac:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <up+0x1>
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	21 f4       	brne	.+8      	; 0xabc <move_ball+0x98>
     ab4:	89 81       	ldd	r24, Y+1	; 0x01
     ab6:	83 5f       	subi	r24, 0xF3	; 243
     ab8:	89 83       	std	Y+1, r24	; 0x01
     aba:	13 c0       	rjmp	.+38     	; 0xae2 <move_ball+0xbe>
		else if(up==0) x=x-15; //do the maths ;
     abc:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <up>
     ac0:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <up+0x1>
     ac4:	89 2b       	or	r24, r25
     ac6:	21 f4       	brne	.+8      	; 0xad0 <move_ball+0xac>
     ac8:	89 81       	ldd	r24, Y+1	; 0x01
     aca:	8f 50       	subi	r24, 0x0F	; 15
     acc:	89 83       	std	Y+1, r24	; 0x01
     ace:	09 c0       	rjmp	.+18     	; 0xae2 <move_ball+0xbe>
		else if (up==2) x=x-1;
     ad0:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <up>
     ad4:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <up+0x1>
     ad8:	02 97       	sbiw	r24, 0x02	; 2
     ada:	19 f4       	brne	.+6      	; 0xae2 <move_ball+0xbe>
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	81 50       	subi	r24, 0x01	; 1
     ae0:	89 83       	std	Y+1, r24	; 0x01
	}
	x %= SCREEN_DIMENSION_X * SCREEN_DIMENSION_Y;		//makes sure the ball doesn't go out of the screen.
     ae2:	89 81       	ldd	r24, Y+1	; 0x01
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	8c 38       	cpi	r24, 0x8C	; 140
     ae8:	08 f4       	brcc	.+2      	; 0xaec <move_ball+0xc8>
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	2c e8       	ldi	r18, 0x8C	; 140
     aee:	92 9f       	mul	r25, r18
     af0:	90 2d       	mov	r25, r0
     af2:	11 24       	eor	r1, r1
     af4:	89 1b       	sub	r24, r25
     af6:	89 83       	std	Y+1, r24	; 0x01
	*location = x;
     af8:	8a 81       	ldd	r24, Y+2	; 0x02
     afa:	9b 81       	ldd	r25, Y+3	; 0x03
     afc:	29 81       	ldd	r18, Y+1	; 0x01
     afe:	fc 01       	movw	r30, r24
     b00:	20 83       	st	Z, r18
}
     b02:	00 00       	nop
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <bat_new_instance>:

bat_t* bat_new_instance()
{//?
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	00 d0       	rcall	.+0      	; 0xb1a <bat_new_instance+0x6>
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
	bat_t *ret = pvPortMalloc(sizeof *ret);
     b1e:	84 e0       	ldi	r24, 0x04	; 4
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <pvPortMalloc>
     b26:	9a 83       	std	Y+2, r25	; 0x02
     b28:	89 83       	std	Y+1, r24	; 0x01
	if(ret == NULL)
     b2a:	89 81       	ldd	r24, Y+1	; 0x01
     b2c:	9a 81       	ldd	r25, Y+2	; 0x02
     b2e:	89 2b       	or	r24, r25
     b30:	19 f4       	brne	.+6      	; 0xb38 <bat_new_instance+0x24>
		return ret;
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	9a 81       	ldd	r25, Y+2	; 0x02
     b36:	06 c0       	rjmp	.+12     	; 0xb44 <bat_new_instance+0x30>

	ret->length = 0;
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	9a 81       	ldd	r25, Y+2	; 0x02
     b3c:	fc 01       	movw	r30, r24
     b3e:	10 82       	st	Z, r1

	return ret;
     b40:	89 81       	ldd	r24, Y+1	; 0x01
     b42:	9a 81       	ldd	r25, Y+2	; 0x02
}
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	08 95       	ret

00000b4e <init_game>:
void init_game(bat_t **bats)
{
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	00 d0       	rcall	.+0      	; 0xb58 <init_game+0xa>
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
     b5c:	9a 83       	std	Y+2, r25	; 0x02
     b5e:	89 83       	std	Y+1, r24	; 0x01
	
	bats[PL_ONE]->length = 3;//
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	9a 81       	ldd	r25, Y+2	; 0x02
     b64:	fc 01       	movw	r30, r24
     b66:	80 81       	ld	r24, Z
     b68:	91 81       	ldd	r25, Z+1	; 0x01
     b6a:	23 e0       	ldi	r18, 0x03	; 3
     b6c:	fc 01       	movw	r30, r24
     b6e:	20 83       	st	Z, r18
	bats[PL_ONE]->pixels[0] = xy_to_pixel_id(1,2);
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	9a 81       	ldd	r25, Y+2	; 0x02
     b74:	fc 01       	movw	r30, r24
     b76:	00 81       	ld	r16, Z
     b78:	11 81       	ldd	r17, Z+1	; 0x01
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	0e 94 b4 02 	call	0x568	; 0x568 <xy_to_pixel_id>
     b82:	f8 01       	movw	r30, r16
     b84:	81 83       	std	Z+1, r24	; 0x01
	bats[PL_ONE]->pixels[1] = xy_to_pixel_id(1,1);
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	9a 81       	ldd	r25, Y+2	; 0x02
     b8a:	fc 01       	movw	r30, r24
     b8c:	00 81       	ld	r16, Z
     b8e:	11 81       	ldd	r17, Z+1	; 0x01
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	0e 94 b4 02 	call	0x568	; 0x568 <xy_to_pixel_id>
     b98:	f8 01       	movw	r30, r16
     b9a:	82 83       	std	Z+2, r24	; 0x02
	bats[PL_ONE]->pixels[2] = xy_to_pixel_id(1, 0);
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ba0:	fc 01       	movw	r30, r24
     ba2:	00 81       	ld	r16, Z
     ba4:	11 81       	ldd	r17, Z+1	; 0x01
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	0e 94 b4 02 	call	0x568	; 0x568 <xy_to_pixel_id>
     bae:	f8 01       	movw	r30, r16
     bb0:	83 83       	std	Z+3, r24	; 0x03


	bats[PL_TWO]->length = 3;//
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	9a 81       	ldd	r25, Y+2	; 0x02
     bb6:	02 96       	adiw	r24, 0x02	; 2
     bb8:	fc 01       	movw	r30, r24
     bba:	80 81       	ld	r24, Z
     bbc:	91 81       	ldd	r25, Z+1	; 0x01
     bbe:	23 e0       	ldi	r18, 0x03	; 3
     bc0:	fc 01       	movw	r30, r24
     bc2:	20 83       	st	Z, r18
	bats[PL_TWO]->pixels[0] = xy_to_pixel_id(12, 9);
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	9a 81       	ldd	r25, Y+2	; 0x02
     bc8:	02 96       	adiw	r24, 0x02	; 2
     bca:	fc 01       	movw	r30, r24
     bcc:	00 81       	ld	r16, Z
     bce:	11 81       	ldd	r17, Z+1	; 0x01
     bd0:	69 e0       	ldi	r22, 0x09	; 9
     bd2:	8c e0       	ldi	r24, 0x0C	; 12
     bd4:	0e 94 b4 02 	call	0x568	; 0x568 <xy_to_pixel_id>
     bd8:	f8 01       	movw	r30, r16
     bda:	81 83       	std	Z+1, r24	; 0x01
	bats[PL_TWO]->pixels[1] = xy_to_pixel_id(12, 8);
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	9a 81       	ldd	r25, Y+2	; 0x02
     be0:	02 96       	adiw	r24, 0x02	; 2
     be2:	fc 01       	movw	r30, r24
     be4:	00 81       	ld	r16, Z
     be6:	11 81       	ldd	r17, Z+1	; 0x01
     be8:	68 e0       	ldi	r22, 0x08	; 8
     bea:	8c e0       	ldi	r24, 0x0C	; 12
     bec:	0e 94 b4 02 	call	0x568	; 0x568 <xy_to_pixel_id>
     bf0:	f8 01       	movw	r30, r16
     bf2:	82 83       	std	Z+2, r24	; 0x02
	bats[PL_TWO]->pixels[2] = xy_to_pixel_id(12, 7);
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	9a 81       	ldd	r25, Y+2	; 0x02
     bf8:	02 96       	adiw	r24, 0x02	; 2
     bfa:	fc 01       	movw	r30, r24
     bfc:	00 81       	ld	r16, Z
     bfe:	11 81       	ldd	r17, Z+1	; 0x01
     c00:	67 e0       	ldi	r22, 0x07	; 7
     c02:	8c e0       	ldi	r24, 0x0C	; 12
     c04:	0e 94 b4 02 	call	0x568	; 0x568 <xy_to_pixel_id>
     c08:	f8 01       	movw	r30, r16
     c0a:	83 83       	std	Z+3, r24	; 0x03
}
     c0c:	00 00       	nop
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	08 95       	ret

00000c1c <clear_screen>:

void clear_screen(uint16_t* framebuffer)
{
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	00 d0       	rcall	.+0      	; 0xc22 <clear_screen+0x6>
     c22:	1f 92       	push	r1
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	9b 83       	std	Y+3, r25	; 0x03
     c2a:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8_t x = 0; x < SCREEN_DIMENSION_X; x++)
     c2c:	19 82       	std	Y+1, r1	; 0x01
     c2e:	0f c0       	rjmp	.+30     	; 0xc4e <clear_screen+0x32>
		framebuffer[x] = 0;
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	88 2f       	mov	r24, r24
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	2a 81       	ldd	r18, Y+2	; 0x02
     c3c:	3b 81       	ldd	r19, Y+3	; 0x03
     c3e:	82 0f       	add	r24, r18
     c40:	93 1f       	adc	r25, r19
     c42:	fc 01       	movw	r30, r24
     c44:	11 82       	std	Z+1, r1	; 0x01
     c46:	10 82       	st	Z, r1
	bats[PL_TWO]->pixels[2] = xy_to_pixel_id(12, 7);
}

void clear_screen(uint16_t* framebuffer)
{
	for(uint8_t x = 0; x < SCREEN_DIMENSION_X; x++)
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	8f 5f       	subi	r24, 0xFF	; 255
     c4c:	89 83       	std	Y+1, r24	; 0x01
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	8e 30       	cpi	r24, 0x0E	; 14
     c52:	70 f3       	brcs	.-36     	; 0xc30 <clear_screen+0x14>
		framebuffer[x] = 0;
}
     c54:	00 00       	nop
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	08 95       	ret

00000c62 <y_offset>:

uint8_t y_offset(uint8_t pixel_id)
{
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	1f 92       	push	r1
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	89 83       	std	Y+1, r24	; 0x01
	return pixel_id / SCREEN_DIMENSION_X;
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	98 2f       	mov	r25, r24
     c72:	96 95       	lsr	r25
     c74:	83 e9       	ldi	r24, 0x93	; 147
     c76:	98 9f       	mul	r25, r24
     c78:	81 2d       	mov	r24, r1
     c7a:	11 24       	eor	r1, r1
     c7c:	86 95       	lsr	r24
     c7e:	86 95       	lsr	r24
}
     c80:	0f 90       	pop	r0
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	08 95       	ret

00000c88 <x_offset>:
uint8_t x_offset(uint8_t pixel_id)
{
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	1f 92       	push	r1
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	89 83       	std	Y+1, r24	; 0x01
	return pixel_id % SCREEN_DIMENSION_X;
     c94:	29 81       	ldd	r18, Y+1	; 0x01
     c96:	92 2f       	mov	r25, r18
     c98:	96 95       	lsr	r25
     c9a:	83 e9       	ldi	r24, 0x93	; 147
     c9c:	98 9f       	mul	r25, r24
     c9e:	81 2d       	mov	r24, r1
     ca0:	11 24       	eor	r1, r1
     ca2:	86 95       	lsr	r24
     ca4:	86 95       	lsr	r24
     ca6:	98 2f       	mov	r25, r24
     ca8:	89 2f       	mov	r24, r25
     caa:	88 0f       	add	r24, r24
     cac:	98 2f       	mov	r25, r24
     cae:	89 2f       	mov	r24, r25
     cb0:	88 0f       	add	r24, r24
     cb2:	88 0f       	add	r24, r24
     cb4:	88 0f       	add	r24, r24
     cb6:	89 1b       	sub	r24, r25
     cb8:	92 2f       	mov	r25, r18
     cba:	98 1b       	sub	r25, r24
     cbc:	89 2f       	mov	r24, r25
}
     cbe:	0f 90       	pop	r0
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	08 95       	ret

00000cc6 <draw_game>:

void draw_game(uint16_t* framebuffer, bat_t **bats, uint8_t ball_location)
{
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	27 97       	sbiw	r28, 0x07	; 7
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
     cde:	9c 83       	std	Y+4, r25	; 0x04
     ce0:	8b 83       	std	Y+3, r24	; 0x03
     ce2:	7e 83       	std	Y+6, r23	; 0x06
     ce4:	6d 83       	std	Y+5, r22	; 0x05
     ce6:	4f 83       	std	Y+7, r20	; 0x07
	framebuffer[x_offset(ball_location)] |=  _BV((SCREEN_DIMENSION_Y - (y_offset(ball_location)+1)));
     ce8:	8f 81       	ldd	r24, Y+7	; 0x07
     cea:	0e 94 31 06 	call	0xc62	; 0xc62 <y_offset>
     cee:	88 2f       	mov	r24, r24
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	29 e0       	ldi	r18, 0x09	; 9
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	28 1b       	sub	r18, r24
     cf8:	39 0b       	sbc	r19, r25
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	8c 01       	movw	r16, r24
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <draw_game+0x40>
     d02:	00 0f       	add	r16, r16
     d04:	11 1f       	adc	r17, r17
     d06:	2a 95       	dec	r18
     d08:	e2 f7       	brpl	.-8      	; 0xd02 <draw_game+0x3c>
     d0a:	8f 81       	ldd	r24, Y+7	; 0x07
     d0c:	0e 94 44 06 	call	0xc88	; 0xc88 <x_offset>
     d10:	48 2f       	mov	r20, r24
     d12:	84 2f       	mov	r24, r20
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	2b 81       	ldd	r18, Y+3	; 0x03
     d1c:	3c 81       	ldd	r19, Y+4	; 0x04
     d1e:	82 0f       	add	r24, r18
     d20:	93 1f       	adc	r25, r19
     d22:	24 2f       	mov	r18, r20
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	22 0f       	add	r18, r18
     d28:	33 1f       	adc	r19, r19
     d2a:	4b 81       	ldd	r20, Y+3	; 0x03
     d2c:	5c 81       	ldd	r21, Y+4	; 0x04
     d2e:	24 0f       	add	r18, r20
     d30:	35 1f       	adc	r19, r21
     d32:	f9 01       	movw	r30, r18
     d34:	20 81       	ld	r18, Z
     d36:	31 81       	ldd	r19, Z+1	; 0x01
     d38:	a8 01       	movw	r20, r16
     d3a:	24 2b       	or	r18, r20
     d3c:	35 2b       	or	r19, r21
     d3e:	fc 01       	movw	r30, r24
     d40:	31 83       	std	Z+1, r19	; 0x01
     d42:	20 83       	st	Z, r18
	for(Player_t player = 0; player < 2; player++)
     d44:	19 82       	std	Y+1, r1	; 0x01
     d46:	6e c0       	rjmp	.+220    	; 0xe24 <draw_game+0x15e>
	{
		for(uint8_t i = 0; i < bats[player]->length; i++)
     d48:	1a 82       	std	Y+2, r1	; 0x02
     d4a:	57 c0       	rjmp	.+174    	; 0xdfa <draw_game+0x134>
		{
			framebuffer[x_offset(bats[player]->pixels[i])] |= _BV((SCREEN_DIMENSION_Y - (y_offset(bats[player]->pixels[i])+1)));
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	2d 81       	ldd	r18, Y+5	; 0x05
     d58:	3e 81       	ldd	r19, Y+6	; 0x06
     d5a:	82 0f       	add	r24, r18
     d5c:	93 1f       	adc	r25, r19
     d5e:	fc 01       	movw	r30, r24
     d60:	20 81       	ld	r18, Z
     d62:	31 81       	ldd	r19, Z+1	; 0x01
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	88 2f       	mov	r24, r24
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	82 0f       	add	r24, r18
     d6c:	93 1f       	adc	r25, r19
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	fc 01       	movw	r30, r24
     d72:	80 81       	ld	r24, Z
     d74:	0e 94 31 06 	call	0xc62	; 0xc62 <y_offset>
     d78:	88 2f       	mov	r24, r24
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	29 e0       	ldi	r18, 0x09	; 9
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	28 1b       	sub	r18, r24
     d82:	39 0b       	sbc	r19, r25
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	8c 01       	movw	r16, r24
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <draw_game+0xca>
     d8c:	00 0f       	add	r16, r16
     d8e:	11 1f       	adc	r17, r17
     d90:	2a 95       	dec	r18
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <draw_game+0xc6>
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	88 2f       	mov	r24, r24
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	2d 81       	ldd	r18, Y+5	; 0x05
     da0:	3e 81       	ldd	r19, Y+6	; 0x06
     da2:	82 0f       	add	r24, r18
     da4:	93 1f       	adc	r25, r19
     da6:	fc 01       	movw	r30, r24
     da8:	20 81       	ld	r18, Z
     daa:	31 81       	ldd	r19, Z+1	; 0x01
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	82 0f       	add	r24, r18
     db4:	93 1f       	adc	r25, r19
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	fc 01       	movw	r30, r24
     dba:	80 81       	ld	r24, Z
     dbc:	0e 94 44 06 	call	0xc88	; 0xc88 <x_offset>
     dc0:	48 2f       	mov	r20, r24
     dc2:	84 2f       	mov	r24, r20
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	2b 81       	ldd	r18, Y+3	; 0x03
     dcc:	3c 81       	ldd	r19, Y+4	; 0x04
     dce:	82 0f       	add	r24, r18
     dd0:	93 1f       	adc	r25, r19
     dd2:	24 2f       	mov	r18, r20
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	22 0f       	add	r18, r18
     dd8:	33 1f       	adc	r19, r19
     dda:	4b 81       	ldd	r20, Y+3	; 0x03
     ddc:	5c 81       	ldd	r21, Y+4	; 0x04
     dde:	24 0f       	add	r18, r20
     de0:	35 1f       	adc	r19, r21
     de2:	f9 01       	movw	r30, r18
     de4:	20 81       	ld	r18, Z
     de6:	31 81       	ldd	r19, Z+1	; 0x01
     de8:	a8 01       	movw	r20, r16
     dea:	24 2b       	or	r18, r20
     dec:	35 2b       	or	r19, r21
     dee:	fc 01       	movw	r30, r24
     df0:	31 83       	std	Z+1, r19	; 0x01
     df2:	20 83       	st	Z, r18
void draw_game(uint16_t* framebuffer, bat_t **bats, uint8_t ball_location)
{
	framebuffer[x_offset(ball_location)] |=  _BV((SCREEN_DIMENSION_Y - (y_offset(ball_location)+1)));
	for(Player_t player = 0; player < 2; player++)
	{
		for(uint8_t i = 0; i < bats[player]->length; i++)
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	8f 5f       	subi	r24, 0xFF	; 255
     df8:	8a 83       	std	Y+2, r24	; 0x02
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	2d 81       	ldd	r18, Y+5	; 0x05
     e06:	3e 81       	ldd	r19, Y+6	; 0x06
     e08:	82 0f       	add	r24, r18
     e0a:	93 1f       	adc	r25, r19
     e0c:	fc 01       	movw	r30, r24
     e0e:	80 81       	ld	r24, Z
     e10:	91 81       	ldd	r25, Z+1	; 0x01
     e12:	fc 01       	movw	r30, r24
     e14:	90 81       	ld	r25, Z
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	89 17       	cp	r24, r25
     e1a:	08 f4       	brcc	.+2      	; 0xe1e <draw_game+0x158>
     e1c:	97 cf       	rjmp	.-210    	; 0xd4c <draw_game+0x86>
}

void draw_game(uint16_t* framebuffer, bat_t **bats, uint8_t ball_location)
{
	framebuffer[x_offset(ball_location)] |=  _BV((SCREEN_DIMENSION_Y - (y_offset(ball_location)+1)));
	for(Player_t player = 0; player < 2; player++)
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	8f 5f       	subi	r24, 0xFF	; 255
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	08 f4       	brcc	.+2      	; 0xe2c <draw_game+0x166>
     e2a:	8e cf       	rjmp	.-228    	; 0xd48 <draw_game+0x82>
		for(uint8_t i = 0; i < bats[player]->length; i++)
		{
			framebuffer[x_offset(bats[player]->pixels[i])] |= _BV((SCREEN_DIMENSION_Y - (y_offset(bats[player]->pixels[i])+1)));
		}
	}
}
     e2c:	00 00       	nop
     e2e:	27 96       	adiw	r28, 0x07	; 7
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	cd bf       	out	0x3d, r28	; 61
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	08 95       	ret

00000e44 <draw_scores>:

void draw_scores(uint16_t* framebuffer, uint8_t score_right, uint8_t score_left)
{			
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	28 97       	sbiw	r28, 0x08	; 8
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	9e 83       	std	Y+6, r25	; 0x06
     e5e:	8d 83       	std	Y+5, r24	; 0x05
     e60:	6f 83       	std	Y+7, r22	; 0x07
     e62:	48 87       	std	Y+8, r20	; 0x08
	if(score_right==1)
     e64:	8f 81       	ldd	r24, Y+7	; 0x07
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	09 f0       	breq	.+2      	; 0xe6c <draw_scores+0x28>
     e6a:	43 c0       	rjmp	.+134    	; 0xef2 <draw_scores+0xae>
	{
		for(uint8_t i = 31; i <=101; i++)
     e6c:	8f e1       	ldi	r24, 0x1F	; 31
     e6e:	89 83       	std	Y+1, r24	; 0x01
     e70:	3c c0       	rjmp	.+120    	; 0xeea <draw_scores+0xa6>
		{
			if((i-3)%14==0)
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	88 2f       	mov	r24, r24
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	03 97       	sbiw	r24, 0x03	; 3
     e7a:	2e e0       	ldi	r18, 0x0E	; 14
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	b9 01       	movw	r22, r18
     e80:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <__divmodhi4>
     e84:	89 2b       	or	r24, r25
     e86:	71 f5       	brne	.+92     	; 0xee4 <draw_scores+0xa0>
			framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	0e 94 31 06 	call	0xc62	; 0xc62 <y_offset>
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	29 e0       	ldi	r18, 0x09	; 9
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	28 1b       	sub	r18, r24
     e98:	39 0b       	sbc	r19, r25
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	8c 01       	movw	r16, r24
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <draw_scores+0x62>
     ea2:	00 0f       	add	r16, r16
     ea4:	11 1f       	adc	r17, r17
     ea6:	2a 95       	dec	r18
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <draw_scores+0x5e>
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	0e 94 44 06 	call	0xc88	; 0xc88 <x_offset>
     eb0:	48 2f       	mov	r20, r24
     eb2:	84 2f       	mov	r24, r20
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	2d 81       	ldd	r18, Y+5	; 0x05
     ebc:	3e 81       	ldd	r19, Y+6	; 0x06
     ebe:	82 0f       	add	r24, r18
     ec0:	93 1f       	adc	r25, r19
     ec2:	24 2f       	mov	r18, r20
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	22 0f       	add	r18, r18
     ec8:	33 1f       	adc	r19, r19
     eca:	4d 81       	ldd	r20, Y+5	; 0x05
     ecc:	5e 81       	ldd	r21, Y+6	; 0x06
     ece:	24 0f       	add	r18, r20
     ed0:	35 1f       	adc	r19, r21
     ed2:	f9 01       	movw	r30, r18
     ed4:	20 81       	ld	r18, Z
     ed6:	31 81       	ldd	r19, Z+1	; 0x01
     ed8:	a8 01       	movw	r20, r16
     eda:	24 2b       	or	r18, r20
     edc:	35 2b       	or	r19, r21
     ede:	fc 01       	movw	r30, r24
     ee0:	31 83       	std	Z+1, r19	; 0x01
     ee2:	20 83       	st	Z, r18

void draw_scores(uint16_t* framebuffer, uint8_t score_right, uint8_t score_left)
{			
	if(score_right==1)
	{
		for(uint8_t i = 31; i <=101; i++)
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	8f 5f       	subi	r24, 0xFF	; 255
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	86 36       	cpi	r24, 0x66	; 102
     eee:	08 f2       	brcs	.-126    	; 0xe72 <draw_scores+0x2e>
     ef0:	80 c0       	rjmp	.+256    	; 0xff2 <draw_scores+0x1ae>
		{
			if((i-3)%14==0)
			framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
		}
	}
	else if(score_right==2)
     ef2:	8f 81       	ldd	r24, Y+7	; 0x07
     ef4:	82 30       	cpi	r24, 0x02	; 2
     ef6:	09 f0       	breq	.+2      	; 0xefa <draw_scores+0xb6>
     ef8:	7c c0       	rjmp	.+248    	; 0xff2 <draw_scores+0x1ae>
		{
			for(uint8_t i = 31; i <=103; i++)
     efa:	8f e1       	ldi	r24, 0x1F	; 31
     efc:	8a 83       	std	Y+2, r24	; 0x02
     efe:	75 c0       	rjmp	.+234    	; 0xfea <draw_scores+0x1a6>
			{
				if((i-3)%14==0)
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	88 2f       	mov	r24, r24
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	03 97       	sbiw	r24, 0x03	; 3
     f08:	2e e0       	ldi	r18, 0x0E	; 14
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	b9 01       	movw	r22, r18
     f0e:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <__divmodhi4>
     f12:	89 2b       	or	r24, r25
     f14:	71 f5       	brne	.+92     	; 0xf72 <draw_scores+0x12e>
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	0e 94 31 06 	call	0xc62	; 0xc62 <y_offset>
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	29 e0       	ldi	r18, 0x09	; 9
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	28 1b       	sub	r18, r24
     f26:	39 0b       	sbc	r19, r25
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	8c 01       	movw	r16, r24
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <draw_scores+0xf0>
     f30:	00 0f       	add	r16, r16
     f32:	11 1f       	adc	r17, r17
     f34:	2a 95       	dec	r18
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <draw_scores+0xec>
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	0e 94 44 06 	call	0xc88	; 0xc88 <x_offset>
     f3e:	48 2f       	mov	r20, r24
     f40:	84 2f       	mov	r24, r20
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	2d 81       	ldd	r18, Y+5	; 0x05
     f4a:	3e 81       	ldd	r19, Y+6	; 0x06
     f4c:	82 0f       	add	r24, r18
     f4e:	93 1f       	adc	r25, r19
     f50:	24 2f       	mov	r18, r20
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	22 0f       	add	r18, r18
     f56:	33 1f       	adc	r19, r19
     f58:	4d 81       	ldd	r20, Y+5	; 0x05
     f5a:	5e 81       	ldd	r21, Y+6	; 0x06
     f5c:	24 0f       	add	r18, r20
     f5e:	35 1f       	adc	r19, r21
     f60:	f9 01       	movw	r30, r18
     f62:	20 81       	ld	r18, Z
     f64:	31 81       	ldd	r19, Z+1	; 0x01
     f66:	a8 01       	movw	r20, r16
     f68:	24 2b       	or	r18, r20
     f6a:	35 2b       	or	r19, r21
     f6c:	fc 01       	movw	r30, r24
     f6e:	31 83       	std	Z+1, r19	; 0x01
     f70:	20 83       	st	Z, r18
			
				if((i-5)%14==0)
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	88 2f       	mov	r24, r24
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	05 97       	sbiw	r24, 0x05	; 5
     f7a:	2e e0       	ldi	r18, 0x0E	; 14
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	b9 01       	movw	r22, r18
     f80:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <__divmodhi4>
     f84:	89 2b       	or	r24, r25
     f86:	71 f5       	brne	.+92     	; 0xfe4 <draw_scores+0x1a0>
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	0e 94 31 06 	call	0xc62	; 0xc62 <y_offset>
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	29 e0       	ldi	r18, 0x09	; 9
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	28 1b       	sub	r18, r24
     f98:	39 0b       	sbc	r19, r25
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	8c 01       	movw	r16, r24
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <draw_scores+0x162>
     fa2:	00 0f       	add	r16, r16
     fa4:	11 1f       	adc	r17, r17
     fa6:	2a 95       	dec	r18
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <draw_scores+0x15e>
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	0e 94 44 06 	call	0xc88	; 0xc88 <x_offset>
     fb0:	48 2f       	mov	r20, r24
     fb2:	84 2f       	mov	r24, r20
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	2d 81       	ldd	r18, Y+5	; 0x05
     fbc:	3e 81       	ldd	r19, Y+6	; 0x06
     fbe:	82 0f       	add	r24, r18
     fc0:	93 1f       	adc	r25, r19
     fc2:	24 2f       	mov	r18, r20
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	22 0f       	add	r18, r18
     fc8:	33 1f       	adc	r19, r19
     fca:	4d 81       	ldd	r20, Y+5	; 0x05
     fcc:	5e 81       	ldd	r21, Y+6	; 0x06
     fce:	24 0f       	add	r18, r20
     fd0:	35 1f       	adc	r19, r21
     fd2:	f9 01       	movw	r30, r18
     fd4:	20 81       	ld	r18, Z
     fd6:	31 81       	ldd	r19, Z+1	; 0x01
     fd8:	a8 01       	movw	r20, r16
     fda:	24 2b       	or	r18, r20
     fdc:	35 2b       	or	r19, r21
     fde:	fc 01       	movw	r30, r24
     fe0:	31 83       	std	Z+1, r19	; 0x01
     fe2:	20 83       	st	Z, r18
			framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
		}
	}
	else if(score_right==2)
		{
			for(uint8_t i = 31; i <=103; i++)
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	8f 5f       	subi	r24, 0xFF	; 255
     fe8:	8a 83       	std	Y+2, r24	; 0x02
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	88 36       	cpi	r24, 0x68	; 104
     fee:	08 f4       	brcc	.+2      	; 0xff2 <draw_scores+0x1ae>
     ff0:	87 cf       	rjmp	.-242    	; 0xf00 <draw_scores+0xbc>
			}
		}
		
	
	
		if(score_left==1)
     ff2:	88 85       	ldd	r24, Y+8	; 0x08
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	09 f0       	breq	.+2      	; 0xffa <draw_scores+0x1b6>
     ff8:	43 c0       	rjmp	.+134    	; 0x1080 <draw_scores+0x23c>
		{
			for(uint8_t i = 37; i <=107; i++)
     ffa:	85 e2       	ldi	r24, 0x25	; 37
     ffc:	8b 83       	std	Y+3, r24	; 0x03
     ffe:	3c c0       	rjmp	.+120    	; 0x1078 <draw_scores+0x234>
			{
				if((i-9)%14==0)
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	09 97       	sbiw	r24, 0x09	; 9
    1008:	2e e0       	ldi	r18, 0x0E	; 14
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	b9 01       	movw	r22, r18
    100e:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <__divmodhi4>
    1012:	89 2b       	or	r24, r25
    1014:	71 f5       	brne	.+92     	; 0x1072 <draw_scores+0x22e>
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	0e 94 31 06 	call	0xc62	; 0xc62 <y_offset>
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	29 e0       	ldi	r18, 0x09	; 9
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	28 1b       	sub	r18, r24
    1026:	39 0b       	sbc	r19, r25
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	8c 01       	movw	r16, r24
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <draw_scores+0x1f0>
    1030:	00 0f       	add	r16, r16
    1032:	11 1f       	adc	r17, r17
    1034:	2a 95       	dec	r18
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <draw_scores+0x1ec>
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	0e 94 44 06 	call	0xc88	; 0xc88 <x_offset>
    103e:	48 2f       	mov	r20, r24
    1040:	84 2f       	mov	r24, r20
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	2d 81       	ldd	r18, Y+5	; 0x05
    104a:	3e 81       	ldd	r19, Y+6	; 0x06
    104c:	82 0f       	add	r24, r18
    104e:	93 1f       	adc	r25, r19
    1050:	24 2f       	mov	r18, r20
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	22 0f       	add	r18, r18
    1056:	33 1f       	adc	r19, r19
    1058:	4d 81       	ldd	r20, Y+5	; 0x05
    105a:	5e 81       	ldd	r21, Y+6	; 0x06
    105c:	24 0f       	add	r18, r20
    105e:	35 1f       	adc	r19, r21
    1060:	f9 01       	movw	r30, r18
    1062:	20 81       	ld	r18, Z
    1064:	31 81       	ldd	r19, Z+1	; 0x01
    1066:	a8 01       	movw	r20, r16
    1068:	24 2b       	or	r18, r20
    106a:	35 2b       	or	r19, r21
    106c:	fc 01       	movw	r30, r24
    106e:	31 83       	std	Z+1, r19	; 0x01
    1070:	20 83       	st	Z, r18
		
	
	
		if(score_left==1)
		{
			for(uint8_t i = 37; i <=107; i++)
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	8f 5f       	subi	r24, 0xFF	; 255
    1076:	8b 83       	std	Y+3, r24	; 0x03
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	8c 36       	cpi	r24, 0x6C	; 108
    107c:	08 f2       	brcs	.-126    	; 0x1000 <draw_scores+0x1bc>
		}
		
		
		
	
}
    107e:	80 c0       	rjmp	.+256    	; 0x1180 <draw_scores+0x33c>
			{
				if((i-9)%14==0)
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
			}
		}
		else if(score_left==2)
    1080:	88 85       	ldd	r24, Y+8	; 0x08
    1082:	82 30       	cpi	r24, 0x02	; 2
    1084:	09 f0       	breq	.+2      	; 0x1088 <draw_scores+0x244>
    1086:	7c c0       	rjmp	.+248    	; 0x1180 <draw_scores+0x33c>
		{
			for(uint8_t i = 37; i <=109; i++)
    1088:	85 e2       	ldi	r24, 0x25	; 37
    108a:	8c 83       	std	Y+4, r24	; 0x04
    108c:	75 c0       	rjmp	.+234    	; 0x1178 <draw_scores+0x334>
			{
				if((i-9)%14==0)
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	88 2f       	mov	r24, r24
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	09 97       	sbiw	r24, 0x09	; 9
    1096:	2e e0       	ldi	r18, 0x0E	; 14
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	b9 01       	movw	r22, r18
    109c:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <__divmodhi4>
    10a0:	89 2b       	or	r24, r25
    10a2:	71 f5       	brne	.+92     	; 0x1100 <draw_scores+0x2bc>
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
    10a4:	8c 81       	ldd	r24, Y+4	; 0x04
    10a6:	0e 94 31 06 	call	0xc62	; 0xc62 <y_offset>
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	29 e0       	ldi	r18, 0x09	; 9
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	28 1b       	sub	r18, r24
    10b4:	39 0b       	sbc	r19, r25
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	8c 01       	movw	r16, r24
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <draw_scores+0x27e>
    10be:	00 0f       	add	r16, r16
    10c0:	11 1f       	adc	r17, r17
    10c2:	2a 95       	dec	r18
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <draw_scores+0x27a>
    10c6:	8c 81       	ldd	r24, Y+4	; 0x04
    10c8:	0e 94 44 06 	call	0xc88	; 0xc88 <x_offset>
    10cc:	48 2f       	mov	r20, r24
    10ce:	84 2f       	mov	r24, r20
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	2d 81       	ldd	r18, Y+5	; 0x05
    10d8:	3e 81       	ldd	r19, Y+6	; 0x06
    10da:	82 0f       	add	r24, r18
    10dc:	93 1f       	adc	r25, r19
    10de:	24 2f       	mov	r18, r20
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	22 0f       	add	r18, r18
    10e4:	33 1f       	adc	r19, r19
    10e6:	4d 81       	ldd	r20, Y+5	; 0x05
    10e8:	5e 81       	ldd	r21, Y+6	; 0x06
    10ea:	24 0f       	add	r18, r20
    10ec:	35 1f       	adc	r19, r21
    10ee:	f9 01       	movw	r30, r18
    10f0:	20 81       	ld	r18, Z
    10f2:	31 81       	ldd	r19, Z+1	; 0x01
    10f4:	a8 01       	movw	r20, r16
    10f6:	24 2b       	or	r18, r20
    10f8:	35 2b       	or	r19, r21
    10fa:	fc 01       	movw	r30, r24
    10fc:	31 83       	std	Z+1, r19	; 0x01
    10fe:	20 83       	st	Z, r18
				if((i-11)%14==0)
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0b 97       	sbiw	r24, 0x0b	; 11
    1108:	2e e0       	ldi	r18, 0x0E	; 14
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	b9 01       	movw	r22, r18
    110e:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <__divmodhi4>
    1112:	89 2b       	or	r24, r25
    1114:	71 f5       	brne	.+92     	; 0x1172 <draw_scores+0x32e>
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
    1116:	8c 81       	ldd	r24, Y+4	; 0x04
    1118:	0e 94 31 06 	call	0xc62	; 0xc62 <y_offset>
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	29 e0       	ldi	r18, 0x09	; 9
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	28 1b       	sub	r18, r24
    1126:	39 0b       	sbc	r19, r25
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	8c 01       	movw	r16, r24
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <draw_scores+0x2f0>
    1130:	00 0f       	add	r16, r16
    1132:	11 1f       	adc	r17, r17
    1134:	2a 95       	dec	r18
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <draw_scores+0x2ec>
    1138:	8c 81       	ldd	r24, Y+4	; 0x04
    113a:	0e 94 44 06 	call	0xc88	; 0xc88 <x_offset>
    113e:	48 2f       	mov	r20, r24
    1140:	84 2f       	mov	r24, r20
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	2d 81       	ldd	r18, Y+5	; 0x05
    114a:	3e 81       	ldd	r19, Y+6	; 0x06
    114c:	82 0f       	add	r24, r18
    114e:	93 1f       	adc	r25, r19
    1150:	24 2f       	mov	r18, r20
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	22 0f       	add	r18, r18
    1156:	33 1f       	adc	r19, r19
    1158:	4d 81       	ldd	r20, Y+5	; 0x05
    115a:	5e 81       	ldd	r21, Y+6	; 0x06
    115c:	24 0f       	add	r18, r20
    115e:	35 1f       	adc	r19, r21
    1160:	f9 01       	movw	r30, r18
    1162:	20 81       	ld	r18, Z
    1164:	31 81       	ldd	r19, Z+1	; 0x01
    1166:	a8 01       	movw	r20, r16
    1168:	24 2b       	or	r18, r20
    116a:	35 2b       	or	r19, r21
    116c:	fc 01       	movw	r30, r24
    116e:	31 83       	std	Z+1, r19	; 0x01
    1170:	20 83       	st	Z, r18
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
			}
		}
		else if(score_left==2)
		{
			for(uint8_t i = 37; i <=109; i++)
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	8f 5f       	subi	r24, 0xFF	; 255
    1176:	8c 83       	std	Y+4, r24	; 0x04
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	8e 36       	cpi	r24, 0x6E	; 110
    117c:	08 f4       	brcc	.+2      	; 0x1180 <draw_scores+0x33c>
    117e:	87 cf       	rjmp	.-242    	; 0x108e <draw_scores+0x24a>
		}
		
		
		
	
}
    1180:	00 00       	nop
    1182:	28 96       	adiw	r28, 0x08	; 8
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	08 95       	ret

00001198 <read_joystick>:
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	86 e2       	ldi	r24, 0x26	; 38
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	fc 01       	movw	r30, r24
    11a6:	80 81       	ld	r24, Z
    11a8:	28 2f       	mov	r18, r24
    11aa:	20 74       	andi	r18, 0x40	; 64
    11ac:	86 e2       	ldi	r24, 0x26	; 38
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	fc 01       	movw	r30, r24
    11b2:	80 81       	ld	r24, Z
    11b4:	81 70       	andi	r24, 0x01	; 1
    11b6:	28 2b       	or	r18, r24
    11b8:	89 e2       	ldi	r24, 0x29	; 41
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	fc 01       	movw	r30, r24
    11be:	80 81       	ld	r24, Z
    11c0:	88 70       	andi	r24, 0x08	; 8
    11c2:	82 2b       	or	r24, r18
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	08 95       	ret

000011ca <joystick_task>:
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <joystick_task+0x6>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <joystick_task+0x8>
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	9c 83       	std	Y+4, r25	; 0x04
    11d8:	8b 83       	std	Y+3, r24	; 0x03
    11da:	0e 94 29 22 	call	0x4452	; 0x4452 <xTaskGetTickCount>
    11de:	9a 83       	std	Y+2, r25	; 0x02
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	62 e3       	ldi	r22, 0x32	; 50
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	ce 01       	movw	r24, r28
    11e8:	01 96       	adiw	r24, 0x01	; 1
    11ea:	0e 94 b3 20 	call	0x4166	; 0x4166 <vTaskDelayUntil>
    11ee:	0e 94 cc 08 	call	0x1198	; 0x1198 <read_joystick>
    11f2:	88 2f       	mov	r24, r24
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	80 74       	andi	r24, 0x40	; 64
    11f8:	99 27       	eor	r25, r25
    11fa:	89 2b       	or	r24, r25
    11fc:	21 f4       	brne	.+8      	; 0x1206 <joystick_task+0x3c>
    11fe:	62 e0       	ldi	r22, 0x02	; 2
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	0e 94 8d 01 	call	0x31a	; 0x31a <bat_move>
    1206:	0e 94 cc 08 	call	0x1198	; 0x1198 <read_joystick>
    120a:	88 2f       	mov	r24, r24
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	81 70       	andi	r24, 0x01	; 1
    1210:	99 27       	eor	r25, r25
    1212:	89 2b       	or	r24, r25
    1214:	21 f4       	brne	.+8      	; 0x121e <joystick_task+0x54>
    1216:	61 e0       	ldi	r22, 0x01	; 1
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	0e 94 8d 01 	call	0x31a	; 0x31a <bat_move>
    121e:	0e 94 cc 08 	call	0x1198	; 0x1198 <read_joystick>
    1222:	88 2f       	mov	r24, r24
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	88 70       	andi	r24, 0x08	; 8
    1228:	99 27       	eor	r25, r25
    122a:	89 2b       	or	r24, r25
    122c:	d1 f6       	brne	.-76     	; 0x11e2 <joystick_task+0x18>
    122e:	0e 94 87 02 	call	0x50e	; 0x50e <restart_game>
    1232:	d7 cf       	rjmp	.-82     	; 0x11e2 <joystick_task+0x18>

00001234 <vApplicationIdleHook>:
// frame_buf contains a bit pattern for each column in the display
uint16_t frame_buf[14] = {1023, 1+256+512, 28+512, 62, 126, 254, 508, 254, 126, 62, 28 + 512, 1+256+512 , 1023, 0 };

//-----------------------------------------
void vApplicationIdleHook( void )
{
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
	//
}
    123c:	00 00       	nop
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	08 95       	ret

00001244 <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
	// Set SER to 1
	PORTD |= _BV(PORTD2);
    124c:	8b e2       	ldi	r24, 0x2B	; 43
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	2b e2       	ldi	r18, 0x2B	; 43
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	f9 01       	movw	r30, r18
    1256:	20 81       	ld	r18, Z
    1258:	24 60       	ori	r18, 0x04	; 4
    125a:	fc 01       	movw	r30, r24
    125c:	20 83       	st	Z, r18
}
    125e:	00 00       	nop
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	08 95       	ret

00001266 <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
	// one SCK pulse
	PORTD |= _BV(PORTD5);
    126e:	8b e2       	ldi	r24, 0x2B	; 43
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	2b e2       	ldi	r18, 0x2B	; 43
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	f9 01       	movw	r30, r18
    1278:	20 81       	ld	r18, Z
    127a:	20 62       	ori	r18, 0x20	; 32
    127c:	fc 01       	movw	r30, r24
    127e:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
    1280:	8b e2       	ldi	r24, 0x2B	; 43
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	2b e2       	ldi	r18, 0x2B	; 43
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	f9 01       	movw	r30, r18
    128a:	20 81       	ld	r18, Z
    128c:	2f 7d       	andi	r18, 0xDF	; 223
    128e:	fc 01       	movw	r30, r24
    1290:	20 83       	st	Z, r18
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
    1292:	8b e2       	ldi	r24, 0x2B	; 43
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	2b e2       	ldi	r18, 0x2B	; 43
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	f9 01       	movw	r30, r18
    129c:	20 81       	ld	r18, Z
    129e:	20 61       	ori	r18, 0x10	; 16
    12a0:	fc 01       	movw	r30, r24
    12a2:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
    12a4:	8b e2       	ldi	r24, 0x2B	; 43
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	2b e2       	ldi	r18, 0x2B	; 43
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	f9 01       	movw	r30, r18
    12ae:	20 81       	ld	r18, Z
    12b0:	2f 7e       	andi	r18, 0xEF	; 239
    12b2:	fc 01       	movw	r30, r24
    12b4:	20 83       	st	Z, r18
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
    12b6:	8b e2       	ldi	r24, 0x2B	; 43
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	2b e2       	ldi	r18, 0x2B	; 43
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	f9 01       	movw	r30, r18
    12c0:	20 81       	ld	r18, Z
    12c2:	2b 7f       	andi	r18, 0xFB	; 251
    12c4:	fc 01       	movw	r30, r24
    12c6:	20 83       	st	Z, r18
}
    12c8:	00 00       	nop
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	08 95       	ret

000012d0 <load_col_value>:

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <load_col_value+0x6>
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	9a 83       	std	Y+2, r25	; 0x02
    12dc:	89 83       	std	Y+1, r24	; 0x01
	PORTA = ~(col_value & 0xFF);
    12de:	82 e2       	ldi	r24, 0x22	; 34
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	29 81       	ldd	r18, Y+1	; 0x01
    12e4:	20 95       	com	r18
    12e6:	fc 01       	movw	r30, r24
    12e8:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
    12ea:	85 e2       	ldi	r24, 0x25	; 37
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	25 e2       	ldi	r18, 0x25	; 37
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	f9 01       	movw	r30, r18
    12f4:	20 81       	ld	r18, Z
    12f6:	23 60       	ori	r18, 0x03	; 3
    12f8:	fc 01       	movw	r30, r24
    12fa:	20 83       	st	Z, r18
	PORTB &= ~((col_value >> 8) & 0x03);
    12fc:	85 e2       	ldi	r24, 0x25	; 37
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	25 e2       	ldi	r18, 0x25	; 37
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	f9 01       	movw	r30, r18
    1306:	40 81       	ld	r20, Z
    1308:	29 81       	ldd	r18, Y+1	; 0x01
    130a:	3a 81       	ldd	r19, Y+2	; 0x02
    130c:	23 2f       	mov	r18, r19
    130e:	33 27       	eor	r19, r19
    1310:	23 70       	andi	r18, 0x03	; 3
    1312:	20 95       	com	r18
    1314:	24 23       	and	r18, r20
    1316:	fc 01       	movw	r30, r24
    1318:	20 83       	st	Z, r18
}
    131a:	00 00       	nop
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	08 95       	ret

00001326 <handle_display>:

//-----------------------------------------
void handle_display(void)
{
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
	static uint8_t col = 0;
	
	if (col == 0)
    132e:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <col.2142>
    1332:	88 23       	and	r24, r24
    1334:	11 f4       	brne	.+4      	; 0x133a <handle_display+0x14>
	{
		prepare_shiftregister();
    1336:	0e 94 22 09 	call	0x1244	; 0x1244 <prepare_shiftregister>
	}
	
	load_col_value(frame_buf[col]);
    133a:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <col.2142>
    133e:	88 2f       	mov	r24, r24
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	8d 5f       	subi	r24, 0xFD	; 253
    1348:	9e 4f       	sbci	r25, 0xFE	; 254
    134a:	fc 01       	movw	r30, r24
    134c:	80 81       	ld	r24, Z
    134e:	91 81       	ldd	r25, Z+1	; 0x01
    1350:	0e 94 68 09 	call	0x12d0	; 0x12d0 <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
    1354:	0e 94 33 09 	call	0x1266	; 0x1266 <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
    1358:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <col.2142>
    135c:	8f 5f       	subi	r24, 0xFF	; 255
    135e:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <col.2142>
	if (col > 13)
    1362:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <col.2142>
    1366:	8e 30       	cpi	r24, 0x0E	; 14
    1368:	10 f0       	brcs	.+4      	; 0x136e <handle_display+0x48>
	{
		col = 0;
    136a:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <col.2142>
	}
}
    136e:	00 00       	nop
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	08 95       	ret

00001376 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask,signed char *pcTaskName )
{
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	00 d0       	rcall	.+0      	; 0x137c <vApplicationStackOverflowHook+0x6>
    137c:	00 d0       	rcall	.+0      	; 0x137e <vApplicationStackOverflowHook+0x8>
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	9a 83       	std	Y+2, r25	; 0x02
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	7c 83       	std	Y+4, r23	; 0x04
    1388:	6b 83       	std	Y+3, r22	; 0x03
	

}
    138a:	00 00       	nop
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	08 95       	ret

0000139a <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62

}
    13a2:	00 00       	nop
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	08 95       	ret

000013aa <main>:

//-----------------------------------------
int main(void)
{	
    13aa:	ef 92       	push	r14
    13ac:	ff 92       	push	r15
    13ae:	0f 93       	push	r16
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <main+0xc>
    13b6:	1f 92       	push	r1
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
	cli();
    13bc:	f8 94       	cli
	//
	init_board();
    13be:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
    13c2:	8b e2       	ldi	r24, 0x2B	; 43
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	2b e2       	ldi	r18, 0x2B	; 43
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	f9 01       	movw	r30, r18
    13cc:	20 81       	ld	r18, Z
    13ce:	2f 7b       	andi	r18, 0xBF	; 191
    13d0:	fc 01       	movw	r30, r24
    13d2:	20 83       	st	Z, r18
	
	//Tasks 
	
	BaseType_t t1 = xTaskCreate(serial_com_task, (const char *)"serial_com", 250, (void *)NULL, tskIDLE_PRIORITY+3, NULL);
    13d4:	e1 2c       	mov	r14, r1
    13d6:	f1 2c       	mov	r15, r1
    13d8:	03 e0       	ldi	r16, 0x03	; 3
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	4a ef       	ldi	r20, 0xFA	; 250
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	63 e5       	ldi	r22, 0x53	; 83
    13e4:	71 e0       	ldi	r23, 0x01	; 1
    13e6:	8e ec       	ldi	r24, 0xCE	; 206
    13e8:	9c e0       	ldi	r25, 0x0C	; 12
    13ea:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <xTaskCreate>
    13ee:	89 83       	std	Y+1, r24	; 0x01
	BaseType_t t2 = xTaskCreate(joystick_task, (const char *)"joystick", configMINIMAL_STACK_SIZE + 50, (void *)NULL, tskIDLE_PRIORITY+2, NULL);
    13f0:	e1 2c       	mov	r14, r1
    13f2:	f1 2c       	mov	r15, r1
    13f4:	02 e0       	ldi	r16, 0x02	; 2
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	47 e8       	ldi	r20, 0x87	; 135
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	6e e5       	ldi	r22, 0x5E	; 94
    1400:	71 e0       	ldi	r23, 0x01	; 1
    1402:	85 ee       	ldi	r24, 0xE5	; 229
    1404:	98 e0       	ldi	r25, 0x08	; 8
    1406:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <xTaskCreate>
    140a:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t t3 = xTaskCreate(game_renderer_task, (const char *)"game_rend", configMINIMAL_STACK_SIZE+50, frame_buf, tskIDLE_PRIORITY+4, NULL);
    140c:	e1 2c       	mov	r14, r1
    140e:	f1 2c       	mov	r15, r1
    1410:	04 e0       	ldi	r16, 0x04	; 4
    1412:	23 e0       	ldi	r18, 0x03	; 3
    1414:	31 e0       	ldi	r19, 0x01	; 1
    1416:	47 e8       	ldi	r20, 0x87	; 135
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	67 e6       	ldi	r22, 0x67	; 103
    141c:	71 e0       	ldi	r23, 0x01	; 1
    141e:	81 ee       	ldi	r24, 0xE1	; 225
    1420:	92 e0       	ldi	r25, 0x02	; 2
    1422:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <xTaskCreate>
    1426:	8b 83       	std	Y+3, r24	; 0x03

	// Start the display handler timer
	init_display_timer(handle_display);
    1428:	83 e9       	ldi	r24, 0x93	; 147
    142a:	99 e0       	ldi	r25, 0x09	; 9
    142c:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <init_display_timer>
	
	sei();
    1430:	78 94       	sei
	
	//Start the scheduler
	vTaskStartScheduler();
    1432:	0e 94 50 21 	call	0x42a0	; 0x42a0 <vTaskStartScheduler>
	
	//Should never reach here
	while (1)
	{

	}
    1436:	ff cf       	rjmp	.-2      	; 0x1436 <main+0x8c>

00001438 <compute_crc8>:
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	27 97       	sbiw	r28, 0x07	; 7
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	9e 83       	std	Y+6, r25	; 0x06
    144e:	8d 83       	std	Y+5, r24	; 0x05
    1450:	6f 83       	std	Y+7, r22	; 0x07
    1452:	19 82       	std	Y+1, r1	; 0x01
    1454:	1a 82       	std	Y+2, r1	; 0x02
    1456:	26 c0       	rjmp	.+76     	; 0x14a4 <compute_crc8+0x6c>
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	88 2f       	mov	r24, r24
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	2d 81       	ldd	r18, Y+5	; 0x05
    1460:	3e 81       	ldd	r19, Y+6	; 0x06
    1462:	82 0f       	add	r24, r18
    1464:	93 1f       	adc	r25, r19
    1466:	fc 01       	movw	r30, r24
    1468:	80 81       	ld	r24, Z
    146a:	99 81       	ldd	r25, Y+1	; 0x01
    146c:	89 27       	eor	r24, r25
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	1b 82       	std	Y+3, r1	; 0x03
    1472:	12 c0       	rjmp	.+36     	; 0x1498 <compute_crc8+0x60>
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	88 1f       	adc	r24, r24
    1478:	88 27       	eor	r24, r24
    147a:	88 1f       	adc	r24, r24
    147c:	8c 83       	std	Y+4, r24	; 0x04
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	88 0f       	add	r24, r24
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	8c 81       	ldd	r24, Y+4	; 0x04
    1486:	88 23       	and	r24, r24
    1488:	21 f0       	breq	.+8      	; 0x1492 <compute_crc8+0x5a>
    148a:	99 81       	ldd	r25, Y+1	; 0x01
    148c:	87 e0       	ldi	r24, 0x07	; 7
    148e:	89 27       	eor	r24, r25
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	8f 5f       	subi	r24, 0xFF	; 255
    1496:	8b 83       	std	Y+3, r24	; 0x03
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	88 30       	cpi	r24, 0x08	; 8
    149c:	58 f3       	brcs	.-42     	; 0x1474 <compute_crc8+0x3c>
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	8f 5f       	subi	r24, 0xFF	; 255
    14a2:	8a 83       	std	Y+2, r24	; 0x02
    14a4:	9a 81       	ldd	r25, Y+2	; 0x02
    14a6:	8f 81       	ldd	r24, Y+7	; 0x07
    14a8:	98 17       	cp	r25, r24
    14aa:	b0 f2       	brcs	.-84     	; 0x1458 <compute_crc8+0x20>
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	27 96       	adiw	r28, 0x07	; 7
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	08 95       	ret

000014c0 <unpack_data_frame>:
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	28 97       	sbiw	r28, 0x08	; 8
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	9d 83       	std	Y+5, r25	; 0x05
    14d6:	8c 83       	std	Y+4, r24	; 0x04
    14d8:	6e 83       	std	Y+6, r22	; 0x06
    14da:	58 87       	std	Y+8, r21	; 0x08
    14dc:	4f 83       	std	Y+7, r20	; 0x07
    14de:	8e 81       	ldd	r24, Y+6	; 0x06
    14e0:	84 30       	cpi	r24, 0x04	; 4
    14e2:	10 f4       	brcc	.+4      	; 0x14e8 <unpack_data_frame+0x28>
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	41 c0       	rjmp	.+130    	; 0x156a <unpack_data_frame+0xaa>
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	9d 81       	ldd	r25, Y+5	; 0x05
    14ec:	fc 01       	movw	r30, r24
    14ee:	80 81       	ld	r24, Z
    14f0:	0e 94 c1 0b 	call	0x1782	; 0x1782 <is_start_of_frame>
    14f4:	98 2f       	mov	r25, r24
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	89 27       	eor	r24, r25
    14fa:	88 23       	and	r24, r24
    14fc:	11 f0       	breq	.+4      	; 0x1502 <unpack_data_frame+0x42>
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	34 c0       	rjmp	.+104    	; 0x156a <unpack_data_frame+0xaa>
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	9d 81       	ldd	r25, Y+5	; 0x05
    1506:	6e 81       	ldd	r22, Y+6	; 0x06
    1508:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <get_frame_size>
    150c:	89 83       	std	Y+1, r24	; 0x01
    150e:	8c 81       	ldd	r24, Y+4	; 0x04
    1510:	9d 81       	ldd	r25, Y+5	; 0x05
    1512:	69 81       	ldd	r22, Y+1	; 0x01
    1514:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <is_CRC_valid>
    1518:	98 2f       	mov	r25, r24
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	89 27       	eor	r24, r25
    151e:	88 23       	and	r24, r24
    1520:	11 f0       	breq	.+4      	; 0x1526 <unpack_data_frame+0x66>
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	22 c0       	rjmp	.+68     	; 0x156a <unpack_data_frame+0xaa>
    1526:	8c 81       	ldd	r24, Y+4	; 0x04
    1528:	9d 81       	ldd	r25, Y+5	; 0x05
    152a:	fc 01       	movw	r30, r24
    152c:	81 81       	ldd	r24, Z+1	; 0x01
    152e:	8a 83       	std	Y+2, r24	; 0x02
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	8b 83       	std	Y+3, r24	; 0x03
    1534:	99 81       	ldd	r25, Y+1	; 0x01
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	f9 2f       	mov	r31, r25
    153a:	f8 1b       	sub	r31, r24
    153c:	8f 2f       	mov	r24, r31
    153e:	6f ef       	ldi	r22, 0xFF	; 255
    1540:	68 0f       	add	r22, r24
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	88 2f       	mov	r24, r24
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	2c 81       	ldd	r18, Y+4	; 0x04
    154a:	3d 81       	ldd	r19, Y+5	; 0x05
    154c:	a9 01       	movw	r20, r18
    154e:	48 0f       	add	r20, r24
    1550:	59 1f       	adc	r21, r25
    1552:	8c 81       	ldd	r24, Y+4	; 0x04
    1554:	9d 81       	ldd	r25, Y+5	; 0x05
    1556:	26 2f       	mov	r18, r22
    1558:	6e 81       	ldd	r22, Y+6	; 0x06
    155a:	0e 94 0d 01 	call	0x21a	; 0x21a <byte_unstuff>
    155e:	28 2f       	mov	r18, r24
    1560:	8f 81       	ldd	r24, Y+7	; 0x07
    1562:	98 85       	ldd	r25, Y+8	; 0x08
    1564:	fc 01       	movw	r30, r24
    1566:	20 83       	st	Z, r18
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	28 96       	adiw	r28, 0x08	; 8
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	08 95       	ret

0000157c <get_data_frame>:
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	2c 97       	sbiw	r28, 0x0c	; 12
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	98 87       	std	Y+8, r25	; 0x08
    1592:	8f 83       	std	Y+7, r24	; 0x07
    1594:	69 87       	std	Y+9, r22	; 0x09
    1596:	5b 87       	std	Y+11, r21	; 0x0b
    1598:	4a 87       	std	Y+10, r20	; 0x0a
    159a:	2c 87       	std	Y+12, r18	; 0x0c
    159c:	8f 81       	ldd	r24, Y+7	; 0x07
    159e:	98 85       	ldd	r25, Y+8	; 0x08
    15a0:	9b 83       	std	Y+3, r25	; 0x03
    15a2:	8a 83       	std	Y+2, r24	; 0x02
    15a4:	89 85       	ldd	r24, Y+9	; 0x09
    15a6:	88 2f       	mov	r24, r24
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <pvPortMalloc>
    15ae:	9d 83       	std	Y+5, r25	; 0x05
    15b0:	8c 83       	std	Y+4, r24	; 0x04
    15b2:	8c 81       	ldd	r24, Y+4	; 0x04
    15b4:	9d 81       	ldd	r25, Y+5	; 0x05
    15b6:	89 2b       	or	r24, r25
    15b8:	11 f4       	brne	.+4      	; 0x15be <get_data_frame+0x42>
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	7f c0       	rjmp	.+254    	; 0x16bc <get_data_frame+0x140>
    15be:	1e 82       	std	Y+6, r1	; 0x06
    15c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    15c2:	28 2f       	mov	r18, r24
    15c4:	22 0f       	add	r18, r18
    15c6:	4c 81       	ldd	r20, Y+4	; 0x04
    15c8:	5d 81       	ldd	r21, Y+5	; 0x05
    15ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    15cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    15ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    15d0:	0e 94 5d 00 	call	0xba	; 0xba <byte_stuff>
    15d4:	8e 83       	std	Y+6, r24	; 0x06
    15d6:	8e 81       	ldd	r24, Y+6	; 0x06
    15d8:	88 23       	and	r24, r24
    15da:	09 f4       	brne	.+2      	; 0x15de <get_data_frame+0x62>
    15dc:	6a c0       	rjmp	.+212    	; 0x16b2 <get_data_frame+0x136>
    15de:	89 85       	ldd	r24, Y+9	; 0x09
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	8e 81       	ldd	r24, Y+6	; 0x06
    15e6:	88 2f       	mov	r24, r24
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	04 96       	adiw	r24, 0x04	; 4
    15ec:	28 17       	cp	r18, r24
    15ee:	39 07       	cpc	r19, r25
    15f0:	08 f4       	brcc	.+2      	; 0x15f4 <get_data_frame+0x78>
    15f2:	5f c0       	rjmp	.+190    	; 0x16b2 <get_data_frame+0x136>
    15f4:	8f 81       	ldd	r24, Y+7	; 0x07
    15f6:	98 85       	ldd	r25, Y+8	; 0x08
    15f8:	9c 01       	movw	r18, r24
    15fa:	2f 5f       	subi	r18, 0xFF	; 255
    15fc:	3f 4f       	sbci	r19, 0xFF	; 255
    15fe:	38 87       	std	Y+8, r19	; 0x08
    1600:	2f 83       	std	Y+7, r18	; 0x07
    1602:	2f ef       	ldi	r18, 0xFF	; 255
    1604:	fc 01       	movw	r30, r24
    1606:	20 83       	st	Z, r18
    1608:	8f 81       	ldd	r24, Y+7	; 0x07
    160a:	98 85       	ldd	r25, Y+8	; 0x08
    160c:	9c 01       	movw	r18, r24
    160e:	2f 5f       	subi	r18, 0xFF	; 255
    1610:	3f 4f       	sbci	r19, 0xFF	; 255
    1612:	38 87       	std	Y+8, r19	; 0x08
    1614:	2f 83       	std	Y+7, r18	; 0x07
    1616:	21 e0       	ldi	r18, 0x01	; 1
    1618:	fc 01       	movw	r30, r24
    161a:	20 83       	st	Z, r18
    161c:	8f 81       	ldd	r24, Y+7	; 0x07
    161e:	98 85       	ldd	r25, Y+8	; 0x08
    1620:	9c 01       	movw	r18, r24
    1622:	2f 5f       	subi	r18, 0xFF	; 255
    1624:	3f 4f       	sbci	r19, 0xFF	; 255
    1626:	38 87       	std	Y+8, r19	; 0x08
    1628:	2f 83       	std	Y+7, r18	; 0x07
    162a:	2e 81       	ldd	r18, Y+6	; 0x06
    162c:	2c 5f       	subi	r18, 0xFC	; 252
    162e:	fc 01       	movw	r30, r24
    1630:	20 83       	st	Z, r18
    1632:	19 82       	std	Y+1, r1	; 0x01
    1634:	15 c0       	rjmp	.+42     	; 0x1660 <get_data_frame+0xe4>
    1636:	8f 81       	ldd	r24, Y+7	; 0x07
    1638:	98 85       	ldd	r25, Y+8	; 0x08
    163a:	9c 01       	movw	r18, r24
    163c:	2f 5f       	subi	r18, 0xFF	; 255
    163e:	3f 4f       	sbci	r19, 0xFF	; 255
    1640:	38 87       	std	Y+8, r19	; 0x08
    1642:	2f 83       	std	Y+7, r18	; 0x07
    1644:	29 81       	ldd	r18, Y+1	; 0x01
    1646:	22 2f       	mov	r18, r18
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	4c 81       	ldd	r20, Y+4	; 0x04
    164c:	5d 81       	ldd	r21, Y+5	; 0x05
    164e:	24 0f       	add	r18, r20
    1650:	35 1f       	adc	r19, r21
    1652:	f9 01       	movw	r30, r18
    1654:	20 81       	ld	r18, Z
    1656:	fc 01       	movw	r30, r24
    1658:	20 83       	st	Z, r18
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	8f 5f       	subi	r24, 0xFF	; 255
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	99 81       	ldd	r25, Y+1	; 0x01
    1662:	8e 81       	ldd	r24, Y+6	; 0x06
    1664:	98 17       	cp	r25, r24
    1666:	38 f3       	brcs	.-50     	; 0x1636 <get_data_frame+0xba>
    1668:	8c 81       	ldd	r24, Y+4	; 0x04
    166a:	9d 81       	ldd	r25, Y+5	; 0x05
    166c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <vPortFree>
    1670:	2f 81       	ldd	r18, Y+7	; 0x07
    1672:	38 85       	ldd	r19, Y+8	; 0x08
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	9b 81       	ldd	r25, Y+3	; 0x03
    1678:	a9 01       	movw	r20, r18
    167a:	48 1b       	sub	r20, r24
    167c:	59 0b       	sbc	r21, r25
    167e:	ca 01       	movw	r24, r20
    1680:	28 2f       	mov	r18, r24
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	9b 81       	ldd	r25, Y+3	; 0x03
    1686:	62 2f       	mov	r22, r18
    1688:	0e 94 1c 0a 	call	0x1438	; 0x1438 <compute_crc8>
    168c:	28 2f       	mov	r18, r24
    168e:	8f 81       	ldd	r24, Y+7	; 0x07
    1690:	98 85       	ldd	r25, Y+8	; 0x08
    1692:	fc 01       	movw	r30, r24
    1694:	20 83       	st	Z, r18
    1696:	8f 81       	ldd	r24, Y+7	; 0x07
    1698:	98 85       	ldd	r25, Y+8	; 0x08
    169a:	01 96       	adiw	r24, 0x01	; 1
    169c:	98 87       	std	Y+8, r25	; 0x08
    169e:	8f 83       	std	Y+7, r24	; 0x07
    16a0:	2f 81       	ldd	r18, Y+7	; 0x07
    16a2:	38 85       	ldd	r19, Y+8	; 0x08
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	9b 81       	ldd	r25, Y+3	; 0x03
    16a8:	a9 01       	movw	r20, r18
    16aa:	48 1b       	sub	r20, r24
    16ac:	59 0b       	sbc	r21, r25
    16ae:	ca 01       	movw	r24, r20
    16b0:	05 c0       	rjmp	.+10     	; 0x16bc <get_data_frame+0x140>
    16b2:	8c 81       	ldd	r24, Y+4	; 0x04
    16b4:	9d 81       	ldd	r25, Y+5	; 0x05
    16b6:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <vPortFree>
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	2c 96       	adiw	r28, 0x0c	; 12
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
    16cc:	08 95       	ret

000016ce <get_acknowledge_frame>:
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <get_acknowledge_frame+0x6>
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <get_acknowledge_frame+0x8>
    16d6:	1f 92       	push	r1
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	9c 83       	std	Y+4, r25	; 0x04
    16de:	8b 83       	std	Y+3, r24	; 0x03
    16e0:	6d 83       	std	Y+5, r22	; 0x05
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	9a 83       	std	Y+2, r25	; 0x02
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	8d 81       	ldd	r24, Y+5	; 0x05
    16ec:	84 30       	cpi	r24, 0x04	; 4
    16ee:	08 f4       	brcc	.+2      	; 0x16f2 <get_acknowledge_frame+0x24>
    16f0:	3f c0       	rjmp	.+126    	; 0x1770 <get_acknowledge_frame+0xa2>
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	9c 01       	movw	r18, r24
    16f8:	2f 5f       	subi	r18, 0xFF	; 255
    16fa:	3f 4f       	sbci	r19, 0xFF	; 255
    16fc:	3c 83       	std	Y+4, r19	; 0x04
    16fe:	2b 83       	std	Y+3, r18	; 0x03
    1700:	2f ef       	ldi	r18, 0xFF	; 255
    1702:	fc 01       	movw	r30, r24
    1704:	20 83       	st	Z, r18
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	9c 01       	movw	r18, r24
    170c:	2f 5f       	subi	r18, 0xFF	; 255
    170e:	3f 4f       	sbci	r19, 0xFF	; 255
    1710:	3c 83       	std	Y+4, r19	; 0x04
    1712:	2b 83       	std	Y+3, r18	; 0x03
    1714:	22 e0       	ldi	r18, 0x02	; 2
    1716:	fc 01       	movw	r30, r24
    1718:	20 83       	st	Z, r18
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	9c 81       	ldd	r25, Y+4	; 0x04
    171e:	9c 01       	movw	r18, r24
    1720:	2f 5f       	subi	r18, 0xFF	; 255
    1722:	3f 4f       	sbci	r19, 0xFF	; 255
    1724:	3c 83       	std	Y+4, r19	; 0x04
    1726:	2b 83       	std	Y+3, r18	; 0x03
    1728:	24 e0       	ldi	r18, 0x04	; 4
    172a:	fc 01       	movw	r30, r24
    172c:	20 83       	st	Z, r18
    172e:	2b 81       	ldd	r18, Y+3	; 0x03
    1730:	3c 81       	ldd	r19, Y+4	; 0x04
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	9a 81       	ldd	r25, Y+2	; 0x02
    1736:	a9 01       	movw	r20, r18
    1738:	48 1b       	sub	r20, r24
    173a:	59 0b       	sbc	r21, r25
    173c:	ca 01       	movw	r24, r20
    173e:	28 2f       	mov	r18, r24
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	9a 81       	ldd	r25, Y+2	; 0x02
    1744:	62 2f       	mov	r22, r18
    1746:	0e 94 1c 0a 	call	0x1438	; 0x1438 <compute_crc8>
    174a:	28 2f       	mov	r18, r24
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	fc 01       	movw	r30, r24
    1752:	20 83       	st	Z, r18
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	9c 81       	ldd	r25, Y+4	; 0x04
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	9c 83       	std	Y+4, r25	; 0x04
    175c:	8b 83       	std	Y+3, r24	; 0x03
    175e:	2b 81       	ldd	r18, Y+3	; 0x03
    1760:	3c 81       	ldd	r19, Y+4	; 0x04
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	9a 81       	ldd	r25, Y+2	; 0x02
    1766:	a9 01       	movw	r20, r18
    1768:	48 1b       	sub	r20, r24
    176a:	59 0b       	sbc	r21, r25
    176c:	ca 01       	movw	r24, r20
    176e:	01 c0       	rjmp	.+2      	; 0x1772 <get_acknowledge_frame+0xa4>
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	08 95       	ret

00001782 <is_start_of_frame>:
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	1f 92       	push	r1
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	99 81       	ldd	r25, Y+1	; 0x01
    1792:	9f 3f       	cpi	r25, 0xFF	; 255
    1794:	09 f0       	breq	.+2      	; 0x1798 <is_start_of_frame+0x16>
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	0f 90       	pop	r0
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	08 95       	ret

000017a0 <is_CRC_valid>:
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <is_CRC_valid+0x6>
    17a6:	1f 92       	push	r1
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	9a 83       	std	Y+2, r25	; 0x02
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	6b 83       	std	Y+3, r22	; 0x03
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	9a 81       	ldd	r25, Y+2	; 0x02
    17b6:	6b 81       	ldd	r22, Y+3	; 0x03
    17b8:	0e 94 1c 0a 	call	0x1438	; 0x1438 <compute_crc8>
    17bc:	98 2f       	mov	r25, r24
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	99 23       	and	r25, r25
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <is_CRC_valid+0x26>
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	08 95       	ret

000017d2 <get_frame_size>:
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	00 d0       	rcall	.+0      	; 0x17d8 <get_frame_size+0x6>
    17d8:	1f 92       	push	r1
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	9a 83       	std	Y+2, r25	; 0x02
    17e0:	89 83       	std	Y+1, r24	; 0x01
    17e2:	6b 83       	std	Y+3, r22	; 0x03
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	83 30       	cpi	r24, 0x03	; 3
    17e8:	10 f4       	brcc	.+4      	; 0x17ee <get_frame_size+0x1c>
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	16 c0       	rjmp	.+44     	; 0x181a <get_frame_size+0x48>
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	9a 81       	ldd	r25, Y+2	; 0x02
    17f2:	fc 01       	movw	r30, r24
    17f4:	80 81       	ld	r24, Z
    17f6:	8f 3f       	cpi	r24, 0xFF	; 255
    17f8:	11 f0       	breq	.+4      	; 0x17fe <get_frame_size+0x2c>
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	0e c0       	rjmp	.+28     	; 0x181a <get_frame_size+0x48>
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
    1802:	01 96       	adiw	r24, 0x01	; 1
    1804:	9a 83       	std	Y+2, r25	; 0x02
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	9a 81       	ldd	r25, Y+2	; 0x02
    180c:	01 96       	adiw	r24, 0x01	; 1
    180e:	9a 83       	std	Y+2, r25	; 0x02
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	9a 81       	ldd	r25, Y+2	; 0x02
    1816:	fc 01       	movw	r30, r24
    1818:	80 81       	ld	r24, Z
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	08 95       	ret

00001826 <is_ack_frame>:
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	00 d0       	rcall	.+0      	; 0x182c <is_ack_frame+0x6>
    182c:	1f 92       	push	r1
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	9a 83       	std	Y+2, r25	; 0x02
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	6b 83       	std	Y+3, r22	; 0x03
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	83 30       	cpi	r24, 0x03	; 3
    183c:	10 f4       	brcc	.+4      	; 0x1842 <is_ack_frame+0x1c>
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	11 c0       	rjmp	.+34     	; 0x1864 <is_ack_frame+0x3e>
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	9a 81       	ldd	r25, Y+2	; 0x02
    1846:	01 96       	adiw	r24, 0x01	; 1
    1848:	9a 83       	std	Y+2, r25	; 0x02
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	9a 81       	ldd	r25, Y+2	; 0x02
    1850:	fc 01       	movw	r30, r24
    1852:	80 81       	ld	r24, Z
    1854:	88 2f       	mov	r24, r24
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	82 70       	andi	r24, 0x02	; 2
    185a:	99 27       	eor	r25, r25
    185c:	21 e0       	ldi	r18, 0x01	; 1
    185e:	89 2b       	or	r24, r25
    1860:	09 f4       	brne	.+2      	; 0x1864 <is_ack_frame+0x3e>
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	82 2f       	mov	r24, r18
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	08 95       	ret

00001872 <get_frame_from_queue>:
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	28 97       	sbiw	r28, 0x08	; 8
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	9b 83       	std	Y+3, r25	; 0x03
    1888:	8a 83       	std	Y+2, r24	; 0x02
    188a:	7d 83       	std	Y+5, r23	; 0x05
    188c:	6c 83       	std	Y+4, r22	; 0x04
    188e:	4e 83       	std	Y+6, r20	; 0x06
    1890:	38 87       	std	Y+8, r19	; 0x08
    1892:	2f 83       	std	Y+7, r18	; 0x07
    1894:	8e 81       	ldd	r24, Y+6	; 0x06
    1896:	84 30       	cpi	r24, 0x04	; 4
    1898:	08 f0       	brcs	.+2      	; 0x189c <get_frame_from_queue+0x2a>
    189a:	6f c0       	rjmp	.+222    	; 0x197a <get_frame_from_queue+0x108>
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	75 c0       	rjmp	.+234    	; 0x198a <get_frame_from_queue+0x118>
    18a0:	8f 81       	ldd	r24, Y+7	; 0x07
    18a2:	98 85       	ldd	r25, Y+8	; 0x08
    18a4:	fc 01       	movw	r30, r24
    18a6:	80 81       	ld	r24, Z
    18a8:	88 2f       	mov	r24, r24
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	2c 81       	ldd	r18, Y+4	; 0x04
    18ae:	3d 81       	ldd	r19, Y+5	; 0x05
    18b0:	b9 01       	movw	r22, r18
    18b2:	68 0f       	add	r22, r24
    18b4:	79 1f       	adc	r23, r25
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	40 e0       	ldi	r20, 0x00	; 0
    18be:	50 e0       	ldi	r21, 0x00	; 0
    18c0:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <xQueueGenericReceive>
    18c4:	88 23       	and	r24, r24
    18c6:	11 f4       	brne	.+4      	; 0x18cc <get_frame_from_queue+0x5a>
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	5f c0       	rjmp	.+190    	; 0x198a <get_frame_from_queue+0x118>
    18cc:	8f 81       	ldd	r24, Y+7	; 0x07
    18ce:	98 85       	ldd	r25, Y+8	; 0x08
    18d0:	fc 01       	movw	r30, r24
    18d2:	80 81       	ld	r24, Z
    18d4:	88 23       	and	r24, r24
    18d6:	61 f4       	brne	.+24     	; 0x18f0 <get_frame_from_queue+0x7e>
    18d8:	8c 81       	ldd	r24, Y+4	; 0x04
    18da:	9d 81       	ldd	r25, Y+5	; 0x05
    18dc:	fc 01       	movw	r30, r24
    18de:	80 81       	ld	r24, Z
    18e0:	0e 94 c1 0b 	call	0x1782	; 0x1782 <is_start_of_frame>
    18e4:	98 2f       	mov	r25, r24
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	89 27       	eor	r24, r25
    18ea:	88 23       	and	r24, r24
    18ec:	09 f0       	breq	.+2      	; 0x18f0 <get_frame_from_queue+0x7e>
    18ee:	45 c0       	rjmp	.+138    	; 0x197a <get_frame_from_queue+0x108>
    18f0:	8f 81       	ldd	r24, Y+7	; 0x07
    18f2:	98 85       	ldd	r25, Y+8	; 0x08
    18f4:	fc 01       	movw	r30, r24
    18f6:	80 81       	ld	r24, Z
    18f8:	21 e0       	ldi	r18, 0x01	; 1
    18fa:	28 0f       	add	r18, r24
    18fc:	8f 81       	ldd	r24, Y+7	; 0x07
    18fe:	98 85       	ldd	r25, Y+8	; 0x08
    1900:	fc 01       	movw	r30, r24
    1902:	20 83       	st	Z, r18
    1904:	8f 81       	ldd	r24, Y+7	; 0x07
    1906:	98 85       	ldd	r25, Y+8	; 0x08
    1908:	fc 01       	movw	r30, r24
    190a:	80 81       	ld	r24, Z
    190c:	83 30       	cpi	r24, 0x03	; 3
    190e:	a8 f1       	brcs	.+106    	; 0x197a <get_frame_from_queue+0x108>
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
    1912:	9d 81       	ldd	r25, Y+5	; 0x05
    1914:	63 e0       	ldi	r22, 0x03	; 3
    1916:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <get_frame_size>
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	9e 81       	ldd	r25, Y+6	; 0x06
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	98 17       	cp	r25, r24
    1922:	10 f5       	brcc	.+68     	; 0x1968 <get_frame_from_queue+0xf6>
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	31 c0       	rjmp	.+98     	; 0x198a <get_frame_from_queue+0x118>
    1928:	8f 81       	ldd	r24, Y+7	; 0x07
    192a:	98 85       	ldd	r25, Y+8	; 0x08
    192c:	fc 01       	movw	r30, r24
    192e:	80 81       	ld	r24, Z
    1930:	88 2f       	mov	r24, r24
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	2c 81       	ldd	r18, Y+4	; 0x04
    1936:	3d 81       	ldd	r19, Y+5	; 0x05
    1938:	b9 01       	movw	r22, r18
    193a:	68 0f       	add	r22, r24
    193c:	79 1f       	adc	r23, r25
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	9b 81       	ldd	r25, Y+3	; 0x03
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <xQueueGenericReceive>
    194c:	88 23       	and	r24, r24
    194e:	11 f4       	brne	.+4      	; 0x1954 <get_frame_from_queue+0xe2>
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	1b c0       	rjmp	.+54     	; 0x198a <get_frame_from_queue+0x118>
    1954:	8f 81       	ldd	r24, Y+7	; 0x07
    1956:	98 85       	ldd	r25, Y+8	; 0x08
    1958:	fc 01       	movw	r30, r24
    195a:	80 81       	ld	r24, Z
    195c:	21 e0       	ldi	r18, 0x01	; 1
    195e:	28 0f       	add	r18, r24
    1960:	8f 81       	ldd	r24, Y+7	; 0x07
    1962:	98 85       	ldd	r25, Y+8	; 0x08
    1964:	fc 01       	movw	r30, r24
    1966:	20 83       	st	Z, r18
    1968:	8f 81       	ldd	r24, Y+7	; 0x07
    196a:	98 85       	ldd	r25, Y+8	; 0x08
    196c:	fc 01       	movw	r30, r24
    196e:	90 81       	ld	r25, Z
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	98 17       	cp	r25, r24
    1974:	c8 f2       	brcs	.-78     	; 0x1928 <get_frame_from_queue+0xb6>
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	08 c0       	rjmp	.+16     	; 0x198a <get_frame_from_queue+0x118>
    197a:	8f 81       	ldd	r24, Y+7	; 0x07
    197c:	98 85       	ldd	r25, Y+8	; 0x08
    197e:	fc 01       	movw	r30, r24
    1980:	90 81       	ld	r25, Z
    1982:	8e 81       	ldd	r24, Y+6	; 0x06
    1984:	89 17       	cp	r24, r25
    1986:	08 f0       	brcs	.+2      	; 0x198a <get_frame_from_queue+0x118>
    1988:	8b cf       	rjmp	.-234    	; 0x18a0 <get_frame_from_queue+0x2e>
    198a:	28 96       	adiw	r28, 0x08	; 8
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	08 95       	ret

0000199c <serial_com_task>:
static TickType_t last_frame_time = 0;
static uint8_t ack_timeouts = 0;


void serial_com_task(void *pvParameters)
{
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	c1 57       	subi	r28, 0x71	; 113
    19a6:	d1 09       	sbc	r29, r1
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	9e 01       	movw	r18, r28
    19b4:	20 59       	subi	r18, 0x90	; 144
    19b6:	3f 4f       	sbci	r19, 0xFF	; 255
    19b8:	f9 01       	movw	r30, r18
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	80 83       	st	Z, r24
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	//vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
	#endif

	com_send_frame_buffer = xQueueCreate(COM_SEND_QUEUE_SIZE, sizeof(uint8_t));
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	61 e0       	ldi	r22, 0x01	; 1
    19c2:	84 e6       	ldi	r24, 0x64	; 100
    19c4:	0e 94 11 1a 	call	0x3422	; 0x3422 <xQueueGenericCreate>
    19c8:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <com_send_frame_buffer+0x1>
    19cc:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <com_send_frame_buffer>
	com_send_queue_add_mutex = xSemaphoreCreateMutex();		//should be semphores
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	0e 94 ca 1a 	call	0x3594	; 0x3594 <xQueueCreateMutex>
    19d6:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <com_send_queue_add_mutex+0x1>
    19da:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <com_send_queue_add_mutex>
	_x_com_received_chars_queue = xQueueCreate( _COM_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
    19de:	8e e1       	ldi	r24, 0x1E	; 30
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	61 e0       	ldi	r22, 0x01	; 1
    19e4:	0e 94 11 1a 	call	0x3422	; 0x3422 <xQueueGenericCreate>
    19e8:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <_x_com_received_chars_queue+0x1>
    19ec:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <_x_com_received_chars_queue>
	init_com(_x_com_received_chars_queue);
    19f0:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <_x_com_received_chars_queue>
    19f4:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <_x_com_received_chars_queue+0x1>
    19f8:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <init_com>

	
	uint8_t frame[MAX_FRAME_SIZE];
	uint8_t frame_size = 0;
    19fc:	ce 01       	movw	r24, r28
    19fe:	88 59       	subi	r24, 0x98	; 152
    1a00:	9f 4f       	sbci	r25, 0xFF	; 255
    1a02:	fc 01       	movw	r30, r24
    1a04:	10 82       	st	Z, r1

	TickType_t serial_com_task_lastwake = xTaskGetTickCount();
    1a06:	0e 94 29 22 	call	0x4452	; 0x4452 <xTaskGetTickCount>
    1a0a:	9c 01       	movw	r18, r24
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	87 59       	subi	r24, 0x97	; 151
    1a10:	9f 4f       	sbci	r25, 0xFF	; 255
    1a12:	fc 01       	movw	r30, r24
    1a14:	31 83       	std	Z+1, r19	; 0x01
    1a16:	20 83       	st	Z, r18
	
	while(1)
	{
		//UBaseType_t stackUsage = uxTaskGetStackHighWaterMark(NULL);
		//Set task period
		vTaskDelayUntil(&serial_com_task_lastwake, SERIAL_COM_TASK_PERIOD);
    1a18:	ce 01       	movw	r24, r28
    1a1a:	87 59       	subi	r24, 0x97	; 151
    1a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1e:	69 e1       	ldi	r22, 0x19	; 25
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	0e 94 b3 20 	call	0x4166	; 0x4166 <vTaskDelayUntil>
		
		//Actions:
		//Receive frames
		if(get_frame_from_queue(_x_com_received_chars_queue, frame, MAX_FRAME_SIZE, &frame_size))
    1a26:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <_x_com_received_chars_queue>
    1a2a:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <_x_com_received_chars_queue+0x1>
    1a2e:	9e 01       	movw	r18, r28
    1a30:	28 59       	subi	r18, 0x98	; 152
    1a32:	3f 4f       	sbci	r19, 0xFF	; 255
    1a34:	be 01       	movw	r22, r28
    1a36:	6c 5f       	subi	r22, 0xFC	; 252
    1a38:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3a:	44 e6       	ldi	r20, 0x64	; 100
    1a3c:	0e 94 39 0c 	call	0x1872	; 0x1872 <get_frame_from_queue>
    1a40:	88 23       	and	r24, r24
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <serial_com_task+0xaa>
    1a44:	78 c0       	rjmp	.+240    	; 0x1b36 <serial_com_task+0x19a>
		{
			uint8_t data_length = 0;
    1a46:	ce 01       	movw	r24, r28
    1a48:	85 59       	subi	r24, 0x95	; 149
    1a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	10 82       	st	Z, r1
			Frame_type_t type = unpack_data_frame(frame, MAX_FRAME_SIZE, &data_length);
    1a50:	9e 01       	movw	r18, r28
    1a52:	25 59       	subi	r18, 0x95	; 149
    1a54:	3f 4f       	sbci	r19, 0xFF	; 255
    1a56:	ce 01       	movw	r24, r28
    1a58:	04 96       	adiw	r24, 0x04	; 4
    1a5a:	a9 01       	movw	r20, r18
    1a5c:	64 e6       	ldi	r22, 0x64	; 100
    1a5e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <unpack_data_frame>
    1a62:	8a 83       	std	Y+2, r24	; 0x02
			if (type == ACK)
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	82 30       	cpi	r24, 0x02	; 2
    1a68:	51 f4       	brne	.+20     	; 0x1a7e <serial_com_task+0xe2>
			{
				//Ready to get the next out-frame from queue
				RTS = true;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <RTS>
				last_sent_frame[0] = 0;
    1a70:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <last_sent_frame>
				last_sent_frame_size = 0;
    1a74:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <last_sent_frame_size>
				ack_timeouts = 0;
    1a78:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <ack_timeouts>
    1a7c:	56 c0       	rjmp	.+172    	; 0x1b2a <serial_com_task+0x18e>
			}
			else if(type == DATA)
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	81 30       	cpi	r24, 0x01	; 1
    1a82:	09 f0       	breq	.+2      	; 0x1a86 <serial_com_task+0xea>
    1a84:	4f c0       	rjmp	.+158    	; 0x1b24 <serial_com_task+0x188>
			{
				uint8_t ack_frame[LINK_FLAG_SIZE + HEADER_SIZE + CRC_SIZE];
				uint8_t ack_frame_size = 0;
    1a86:	1b 82       	std	Y+3, r1	; 0x03
				if ((ack_frame_size = get_acknowledge_frame(ack_frame, sizeof(ack_frame))))
    1a88:	ce 01       	movw	r24, r28
    1a8a:	84 59       	subi	r24, 0x94	; 148
    1a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8e:	64 e0       	ldi	r22, 0x04	; 4
    1a90:	0e 94 67 0b 	call	0x16ce	; 0x16ce <get_acknowledge_frame>
    1a94:	8b 83       	std	Y+3, r24	; 0x03
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	88 23       	and	r24, r24
    1a9a:	b9 f1       	breq	.+110    	; 0x1b0a <serial_com_task+0x16e>
				{
					if(xSemaphoreTake(com_send_queue_add_mutex, 50))
    1a9c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <com_send_queue_add_mutex>
    1aa0:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <com_send_queue_add_mutex+0x1>
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	42 e3       	ldi	r20, 0x32	; 50
    1aa8:	50 e0       	ldi	r21, 0x00	; 0
    1aaa:	60 e0       	ldi	r22, 0x00	; 0
    1aac:	70 e0       	ldi	r23, 0x00	; 0
    1aae:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <xQueueGenericReceive>
    1ab2:	88 23       	and	r24, r24
    1ab4:	f9 f0       	breq	.+62     	; 0x1af4 <serial_com_task+0x158>
					for (uint8_t i = 0; i < ack_frame_size; i++)
    1ab6:	19 82       	std	Y+1, r1	; 0x01
    1ab8:	17 c0       	rjmp	.+46     	; 0x1ae8 <serial_com_task+0x14c>
					{
						if (!xQueueSend(com_send_frame_buffer, ack_frame+i, 0))
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	88 2f       	mov	r24, r24
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	9e 01       	movw	r18, r28
    1ac2:	24 59       	subi	r18, 0x94	; 148
    1ac4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac6:	b9 01       	movw	r22, r18
    1ac8:	68 0f       	add	r22, r24
    1aca:	79 1f       	adc	r23, r25
    1acc:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <com_send_frame_buffer>
    1ad0:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <com_send_frame_buffer+0x1>
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	40 e0       	ldi	r20, 0x00	; 0
    1ad8:	50 e0       	ldi	r21, 0x00	; 0
    1ada:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <xQueueGenericSend>
    1ade:	88 23       	and	r24, r24
    1ae0:	41 f0       	breq	.+16     	; 0x1af2 <serial_com_task+0x156>
				uint8_t ack_frame[LINK_FLAG_SIZE + HEADER_SIZE + CRC_SIZE];
				uint8_t ack_frame_size = 0;
				if ((ack_frame_size = get_acknowledge_frame(ack_frame, sizeof(ack_frame))))
				{
					if(xSemaphoreTake(com_send_queue_add_mutex, 50))
					for (uint8_t i = 0; i < ack_frame_size; i++)
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	8f 5f       	subi	r24, 0xFF	; 255
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	99 81       	ldd	r25, Y+1	; 0x01
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	98 17       	cp	r25, r24
    1aee:	28 f3       	brcs	.-54     	; 0x1aba <serial_com_task+0x11e>
    1af0:	01 c0       	rjmp	.+2      	; 0x1af4 <serial_com_task+0x158>
					{
						if (!xQueueSend(com_send_frame_buffer, ack_frame+i, 0))
							break;
    1af2:	00 00       	nop
					}
					xSemaphoreGive(com_send_queue_add_mutex);
    1af4:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <com_send_queue_add_mutex>
    1af8:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <com_send_queue_add_mutex+0x1>
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	40 e0       	ldi	r20, 0x00	; 0
    1b00:	50 e0       	ldi	r21, 0x00	; 0
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <xQueueGenericSend>
				}
				//now handle the received data:
				handle_serial_input(frame, data_length);
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	85 59       	subi	r24, 0x95	; 149
    1b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b10:	fc 01       	movw	r30, r24
    1b12:	80 81       	ld	r24, Z
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	ce 01       	movw	r24, r28
    1b1a:	04 96       	adiw	r24, 0x04	; 4
    1b1c:	b9 01       	movw	r22, r18
    1b1e:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <handle_serial_input>
    1b22:	03 c0       	rjmp	.+6      	; 0x1b2a <serial_com_task+0x18e>
			}
			else
			{
				RTS = true; //breakpoint
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <RTS>

			}
			//Make ready for next frame
			frame[0] = 0;
    1b2a:	1c 82       	std	Y+4, r1	; 0x04
			frame_size = 0;
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	88 59       	subi	r24, 0x98	; 152
    1b30:	9f 4f       	sbci	r25, 0xFF	; 255
    1b32:	fc 01       	movw	r30, r24
    1b34:	10 82       	st	Z, r1
		}


		if(RTS)
    1b36:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <RTS>
    1b3a:	88 23       	and	r24, r24
    1b3c:	89 f0       	breq	.+34     	; 0x1b60 <serial_com_task+0x1c4>
		{
			//Get the next frame
			if(get_frame_from_queue(com_send_frame_buffer, last_sent_frame, MAX_FRAME_SIZE, &last_sent_frame_size))
    1b3e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <com_send_frame_buffer>
    1b42:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <com_send_frame_buffer+0x1>
    1b46:	21 ef       	ldi	r18, 0xF1	; 241
    1b48:	31 e0       	ldi	r19, 0x01	; 1
    1b4a:	44 e6       	ldi	r20, 0x64	; 100
    1b4c:	6d e8       	ldi	r22, 0x8D	; 141
    1b4e:	71 e0       	ldi	r23, 0x01	; 1
    1b50:	0e 94 39 0c 	call	0x1872	; 0x1872 <get_frame_from_queue>
    1b54:	88 23       	and	r24, r24
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <serial_com_task+0x1be>
    1b58:	5f cf       	rjmp	.-322    	; 0x1a18 <serial_com_task+0x7c>
			{
				send_current_frame();
    1b5a:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <send_current_frame>
    1b5e:	5c cf       	rjmp	.-328    	; 0x1a18 <serial_com_task+0x7c>
			}
		}
		else
		{
			if ((xTaskGetTickCount() - last_frame_time) >= ACK_TIMEOUT)
    1b60:	0e 94 29 22 	call	0x4452	; 0x4452 <xTaskGetTickCount>
    1b64:	9c 01       	movw	r18, r24
    1b66:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <last_frame_time>
    1b6a:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <last_frame_time+0x1>
    1b6e:	a9 01       	movw	r20, r18
    1b70:	48 1b       	sub	r20, r24
    1b72:	59 0b       	sbc	r21, r25
    1b74:	ca 01       	movw	r24, r20
    1b76:	84 36       	cpi	r24, 0x64	; 100
    1b78:	91 05       	cpc	r25, r1
    1b7a:	08 f4       	brcc	.+2      	; 0x1b7e <serial_com_task+0x1e2>
    1b7c:	4d cf       	rjmp	.-358    	; 0x1a18 <serial_com_task+0x7c>
			{
				ack_timeouts++; //could overflow but thats probably low-risk
    1b7e:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <ack_timeouts>
    1b82:	8f 5f       	subi	r24, 0xFF	; 255
    1b84:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <ack_timeouts>
				if(ack_timeouts <= MAX_CONSECUTIVE_ACK_TIMEOUTS)
    1b88:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <ack_timeouts>
    1b8c:	86 30       	cpi	r24, 0x06	; 6
    1b8e:	18 f4       	brcc	.+6      	; 0x1b96 <serial_com_task+0x1fa>
				{
					send_current_frame(); //resend
    1b90:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <send_current_frame>
    1b94:	41 cf       	rjmp	.-382    	; 0x1a18 <serial_com_task+0x7c>
				}
				else
				{
					//Remote end seems to be refusing to send acks, will just continue sending data then..
					RTS = true;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <RTS>
					last_sent_frame[0] = 0;
    1b9c:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <last_sent_frame>
					last_sent_frame_size = 0;
    1ba0:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <last_sent_frame_size>
					ack_timeouts = 0;
    1ba4:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <ack_timeouts>
				}
			}
		}
	}
    1ba8:	37 cf       	rjmp	.-402    	; 0x1a18 <serial_com_task+0x7c>

00001baa <send_current_frame>:
}
void send_current_frame()
{
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	1f 92       	push	r1
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
	if(last_sent_frame_size)
    1bb4:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <last_sent_frame_size>
    1bb8:	88 23       	and	r24, r24
    1bba:	39 f1       	breq	.+78     	; 0x1c0a <send_current_frame+0x60>
	{
		//Send it
		for(uint8_t i = 0; i < last_sent_frame_size;)
    1bbc:	19 82       	std	Y+1, r1	; 0x01
    1bbe:	13 c0       	rjmp	.+38     	; 0x1be6 <send_current_frame+0x3c>
		{
			if(com_send_byte(last_sent_frame[i]) == BUFFER_OK)
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	88 2f       	mov	r24, r24
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	83 57       	subi	r24, 0x73	; 115
    1bc8:	9e 4f       	sbci	r25, 0xFE	; 254
    1bca:	fc 01       	movw	r30, r24
    1bcc:	80 81       	ld	r24, Z
    1bce:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <com_send_byte>
    1bd2:	88 23       	and	r24, r24
    1bd4:	21 f4       	brne	.+8      	; 0x1bde <send_current_frame+0x34>
				i++; //continue to next byte
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	8f 5f       	subi	r24, 0xFF	; 255
    1bda:	89 83       	std	Y+1, r24	; 0x01
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <send_current_frame+0x3c>
			else
				vTaskDelay(COM_BUFFER_FULL_DELAY); //Wait a bit and retry
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	0e 94 2d 21 	call	0x425a	; 0x425a <vTaskDelay>
void send_current_frame()
{
	if(last_sent_frame_size)
	{
		//Send it
		for(uint8_t i = 0; i < last_sent_frame_size;)
    1be6:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <last_sent_frame_size>
    1bea:	99 81       	ldd	r25, Y+1	; 0x01
    1bec:	98 17       	cp	r25, r24
    1bee:	40 f3       	brcs	.-48     	; 0x1bc0 <send_current_frame+0x16>
			if(com_send_byte(last_sent_frame[i]) == BUFFER_OK)
				i++; //continue to next byte
			else
				vTaskDelay(COM_BUFFER_FULL_DELAY); //Wait a bit and retry
		}
		last_frame_time = xTaskGetTickCount();
    1bf0:	0e 94 29 22 	call	0x4452	; 0x4452 <xTaskGetTickCount>
    1bf4:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <last_frame_time+0x1>
    1bf8:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <last_frame_time>
		RTS = is_ack_frame(last_sent_frame, MIN_FRAME_SIZE); //Only dataframes require us to wait for acks
    1bfc:	64 e0       	ldi	r22, 0x04	; 4
    1bfe:	8d e8       	ldi	r24, 0x8D	; 141
    1c00:	91 e0       	ldi	r25, 0x01	; 1
    1c02:	0e 94 13 0c 	call	0x1826	; 0x1826 <is_ack_frame>
    1c06:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <RTS>
	}
}
    1c0a:	00 00       	nop
    1c0c:	0f 90       	pop	r0
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	08 95       	ret

00001c14 <count_illegal_chars>:
uint8_t count_illegal_chars(uint8_t *byte_buffer, uint8_t buffer_size)
{
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <count_illegal_chars+0x6>
    1c1a:	00 d0       	rcall	.+0      	; 0x1c1c <count_illegal_chars+0x8>
    1c1c:	1f 92       	push	r1
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	9c 83       	std	Y+4, r25	; 0x04
    1c24:	8b 83       	std	Y+3, r24	; 0x03
    1c26:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t c = 0;
    1c28:	19 82       	std	Y+1, r1	; 0x01
	for(uint8_t i = 0; i < buffer_size; i++)
    1c2a:	1a 82       	std	Y+2, r1	; 0x02
    1c2c:	17 c0       	rjmp	.+46     	; 0x1c5c <count_illegal_chars+0x48>
	{
		if((*byte_buffer == LINK_FLAG) || (*byte_buffer == LINK_ESC))
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	9c 81       	ldd	r25, Y+4	; 0x04
    1c32:	fc 01       	movw	r30, r24
    1c34:	80 81       	ld	r24, Z
    1c36:	8f 3f       	cpi	r24, 0xFF	; 255
    1c38:	31 f0       	breq	.+12     	; 0x1c46 <count_illegal_chars+0x32>
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3e:	fc 01       	movw	r30, r24
    1c40:	80 81       	ld	r24, Z
    1c42:	88 23       	and	r24, r24
    1c44:	19 f4       	brne	.+6      	; 0x1c4c <count_illegal_chars+0x38>
			c++;
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	8f 5f       	subi	r24, 0xFF	; 255
    1c4a:	89 83       	std	Y+1, r24	; 0x01

		byte_buffer++;
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c50:	01 96       	adiw	r24, 0x01	; 1
    1c52:	9c 83       	std	Y+4, r25	; 0x04
    1c54:	8b 83       	std	Y+3, r24	; 0x03
	}
}
uint8_t count_illegal_chars(uint8_t *byte_buffer, uint8_t buffer_size)
{
	uint8_t c = 0;
	for(uint8_t i = 0; i < buffer_size; i++)
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	8f 5f       	subi	r24, 0xFF	; 255
    1c5a:	8a 83       	std	Y+2, r24	; 0x02
    1c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c60:	98 17       	cp	r25, r24
    1c62:	28 f3       	brcs	.-54     	; 0x1c2e <count_illegal_chars+0x1a>
		if((*byte_buffer == LINK_FLAG) || (*byte_buffer == LINK_ESC))
			c++;

		byte_buffer++;
	}
	return c;
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	df 91       	pop	r29
    1c72:	cf 91       	pop	r28
    1c74:	08 95       	ret

00001c76 <send_bytes>:
bool send_bytes(uint8_t *byte_buffer, uint8_t buffer_size)
{
    1c76:	cf 93       	push	r28
    1c78:	df 93       	push	r29
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	27 97       	sbiw	r28, 0x07	; 7
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	9e 83       	std	Y+6, r25	; 0x06
    1c8c:	8d 83       	std	Y+5, r24	; 0x05
    1c8e:	6f 83       	std	Y+7, r22	; 0x07
	if (buffer_size > MAX_PAYLOAD_SIZE)
		return false;
	uint8_t *frame;
	uint8_t frame_size = buffer_size + FRAME_OVERHEAD + (count_illegal_chars(byte_buffer, buffer_size) * 2);
    1c90:	8d 81       	ldd	r24, Y+5	; 0x05
    1c92:	9e 81       	ldd	r25, Y+6	; 0x06
    1c94:	6f 81       	ldd	r22, Y+7	; 0x07
    1c96:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <count_illegal_chars>
    1c9a:	98 2f       	mov	r25, r24
    1c9c:	99 0f       	add	r25, r25
    1c9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca0:	89 0f       	add	r24, r25
    1ca2:	8c 5f       	subi	r24, 0xFC	; 252
    1ca4:	89 83       	std	Y+1, r24	; 0x01
	if(frame_size > MAX_FRAME_SIZE)
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	85 36       	cpi	r24, 0x65	; 101
    1caa:	10 f0       	brcs	.+4      	; 0x1cb0 <send_bytes+0x3a>
		frame_size = MAX_FRAME_SIZE;
    1cac:	84 e6       	ldi	r24, 0x64	; 100
    1cae:	89 83       	std	Y+1, r24	; 0x01
	
	frame = pvPortMalloc(frame_size);
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	88 2f       	mov	r24, r24
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <pvPortMalloc>
    1cba:	9c 83       	std	Y+4, r25	; 0x04
    1cbc:	8b 83       	std	Y+3, r24	; 0x03
	if(!frame)
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	89 2b       	or	r24, r25
    1cc4:	11 f4       	brne	.+4      	; 0x1cca <send_bytes+0x54>
		return false;
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	54 c0       	rjmp	.+168    	; 0x1d72 <send_bytes+0xfc>
	frame_size = get_data_frame(frame, frame_size, byte_buffer, buffer_size);
    1cca:	4d 81       	ldd	r20, Y+5	; 0x05
    1ccc:	5e 81       	ldd	r21, Y+6	; 0x06
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd2:	2f 81       	ldd	r18, Y+7	; 0x07
    1cd4:	69 81       	ldd	r22, Y+1	; 0x01
    1cd6:	0e 94 be 0a 	call	0x157c	; 0x157c <get_data_frame>
    1cda:	89 83       	std	Y+1, r24	; 0x01
	if (frame_size)
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	88 23       	and	r24, r24
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <send_bytes+0x6e>
    1ce2:	42 c0       	rjmp	.+132    	; 0x1d68 <send_bytes+0xf2>
	{
		if (uxQueueSpacesAvailable(com_send_frame_buffer) >= frame_size)
    1ce4:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <com_send_frame_buffer>
    1ce8:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <com_send_frame_buffer+0x1>
    1cec:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <uxQueueSpacesAvailable>
    1cf0:	98 2f       	mov	r25, r24
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	98 17       	cp	r25, r24
    1cf6:	c0 f1       	brcs	.+112    	; 0x1d68 <send_bytes+0xf2>
		{
			if(xSemaphoreTake(com_send_queue_add_mutex, 50))
    1cf8:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <com_send_queue_add_mutex>
    1cfc:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <com_send_queue_add_mutex+0x1>
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	42 e3       	ldi	r20, 0x32	; 50
    1d04:	50 e0       	ldi	r21, 0x00	; 0
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <xQueueGenericReceive>
    1d0e:	88 23       	and	r24, r24
    1d10:	d1 f0       	breq	.+52     	; 0x1d46 <send_bytes+0xd0>
			for (uint8_t i = 0; i < frame_size; i++)
    1d12:	1a 82       	std	Y+2, r1	; 0x02
    1d14:	14 c0       	rjmp	.+40     	; 0x1d3e <send_bytes+0xc8>
			{
				xQueueSend(com_send_frame_buffer, frame+i, 0);
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	88 2f       	mov	r24, r24
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d20:	b9 01       	movw	r22, r18
    1d22:	68 0f       	add	r22, r24
    1d24:	79 1f       	adc	r23, r25
    1d26:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <com_send_frame_buffer>
    1d2a:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <com_send_frame_buffer+0x1>
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	40 e0       	ldi	r20, 0x00	; 0
    1d32:	50 e0       	ldi	r21, 0x00	; 0
    1d34:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <xQueueGenericSend>
	if (frame_size)
	{
		if (uxQueueSpacesAvailable(com_send_frame_buffer) >= frame_size)
		{
			if(xSemaphoreTake(com_send_queue_add_mutex, 50))
			for (uint8_t i = 0; i < frame_size; i++)
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	8f 5f       	subi	r24, 0xFF	; 255
    1d3c:	8a 83       	std	Y+2, r24	; 0x02
    1d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	98 17       	cp	r25, r24
    1d44:	40 f3       	brcs	.-48     	; 0x1d16 <send_bytes+0xa0>
			{
				xQueueSend(com_send_frame_buffer, frame+i, 0);
			}
			xSemaphoreGive(com_send_queue_add_mutex);
    1d46:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <com_send_queue_add_mutex>
    1d4a:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <com_send_queue_add_mutex+0x1>
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	40 e0       	ldi	r20, 0x00	; 0
    1d52:	50 e0       	ldi	r21, 0x00	; 0
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	70 e0       	ldi	r23, 0x00	; 0
    1d58:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <xQueueGenericSend>
			vPortFree(frame);
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d60:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <vPortFree>
			return true;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	05 c0       	rjmp	.+10     	; 0x1d72 <send_bytes+0xfc>
		}
	}
	vPortFree(frame);
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <vPortFree>
	return false;
    1d70:	80 e0       	ldi	r24, 0x00	; 0
}
    1d72:	27 96       	adiw	r28, 0x07	; 7
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	df 91       	pop	r29
    1d80:	cf 91       	pop	r28
    1d82:	08 95       	ret

00001d84 <handle_serial_input>:

void handle_serial_input(uint8_t *buffer, uint8_t length)
{
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <handle_serial_input+0x6>
    1d8a:	1f 92       	push	r1
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	9a 83       	std	Y+2, r25	; 0x02
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	6b 83       	std	Y+3, r22	; 0x03
	if(length == 1)
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	a9 f4       	brne	.+42     	; 0x1dc6 <handle_serial_input+0x42>
	{ //keyboard input
		 if(*buffer == 0x26)
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1da0:	fc 01       	movw	r30, r24
    1da2:	80 81       	ld	r24, Z
    1da4:	86 32       	cpi	r24, 0x26	; 38
    1da6:	29 f4       	brne	.+10     	; 0x1db2 <handle_serial_input+0x2e>
		bat_move(PL_TWO, D_UP);
    1da8:	62 e0       	ldi	r22, 0x02	; 2
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	0e 94 8d 01 	call	0x31a	; 0x31a <bat_move>
		
		else if(*buffer == 0x28)
		bat_move(PL_TWO, D_DOWN);
	}
    1db0:	0a c0       	rjmp	.+20     	; 0x1dc6 <handle_serial_input+0x42>
	if(length == 1)
	{ //keyboard input
		 if(*buffer == 0x26)
		bat_move(PL_TWO, D_UP);
		
		else if(*buffer == 0x28)
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	9a 81       	ldd	r25, Y+2	; 0x02
    1db6:	fc 01       	movw	r30, r24
    1db8:	80 81       	ld	r24, Z
    1dba:	88 32       	cpi	r24, 0x28	; 40
    1dbc:	21 f4       	brne	.+8      	; 0x1dc6 <handle_serial_input+0x42>
		bat_move(PL_TWO, D_DOWN);
    1dbe:	61 e0       	ldi	r22, 0x01	; 1
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	0e 94 8d 01 	call	0x31a	; 0x31a <bat_move>
	}
    1dc6:	00 00       	nop
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	08 95       	ret

00001dd4 <_com_call_back>:
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	00 d0       	rcall	.+0      	; 0x1dda <_com_call_back+0x6>
    1dda:	00 d0       	rcall	.+0      	; 0x1ddc <_com_call_back+0x8>
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	9b 83       	std	Y+3, r25	; 0x03
    1de2:	8a 83       	std	Y+2, r24	; 0x02
    1de4:	6c 83       	std	Y+4, r22	; 0x04
    1de6:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <_x_rx_com_queue>
    1dea:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <_x_rx_com_queue+0x1>
    1dee:	89 2b       	or	r24, r25
    1df0:	99 f0       	breq	.+38     	; 0x1e18 <_com_call_back+0x44>
    1df2:	19 82       	std	Y+1, r1	; 0x01
    1df4:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <_x_rx_com_queue>
    1df8:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <_x_rx_com_queue+0x1>
    1dfc:	be 01       	movw	r22, r28
    1dfe:	6c 5f       	subi	r22, 0xFC	; 252
    1e00:	7f 4f       	sbci	r23, 0xFF	; 255
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	ae 01       	movw	r20, r28
    1e06:	4f 5f       	subi	r20, 0xFF	; 255
    1e08:	5f 4f       	sbci	r21, 0xFF	; 255
    1e0a:	0e 94 9b 1b 	call	0x3736	; 0x3736 <xQueueGenericSendFromISR>
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	88 23       	and	r24, r24
    1e12:	11 f0       	breq	.+4      	; 0x1e18 <_com_call_back+0x44>
    1e14:	0e 94 54 14 	call	0x28a8	; 0x28a8 <vPortYield>
    1e18:	00 00       	nop
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	08 95       	ret

00001e28 <init_com>:
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <init_com+0x6>
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	9a 83       	std	Y+2, r25	; 0x02
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3a:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <_x_rx_com_queue+0x1>
    1e3e:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <_x_rx_com_queue>
    1e42:	00 00       	nop
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	df 91       	pop	r29
    1e4a:	cf 91       	pop	r28
    1e4c:	08 95       	ret

00001e4e <init_display_timer>:
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	00 d0       	rcall	.+0      	; 0x1e54 <init_display_timer+0x6>
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	9a 83       	std	Y+2, r25	; 0x02
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e60:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <cb_ptr+0x1>
    1e64:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <cb_ptr>
    1e68:	87 e4       	ldi	r24, 0x47	; 71
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	2a e0       	ldi	r18, 0x0A	; 10
    1e6e:	fc 01       	movw	r30, r24
    1e70:	20 83       	st	Z, r18
    1e72:	84 e4       	ldi	r24, 0x44	; 68
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	24 e4       	ldi	r18, 0x44	; 68
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	f9 01       	movw	r30, r18
    1e7c:	20 81       	ld	r18, Z
    1e7e:	22 60       	ori	r18, 0x02	; 2
    1e80:	fc 01       	movw	r30, r24
    1e82:	20 83       	st	Z, r18
    1e84:	8e e6       	ldi	r24, 0x6E	; 110
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	2e e6       	ldi	r18, 0x6E	; 110
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	f9 01       	movw	r30, r18
    1e8e:	20 81       	ld	r18, Z
    1e90:	22 60       	ori	r18, 0x02	; 2
    1e92:	fc 01       	movw	r30, r24
    1e94:	20 83       	st	Z, r18
    1e96:	85 e4       	ldi	r24, 0x45	; 69
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	25 e4       	ldi	r18, 0x45	; 69
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	f9 01       	movw	r30, r18
    1ea0:	20 81       	ld	r18, Z
    1ea2:	25 60       	ori	r18, 0x05	; 5
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	20 83       	st	Z, r18
    1ea8:	00 00       	nop
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	df 91       	pop	r29
    1eb0:	cf 91       	pop	r28
    1eb2:	08 95       	ret

00001eb4 <__vector_16>:
    1eb4:	1f 92       	push	r1
    1eb6:	0f 92       	push	r0
    1eb8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1ebc:	0f 92       	push	r0
    1ebe:	11 24       	eor	r1, r1
    1ec0:	2f 93       	push	r18
    1ec2:	3f 93       	push	r19
    1ec4:	4f 93       	push	r20
    1ec6:	5f 93       	push	r21
    1ec8:	6f 93       	push	r22
    1eca:	7f 93       	push	r23
    1ecc:	8f 93       	push	r24
    1ece:	9f 93       	push	r25
    1ed0:	af 93       	push	r26
    1ed2:	bf 93       	push	r27
    1ed4:	ef 93       	push	r30
    1ed6:	ff 93       	push	r31
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <cb_ptr>
    1ee4:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <cb_ptr+0x1>
    1ee8:	89 2b       	or	r24, r25
    1eea:	31 f0       	breq	.+12     	; 0x1ef8 <__vector_16+0x44>
    1eec:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <cb_ptr>
    1ef0:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <cb_ptr+0x1>
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	09 95       	icall
    1ef8:	00 00       	nop
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	ff 91       	pop	r31
    1f00:	ef 91       	pop	r30
    1f02:	bf 91       	pop	r27
    1f04:	af 91       	pop	r26
    1f06:	9f 91       	pop	r25
    1f08:	8f 91       	pop	r24
    1f0a:	7f 91       	pop	r23
    1f0c:	6f 91       	pop	r22
    1f0e:	5f 91       	pop	r21
    1f10:	4f 91       	pop	r20
    1f12:	3f 91       	pop	r19
    1f14:	2f 91       	pop	r18
    1f16:	0f 90       	pop	r0
    1f18:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1f1c:	0f 90       	pop	r0
    1f1e:	1f 90       	pop	r1
    1f20:	18 95       	reti

00001f22 <com_send_byte>:
    1f22:	cf 93       	push	r28
    1f24:	df 93       	push	r29
    1f26:	1f 92       	push	r1
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	89 83       	std	Y+1, r24	; 0x01
    1f2e:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <_com_serial_instance>
    1f32:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <_com_serial_instance+0x1>
    1f36:	69 81       	ldd	r22, Y+1	; 0x01
    1f38:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <serial_send_byte>
    1f3c:	0f 90       	pop	r0
    1f3e:	df 91       	pop	r29
    1f40:	cf 91       	pop	r28
    1f42:	08 95       	ret

00001f44 <init_board>:
    1f44:	8f 92       	push	r8
    1f46:	9f 92       	push	r9
    1f48:	af 92       	push	r10
    1f4a:	bf 92       	push	r11
    1f4c:	cf 92       	push	r12
    1f4e:	df 92       	push	r13
    1f50:	ef 92       	push	r14
    1f52:	0f 93       	push	r16
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	8b ef       	ldi	r24, 0xFB	; 251
    1f5e:	91 e0       	ldi	r25, 0x01	; 1
    1f60:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <buffer_init>
    1f64:	8e e1       	ldi	r24, 0x1E	; 30
    1f66:	92 e0       	ldi	r25, 0x02	; 2
    1f68:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <buffer_init>
    1f6c:	0f 2e       	mov	r0, r31
    1f6e:	fa ee       	ldi	r31, 0xEA	; 234
    1f70:	8f 2e       	mov	r8, r31
    1f72:	fe e0       	ldi	r31, 0x0E	; 14
    1f74:	9f 2e       	mov	r9, r31
    1f76:	f0 2d       	mov	r31, r0
    1f78:	0f 2e       	mov	r0, r31
    1f7a:	fe e1       	ldi	r31, 0x1E	; 30
    1f7c:	af 2e       	mov	r10, r31
    1f7e:	f2 e0       	ldi	r31, 0x02	; 2
    1f80:	bf 2e       	mov	r11, r31
    1f82:	f0 2d       	mov	r31, r0
    1f84:	0f 2e       	mov	r0, r31
    1f86:	fb ef       	ldi	r31, 0xFB	; 251
    1f88:	cf 2e       	mov	r12, r31
    1f8a:	f1 e0       	ldi	r31, 0x01	; 1
    1f8c:	df 2e       	mov	r13, r31
    1f8e:	f0 2d       	mov	r31, r0
    1f90:	e1 2c       	mov	r14, r1
    1f92:	00 e0       	ldi	r16, 0x00	; 0
    1f94:	23 e0       	ldi	r18, 0x03	; 3
    1f96:	40 e0       	ldi	r20, 0x00	; 0
    1f98:	52 ec       	ldi	r21, 0xC2	; 194
    1f9a:	61 e0       	ldi	r22, 0x01	; 1
    1f9c:	70 e0       	ldi	r23, 0x00	; 0
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <serial_new_instance>
    1fa4:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <_com_serial_instance+0x1>
    1fa8:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <_com_serial_instance>
    1fac:	87 e2       	ldi	r24, 0x27	; 39
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	27 e2       	ldi	r18, 0x27	; 39
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	f9 01       	movw	r30, r18
    1fb6:	20 81       	ld	r18, Z
    1fb8:	2c 73       	andi	r18, 0x3C	; 60
    1fba:	fc 01       	movw	r30, r24
    1fbc:	20 83       	st	Z, r18
    1fbe:	8a e2       	ldi	r24, 0x2A	; 42
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	2a e2       	ldi	r18, 0x2A	; 42
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	f9 01       	movw	r30, r18
    1fc8:	20 81       	ld	r18, Z
    1fca:	27 7f       	andi	r18, 0xF7	; 247
    1fcc:	fc 01       	movw	r30, r24
    1fce:	20 83       	st	Z, r18
    1fd0:	88 e2       	ldi	r24, 0x28	; 40
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	28 e2       	ldi	r18, 0x28	; 40
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	f9 01       	movw	r30, r18
    1fda:	20 81       	ld	r18, Z
    1fdc:	23 6c       	ori	r18, 0xC3	; 195
    1fde:	fc 01       	movw	r30, r24
    1fe0:	20 83       	st	Z, r18
    1fe2:	8b e2       	ldi	r24, 0x2B	; 43
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	2b e2       	ldi	r18, 0x2B	; 43
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	f9 01       	movw	r30, r18
    1fec:	20 81       	ld	r18, Z
    1fee:	28 60       	ori	r18, 0x08	; 8
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	20 83       	st	Z, r18
    1ff4:	8a e2       	ldi	r24, 0x2A	; 42
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	2a e2       	ldi	r18, 0x2A	; 42
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	f9 01       	movw	r30, r18
    1ffe:	20 81       	ld	r18, Z
    2000:	24 67       	ori	r18, 0x74	; 116
    2002:	fc 01       	movw	r30, r24
    2004:	20 83       	st	Z, r18
    2006:	8b e2       	ldi	r24, 0x2B	; 43
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	2b e2       	ldi	r18, 0x2B	; 43
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	f9 01       	movw	r30, r18
    2010:	20 81       	ld	r18, Z
    2012:	20 64       	ori	r18, 0x40	; 64
    2014:	fc 01       	movw	r30, r24
    2016:	20 83       	st	Z, r18
    2018:	81 e2       	ldi	r24, 0x21	; 33
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	fc 01       	movw	r30, r24
    201e:	80 81       	ld	r24, Z
    2020:	81 e2       	ldi	r24, 0x21	; 33
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	2f ef       	ldi	r18, 0xFF	; 255
    2026:	fc 01       	movw	r30, r24
    2028:	20 83       	st	Z, r18
    202a:	84 e2       	ldi	r24, 0x24	; 36
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	24 e2       	ldi	r18, 0x24	; 36
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	f9 01       	movw	r30, r18
    2034:	20 81       	ld	r18, Z
    2036:	23 60       	ori	r18, 0x03	; 3
    2038:	fc 01       	movw	r30, r24
    203a:	20 83       	st	Z, r18
    203c:	84 e2       	ldi	r24, 0x24	; 36
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	24 e2       	ldi	r18, 0x24	; 36
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	f9 01       	movw	r30, r18
    2046:	20 81       	ld	r18, Z
    2048:	2c 63       	ori	r18, 0x3C	; 60
    204a:	fc 01       	movw	r30, r24
    204c:	20 83       	st	Z, r18
    204e:	00 00       	nop
    2050:	df 91       	pop	r29
    2052:	cf 91       	pop	r28
    2054:	0f 91       	pop	r16
    2056:	ef 90       	pop	r14
    2058:	df 90       	pop	r13
    205a:	cf 90       	pop	r12
    205c:	bf 90       	pop	r11
    205e:	af 90       	pop	r10
    2060:	9f 90       	pop	r9
    2062:	8f 90       	pop	r8
    2064:	08 95       	ret

00002066 <switch_in>:
    2066:	cf 93       	push	r28
    2068:	df 93       	push	r29
    206a:	1f 92       	push	r1
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	89 83       	std	Y+1, r24	; 0x01
    2072:	85 e2       	ldi	r24, 0x25	; 37
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	25 e2       	ldi	r18, 0x25	; 37
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	f9 01       	movw	r30, r18
    207c:	20 81       	ld	r18, Z
    207e:	23 7c       	andi	r18, 0xC3	; 195
    2080:	fc 01       	movw	r30, r24
    2082:	20 83       	st	Z, r18
    2084:	85 e2       	ldi	r24, 0x25	; 37
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	25 e2       	ldi	r18, 0x25	; 37
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	f9 01       	movw	r30, r18
    208e:	20 81       	ld	r18, Z
    2090:	42 2f       	mov	r20, r18
    2092:	29 81       	ldd	r18, Y+1	; 0x01
    2094:	22 2f       	mov	r18, r18
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	22 0f       	add	r18, r18
    209a:	33 1f       	adc	r19, r19
    209c:	22 0f       	add	r18, r18
    209e:	33 1f       	adc	r19, r19
    20a0:	24 2b       	or	r18, r20
    20a2:	fc 01       	movw	r30, r24
    20a4:	20 83       	st	Z, r18
    20a6:	00 00       	nop
    20a8:	0f 90       	pop	r0
    20aa:	df 91       	pop	r29
    20ac:	cf 91       	pop	r28
    20ae:	08 95       	ret

000020b0 <switch_out>:
    20b0:	cf 93       	push	r28
    20b2:	df 93       	push	r29
    20b4:	1f 92       	push	r1
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	85 e2       	ldi	r24, 0x25	; 37
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	25 e2       	ldi	r18, 0x25	; 37
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	f9 01       	movw	r30, r18
    20c6:	20 81       	ld	r18, Z
    20c8:	23 7c       	andi	r18, 0xC3	; 195
    20ca:	fc 01       	movw	r30, r24
    20cc:	20 83       	st	Z, r18
    20ce:	00 00       	nop
    20d0:	0f 90       	pop	r0
    20d2:	df 91       	pop	r29
    20d4:	cf 91       	pop	r28
    20d6:	08 95       	ret

000020d8 <buffer_init>:
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	00 d0       	rcall	.+0      	; 0x20de <buffer_init+0x6>
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	9a 83       	std	Y+2, r25	; 0x02
    20e4:	89 83       	std	Y+1, r24	; 0x01
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ea:	fc 01       	movw	r30, r24
    20ec:	10 a2       	std	Z+32, r1	; 0x20
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	9a 81       	ldd	r25, Y+2	; 0x02
    20f2:	fc 01       	movw	r30, r24
    20f4:	11 a2       	std	Z+33, r1	; 0x21
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	9a 81       	ldd	r25, Y+2	; 0x02
    20fa:	fc 01       	movw	r30, r24
    20fc:	12 a2       	std	Z+34, r1	; 0x22
    20fe:	00 00       	nop
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	08 95       	ret

0000210a <buffer_get_item>:
    210a:	cf 93       	push	r28
    210c:	df 93       	push	r29
    210e:	00 d0       	rcall	.+0      	; 0x2110 <buffer_get_item+0x6>
    2110:	00 d0       	rcall	.+0      	; 0x2112 <buffer_get_item+0x8>
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	9a 83       	std	Y+2, r25	; 0x02
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	7c 83       	std	Y+4, r23	; 0x04
    211c:	6b 83       	std	Y+3, r22	; 0x03
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	9a 81       	ldd	r25, Y+2	; 0x02
    2122:	fc 01       	movw	r30, r24
    2124:	82 a1       	ldd	r24, Z+34	; 0x22
    2126:	88 23       	and	r24, r24
    2128:	81 f1       	breq	.+96     	; 0x218a <buffer_get_item+0x80>
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	fc 01       	movw	r30, r24
    2130:	81 a1       	ldd	r24, Z+33	; 0x21
    2132:	88 2f       	mov	r24, r24
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	29 81       	ldd	r18, Y+1	; 0x01
    2138:	3a 81       	ldd	r19, Y+2	; 0x02
    213a:	82 0f       	add	r24, r18
    213c:	93 1f       	adc	r25, r19
    213e:	fc 01       	movw	r30, r24
    2140:	20 81       	ld	r18, Z
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	9c 81       	ldd	r25, Y+4	; 0x04
    2146:	fc 01       	movw	r30, r24
    2148:	20 83       	st	Z, r18
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	9a 81       	ldd	r25, Y+2	; 0x02
    214e:	fc 01       	movw	r30, r24
    2150:	81 a1       	ldd	r24, Z+33	; 0x21
    2152:	88 2f       	mov	r24, r24
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	01 96       	adiw	r24, 0x01	; 1
    2158:	8f 71       	andi	r24, 0x1F	; 31
    215a:	90 78       	andi	r25, 0x80	; 128
    215c:	99 23       	and	r25, r25
    215e:	24 f4       	brge	.+8      	; 0x2168 <buffer_get_item+0x5e>
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	80 6e       	ori	r24, 0xE0	; 224
    2164:	9f 6f       	ori	r25, 0xFF	; 255
    2166:	01 96       	adiw	r24, 0x01	; 1
    2168:	28 2f       	mov	r18, r24
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	9a 81       	ldd	r25, Y+2	; 0x02
    216e:	fc 01       	movw	r30, r24
    2170:	21 a3       	std	Z+33, r18	; 0x21
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	9a 81       	ldd	r25, Y+2	; 0x02
    2176:	fc 01       	movw	r30, r24
    2178:	82 a1       	ldd	r24, Z+34	; 0x22
    217a:	2f ef       	ldi	r18, 0xFF	; 255
    217c:	28 0f       	add	r18, r24
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	9a 81       	ldd	r25, Y+2	; 0x02
    2182:	fc 01       	movw	r30, r24
    2184:	22 a3       	std	Z+34, r18	; 0x22
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	01 c0       	rjmp	.+2      	; 0x218c <buffer_get_item+0x82>
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	08 95       	ret

0000219a <buffer_put_item>:
    219a:	cf 93       	push	r28
    219c:	df 93       	push	r29
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <buffer_put_item+0x6>
    21a0:	1f 92       	push	r1
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	9a 83       	std	Y+2, r25	; 0x02
    21a8:	89 83       	std	Y+1, r24	; 0x01
    21aa:	6b 83       	std	Y+3, r22	; 0x03
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	9a 81       	ldd	r25, Y+2	; 0x02
    21b0:	fc 01       	movw	r30, r24
    21b2:	82 a1       	ldd	r24, Z+34	; 0x22
    21b4:	80 32       	cpi	r24, 0x20	; 32
    21b6:	68 f5       	brcc	.+90     	; 0x2212 <buffer_put_item+0x78>
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	9a 81       	ldd	r25, Y+2	; 0x02
    21bc:	fc 01       	movw	r30, r24
    21be:	80 a1       	ldd	r24, Z+32	; 0x20
    21c0:	88 2f       	mov	r24, r24
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	29 81       	ldd	r18, Y+1	; 0x01
    21c6:	3a 81       	ldd	r19, Y+2	; 0x02
    21c8:	82 0f       	add	r24, r18
    21ca:	93 1f       	adc	r25, r19
    21cc:	2b 81       	ldd	r18, Y+3	; 0x03
    21ce:	fc 01       	movw	r30, r24
    21d0:	20 83       	st	Z, r18
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	9a 81       	ldd	r25, Y+2	; 0x02
    21d6:	fc 01       	movw	r30, r24
    21d8:	80 a1       	ldd	r24, Z+32	; 0x20
    21da:	88 2f       	mov	r24, r24
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	01 96       	adiw	r24, 0x01	; 1
    21e0:	8f 71       	andi	r24, 0x1F	; 31
    21e2:	90 78       	andi	r25, 0x80	; 128
    21e4:	99 23       	and	r25, r25
    21e6:	24 f4       	brge	.+8      	; 0x21f0 <buffer_put_item+0x56>
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	80 6e       	ori	r24, 0xE0	; 224
    21ec:	9f 6f       	ori	r25, 0xFF	; 255
    21ee:	01 96       	adiw	r24, 0x01	; 1
    21f0:	28 2f       	mov	r18, r24
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	9a 81       	ldd	r25, Y+2	; 0x02
    21f6:	fc 01       	movw	r30, r24
    21f8:	20 a3       	std	Z+32, r18	; 0x20
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	9a 81       	ldd	r25, Y+2	; 0x02
    21fe:	fc 01       	movw	r30, r24
    2200:	82 a1       	ldd	r24, Z+34	; 0x22
    2202:	21 e0       	ldi	r18, 0x01	; 1
    2204:	28 0f       	add	r18, r24
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	9a 81       	ldd	r25, Y+2	; 0x02
    220a:	fc 01       	movw	r30, r24
    220c:	22 a3       	std	Z+34, r18	; 0x22
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	01 c0       	rjmp	.+2      	; 0x2214 <buffer_put_item+0x7a>
    2212:	82 e0       	ldi	r24, 0x02	; 2
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	08 95       	ret

00002220 <vListInitialise>:
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	00 d0       	rcall	.+0      	; 0x2226 <vListInitialise+0x6>
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	9a 83       	std	Y+2, r25	; 0x02
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02
    2232:	9c 01       	movw	r18, r24
    2234:	2d 5f       	subi	r18, 0xFD	; 253
    2236:	3f 4f       	sbci	r19, 0xFF	; 255
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	9a 81       	ldd	r25, Y+2	; 0x02
    223c:	fc 01       	movw	r30, r24
    223e:	32 83       	std	Z+2, r19	; 0x02
    2240:	21 83       	std	Z+1, r18	; 0x01
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	9a 81       	ldd	r25, Y+2	; 0x02
    2246:	2f ef       	ldi	r18, 0xFF	; 255
    2248:	3f ef       	ldi	r19, 0xFF	; 255
    224a:	fc 01       	movw	r30, r24
    224c:	34 83       	std	Z+4, r19	; 0x04
    224e:	23 83       	std	Z+3, r18	; 0x03
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	9a 81       	ldd	r25, Y+2	; 0x02
    2254:	9c 01       	movw	r18, r24
    2256:	2d 5f       	subi	r18, 0xFD	; 253
    2258:	3f 4f       	sbci	r19, 0xFF	; 255
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	9a 81       	ldd	r25, Y+2	; 0x02
    225e:	fc 01       	movw	r30, r24
    2260:	36 83       	std	Z+6, r19	; 0x06
    2262:	25 83       	std	Z+5, r18	; 0x05
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	9a 81       	ldd	r25, Y+2	; 0x02
    2268:	9c 01       	movw	r18, r24
    226a:	2d 5f       	subi	r18, 0xFD	; 253
    226c:	3f 4f       	sbci	r19, 0xFF	; 255
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	9a 81       	ldd	r25, Y+2	; 0x02
    2272:	fc 01       	movw	r30, r24
    2274:	30 87       	std	Z+8, r19	; 0x08
    2276:	27 83       	std	Z+7, r18	; 0x07
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	9a 81       	ldd	r25, Y+2	; 0x02
    227c:	fc 01       	movw	r30, r24
    227e:	10 82       	st	Z, r1
    2280:	00 00       	nop
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	08 95       	ret

0000228c <vListInitialiseItem>:
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	00 d0       	rcall	.+0      	; 0x2292 <vListInitialiseItem+0x6>
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	9a 83       	std	Y+2, r25	; 0x02
    2298:	89 83       	std	Y+1, r24	; 0x01
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	9a 81       	ldd	r25, Y+2	; 0x02
    229e:	fc 01       	movw	r30, r24
    22a0:	11 86       	std	Z+9, r1	; 0x09
    22a2:	10 86       	std	Z+8, r1	; 0x08
    22a4:	00 00       	nop
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	df 91       	pop	r29
    22ac:	cf 91       	pop	r28
    22ae:	08 95       	ret

000022b0 <vListInsertEnd>:
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	00 d0       	rcall	.+0      	; 0x22b6 <vListInsertEnd+0x6>
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <vListInsertEnd+0x8>
    22b8:	00 d0       	rcall	.+0      	; 0x22ba <vListInsertEnd+0xa>
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	9c 83       	std	Y+4, r25	; 0x04
    22c0:	8b 83       	std	Y+3, r24	; 0x03
    22c2:	7e 83       	std	Y+6, r23	; 0x06
    22c4:	6d 83       	std	Y+5, r22	; 0x05
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ca:	fc 01       	movw	r30, r24
    22cc:	81 81       	ldd	r24, Z+1	; 0x01
    22ce:	92 81       	ldd	r25, Z+2	; 0x02
    22d0:	9a 83       	std	Y+2, r25	; 0x02
    22d2:	89 83       	std	Y+1, r24	; 0x01
    22d4:	8d 81       	ldd	r24, Y+5	; 0x05
    22d6:	9e 81       	ldd	r25, Y+6	; 0x06
    22d8:	29 81       	ldd	r18, Y+1	; 0x01
    22da:	3a 81       	ldd	r19, Y+2	; 0x02
    22dc:	fc 01       	movw	r30, r24
    22de:	33 83       	std	Z+3, r19	; 0x03
    22e0:	22 83       	std	Z+2, r18	; 0x02
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	9a 81       	ldd	r25, Y+2	; 0x02
    22e6:	fc 01       	movw	r30, r24
    22e8:	24 81       	ldd	r18, Z+4	; 0x04
    22ea:	35 81       	ldd	r19, Z+5	; 0x05
    22ec:	8d 81       	ldd	r24, Y+5	; 0x05
    22ee:	9e 81       	ldd	r25, Y+6	; 0x06
    22f0:	fc 01       	movw	r30, r24
    22f2:	35 83       	std	Z+5, r19	; 0x05
    22f4:	24 83       	std	Z+4, r18	; 0x04
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	9a 81       	ldd	r25, Y+2	; 0x02
    22fa:	fc 01       	movw	r30, r24
    22fc:	84 81       	ldd	r24, Z+4	; 0x04
    22fe:	95 81       	ldd	r25, Z+5	; 0x05
    2300:	2d 81       	ldd	r18, Y+5	; 0x05
    2302:	3e 81       	ldd	r19, Y+6	; 0x06
    2304:	fc 01       	movw	r30, r24
    2306:	33 83       	std	Z+3, r19	; 0x03
    2308:	22 83       	std	Z+2, r18	; 0x02
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	9a 81       	ldd	r25, Y+2	; 0x02
    230e:	2d 81       	ldd	r18, Y+5	; 0x05
    2310:	3e 81       	ldd	r19, Y+6	; 0x06
    2312:	fc 01       	movw	r30, r24
    2314:	35 83       	std	Z+5, r19	; 0x05
    2316:	24 83       	std	Z+4, r18	; 0x04
    2318:	8d 81       	ldd	r24, Y+5	; 0x05
    231a:	9e 81       	ldd	r25, Y+6	; 0x06
    231c:	2b 81       	ldd	r18, Y+3	; 0x03
    231e:	3c 81       	ldd	r19, Y+4	; 0x04
    2320:	fc 01       	movw	r30, r24
    2322:	31 87       	std	Z+9, r19	; 0x09
    2324:	20 87       	std	Z+8, r18	; 0x08
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	fc 01       	movw	r30, r24
    232c:	80 81       	ld	r24, Z
    232e:	21 e0       	ldi	r18, 0x01	; 1
    2330:	28 0f       	add	r18, r24
    2332:	8b 81       	ldd	r24, Y+3	; 0x03
    2334:	9c 81       	ldd	r25, Y+4	; 0x04
    2336:	fc 01       	movw	r30, r24
    2338:	20 83       	st	Z, r18
    233a:	00 00       	nop
    233c:	26 96       	adiw	r28, 0x06	; 6
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	08 95       	ret

0000234e <vListInsert>:
    234e:	cf 93       	push	r28
    2350:	df 93       	push	r29
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	28 97       	sbiw	r28, 0x08	; 8
    2358:	0f b6       	in	r0, 0x3f	; 63
    235a:	f8 94       	cli
    235c:	de bf       	out	0x3e, r29	; 62
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	cd bf       	out	0x3d, r28	; 61
    2362:	9e 83       	std	Y+6, r25	; 0x06
    2364:	8d 83       	std	Y+5, r24	; 0x05
    2366:	78 87       	std	Y+8, r23	; 0x08
    2368:	6f 83       	std	Y+7, r22	; 0x07
    236a:	8f 81       	ldd	r24, Y+7	; 0x07
    236c:	98 85       	ldd	r25, Y+8	; 0x08
    236e:	fc 01       	movw	r30, r24
    2370:	80 81       	ld	r24, Z
    2372:	91 81       	ldd	r25, Z+1	; 0x01
    2374:	9c 83       	std	Y+4, r25	; 0x04
    2376:	8b 83       	std	Y+3, r24	; 0x03
    2378:	8b 81       	ldd	r24, Y+3	; 0x03
    237a:	9c 81       	ldd	r25, Y+4	; 0x04
    237c:	01 96       	adiw	r24, 0x01	; 1
    237e:	41 f4       	brne	.+16     	; 0x2390 <vListInsert+0x42>
    2380:	8d 81       	ldd	r24, Y+5	; 0x05
    2382:	9e 81       	ldd	r25, Y+6	; 0x06
    2384:	fc 01       	movw	r30, r24
    2386:	87 81       	ldd	r24, Z+7	; 0x07
    2388:	90 85       	ldd	r25, Z+8	; 0x08
    238a:	9a 83       	std	Y+2, r25	; 0x02
    238c:	89 83       	std	Y+1, r24	; 0x01
    238e:	1a c0       	rjmp	.+52     	; 0x23c4 <vListInsert+0x76>
    2390:	8d 81       	ldd	r24, Y+5	; 0x05
    2392:	9e 81       	ldd	r25, Y+6	; 0x06
    2394:	03 96       	adiw	r24, 0x03	; 3
    2396:	9a 83       	std	Y+2, r25	; 0x02
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	07 c0       	rjmp	.+14     	; 0x23aa <vListInsert+0x5c>
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	9a 81       	ldd	r25, Y+2	; 0x02
    23a0:	fc 01       	movw	r30, r24
    23a2:	82 81       	ldd	r24, Z+2	; 0x02
    23a4:	93 81       	ldd	r25, Z+3	; 0x03
    23a6:	9a 83       	std	Y+2, r25	; 0x02
    23a8:	89 83       	std	Y+1, r24	; 0x01
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	9a 81       	ldd	r25, Y+2	; 0x02
    23ae:	fc 01       	movw	r30, r24
    23b0:	82 81       	ldd	r24, Z+2	; 0x02
    23b2:	93 81       	ldd	r25, Z+3	; 0x03
    23b4:	fc 01       	movw	r30, r24
    23b6:	20 81       	ld	r18, Z
    23b8:	31 81       	ldd	r19, Z+1	; 0x01
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	82 17       	cp	r24, r18
    23c0:	93 07       	cpc	r25, r19
    23c2:	60 f7       	brcc	.-40     	; 0x239c <vListInsert+0x4e>
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	9a 81       	ldd	r25, Y+2	; 0x02
    23c8:	fc 01       	movw	r30, r24
    23ca:	22 81       	ldd	r18, Z+2	; 0x02
    23cc:	33 81       	ldd	r19, Z+3	; 0x03
    23ce:	8f 81       	ldd	r24, Y+7	; 0x07
    23d0:	98 85       	ldd	r25, Y+8	; 0x08
    23d2:	fc 01       	movw	r30, r24
    23d4:	33 83       	std	Z+3, r19	; 0x03
    23d6:	22 83       	std	Z+2, r18	; 0x02
    23d8:	8f 81       	ldd	r24, Y+7	; 0x07
    23da:	98 85       	ldd	r25, Y+8	; 0x08
    23dc:	fc 01       	movw	r30, r24
    23de:	82 81       	ldd	r24, Z+2	; 0x02
    23e0:	93 81       	ldd	r25, Z+3	; 0x03
    23e2:	2f 81       	ldd	r18, Y+7	; 0x07
    23e4:	38 85       	ldd	r19, Y+8	; 0x08
    23e6:	fc 01       	movw	r30, r24
    23e8:	35 83       	std	Z+5, r19	; 0x05
    23ea:	24 83       	std	Z+4, r18	; 0x04
    23ec:	8f 81       	ldd	r24, Y+7	; 0x07
    23ee:	98 85       	ldd	r25, Y+8	; 0x08
    23f0:	29 81       	ldd	r18, Y+1	; 0x01
    23f2:	3a 81       	ldd	r19, Y+2	; 0x02
    23f4:	fc 01       	movw	r30, r24
    23f6:	35 83       	std	Z+5, r19	; 0x05
    23f8:	24 83       	std	Z+4, r18	; 0x04
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	9a 81       	ldd	r25, Y+2	; 0x02
    23fe:	2f 81       	ldd	r18, Y+7	; 0x07
    2400:	38 85       	ldd	r19, Y+8	; 0x08
    2402:	fc 01       	movw	r30, r24
    2404:	33 83       	std	Z+3, r19	; 0x03
    2406:	22 83       	std	Z+2, r18	; 0x02
    2408:	8f 81       	ldd	r24, Y+7	; 0x07
    240a:	98 85       	ldd	r25, Y+8	; 0x08
    240c:	2d 81       	ldd	r18, Y+5	; 0x05
    240e:	3e 81       	ldd	r19, Y+6	; 0x06
    2410:	fc 01       	movw	r30, r24
    2412:	31 87       	std	Z+9, r19	; 0x09
    2414:	20 87       	std	Z+8, r18	; 0x08
    2416:	8d 81       	ldd	r24, Y+5	; 0x05
    2418:	9e 81       	ldd	r25, Y+6	; 0x06
    241a:	fc 01       	movw	r30, r24
    241c:	80 81       	ld	r24, Z
    241e:	21 e0       	ldi	r18, 0x01	; 1
    2420:	28 0f       	add	r18, r24
    2422:	8d 81       	ldd	r24, Y+5	; 0x05
    2424:	9e 81       	ldd	r25, Y+6	; 0x06
    2426:	fc 01       	movw	r30, r24
    2428:	20 83       	st	Z, r18
    242a:	00 00       	nop
    242c:	28 96       	adiw	r28, 0x08	; 8
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	df 91       	pop	r29
    243a:	cf 91       	pop	r28
    243c:	08 95       	ret

0000243e <uxListRemove>:
    243e:	cf 93       	push	r28
    2440:	df 93       	push	r29
    2442:	00 d0       	rcall	.+0      	; 0x2444 <uxListRemove+0x6>
    2444:	00 d0       	rcall	.+0      	; 0x2446 <uxListRemove+0x8>
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	9c 83       	std	Y+4, r25	; 0x04
    244c:	8b 83       	std	Y+3, r24	; 0x03
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	9c 81       	ldd	r25, Y+4	; 0x04
    2452:	fc 01       	movw	r30, r24
    2454:	80 85       	ldd	r24, Z+8	; 0x08
    2456:	91 85       	ldd	r25, Z+9	; 0x09
    2458:	9a 83       	std	Y+2, r25	; 0x02
    245a:	89 83       	std	Y+1, r24	; 0x01
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	9c 81       	ldd	r25, Y+4	; 0x04
    2460:	fc 01       	movw	r30, r24
    2462:	82 81       	ldd	r24, Z+2	; 0x02
    2464:	93 81       	ldd	r25, Z+3	; 0x03
    2466:	2b 81       	ldd	r18, Y+3	; 0x03
    2468:	3c 81       	ldd	r19, Y+4	; 0x04
    246a:	f9 01       	movw	r30, r18
    246c:	24 81       	ldd	r18, Z+4	; 0x04
    246e:	35 81       	ldd	r19, Z+5	; 0x05
    2470:	fc 01       	movw	r30, r24
    2472:	35 83       	std	Z+5, r19	; 0x05
    2474:	24 83       	std	Z+4, r18	; 0x04
    2476:	8b 81       	ldd	r24, Y+3	; 0x03
    2478:	9c 81       	ldd	r25, Y+4	; 0x04
    247a:	fc 01       	movw	r30, r24
    247c:	84 81       	ldd	r24, Z+4	; 0x04
    247e:	95 81       	ldd	r25, Z+5	; 0x05
    2480:	2b 81       	ldd	r18, Y+3	; 0x03
    2482:	3c 81       	ldd	r19, Y+4	; 0x04
    2484:	f9 01       	movw	r30, r18
    2486:	22 81       	ldd	r18, Z+2	; 0x02
    2488:	33 81       	ldd	r19, Z+3	; 0x03
    248a:	fc 01       	movw	r30, r24
    248c:	33 83       	std	Z+3, r19	; 0x03
    248e:	22 83       	std	Z+2, r18	; 0x02
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	9a 81       	ldd	r25, Y+2	; 0x02
    2494:	fc 01       	movw	r30, r24
    2496:	21 81       	ldd	r18, Z+1	; 0x01
    2498:	32 81       	ldd	r19, Z+2	; 0x02
    249a:	8b 81       	ldd	r24, Y+3	; 0x03
    249c:	9c 81       	ldd	r25, Y+4	; 0x04
    249e:	28 17       	cp	r18, r24
    24a0:	39 07       	cpc	r19, r25
    24a2:	51 f4       	brne	.+20     	; 0x24b8 <uxListRemove+0x7a>
    24a4:	8b 81       	ldd	r24, Y+3	; 0x03
    24a6:	9c 81       	ldd	r25, Y+4	; 0x04
    24a8:	fc 01       	movw	r30, r24
    24aa:	24 81       	ldd	r18, Z+4	; 0x04
    24ac:	35 81       	ldd	r19, Z+5	; 0x05
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	9a 81       	ldd	r25, Y+2	; 0x02
    24b2:	fc 01       	movw	r30, r24
    24b4:	32 83       	std	Z+2, r19	; 0x02
    24b6:	21 83       	std	Z+1, r18	; 0x01
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	fc 01       	movw	r30, r24
    24be:	11 86       	std	Z+9, r1	; 0x09
    24c0:	10 86       	std	Z+8, r1	; 0x08
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	9a 81       	ldd	r25, Y+2	; 0x02
    24c6:	fc 01       	movw	r30, r24
    24c8:	80 81       	ld	r24, Z
    24ca:	2f ef       	ldi	r18, 0xFF	; 255
    24cc:	28 0f       	add	r18, r24
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	9a 81       	ldd	r25, Y+2	; 0x02
    24d2:	fc 01       	movw	r30, r24
    24d4:	20 83       	st	Z, r18
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	9a 81       	ldd	r25, Y+2	; 0x02
    24da:	fc 01       	movw	r30, r24
    24dc:	80 81       	ld	r24, Z
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	df 91       	pop	r29
    24e8:	cf 91       	pop	r28
    24ea:	08 95       	ret

000024ec <pxPortInitialiseStack>:
    24ec:	cf 93       	push	r28
    24ee:	df 93       	push	r29
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	28 97       	sbiw	r28, 0x08	; 8
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	9c 83       	std	Y+4, r25	; 0x04
    2502:	8b 83       	std	Y+3, r24	; 0x03
    2504:	7e 83       	std	Y+6, r23	; 0x06
    2506:	6d 83       	std	Y+5, r22	; 0x05
    2508:	58 87       	std	Y+8, r21	; 0x08
    250a:	4f 83       	std	Y+7, r20	; 0x07
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	9c 81       	ldd	r25, Y+4	; 0x04
    2510:	21 e1       	ldi	r18, 0x11	; 17
    2512:	fc 01       	movw	r30, r24
    2514:	20 83       	st	Z, r18
    2516:	8b 81       	ldd	r24, Y+3	; 0x03
    2518:	9c 81       	ldd	r25, Y+4	; 0x04
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	9c 83       	std	Y+4, r25	; 0x04
    251e:	8b 83       	std	Y+3, r24	; 0x03
    2520:	8b 81       	ldd	r24, Y+3	; 0x03
    2522:	9c 81       	ldd	r25, Y+4	; 0x04
    2524:	22 e2       	ldi	r18, 0x22	; 34
    2526:	fc 01       	movw	r30, r24
    2528:	20 83       	st	Z, r18
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	9c 81       	ldd	r25, Y+4	; 0x04
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	9c 83       	std	Y+4, r25	; 0x04
    2532:	8b 83       	std	Y+3, r24	; 0x03
    2534:	8b 81       	ldd	r24, Y+3	; 0x03
    2536:	9c 81       	ldd	r25, Y+4	; 0x04
    2538:	23 e3       	ldi	r18, 0x33	; 51
    253a:	fc 01       	movw	r30, r24
    253c:	20 83       	st	Z, r18
    253e:	8b 81       	ldd	r24, Y+3	; 0x03
    2540:	9c 81       	ldd	r25, Y+4	; 0x04
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	9c 83       	std	Y+4, r25	; 0x04
    2546:	8b 83       	std	Y+3, r24	; 0x03
    2548:	8d 81       	ldd	r24, Y+5	; 0x05
    254a:	9e 81       	ldd	r25, Y+6	; 0x06
    254c:	9a 83       	std	Y+2, r25	; 0x02
    254e:	89 83       	std	Y+1, r24	; 0x01
    2550:	29 81       	ldd	r18, Y+1	; 0x01
    2552:	8b 81       	ldd	r24, Y+3	; 0x03
    2554:	9c 81       	ldd	r25, Y+4	; 0x04
    2556:	fc 01       	movw	r30, r24
    2558:	20 83       	st	Z, r18
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	9c 81       	ldd	r25, Y+4	; 0x04
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	9c 83       	std	Y+4, r25	; 0x04
    2562:	8b 83       	std	Y+3, r24	; 0x03
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	9a 81       	ldd	r25, Y+2	; 0x02
    2568:	89 2f       	mov	r24, r25
    256a:	99 27       	eor	r25, r25
    256c:	9a 83       	std	Y+2, r25	; 0x02
    256e:	89 83       	std	Y+1, r24	; 0x01
    2570:	29 81       	ldd	r18, Y+1	; 0x01
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	9c 81       	ldd	r25, Y+4	; 0x04
    2576:	fc 01       	movw	r30, r24
    2578:	20 83       	st	Z, r18
    257a:	8b 81       	ldd	r24, Y+3	; 0x03
    257c:	9c 81       	ldd	r25, Y+4	; 0x04
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	9c 83       	std	Y+4, r25	; 0x04
    2582:	8b 83       	std	Y+3, r24	; 0x03
    2584:	8b 81       	ldd	r24, Y+3	; 0x03
    2586:	9c 81       	ldd	r25, Y+4	; 0x04
    2588:	fc 01       	movw	r30, r24
    258a:	10 82       	st	Z, r1
    258c:	8b 81       	ldd	r24, Y+3	; 0x03
    258e:	9c 81       	ldd	r25, Y+4	; 0x04
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	9c 83       	std	Y+4, r25	; 0x04
    2594:	8b 83       	std	Y+3, r24	; 0x03
    2596:	8b 81       	ldd	r24, Y+3	; 0x03
    2598:	9c 81       	ldd	r25, Y+4	; 0x04
    259a:	20 e8       	ldi	r18, 0x80	; 128
    259c:	fc 01       	movw	r30, r24
    259e:	20 83       	st	Z, r18
    25a0:	8b 81       	ldd	r24, Y+3	; 0x03
    25a2:	9c 81       	ldd	r25, Y+4	; 0x04
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	9c 83       	std	Y+4, r25	; 0x04
    25a8:	8b 83       	std	Y+3, r24	; 0x03
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	9c 81       	ldd	r25, Y+4	; 0x04
    25ae:	fc 01       	movw	r30, r24
    25b0:	10 82       	st	Z, r1
    25b2:	8b 81       	ldd	r24, Y+3	; 0x03
    25b4:	9c 81       	ldd	r25, Y+4	; 0x04
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	9c 83       	std	Y+4, r25	; 0x04
    25ba:	8b 83       	std	Y+3, r24	; 0x03
    25bc:	8b 81       	ldd	r24, Y+3	; 0x03
    25be:	9c 81       	ldd	r25, Y+4	; 0x04
    25c0:	22 e0       	ldi	r18, 0x02	; 2
    25c2:	fc 01       	movw	r30, r24
    25c4:	20 83       	st	Z, r18
    25c6:	8b 81       	ldd	r24, Y+3	; 0x03
    25c8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	9c 83       	std	Y+4, r25	; 0x04
    25ce:	8b 83       	std	Y+3, r24	; 0x03
    25d0:	8b 81       	ldd	r24, Y+3	; 0x03
    25d2:	9c 81       	ldd	r25, Y+4	; 0x04
    25d4:	23 e0       	ldi	r18, 0x03	; 3
    25d6:	fc 01       	movw	r30, r24
    25d8:	20 83       	st	Z, r18
    25da:	8b 81       	ldd	r24, Y+3	; 0x03
    25dc:	9c 81       	ldd	r25, Y+4	; 0x04
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	9c 83       	std	Y+4, r25	; 0x04
    25e2:	8b 83       	std	Y+3, r24	; 0x03
    25e4:	8b 81       	ldd	r24, Y+3	; 0x03
    25e6:	9c 81       	ldd	r25, Y+4	; 0x04
    25e8:	24 e0       	ldi	r18, 0x04	; 4
    25ea:	fc 01       	movw	r30, r24
    25ec:	20 83       	st	Z, r18
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	9c 81       	ldd	r25, Y+4	; 0x04
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	9c 83       	std	Y+4, r25	; 0x04
    25f6:	8b 83       	std	Y+3, r24	; 0x03
    25f8:	8b 81       	ldd	r24, Y+3	; 0x03
    25fa:	9c 81       	ldd	r25, Y+4	; 0x04
    25fc:	25 e0       	ldi	r18, 0x05	; 5
    25fe:	fc 01       	movw	r30, r24
    2600:	20 83       	st	Z, r18
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	9c 81       	ldd	r25, Y+4	; 0x04
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	9c 83       	std	Y+4, r25	; 0x04
    260a:	8b 83       	std	Y+3, r24	; 0x03
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	9c 81       	ldd	r25, Y+4	; 0x04
    2610:	26 e0       	ldi	r18, 0x06	; 6
    2612:	fc 01       	movw	r30, r24
    2614:	20 83       	st	Z, r18
    2616:	8b 81       	ldd	r24, Y+3	; 0x03
    2618:	9c 81       	ldd	r25, Y+4	; 0x04
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	9c 83       	std	Y+4, r25	; 0x04
    261e:	8b 83       	std	Y+3, r24	; 0x03
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	9c 81       	ldd	r25, Y+4	; 0x04
    2624:	27 e0       	ldi	r18, 0x07	; 7
    2626:	fc 01       	movw	r30, r24
    2628:	20 83       	st	Z, r18
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	9c 81       	ldd	r25, Y+4	; 0x04
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	9c 83       	std	Y+4, r25	; 0x04
    2632:	8b 83       	std	Y+3, r24	; 0x03
    2634:	8b 81       	ldd	r24, Y+3	; 0x03
    2636:	9c 81       	ldd	r25, Y+4	; 0x04
    2638:	28 e0       	ldi	r18, 0x08	; 8
    263a:	fc 01       	movw	r30, r24
    263c:	20 83       	st	Z, r18
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	9c 81       	ldd	r25, Y+4	; 0x04
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	9c 83       	std	Y+4, r25	; 0x04
    2646:	8b 83       	std	Y+3, r24	; 0x03
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	9c 81       	ldd	r25, Y+4	; 0x04
    264c:	29 e0       	ldi	r18, 0x09	; 9
    264e:	fc 01       	movw	r30, r24
    2650:	20 83       	st	Z, r18
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	9c 81       	ldd	r25, Y+4	; 0x04
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	9c 83       	std	Y+4, r25	; 0x04
    265a:	8b 83       	std	Y+3, r24	; 0x03
    265c:	8b 81       	ldd	r24, Y+3	; 0x03
    265e:	9c 81       	ldd	r25, Y+4	; 0x04
    2660:	20 e1       	ldi	r18, 0x10	; 16
    2662:	fc 01       	movw	r30, r24
    2664:	20 83       	st	Z, r18
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	9c 81       	ldd	r25, Y+4	; 0x04
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	9c 83       	std	Y+4, r25	; 0x04
    266e:	8b 83       	std	Y+3, r24	; 0x03
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	9c 81       	ldd	r25, Y+4	; 0x04
    2674:	21 e1       	ldi	r18, 0x11	; 17
    2676:	fc 01       	movw	r30, r24
    2678:	20 83       	st	Z, r18
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	9c 81       	ldd	r25, Y+4	; 0x04
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	9c 83       	std	Y+4, r25	; 0x04
    2682:	8b 83       	std	Y+3, r24	; 0x03
    2684:	8b 81       	ldd	r24, Y+3	; 0x03
    2686:	9c 81       	ldd	r25, Y+4	; 0x04
    2688:	22 e1       	ldi	r18, 0x12	; 18
    268a:	fc 01       	movw	r30, r24
    268c:	20 83       	st	Z, r18
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	9c 81       	ldd	r25, Y+4	; 0x04
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	9c 83       	std	Y+4, r25	; 0x04
    2696:	8b 83       	std	Y+3, r24	; 0x03
    2698:	8b 81       	ldd	r24, Y+3	; 0x03
    269a:	9c 81       	ldd	r25, Y+4	; 0x04
    269c:	23 e1       	ldi	r18, 0x13	; 19
    269e:	fc 01       	movw	r30, r24
    26a0:	20 83       	st	Z, r18
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	9c 81       	ldd	r25, Y+4	; 0x04
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	9c 83       	std	Y+4, r25	; 0x04
    26aa:	8b 83       	std	Y+3, r24	; 0x03
    26ac:	8b 81       	ldd	r24, Y+3	; 0x03
    26ae:	9c 81       	ldd	r25, Y+4	; 0x04
    26b0:	24 e1       	ldi	r18, 0x14	; 20
    26b2:	fc 01       	movw	r30, r24
    26b4:	20 83       	st	Z, r18
    26b6:	8b 81       	ldd	r24, Y+3	; 0x03
    26b8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	9c 83       	std	Y+4, r25	; 0x04
    26be:	8b 83       	std	Y+3, r24	; 0x03
    26c0:	8b 81       	ldd	r24, Y+3	; 0x03
    26c2:	9c 81       	ldd	r25, Y+4	; 0x04
    26c4:	25 e1       	ldi	r18, 0x15	; 21
    26c6:	fc 01       	movw	r30, r24
    26c8:	20 83       	st	Z, r18
    26ca:	8b 81       	ldd	r24, Y+3	; 0x03
    26cc:	9c 81       	ldd	r25, Y+4	; 0x04
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	9c 83       	std	Y+4, r25	; 0x04
    26d2:	8b 83       	std	Y+3, r24	; 0x03
    26d4:	8b 81       	ldd	r24, Y+3	; 0x03
    26d6:	9c 81       	ldd	r25, Y+4	; 0x04
    26d8:	26 e1       	ldi	r18, 0x16	; 22
    26da:	fc 01       	movw	r30, r24
    26dc:	20 83       	st	Z, r18
    26de:	8b 81       	ldd	r24, Y+3	; 0x03
    26e0:	9c 81       	ldd	r25, Y+4	; 0x04
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	9c 83       	std	Y+4, r25	; 0x04
    26e6:	8b 83       	std	Y+3, r24	; 0x03
    26e8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ea:	9c 81       	ldd	r25, Y+4	; 0x04
    26ec:	27 e1       	ldi	r18, 0x17	; 23
    26ee:	fc 01       	movw	r30, r24
    26f0:	20 83       	st	Z, r18
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	9c 81       	ldd	r25, Y+4	; 0x04
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	9c 83       	std	Y+4, r25	; 0x04
    26fa:	8b 83       	std	Y+3, r24	; 0x03
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2700:	28 e1       	ldi	r18, 0x18	; 24
    2702:	fc 01       	movw	r30, r24
    2704:	20 83       	st	Z, r18
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	9c 81       	ldd	r25, Y+4	; 0x04
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	9c 83       	std	Y+4, r25	; 0x04
    270e:	8b 83       	std	Y+3, r24	; 0x03
    2710:	8b 81       	ldd	r24, Y+3	; 0x03
    2712:	9c 81       	ldd	r25, Y+4	; 0x04
    2714:	29 e1       	ldi	r18, 0x19	; 25
    2716:	fc 01       	movw	r30, r24
    2718:	20 83       	st	Z, r18
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	9c 81       	ldd	r25, Y+4	; 0x04
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	9c 83       	std	Y+4, r25	; 0x04
    2722:	8b 83       	std	Y+3, r24	; 0x03
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	9c 81       	ldd	r25, Y+4	; 0x04
    2728:	20 e2       	ldi	r18, 0x20	; 32
    272a:	fc 01       	movw	r30, r24
    272c:	20 83       	st	Z, r18
    272e:	8b 81       	ldd	r24, Y+3	; 0x03
    2730:	9c 81       	ldd	r25, Y+4	; 0x04
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	9c 83       	std	Y+4, r25	; 0x04
    2736:	8b 83       	std	Y+3, r24	; 0x03
    2738:	8b 81       	ldd	r24, Y+3	; 0x03
    273a:	9c 81       	ldd	r25, Y+4	; 0x04
    273c:	21 e2       	ldi	r18, 0x21	; 33
    273e:	fc 01       	movw	r30, r24
    2740:	20 83       	st	Z, r18
    2742:	8b 81       	ldd	r24, Y+3	; 0x03
    2744:	9c 81       	ldd	r25, Y+4	; 0x04
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	9c 83       	std	Y+4, r25	; 0x04
    274a:	8b 83       	std	Y+3, r24	; 0x03
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	9c 81       	ldd	r25, Y+4	; 0x04
    2750:	22 e2       	ldi	r18, 0x22	; 34
    2752:	fc 01       	movw	r30, r24
    2754:	20 83       	st	Z, r18
    2756:	8b 81       	ldd	r24, Y+3	; 0x03
    2758:	9c 81       	ldd	r25, Y+4	; 0x04
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	9c 83       	std	Y+4, r25	; 0x04
    275e:	8b 83       	std	Y+3, r24	; 0x03
    2760:	8b 81       	ldd	r24, Y+3	; 0x03
    2762:	9c 81       	ldd	r25, Y+4	; 0x04
    2764:	23 e2       	ldi	r18, 0x23	; 35
    2766:	fc 01       	movw	r30, r24
    2768:	20 83       	st	Z, r18
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	9c 81       	ldd	r25, Y+4	; 0x04
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	9c 83       	std	Y+4, r25	; 0x04
    2772:	8b 83       	std	Y+3, r24	; 0x03
    2774:	8f 81       	ldd	r24, Y+7	; 0x07
    2776:	98 85       	ldd	r25, Y+8	; 0x08
    2778:	9a 83       	std	Y+2, r25	; 0x02
    277a:	89 83       	std	Y+1, r24	; 0x01
    277c:	29 81       	ldd	r18, Y+1	; 0x01
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	9c 81       	ldd	r25, Y+4	; 0x04
    2782:	fc 01       	movw	r30, r24
    2784:	20 83       	st	Z, r18
    2786:	8b 81       	ldd	r24, Y+3	; 0x03
    2788:	9c 81       	ldd	r25, Y+4	; 0x04
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	9c 83       	std	Y+4, r25	; 0x04
    278e:	8b 83       	std	Y+3, r24	; 0x03
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	9a 81       	ldd	r25, Y+2	; 0x02
    2794:	89 2f       	mov	r24, r25
    2796:	99 27       	eor	r25, r25
    2798:	9a 83       	std	Y+2, r25	; 0x02
    279a:	89 83       	std	Y+1, r24	; 0x01
    279c:	29 81       	ldd	r18, Y+1	; 0x01
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
    27a0:	9c 81       	ldd	r25, Y+4	; 0x04
    27a2:	fc 01       	movw	r30, r24
    27a4:	20 83       	st	Z, r18
    27a6:	8b 81       	ldd	r24, Y+3	; 0x03
    27a8:	9c 81       	ldd	r25, Y+4	; 0x04
    27aa:	01 97       	sbiw	r24, 0x01	; 1
    27ac:	9c 83       	std	Y+4, r25	; 0x04
    27ae:	8b 83       	std	Y+3, r24	; 0x03
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	9c 81       	ldd	r25, Y+4	; 0x04
    27b4:	26 e2       	ldi	r18, 0x26	; 38
    27b6:	fc 01       	movw	r30, r24
    27b8:	20 83       	st	Z, r18
    27ba:	8b 81       	ldd	r24, Y+3	; 0x03
    27bc:	9c 81       	ldd	r25, Y+4	; 0x04
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	9c 83       	std	Y+4, r25	; 0x04
    27c2:	8b 83       	std	Y+3, r24	; 0x03
    27c4:	8b 81       	ldd	r24, Y+3	; 0x03
    27c6:	9c 81       	ldd	r25, Y+4	; 0x04
    27c8:	27 e2       	ldi	r18, 0x27	; 39
    27ca:	fc 01       	movw	r30, r24
    27cc:	20 83       	st	Z, r18
    27ce:	8b 81       	ldd	r24, Y+3	; 0x03
    27d0:	9c 81       	ldd	r25, Y+4	; 0x04
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	9c 83       	std	Y+4, r25	; 0x04
    27d6:	8b 83       	std	Y+3, r24	; 0x03
    27d8:	8b 81       	ldd	r24, Y+3	; 0x03
    27da:	9c 81       	ldd	r25, Y+4	; 0x04
    27dc:	28 e2       	ldi	r18, 0x28	; 40
    27de:	fc 01       	movw	r30, r24
    27e0:	20 83       	st	Z, r18
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	9c 81       	ldd	r25, Y+4	; 0x04
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	9c 83       	std	Y+4, r25	; 0x04
    27ea:	8b 83       	std	Y+3, r24	; 0x03
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	9c 81       	ldd	r25, Y+4	; 0x04
    27f0:	29 e2       	ldi	r18, 0x29	; 41
    27f2:	fc 01       	movw	r30, r24
    27f4:	20 83       	st	Z, r18
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	9c 81       	ldd	r25, Y+4	; 0x04
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	9c 83       	std	Y+4, r25	; 0x04
    27fe:	8b 83       	std	Y+3, r24	; 0x03
    2800:	8b 81       	ldd	r24, Y+3	; 0x03
    2802:	9c 81       	ldd	r25, Y+4	; 0x04
    2804:	20 e3       	ldi	r18, 0x30	; 48
    2806:	fc 01       	movw	r30, r24
    2808:	20 83       	st	Z, r18
    280a:	8b 81       	ldd	r24, Y+3	; 0x03
    280c:	9c 81       	ldd	r25, Y+4	; 0x04
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	9c 83       	std	Y+4, r25	; 0x04
    2812:	8b 83       	std	Y+3, r24	; 0x03
    2814:	8b 81       	ldd	r24, Y+3	; 0x03
    2816:	9c 81       	ldd	r25, Y+4	; 0x04
    2818:	21 e3       	ldi	r18, 0x31	; 49
    281a:	fc 01       	movw	r30, r24
    281c:	20 83       	st	Z, r18
    281e:	8b 81       	ldd	r24, Y+3	; 0x03
    2820:	9c 81       	ldd	r25, Y+4	; 0x04
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	9c 83       	std	Y+4, r25	; 0x04
    2826:	8b 83       	std	Y+3, r24	; 0x03
    2828:	8b 81       	ldd	r24, Y+3	; 0x03
    282a:	9c 81       	ldd	r25, Y+4	; 0x04
    282c:	28 96       	adiw	r28, 0x08	; 8
    282e:	0f b6       	in	r0, 0x3f	; 63
    2830:	f8 94       	cli
    2832:	de bf       	out	0x3e, r29	; 62
    2834:	0f be       	out	0x3f, r0	; 63
    2836:	cd bf       	out	0x3d, r28	; 61
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	08 95       	ret

0000283e <xPortStartScheduler>:
    283e:	cf 93       	push	r28
    2840:	df 93       	push	r29
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <prvSetupTimerInterrupt>
    284a:	a0 91 c6 07 	lds	r26, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    284e:	b0 91 c7 07 	lds	r27, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    2852:	cd 91       	ld	r28, X+
    2854:	cd bf       	out	0x3d, r28	; 61
    2856:	dd 91       	ld	r29, X+
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	ff 91       	pop	r31
    285c:	ef 91       	pop	r30
    285e:	df 91       	pop	r29
    2860:	cf 91       	pop	r28
    2862:	bf 91       	pop	r27
    2864:	af 91       	pop	r26
    2866:	9f 91       	pop	r25
    2868:	8f 91       	pop	r24
    286a:	7f 91       	pop	r23
    286c:	6f 91       	pop	r22
    286e:	5f 91       	pop	r21
    2870:	4f 91       	pop	r20
    2872:	3f 91       	pop	r19
    2874:	2f 91       	pop	r18
    2876:	1f 91       	pop	r17
    2878:	0f 91       	pop	r16
    287a:	ff 90       	pop	r15
    287c:	ef 90       	pop	r14
    287e:	df 90       	pop	r13
    2880:	cf 90       	pop	r12
    2882:	bf 90       	pop	r11
    2884:	af 90       	pop	r10
    2886:	9f 90       	pop	r9
    2888:	8f 90       	pop	r8
    288a:	7f 90       	pop	r7
    288c:	6f 90       	pop	r6
    288e:	5f 90       	pop	r5
    2890:	4f 90       	pop	r4
    2892:	3f 90       	pop	r3
    2894:	2f 90       	pop	r2
    2896:	1f 90       	pop	r1
    2898:	0f 90       	pop	r0
    289a:	0f be       	out	0x3f, r0	; 63
    289c:	0f 90       	pop	r0
    289e:	08 95       	ret
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	08 95       	ret

000028a8 <vPortYield>:
    28a8:	0f 92       	push	r0
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	0f 92       	push	r0
    28b0:	1f 92       	push	r1
    28b2:	11 24       	eor	r1, r1
    28b4:	2f 92       	push	r2
    28b6:	3f 92       	push	r3
    28b8:	4f 92       	push	r4
    28ba:	5f 92       	push	r5
    28bc:	6f 92       	push	r6
    28be:	7f 92       	push	r7
    28c0:	8f 92       	push	r8
    28c2:	9f 92       	push	r9
    28c4:	af 92       	push	r10
    28c6:	bf 92       	push	r11
    28c8:	cf 92       	push	r12
    28ca:	df 92       	push	r13
    28cc:	ef 92       	push	r14
    28ce:	ff 92       	push	r15
    28d0:	0f 93       	push	r16
    28d2:	1f 93       	push	r17
    28d4:	2f 93       	push	r18
    28d6:	3f 93       	push	r19
    28d8:	4f 93       	push	r20
    28da:	5f 93       	push	r21
    28dc:	6f 93       	push	r22
    28de:	7f 93       	push	r23
    28e0:	8f 93       	push	r24
    28e2:	9f 93       	push	r25
    28e4:	af 93       	push	r26
    28e6:	bf 93       	push	r27
    28e8:	cf 93       	push	r28
    28ea:	df 93       	push	r29
    28ec:	ef 93       	push	r30
    28ee:	ff 93       	push	r31
    28f0:	a0 91 c6 07 	lds	r26, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    28f4:	b0 91 c7 07 	lds	r27, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    28f8:	0d b6       	in	r0, 0x3d	; 61
    28fa:	0d 92       	st	X+, r0
    28fc:	0e b6       	in	r0, 0x3e	; 62
    28fe:	0d 92       	st	X+, r0
    2900:	0e 94 2d 23 	call	0x465a	; 0x465a <vTaskSwitchContext>
    2904:	a0 91 c6 07 	lds	r26, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    2908:	b0 91 c7 07 	lds	r27, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    290c:	cd 91       	ld	r28, X+
    290e:	cd bf       	out	0x3d, r28	; 61
    2910:	dd 91       	ld	r29, X+
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	ff 91       	pop	r31
    2916:	ef 91       	pop	r30
    2918:	df 91       	pop	r29
    291a:	cf 91       	pop	r28
    291c:	bf 91       	pop	r27
    291e:	af 91       	pop	r26
    2920:	9f 91       	pop	r25
    2922:	8f 91       	pop	r24
    2924:	7f 91       	pop	r23
    2926:	6f 91       	pop	r22
    2928:	5f 91       	pop	r21
    292a:	4f 91       	pop	r20
    292c:	3f 91       	pop	r19
    292e:	2f 91       	pop	r18
    2930:	1f 91       	pop	r17
    2932:	0f 91       	pop	r16
    2934:	ff 90       	pop	r15
    2936:	ef 90       	pop	r14
    2938:	df 90       	pop	r13
    293a:	cf 90       	pop	r12
    293c:	bf 90       	pop	r11
    293e:	af 90       	pop	r10
    2940:	9f 90       	pop	r9
    2942:	8f 90       	pop	r8
    2944:	7f 90       	pop	r7
    2946:	6f 90       	pop	r6
    2948:	5f 90       	pop	r5
    294a:	4f 90       	pop	r4
    294c:	3f 90       	pop	r3
    294e:	2f 90       	pop	r2
    2950:	1f 90       	pop	r1
    2952:	0f 90       	pop	r0
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	0f 90       	pop	r0
    2958:	08 95       	ret
	...

0000295c <vPortYieldFromTick>:
    295c:	0f 92       	push	r0
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	0f 92       	push	r0
    2964:	1f 92       	push	r1
    2966:	11 24       	eor	r1, r1
    2968:	2f 92       	push	r2
    296a:	3f 92       	push	r3
    296c:	4f 92       	push	r4
    296e:	5f 92       	push	r5
    2970:	6f 92       	push	r6
    2972:	7f 92       	push	r7
    2974:	8f 92       	push	r8
    2976:	9f 92       	push	r9
    2978:	af 92       	push	r10
    297a:	bf 92       	push	r11
    297c:	cf 92       	push	r12
    297e:	df 92       	push	r13
    2980:	ef 92       	push	r14
    2982:	ff 92       	push	r15
    2984:	0f 93       	push	r16
    2986:	1f 93       	push	r17
    2988:	2f 93       	push	r18
    298a:	3f 93       	push	r19
    298c:	4f 93       	push	r20
    298e:	5f 93       	push	r21
    2990:	6f 93       	push	r22
    2992:	7f 93       	push	r23
    2994:	8f 93       	push	r24
    2996:	9f 93       	push	r25
    2998:	af 93       	push	r26
    299a:	bf 93       	push	r27
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
    29a0:	ef 93       	push	r30
    29a2:	ff 93       	push	r31
    29a4:	a0 91 c6 07 	lds	r26, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    29a8:	b0 91 c7 07 	lds	r27, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    29ac:	0d b6       	in	r0, 0x3d	; 61
    29ae:	0d 92       	st	X+, r0
    29b0:	0e b6       	in	r0, 0x3e	; 62
    29b2:	0d 92       	st	X+, r0
    29b4:	0e 94 40 22 	call	0x4480	; 0x4480 <xTaskIncrementTick>
    29b8:	88 23       	and	r24, r24
    29ba:	11 f0       	breq	.+4      	; 0x29c0 <vPortYieldFromTick+0x64>
    29bc:	0e 94 2d 23 	call	0x465a	; 0x465a <vTaskSwitchContext>
    29c0:	a0 91 c6 07 	lds	r26, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    29c4:	b0 91 c7 07 	lds	r27, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    29c8:	cd 91       	ld	r28, X+
    29ca:	cd bf       	out	0x3d, r28	; 61
    29cc:	dd 91       	ld	r29, X+
    29ce:	de bf       	out	0x3e, r29	; 62
    29d0:	ff 91       	pop	r31
    29d2:	ef 91       	pop	r30
    29d4:	df 91       	pop	r29
    29d6:	cf 91       	pop	r28
    29d8:	bf 91       	pop	r27
    29da:	af 91       	pop	r26
    29dc:	9f 91       	pop	r25
    29de:	8f 91       	pop	r24
    29e0:	7f 91       	pop	r23
    29e2:	6f 91       	pop	r22
    29e4:	5f 91       	pop	r21
    29e6:	4f 91       	pop	r20
    29e8:	3f 91       	pop	r19
    29ea:	2f 91       	pop	r18
    29ec:	1f 91       	pop	r17
    29ee:	0f 91       	pop	r16
    29f0:	ff 90       	pop	r15
    29f2:	ef 90       	pop	r14
    29f4:	df 90       	pop	r13
    29f6:	cf 90       	pop	r12
    29f8:	bf 90       	pop	r11
    29fa:	af 90       	pop	r10
    29fc:	9f 90       	pop	r9
    29fe:	8f 90       	pop	r8
    2a00:	7f 90       	pop	r7
    2a02:	6f 90       	pop	r6
    2a04:	5f 90       	pop	r5
    2a06:	4f 90       	pop	r4
    2a08:	3f 90       	pop	r3
    2a0a:	2f 90       	pop	r2
    2a0c:	1f 90       	pop	r1
    2a0e:	0f 90       	pop	r0
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	0f 90       	pop	r0
    2a14:	08 95       	ret
	...

00002a18 <prvSetupTimerInterrupt>:
    2a18:	cf 93       	push	r28
    2a1a:	df 93       	push	r29
    2a1c:	00 d0       	rcall	.+0      	; 0x2a1e <prvSetupTimerInterrupt+0x6>
    2a1e:	00 d0       	rcall	.+0      	; 0x2a20 <prvSetupTimerInterrupt+0x8>
    2a20:	00 d0       	rcall	.+0      	; 0x2a22 <prvSetupTimerInterrupt+0xa>
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
    2a26:	89 e9       	ldi	r24, 0x99	; 153
    2a28:	99 e3       	ldi	r25, 0x39	; 57
    2a2a:	a0 e0       	ldi	r26, 0x00	; 0
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	89 83       	std	Y+1, r24	; 0x01
    2a30:	9a 83       	std	Y+2, r25	; 0x02
    2a32:	ab 83       	std	Y+3, r26	; 0x03
    2a34:	bc 83       	std	Y+4, r27	; 0x04
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3a:	ab 81       	ldd	r26, Y+3	; 0x03
    2a3c:	bc 81       	ldd	r27, Y+4	; 0x04
    2a3e:	68 94       	set
    2a40:	15 f8       	bld	r1, 5
    2a42:	b6 95       	lsr	r27
    2a44:	a7 95       	ror	r26
    2a46:	97 95       	ror	r25
    2a48:	87 95       	ror	r24
    2a4a:	16 94       	lsr	r1
    2a4c:	d1 f7       	brne	.-12     	; 0x2a42 <prvSetupTimerInterrupt+0x2a>
    2a4e:	89 83       	std	Y+1, r24	; 0x01
    2a50:	9a 83       	std	Y+2, r25	; 0x02
    2a52:	ab 83       	std	Y+3, r26	; 0x03
    2a54:	bc 83       	std	Y+4, r27	; 0x04
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5a:	ab 81       	ldd	r26, Y+3	; 0x03
    2a5c:	bc 81       	ldd	r27, Y+4	; 0x04
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	a1 09       	sbc	r26, r1
    2a62:	b1 09       	sbc	r27, r1
    2a64:	89 83       	std	Y+1, r24	; 0x01
    2a66:	9a 83       	std	Y+2, r25	; 0x02
    2a68:	ab 83       	std	Y+3, r26	; 0x03
    2a6a:	bc 83       	std	Y+4, r27	; 0x04
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	8d 83       	std	Y+5, r24	; 0x05
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	9a 81       	ldd	r25, Y+2	; 0x02
    2a74:	ab 81       	ldd	r26, Y+3	; 0x03
    2a76:	bc 81       	ldd	r27, Y+4	; 0x04
    2a78:	89 2f       	mov	r24, r25
    2a7a:	9a 2f       	mov	r25, r26
    2a7c:	ab 2f       	mov	r26, r27
    2a7e:	bb 27       	eor	r27, r27
    2a80:	89 83       	std	Y+1, r24	; 0x01
    2a82:	9a 83       	std	Y+2, r25	; 0x02
    2a84:	ab 83       	std	Y+3, r26	; 0x03
    2a86:	bc 83       	std	Y+4, r27	; 0x04
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	8e 83       	std	Y+6, r24	; 0x06
    2a8c:	89 e8       	ldi	r24, 0x89	; 137
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	2e 81       	ldd	r18, Y+6	; 0x06
    2a92:	fc 01       	movw	r30, r24
    2a94:	20 83       	st	Z, r18
    2a96:	88 e8       	ldi	r24, 0x88	; 136
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	2d 81       	ldd	r18, Y+5	; 0x05
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	20 83       	st	Z, r18
    2aa0:	8b e0       	ldi	r24, 0x0B	; 11
    2aa2:	8d 83       	std	Y+5, r24	; 0x05
    2aa4:	81 e8       	ldi	r24, 0x81	; 129
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	2d 81       	ldd	r18, Y+5	; 0x05
    2aaa:	fc 01       	movw	r30, r24
    2aac:	20 83       	st	Z, r18
    2aae:	8f e6       	ldi	r24, 0x6F	; 111
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	80 81       	ld	r24, Z
    2ab6:	8d 83       	std	Y+5, r24	; 0x05
    2ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aba:	82 60       	ori	r24, 0x02	; 2
    2abc:	8d 83       	std	Y+5, r24	; 0x05
    2abe:	8f e6       	ldi	r24, 0x6F	; 111
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	2d 81       	ldd	r18, Y+5	; 0x05
    2ac4:	fc 01       	movw	r30, r24
    2ac6:	20 83       	st	Z, r18
    2ac8:	00 00       	nop
    2aca:	26 96       	adiw	r28, 0x06	; 6
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	de bf       	out	0x3e, r29	; 62
    2ad2:	0f be       	out	0x3f, r0	; 63
    2ad4:	cd bf       	out	0x3d, r28	; 61
    2ad6:	df 91       	pop	r29
    2ad8:	cf 91       	pop	r28
    2ada:	08 95       	ret

00002adc <__vector_13>:
    2adc:	0e 94 ae 14 	call	0x295c	; 0x295c <vPortYieldFromTick>
    2ae0:	18 95       	reti
	...

00002ae4 <_serial_tx_int_on>:
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	00 d0       	rcall	.+0      	; 0x2aea <_serial_tx_int_on+0x6>
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62
    2aee:	9a 83       	std	Y+2, r25	; 0x02
    2af0:	89 83       	std	Y+1, r24	; 0x01
    2af2:	89 81       	ldd	r24, Y+1	; 0x01
    2af4:	9a 81       	ldd	r25, Y+2	; 0x02
    2af6:	05 97       	sbiw	r24, 0x05	; 5
    2af8:	29 81       	ldd	r18, Y+1	; 0x01
    2afa:	3a 81       	ldd	r19, Y+2	; 0x02
    2afc:	25 50       	subi	r18, 0x05	; 5
    2afe:	31 09       	sbc	r19, r1
    2b00:	f9 01       	movw	r30, r18
    2b02:	20 81       	ld	r18, Z
    2b04:	20 62       	ori	r18, 0x20	; 32
    2b06:	fc 01       	movw	r30, r24
    2b08:	20 83       	st	Z, r18
    2b0a:	00 00       	nop
    2b0c:	0f 90       	pop	r0
    2b0e:	0f 90       	pop	r0
    2b10:	df 91       	pop	r29
    2b12:	cf 91       	pop	r28
    2b14:	08 95       	ret

00002b16 <serial_new_instance>:
    2b16:	8f 92       	push	r8
    2b18:	9f 92       	push	r9
    2b1a:	af 92       	push	r10
    2b1c:	bf 92       	push	r11
    2b1e:	cf 92       	push	r12
    2b20:	df 92       	push	r13
    2b22:	ef 92       	push	r14
    2b24:	0f 93       	push	r16
    2b26:	1f 93       	push	r17
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
    2b30:	61 97       	sbiw	r28, 0x11	; 17
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	f8 94       	cli
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	cd bf       	out	0x3d, r28	; 61
    2b3c:	8c 83       	std	Y+4, r24	; 0x04
    2b3e:	4d 83       	std	Y+5, r20	; 0x05
    2b40:	5e 83       	std	Y+6, r21	; 0x06
    2b42:	6f 83       	std	Y+7, r22	; 0x07
    2b44:	78 87       	std	Y+8, r23	; 0x08
    2b46:	29 87       	std	Y+9, r18	; 0x09
    2b48:	0a 87       	std	Y+10, r16	; 0x0a
    2b4a:	eb 86       	std	Y+11, r14	; 0x0b
    2b4c:	dd 86       	std	Y+13, r13	; 0x0d
    2b4e:	cc 86       	std	Y+12, r12	; 0x0c
    2b50:	bf 86       	std	Y+15, r11	; 0x0f
    2b52:	ae 86       	std	Y+14, r10	; 0x0e
    2b54:	99 8a       	std	Y+17, r9	; 0x11
    2b56:	88 8a       	std	Y+16, r8	; 0x10
    2b58:	88 e0       	ldi	r24, 0x08	; 8
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <pvPortMalloc>
    2b60:	9a 83       	std	Y+2, r25	; 0x02
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	8c 81       	ldd	r24, Y+4	; 0x04
    2b66:	88 2f       	mov	r24, r24
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	88 0f       	add	r24, r24
    2b6c:	99 1f       	adc	r25, r25
    2b6e:	8f 5b       	subi	r24, 0xBF	; 191
    2b70:	9d 4f       	sbci	r25, 0xFD	; 253
    2b72:	29 81       	ldd	r18, Y+1	; 0x01
    2b74:	3a 81       	ldd	r19, Y+2	; 0x02
    2b76:	fc 01       	movw	r30, r24
    2b78:	31 83       	std	Z+1, r19	; 0x01
    2b7a:	20 83       	st	Z, r18
    2b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7e:	88 2f       	mov	r24, r24
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	88 0f       	add	r24, r24
    2b84:	99 1f       	adc	r25, r25
    2b86:	80 5e       	subi	r24, 0xE0	; 224
    2b88:	9e 4f       	sbci	r25, 0xFE	; 254
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	20 81       	ld	r18, Z
    2b8e:	31 81       	ldd	r19, Z+1	; 0x01
    2b90:	89 81       	ldd	r24, Y+1	; 0x01
    2b92:	9a 81       	ldd	r25, Y+2	; 0x02
    2b94:	fc 01       	movw	r30, r24
    2b96:	31 83       	std	Z+1, r19	; 0x01
    2b98:	20 83       	st	Z, r18
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2ba0:	3f 85       	ldd	r19, Y+15	; 0x0f
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	33 83       	std	Z+3, r19	; 0x03
    2ba6:	22 83       	std	Z+2, r18	; 0x02
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
    2baa:	9a 81       	ldd	r25, Y+2	; 0x02
    2bac:	2c 85       	ldd	r18, Y+12	; 0x0c
    2bae:	3d 85       	ldd	r19, Y+13	; 0x0d
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	35 83       	std	Z+5, r19	; 0x05
    2bb4:	24 83       	std	Z+4, r18	; 0x04
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bba:	28 89       	ldd	r18, Y+16	; 0x10
    2bbc:	39 89       	ldd	r19, Y+17	; 0x11
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	37 83       	std	Z+7, r19	; 0x07
    2bc2:	26 83       	std	Z+6, r18	; 0x06
    2bc4:	8f e5       	ldi	r24, 0x5F	; 95
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	fc 01       	movw	r30, r24
    2bca:	80 81       	ld	r24, Z
    2bcc:	8b 83       	std	Y+3, r24	; 0x03
    2bce:	f8 94       	cli
    2bd0:	89 81       	ldd	r24, Y+1	; 0x01
    2bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	80 81       	ld	r24, Z
    2bd8:	91 81       	ldd	r25, Z+1	; 0x01
    2bda:	06 97       	sbiw	r24, 0x06	; 6
    2bdc:	29 81       	ldd	r18, Y+1	; 0x01
    2bde:	3a 81       	ldd	r19, Y+2	; 0x02
    2be0:	f9 01       	movw	r30, r18
    2be2:	20 81       	ld	r18, Z
    2be4:	31 81       	ldd	r19, Z+1	; 0x01
    2be6:	26 50       	subi	r18, 0x06	; 6
    2be8:	31 09       	sbc	r19, r1
    2bea:	f9 01       	movw	r30, r18
    2bec:	20 81       	ld	r18, Z
    2bee:	22 60       	ori	r18, 0x02	; 2
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	20 83       	st	Z, r18
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	80 81       	ld	r24, Z
    2bfc:	91 81       	ldd	r25, Z+1	; 0x01
    2bfe:	8c 01       	movw	r16, r24
    2c00:	02 50       	subi	r16, 0x02	; 2
    2c02:	11 09       	sbc	r17, r1
    2c04:	8d 81       	ldd	r24, Y+5	; 0x05
    2c06:	9e 81       	ldd	r25, Y+6	; 0x06
    2c08:	af 81       	ldd	r26, Y+7	; 0x07
    2c0a:	b8 85       	ldd	r27, Y+8	; 0x08
    2c0c:	88 0f       	add	r24, r24
    2c0e:	99 1f       	adc	r25, r25
    2c10:	aa 1f       	adc	r26, r26
    2c12:	bb 1f       	adc	r27, r27
    2c14:	88 0f       	add	r24, r24
    2c16:	99 1f       	adc	r25, r25
    2c18:	aa 1f       	adc	r26, r26
    2c1a:	bb 1f       	adc	r27, r27
    2c1c:	88 0f       	add	r24, r24
    2c1e:	99 1f       	adc	r25, r25
    2c20:	aa 1f       	adc	r26, r26
    2c22:	bb 1f       	adc	r27, r27
    2c24:	9c 01       	movw	r18, r24
    2c26:	ad 01       	movw	r20, r26
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	a1 ee       	ldi	r26, 0xE1	; 225
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	bc 01       	movw	r22, r24
    2c32:	cd 01       	movw	r24, r26
    2c34:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <__udivmodsi4>
    2c38:	da 01       	movw	r26, r20
    2c3a:	c9 01       	movw	r24, r18
    2c3c:	81 50       	subi	r24, 0x01	; 1
    2c3e:	f8 01       	movw	r30, r16
    2c40:	80 83       	st	Z, r24
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	9a 81       	ldd	r25, Y+2	; 0x02
    2c46:	fc 01       	movw	r30, r24
    2c48:	80 81       	ld	r24, Z
    2c4a:	91 81       	ldd	r25, Z+1	; 0x01
    2c4c:	05 97       	sbiw	r24, 0x05	; 5
    2c4e:	28 e9       	ldi	r18, 0x98	; 152
    2c50:	fc 01       	movw	r30, r24
    2c52:	20 83       	st	Z, r18
    2c54:	89 81       	ldd	r24, Y+1	; 0x01
    2c56:	9a 81       	ldd	r25, Y+2	; 0x02
    2c58:	fc 01       	movw	r30, r24
    2c5a:	80 81       	ld	r24, Z
    2c5c:	91 81       	ldd	r25, Z+1	; 0x01
    2c5e:	04 97       	sbiw	r24, 0x04	; 4
    2c60:	26 e0       	ldi	r18, 0x06	; 6
    2c62:	fc 01       	movw	r30, r24
    2c64:	20 83       	st	Z, r18
    2c66:	8f e5       	ldi	r24, 0x5F	; 95
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	2b 81       	ldd	r18, Y+3	; 0x03
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	20 83       	st	Z, r18
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	9a 81       	ldd	r25, Y+2	; 0x02
    2c74:	61 96       	adiw	r28, 0x11	; 17
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	df 91       	pop	r29
    2c82:	cf 91       	pop	r28
    2c84:	1f 91       	pop	r17
    2c86:	0f 91       	pop	r16
    2c88:	ef 90       	pop	r14
    2c8a:	df 90       	pop	r13
    2c8c:	cf 90       	pop	r12
    2c8e:	bf 90       	pop	r11
    2c90:	af 90       	pop	r10
    2c92:	9f 90       	pop	r9
    2c94:	8f 90       	pop	r8
    2c96:	08 95       	ret

00002c98 <serial_send_byte>:
    2c98:	cf 93       	push	r28
    2c9a:	df 93       	push	r29
    2c9c:	00 d0       	rcall	.+0      	; 0x2c9e <serial_send_byte+0x6>
    2c9e:	1f 92       	push	r1
    2ca0:	cd b7       	in	r28, 0x3d	; 61
    2ca2:	de b7       	in	r29, 0x3e	; 62
    2ca4:	9a 83       	std	Y+2, r25	; 0x02
    2ca6:	89 83       	std	Y+1, r24	; 0x01
    2ca8:	6b 83       	std	Y+3, r22	; 0x03
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	9a 81       	ldd	r25, Y+2	; 0x02
    2cae:	fc 01       	movw	r30, r24
    2cb0:	82 81       	ldd	r24, Z+2	; 0x02
    2cb2:	93 81       	ldd	r25, Z+3	; 0x03
    2cb4:	89 2b       	or	r24, r25
    2cb6:	99 f0       	breq	.+38     	; 0x2cde <serial_send_byte+0x46>
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	9a 81       	ldd	r25, Y+2	; 0x02
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	82 81       	ldd	r24, Z+2	; 0x02
    2cc0:	93 81       	ldd	r25, Z+3	; 0x03
    2cc2:	6b 81       	ldd	r22, Y+3	; 0x03
    2cc4:	0e 94 cd 10 	call	0x219a	; 0x219a <buffer_put_item>
    2cc8:	88 23       	and	r24, r24
    2cca:	49 f4       	brne	.+18     	; 0x2cde <serial_send_byte+0x46>
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd0:	fc 01       	movw	r30, r24
    2cd2:	80 81       	ld	r24, Z
    2cd4:	91 81       	ldd	r25, Z+1	; 0x01
    2cd6:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <_serial_tx_int_on>
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	01 c0       	rjmp	.+2      	; 0x2ce0 <serial_send_byte+0x48>
    2cde:	82 e0       	ldi	r24, 0x02	; 2
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	df 91       	pop	r29
    2ce8:	cf 91       	pop	r28
    2cea:	08 95       	ret

00002cec <__vector_20>:
    2cec:	1f 92       	push	r1
    2cee:	0f 92       	push	r0
    2cf0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2cf4:	0f 92       	push	r0
    2cf6:	11 24       	eor	r1, r1
    2cf8:	2f 93       	push	r18
    2cfa:	3f 93       	push	r19
    2cfc:	4f 93       	push	r20
    2cfe:	5f 93       	push	r21
    2d00:	6f 93       	push	r22
    2d02:	7f 93       	push	r23
    2d04:	8f 93       	push	r24
    2d06:	9f 93       	push	r25
    2d08:	af 93       	push	r26
    2d0a:	bf 93       	push	r27
    2d0c:	ef 93       	push	r30
    2d0e:	ff 93       	push	r31
    2d10:	cf 93       	push	r28
    2d12:	df 93       	push	r29
    2d14:	1f 92       	push	r1
    2d16:	cd b7       	in	r28, 0x3d	; 61
    2d18:	de b7       	in	r29, 0x3e	; 62
    2d1a:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <_ser_handle>
    2d1e:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <_ser_handle+0x1>
    2d22:	89 2b       	or	r24, r25
    2d24:	31 f1       	breq	.+76     	; 0x2d72 <__vector_20+0x86>
    2d26:	86 ec       	ldi	r24, 0xC6	; 198
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	fc 01       	movw	r30, r24
    2d2c:	80 81       	ld	r24, Z
    2d2e:	89 83       	std	Y+1, r24	; 0x01
    2d30:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <_ser_handle>
    2d34:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <_ser_handle+0x1>
    2d38:	fc 01       	movw	r30, r24
    2d3a:	84 81       	ldd	r24, Z+4	; 0x04
    2d3c:	95 81       	ldd	r25, Z+5	; 0x05
    2d3e:	69 81       	ldd	r22, Y+1	; 0x01
    2d40:	0e 94 cd 10 	call	0x219a	; 0x219a <buffer_put_item>
    2d44:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <_ser_handle>
    2d48:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <_ser_handle+0x1>
    2d4c:	fc 01       	movw	r30, r24
    2d4e:	86 81       	ldd	r24, Z+6	; 0x06
    2d50:	97 81       	ldd	r25, Z+7	; 0x07
    2d52:	89 2b       	or	r24, r25
    2d54:	71 f0       	breq	.+28     	; 0x2d72 <__vector_20+0x86>
    2d56:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <_ser_handle>
    2d5a:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <_ser_handle+0x1>
    2d5e:	fc 01       	movw	r30, r24
    2d60:	26 81       	ldd	r18, Z+6	; 0x06
    2d62:	37 81       	ldd	r19, Z+7	; 0x07
    2d64:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <_ser_handle>
    2d68:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <_ser_handle+0x1>
    2d6c:	69 81       	ldd	r22, Y+1	; 0x01
    2d6e:	f9 01       	movw	r30, r18
    2d70:	09 95       	icall
    2d72:	00 00       	nop
    2d74:	0f 90       	pop	r0
    2d76:	df 91       	pop	r29
    2d78:	cf 91       	pop	r28
    2d7a:	ff 91       	pop	r31
    2d7c:	ef 91       	pop	r30
    2d7e:	bf 91       	pop	r27
    2d80:	af 91       	pop	r26
    2d82:	9f 91       	pop	r25
    2d84:	8f 91       	pop	r24
    2d86:	7f 91       	pop	r23
    2d88:	6f 91       	pop	r22
    2d8a:	5f 91       	pop	r21
    2d8c:	4f 91       	pop	r20
    2d8e:	3f 91       	pop	r19
    2d90:	2f 91       	pop	r18
    2d92:	0f 90       	pop	r0
    2d94:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2d98:	0f 90       	pop	r0
    2d9a:	1f 90       	pop	r1
    2d9c:	18 95       	reti

00002d9e <__vector_21>:
    2d9e:	1f 92       	push	r1
    2da0:	0f 92       	push	r0
    2da2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2da6:	0f 92       	push	r0
    2da8:	11 24       	eor	r1, r1
    2daa:	2f 93       	push	r18
    2dac:	3f 93       	push	r19
    2dae:	4f 93       	push	r20
    2db0:	5f 93       	push	r21
    2db2:	6f 93       	push	r22
    2db4:	7f 93       	push	r23
    2db6:	8f 93       	push	r24
    2db8:	9f 93       	push	r25
    2dba:	af 93       	push	r26
    2dbc:	bf 93       	push	r27
    2dbe:	ef 93       	push	r30
    2dc0:	ff 93       	push	r31
    2dc2:	cf 93       	push	r28
    2dc4:	df 93       	push	r29
    2dc6:	1f 92       	push	r1
    2dc8:	cd b7       	in	r28, 0x3d	; 61
    2dca:	de b7       	in	r29, 0x3e	; 62
    2dcc:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <_ser_handle>
    2dd0:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <_ser_handle+0x1>
    2dd4:	89 2b       	or	r24, r25
    2dd6:	f9 f0       	breq	.+62     	; 0x2e16 <__vector_21+0x78>
    2dd8:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <_ser_handle>
    2ddc:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <_ser_handle+0x1>
    2de0:	fc 01       	movw	r30, r24
    2de2:	82 81       	ldd	r24, Z+2	; 0x02
    2de4:	93 81       	ldd	r25, Z+3	; 0x03
    2de6:	9e 01       	movw	r18, r28
    2de8:	2f 5f       	subi	r18, 0xFF	; 255
    2dea:	3f 4f       	sbci	r19, 0xFF	; 255
    2dec:	b9 01       	movw	r22, r18
    2dee:	0e 94 85 10 	call	0x210a	; 0x210a <buffer_get_item>
    2df2:	88 23       	and	r24, r24
    2df4:	31 f4       	brne	.+12     	; 0x2e02 <__vector_21+0x64>
    2df6:	86 ec       	ldi	r24, 0xC6	; 198
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	29 81       	ldd	r18, Y+1	; 0x01
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	20 83       	st	Z, r18
    2e00:	13 c0       	rjmp	.+38     	; 0x2e28 <__vector_21+0x8a>
    2e02:	81 ec       	ldi	r24, 0xC1	; 193
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	21 ec       	ldi	r18, 0xC1	; 193
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	f9 01       	movw	r30, r18
    2e0c:	20 81       	ld	r18, Z
    2e0e:	2f 7d       	andi	r18, 0xDF	; 223
    2e10:	fc 01       	movw	r30, r24
    2e12:	20 83       	st	Z, r18
    2e14:	09 c0       	rjmp	.+18     	; 0x2e28 <__vector_21+0x8a>
    2e16:	81 ec       	ldi	r24, 0xC1	; 193
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	21 ec       	ldi	r18, 0xC1	; 193
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	f9 01       	movw	r30, r18
    2e20:	20 81       	ld	r18, Z
    2e22:	2f 7d       	andi	r18, 0xDF	; 223
    2e24:	fc 01       	movw	r30, r24
    2e26:	20 83       	st	Z, r18
    2e28:	00 00       	nop
    2e2a:	0f 90       	pop	r0
    2e2c:	df 91       	pop	r29
    2e2e:	cf 91       	pop	r28
    2e30:	ff 91       	pop	r31
    2e32:	ef 91       	pop	r30
    2e34:	bf 91       	pop	r27
    2e36:	af 91       	pop	r26
    2e38:	9f 91       	pop	r25
    2e3a:	8f 91       	pop	r24
    2e3c:	7f 91       	pop	r23
    2e3e:	6f 91       	pop	r22
    2e40:	5f 91       	pop	r21
    2e42:	4f 91       	pop	r20
    2e44:	3f 91       	pop	r19
    2e46:	2f 91       	pop	r18
    2e48:	0f 90       	pop	r0
    2e4a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2e4e:	0f 90       	pop	r0
    2e50:	1f 90       	pop	r1
    2e52:	18 95       	reti

00002e54 <__vector_28>:
    2e54:	1f 92       	push	r1
    2e56:	0f 92       	push	r0
    2e58:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2e5c:	0f 92       	push	r0
    2e5e:	11 24       	eor	r1, r1
    2e60:	2f 93       	push	r18
    2e62:	3f 93       	push	r19
    2e64:	4f 93       	push	r20
    2e66:	5f 93       	push	r21
    2e68:	6f 93       	push	r22
    2e6a:	7f 93       	push	r23
    2e6c:	8f 93       	push	r24
    2e6e:	9f 93       	push	r25
    2e70:	af 93       	push	r26
    2e72:	bf 93       	push	r27
    2e74:	ef 93       	push	r30
    2e76:	ff 93       	push	r31
    2e78:	cf 93       	push	r28
    2e7a:	df 93       	push	r29
    2e7c:	1f 92       	push	r1
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
    2e82:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <_ser_handle+0x2>
    2e86:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <_ser_handle+0x3>
    2e8a:	89 2b       	or	r24, r25
    2e8c:	31 f1       	breq	.+76     	; 0x2eda <__vector_28+0x86>
    2e8e:	8e ec       	ldi	r24, 0xCE	; 206
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	fc 01       	movw	r30, r24
    2e94:	80 81       	ld	r24, Z
    2e96:	89 83       	std	Y+1, r24	; 0x01
    2e98:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <_ser_handle+0x2>
    2e9c:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <_ser_handle+0x3>
    2ea0:	fc 01       	movw	r30, r24
    2ea2:	84 81       	ldd	r24, Z+4	; 0x04
    2ea4:	95 81       	ldd	r25, Z+5	; 0x05
    2ea6:	69 81       	ldd	r22, Y+1	; 0x01
    2ea8:	0e 94 cd 10 	call	0x219a	; 0x219a <buffer_put_item>
    2eac:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <_ser_handle+0x2>
    2eb0:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <_ser_handle+0x3>
    2eb4:	fc 01       	movw	r30, r24
    2eb6:	86 81       	ldd	r24, Z+6	; 0x06
    2eb8:	97 81       	ldd	r25, Z+7	; 0x07
    2eba:	89 2b       	or	r24, r25
    2ebc:	71 f0       	breq	.+28     	; 0x2eda <__vector_28+0x86>
    2ebe:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <_ser_handle+0x2>
    2ec2:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <_ser_handle+0x3>
    2ec6:	fc 01       	movw	r30, r24
    2ec8:	26 81       	ldd	r18, Z+6	; 0x06
    2eca:	37 81       	ldd	r19, Z+7	; 0x07
    2ecc:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <_ser_handle+0x2>
    2ed0:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <_ser_handle+0x3>
    2ed4:	69 81       	ldd	r22, Y+1	; 0x01
    2ed6:	f9 01       	movw	r30, r18
    2ed8:	09 95       	icall
    2eda:	00 00       	nop
    2edc:	0f 90       	pop	r0
    2ede:	df 91       	pop	r29
    2ee0:	cf 91       	pop	r28
    2ee2:	ff 91       	pop	r31
    2ee4:	ef 91       	pop	r30
    2ee6:	bf 91       	pop	r27
    2ee8:	af 91       	pop	r26
    2eea:	9f 91       	pop	r25
    2eec:	8f 91       	pop	r24
    2eee:	7f 91       	pop	r23
    2ef0:	6f 91       	pop	r22
    2ef2:	5f 91       	pop	r21
    2ef4:	4f 91       	pop	r20
    2ef6:	3f 91       	pop	r19
    2ef8:	2f 91       	pop	r18
    2efa:	0f 90       	pop	r0
    2efc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2f00:	0f 90       	pop	r0
    2f02:	1f 90       	pop	r1
    2f04:	18 95       	reti

00002f06 <__vector_29>:
    2f06:	1f 92       	push	r1
    2f08:	0f 92       	push	r0
    2f0a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2f0e:	0f 92       	push	r0
    2f10:	11 24       	eor	r1, r1
    2f12:	2f 93       	push	r18
    2f14:	3f 93       	push	r19
    2f16:	4f 93       	push	r20
    2f18:	5f 93       	push	r21
    2f1a:	6f 93       	push	r22
    2f1c:	7f 93       	push	r23
    2f1e:	8f 93       	push	r24
    2f20:	9f 93       	push	r25
    2f22:	af 93       	push	r26
    2f24:	bf 93       	push	r27
    2f26:	ef 93       	push	r30
    2f28:	ff 93       	push	r31
    2f2a:	cf 93       	push	r28
    2f2c:	df 93       	push	r29
    2f2e:	1f 92       	push	r1
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
    2f34:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <_ser_handle+0x2>
    2f38:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <_ser_handle+0x3>
    2f3c:	89 2b       	or	r24, r25
    2f3e:	f9 f0       	breq	.+62     	; 0x2f7e <__vector_29+0x78>
    2f40:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <_ser_handle+0x2>
    2f44:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <_ser_handle+0x3>
    2f48:	fc 01       	movw	r30, r24
    2f4a:	82 81       	ldd	r24, Z+2	; 0x02
    2f4c:	93 81       	ldd	r25, Z+3	; 0x03
    2f4e:	9e 01       	movw	r18, r28
    2f50:	2f 5f       	subi	r18, 0xFF	; 255
    2f52:	3f 4f       	sbci	r19, 0xFF	; 255
    2f54:	b9 01       	movw	r22, r18
    2f56:	0e 94 85 10 	call	0x210a	; 0x210a <buffer_get_item>
    2f5a:	88 23       	and	r24, r24
    2f5c:	31 f4       	brne	.+12     	; 0x2f6a <__vector_29+0x64>
    2f5e:	8e ec       	ldi	r24, 0xCE	; 206
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	29 81       	ldd	r18, Y+1	; 0x01
    2f64:	fc 01       	movw	r30, r24
    2f66:	20 83       	st	Z, r18
    2f68:	13 c0       	rjmp	.+38     	; 0x2f90 <__vector_29+0x8a>
    2f6a:	89 ec       	ldi	r24, 0xC9	; 201
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	29 ec       	ldi	r18, 0xC9	; 201
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	f9 01       	movw	r30, r18
    2f74:	20 81       	ld	r18, Z
    2f76:	2f 7d       	andi	r18, 0xDF	; 223
    2f78:	fc 01       	movw	r30, r24
    2f7a:	20 83       	st	Z, r18
    2f7c:	09 c0       	rjmp	.+18     	; 0x2f90 <__vector_29+0x8a>
    2f7e:	89 ec       	ldi	r24, 0xC9	; 201
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	29 ec       	ldi	r18, 0xC9	; 201
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	f9 01       	movw	r30, r18
    2f88:	20 81       	ld	r18, Z
    2f8a:	2f 7d       	andi	r18, 0xDF	; 223
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	20 83       	st	Z, r18
    2f90:	00 00       	nop
    2f92:	0f 90       	pop	r0
    2f94:	df 91       	pop	r29
    2f96:	cf 91       	pop	r28
    2f98:	ff 91       	pop	r31
    2f9a:	ef 91       	pop	r30
    2f9c:	bf 91       	pop	r27
    2f9e:	af 91       	pop	r26
    2fa0:	9f 91       	pop	r25
    2fa2:	8f 91       	pop	r24
    2fa4:	7f 91       	pop	r23
    2fa6:	6f 91       	pop	r22
    2fa8:	5f 91       	pop	r21
    2faa:	4f 91       	pop	r20
    2fac:	3f 91       	pop	r19
    2fae:	2f 91       	pop	r18
    2fb0:	0f 90       	pop	r0
    2fb2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2fb6:	0f 90       	pop	r0
    2fb8:	1f 90       	pop	r1
    2fba:	18 95       	reti

00002fbc <pvPortMalloc>:
    2fbc:	cf 93       	push	r28
    2fbe:	df 93       	push	r29
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
    2fc4:	2e 97       	sbiw	r28, 0x0e	; 14
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	de bf       	out	0x3e, r29	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	cd bf       	out	0x3d, r28	; 61
    2fd0:	9e 87       	std	Y+14, r25	; 0x0e
    2fd2:	8d 87       	std	Y+13, r24	; 0x0d
    2fd4:	1e 82       	std	Y+6, r1	; 0x06
    2fd6:	1d 82       	std	Y+5, r1	; 0x05
    2fd8:	0e 94 85 21 	call	0x430a	; 0x430a <vTaskSuspendAll>
    2fdc:	80 91 c5 07 	lds	r24, 0x07C5	; 0x8007c5 <xHeapHasBeenInitialised.2095>
    2fe0:	88 23       	and	r24, r24
    2fe2:	29 f4       	brne	.+10     	; 0x2fee <pvPortMalloc+0x32>
    2fe4:	0e 94 45 19 	call	0x328a	; 0x328a <prvHeapInit>
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <xHeapHasBeenInitialised.2095>
    2fee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ff2:	89 2b       	or	r24, r25
    2ff4:	41 f0       	breq	.+16     	; 0x3006 <pvPortMalloc+0x4a>
    2ff6:	84 e0       	ldi	r24, 0x04	; 4
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ffc:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ffe:	82 0f       	add	r24, r18
    3000:	93 1f       	adc	r25, r19
    3002:	9e 87       	std	Y+14, r25	; 0x0e
    3004:	8d 87       	std	Y+13, r24	; 0x0d
    3006:	8d 85       	ldd	r24, Y+13	; 0x0d
    3008:	9e 85       	ldd	r25, Y+14	; 0x0e
    300a:	89 2b       	or	r24, r25
    300c:	09 f4       	brne	.+2      	; 0x3010 <pvPortMalloc+0x54>
    300e:	b8 c0       	rjmp	.+368    	; 0x3180 <pvPortMalloc+0x1c4>
    3010:	8d 85       	ldd	r24, Y+13	; 0x0d
    3012:	9e 85       	ldd	r25, Y+14	; 0x0e
    3014:	87 37       	cpi	r24, 0x77	; 119
    3016:	95 40       	sbci	r25, 0x05	; 5
    3018:	08 f0       	brcs	.+2      	; 0x301c <pvPortMalloc+0x60>
    301a:	b2 c0       	rjmp	.+356    	; 0x3180 <pvPortMalloc+0x1c4>
    301c:	8d eb       	ldi	r24, 0xBD	; 189
    301e:	97 e0       	ldi	r25, 0x07	; 7
    3020:	9c 83       	std	Y+4, r25	; 0x04
    3022:	8b 83       	std	Y+3, r24	; 0x03
    3024:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <xStart>
    3028:	90 91 be 07 	lds	r25, 0x07BE	; 0x8007be <xStart+0x1>
    302c:	9a 83       	std	Y+2, r25	; 0x02
    302e:	89 83       	std	Y+1, r24	; 0x01
    3030:	0b c0       	rjmp	.+22     	; 0x3048 <pvPortMalloc+0x8c>
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	9a 81       	ldd	r25, Y+2	; 0x02
    3036:	9c 83       	std	Y+4, r25	; 0x04
    3038:	8b 83       	std	Y+3, r24	; 0x03
    303a:	89 81       	ldd	r24, Y+1	; 0x01
    303c:	9a 81       	ldd	r25, Y+2	; 0x02
    303e:	fc 01       	movw	r30, r24
    3040:	80 81       	ld	r24, Z
    3042:	91 81       	ldd	r25, Z+1	; 0x01
    3044:	9a 83       	std	Y+2, r25	; 0x02
    3046:	89 83       	std	Y+1, r24	; 0x01
    3048:	89 81       	ldd	r24, Y+1	; 0x01
    304a:	9a 81       	ldd	r25, Y+2	; 0x02
    304c:	fc 01       	movw	r30, r24
    304e:	22 81       	ldd	r18, Z+2	; 0x02
    3050:	33 81       	ldd	r19, Z+3	; 0x03
    3052:	8d 85       	ldd	r24, Y+13	; 0x0d
    3054:	9e 85       	ldd	r25, Y+14	; 0x0e
    3056:	28 17       	cp	r18, r24
    3058:	39 07       	cpc	r19, r25
    305a:	38 f4       	brcc	.+14     	; 0x306a <pvPortMalloc+0xae>
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	9a 81       	ldd	r25, Y+2	; 0x02
    3060:	fc 01       	movw	r30, r24
    3062:	80 81       	ld	r24, Z
    3064:	91 81       	ldd	r25, Z+1	; 0x01
    3066:	89 2b       	or	r24, r25
    3068:	21 f7       	brne	.-56     	; 0x3032 <pvPortMalloc+0x76>
    306a:	89 81       	ldd	r24, Y+1	; 0x01
    306c:	9a 81       	ldd	r25, Y+2	; 0x02
    306e:	81 5c       	subi	r24, 0xC1	; 193
    3070:	97 40       	sbci	r25, 0x07	; 7
    3072:	09 f4       	brne	.+2      	; 0x3076 <pvPortMalloc+0xba>
    3074:	85 c0       	rjmp	.+266    	; 0x3180 <pvPortMalloc+0x1c4>
    3076:	8b 81       	ldd	r24, Y+3	; 0x03
    3078:	9c 81       	ldd	r25, Y+4	; 0x04
    307a:	fc 01       	movw	r30, r24
    307c:	20 81       	ld	r18, Z
    307e:	31 81       	ldd	r19, Z+1	; 0x01
    3080:	84 e0       	ldi	r24, 0x04	; 4
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	82 0f       	add	r24, r18
    3086:	93 1f       	adc	r25, r19
    3088:	9e 83       	std	Y+6, r25	; 0x06
    308a:	8d 83       	std	Y+5, r24	; 0x05
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	9a 81       	ldd	r25, Y+2	; 0x02
    3090:	fc 01       	movw	r30, r24
    3092:	20 81       	ld	r18, Z
    3094:	31 81       	ldd	r19, Z+1	; 0x01
    3096:	8b 81       	ldd	r24, Y+3	; 0x03
    3098:	9c 81       	ldd	r25, Y+4	; 0x04
    309a:	fc 01       	movw	r30, r24
    309c:	31 83       	std	Z+1, r19	; 0x01
    309e:	20 83       	st	Z, r18
    30a0:	89 81       	ldd	r24, Y+1	; 0x01
    30a2:	9a 81       	ldd	r25, Y+2	; 0x02
    30a4:	fc 01       	movw	r30, r24
    30a6:	22 81       	ldd	r18, Z+2	; 0x02
    30a8:	33 81       	ldd	r19, Z+3	; 0x03
    30aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ae:	28 1b       	sub	r18, r24
    30b0:	39 0b       	sbc	r19, r25
    30b2:	84 e0       	ldi	r24, 0x04	; 4
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	88 0f       	add	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	82 17       	cp	r24, r18
    30bc:	93 07       	cpc	r25, r19
    30be:	08 f0       	brcs	.+2      	; 0x30c2 <pvPortMalloc+0x106>
    30c0:	4e c0       	rjmp	.+156    	; 0x315e <pvPortMalloc+0x1a2>
    30c2:	29 81       	ldd	r18, Y+1	; 0x01
    30c4:	3a 81       	ldd	r19, Y+2	; 0x02
    30c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ca:	82 0f       	add	r24, r18
    30cc:	93 1f       	adc	r25, r19
    30ce:	9a 87       	std	Y+10, r25	; 0x0a
    30d0:	89 87       	std	Y+9, r24	; 0x09
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	9a 81       	ldd	r25, Y+2	; 0x02
    30d6:	fc 01       	movw	r30, r24
    30d8:	22 81       	ldd	r18, Z+2	; 0x02
    30da:	33 81       	ldd	r19, Z+3	; 0x03
    30dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    30de:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e0:	28 1b       	sub	r18, r24
    30e2:	39 0b       	sbc	r19, r25
    30e4:	89 85       	ldd	r24, Y+9	; 0x09
    30e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e8:	fc 01       	movw	r30, r24
    30ea:	33 83       	std	Z+3, r19	; 0x03
    30ec:	22 83       	std	Z+2, r18	; 0x02
    30ee:	89 81       	ldd	r24, Y+1	; 0x01
    30f0:	9a 81       	ldd	r25, Y+2	; 0x02
    30f2:	2d 85       	ldd	r18, Y+13	; 0x0d
    30f4:	3e 85       	ldd	r19, Y+14	; 0x0e
    30f6:	fc 01       	movw	r30, r24
    30f8:	33 83       	std	Z+3, r19	; 0x03
    30fa:	22 83       	std	Z+2, r18	; 0x02
    30fc:	89 85       	ldd	r24, Y+9	; 0x09
    30fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3100:	fc 01       	movw	r30, r24
    3102:	82 81       	ldd	r24, Z+2	; 0x02
    3104:	93 81       	ldd	r25, Z+3	; 0x03
    3106:	9c 87       	std	Y+12, r25	; 0x0c
    3108:	8b 87       	std	Y+11, r24	; 0x0b
    310a:	8d eb       	ldi	r24, 0xBD	; 189
    310c:	97 e0       	ldi	r25, 0x07	; 7
    310e:	98 87       	std	Y+8, r25	; 0x08
    3110:	8f 83       	std	Y+7, r24	; 0x07
    3112:	07 c0       	rjmp	.+14     	; 0x3122 <pvPortMalloc+0x166>
    3114:	8f 81       	ldd	r24, Y+7	; 0x07
    3116:	98 85       	ldd	r25, Y+8	; 0x08
    3118:	fc 01       	movw	r30, r24
    311a:	80 81       	ld	r24, Z
    311c:	91 81       	ldd	r25, Z+1	; 0x01
    311e:	98 87       	std	Y+8, r25	; 0x08
    3120:	8f 83       	std	Y+7, r24	; 0x07
    3122:	8f 81       	ldd	r24, Y+7	; 0x07
    3124:	98 85       	ldd	r25, Y+8	; 0x08
    3126:	fc 01       	movw	r30, r24
    3128:	80 81       	ld	r24, Z
    312a:	91 81       	ldd	r25, Z+1	; 0x01
    312c:	fc 01       	movw	r30, r24
    312e:	22 81       	ldd	r18, Z+2	; 0x02
    3130:	33 81       	ldd	r19, Z+3	; 0x03
    3132:	8b 85       	ldd	r24, Y+11	; 0x0b
    3134:	9c 85       	ldd	r25, Y+12	; 0x0c
    3136:	28 17       	cp	r18, r24
    3138:	39 07       	cpc	r19, r25
    313a:	60 f3       	brcs	.-40     	; 0x3114 <pvPortMalloc+0x158>
    313c:	8f 81       	ldd	r24, Y+7	; 0x07
    313e:	98 85       	ldd	r25, Y+8	; 0x08
    3140:	fc 01       	movw	r30, r24
    3142:	20 81       	ld	r18, Z
    3144:	31 81       	ldd	r19, Z+1	; 0x01
    3146:	89 85       	ldd	r24, Y+9	; 0x09
    3148:	9a 85       	ldd	r25, Y+10	; 0x0a
    314a:	fc 01       	movw	r30, r24
    314c:	31 83       	std	Z+1, r19	; 0x01
    314e:	20 83       	st	Z, r18
    3150:	8f 81       	ldd	r24, Y+7	; 0x07
    3152:	98 85       	ldd	r25, Y+8	; 0x08
    3154:	29 85       	ldd	r18, Y+9	; 0x09
    3156:	3a 85       	ldd	r19, Y+10	; 0x0a
    3158:	fc 01       	movw	r30, r24
    315a:	31 83       	std	Z+1, r19	; 0x01
    315c:	20 83       	st	Z, r18
    315e:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <xFreeBytesRemaining>
    3162:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <xFreeBytesRemaining+0x1>
    3166:	89 81       	ldd	r24, Y+1	; 0x01
    3168:	9a 81       	ldd	r25, Y+2	; 0x02
    316a:	fc 01       	movw	r30, r24
    316c:	82 81       	ldd	r24, Z+2	; 0x02
    316e:	93 81       	ldd	r25, Z+3	; 0x03
    3170:	a9 01       	movw	r20, r18
    3172:	48 1b       	sub	r20, r24
    3174:	59 0b       	sbc	r21, r25
    3176:	ca 01       	movw	r24, r20
    3178:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <xFreeBytesRemaining+0x1>
    317c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <xFreeBytesRemaining>
    3180:	0e 94 92 21 	call	0x4324	; 0x4324 <xTaskResumeAll>
    3184:	8d 81       	ldd	r24, Y+5	; 0x05
    3186:	9e 81       	ldd	r25, Y+6	; 0x06
    3188:	89 2b       	or	r24, r25
    318a:	11 f4       	brne	.+4      	; 0x3190 <pvPortMalloc+0x1d4>
    318c:	0e 94 cd 09 	call	0x139a	; 0x139a <vApplicationMallocFailedHook>
    3190:	8d 81       	ldd	r24, Y+5	; 0x05
    3192:	9e 81       	ldd	r25, Y+6	; 0x06
    3194:	2e 96       	adiw	r28, 0x0e	; 14
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	f8 94       	cli
    319a:	de bf       	out	0x3e, r29	; 62
    319c:	0f be       	out	0x3f, r0	; 63
    319e:	cd bf       	out	0x3d, r28	; 61
    31a0:	df 91       	pop	r29
    31a2:	cf 91       	pop	r28
    31a4:	08 95       	ret

000031a6 <vPortFree>:
    31a6:	cf 93       	push	r28
    31a8:	df 93       	push	r29
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
    31ae:	2a 97       	sbiw	r28, 0x0a	; 10
    31b0:	0f b6       	in	r0, 0x3f	; 63
    31b2:	f8 94       	cli
    31b4:	de bf       	out	0x3e, r29	; 62
    31b6:	0f be       	out	0x3f, r0	; 63
    31b8:	cd bf       	out	0x3d, r28	; 61
    31ba:	9a 87       	std	Y+10, r25	; 0x0a
    31bc:	89 87       	std	Y+9, r24	; 0x09
    31be:	89 85       	ldd	r24, Y+9	; 0x09
    31c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c2:	9c 83       	std	Y+4, r25	; 0x04
    31c4:	8b 83       	std	Y+3, r24	; 0x03
    31c6:	89 85       	ldd	r24, Y+9	; 0x09
    31c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ca:	89 2b       	or	r24, r25
    31cc:	09 f4       	brne	.+2      	; 0x31d0 <vPortFree+0x2a>
    31ce:	53 c0       	rjmp	.+166    	; 0x3276 <vPortFree+0xd0>
    31d0:	84 e0       	ldi	r24, 0x04	; 4
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	91 95       	neg	r25
    31d6:	81 95       	neg	r24
    31d8:	91 09       	sbc	r25, r1
    31da:	2b 81       	ldd	r18, Y+3	; 0x03
    31dc:	3c 81       	ldd	r19, Y+4	; 0x04
    31de:	82 0f       	add	r24, r18
    31e0:	93 1f       	adc	r25, r19
    31e2:	9c 83       	std	Y+4, r25	; 0x04
    31e4:	8b 83       	std	Y+3, r24	; 0x03
    31e6:	8b 81       	ldd	r24, Y+3	; 0x03
    31e8:	9c 81       	ldd	r25, Y+4	; 0x04
    31ea:	9e 83       	std	Y+6, r25	; 0x06
    31ec:	8d 83       	std	Y+5, r24	; 0x05
    31ee:	0e 94 85 21 	call	0x430a	; 0x430a <vTaskSuspendAll>
    31f2:	8d 81       	ldd	r24, Y+5	; 0x05
    31f4:	9e 81       	ldd	r25, Y+6	; 0x06
    31f6:	fc 01       	movw	r30, r24
    31f8:	82 81       	ldd	r24, Z+2	; 0x02
    31fa:	93 81       	ldd	r25, Z+3	; 0x03
    31fc:	98 87       	std	Y+8, r25	; 0x08
    31fe:	8f 83       	std	Y+7, r24	; 0x07
    3200:	8d eb       	ldi	r24, 0xBD	; 189
    3202:	97 e0       	ldi	r25, 0x07	; 7
    3204:	9a 83       	std	Y+2, r25	; 0x02
    3206:	89 83       	std	Y+1, r24	; 0x01
    3208:	07 c0       	rjmp	.+14     	; 0x3218 <vPortFree+0x72>
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	9a 81       	ldd	r25, Y+2	; 0x02
    320e:	fc 01       	movw	r30, r24
    3210:	80 81       	ld	r24, Z
    3212:	91 81       	ldd	r25, Z+1	; 0x01
    3214:	9a 83       	std	Y+2, r25	; 0x02
    3216:	89 83       	std	Y+1, r24	; 0x01
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	9a 81       	ldd	r25, Y+2	; 0x02
    321c:	fc 01       	movw	r30, r24
    321e:	80 81       	ld	r24, Z
    3220:	91 81       	ldd	r25, Z+1	; 0x01
    3222:	fc 01       	movw	r30, r24
    3224:	22 81       	ldd	r18, Z+2	; 0x02
    3226:	33 81       	ldd	r19, Z+3	; 0x03
    3228:	8f 81       	ldd	r24, Y+7	; 0x07
    322a:	98 85       	ldd	r25, Y+8	; 0x08
    322c:	28 17       	cp	r18, r24
    322e:	39 07       	cpc	r19, r25
    3230:	60 f3       	brcs	.-40     	; 0x320a <vPortFree+0x64>
    3232:	89 81       	ldd	r24, Y+1	; 0x01
    3234:	9a 81       	ldd	r25, Y+2	; 0x02
    3236:	fc 01       	movw	r30, r24
    3238:	20 81       	ld	r18, Z
    323a:	31 81       	ldd	r19, Z+1	; 0x01
    323c:	8d 81       	ldd	r24, Y+5	; 0x05
    323e:	9e 81       	ldd	r25, Y+6	; 0x06
    3240:	fc 01       	movw	r30, r24
    3242:	31 83       	std	Z+1, r19	; 0x01
    3244:	20 83       	st	Z, r18
    3246:	89 81       	ldd	r24, Y+1	; 0x01
    3248:	9a 81       	ldd	r25, Y+2	; 0x02
    324a:	2d 81       	ldd	r18, Y+5	; 0x05
    324c:	3e 81       	ldd	r19, Y+6	; 0x06
    324e:	fc 01       	movw	r30, r24
    3250:	31 83       	std	Z+1, r19	; 0x01
    3252:	20 83       	st	Z, r18
    3254:	8d 81       	ldd	r24, Y+5	; 0x05
    3256:	9e 81       	ldd	r25, Y+6	; 0x06
    3258:	fc 01       	movw	r30, r24
    325a:	22 81       	ldd	r18, Z+2	; 0x02
    325c:	33 81       	ldd	r19, Z+3	; 0x03
    325e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <xFreeBytesRemaining>
    3262:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <xFreeBytesRemaining+0x1>
    3266:	82 0f       	add	r24, r18
    3268:	93 1f       	adc	r25, r19
    326a:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <xFreeBytesRemaining+0x1>
    326e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <xFreeBytesRemaining>
    3272:	0e 94 92 21 	call	0x4324	; 0x4324 <xTaskResumeAll>
    3276:	00 00       	nop
    3278:	2a 96       	adiw	r28, 0x0a	; 10
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	f8 94       	cli
    327e:	de bf       	out	0x3e, r29	; 62
    3280:	0f be       	out	0x3f, r0	; 63
    3282:	cd bf       	out	0x3d, r28	; 61
    3284:	df 91       	pop	r29
    3286:	cf 91       	pop	r28
    3288:	08 95       	ret

0000328a <prvHeapInit>:
    328a:	cf 93       	push	r28
    328c:	df 93       	push	r29
    328e:	00 d0       	rcall	.+0      	; 0x3290 <prvHeapInit+0x6>
    3290:	00 d0       	rcall	.+0      	; 0x3292 <prvHeapInit+0x8>
    3292:	cd b7       	in	r28, 0x3d	; 61
    3294:	de b7       	in	r29, 0x3e	; 62
    3296:	86 e4       	ldi	r24, 0x46	; 70
    3298:	92 e0       	ldi	r25, 0x02	; 2
    329a:	9a 83       	std	Y+2, r25	; 0x02
    329c:	89 83       	std	Y+1, r24	; 0x01
    329e:	89 81       	ldd	r24, Y+1	; 0x01
    32a0:	9a 81       	ldd	r25, Y+2	; 0x02
    32a2:	90 93 be 07 	sts	0x07BE, r25	; 0x8007be <xStart+0x1>
    32a6:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <xStart>
    32aa:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <xStart+0x3>
    32ae:	10 92 bf 07 	sts	0x07BF, r1	; 0x8007bf <xStart+0x2>
    32b2:	87 e7       	ldi	r24, 0x77	; 119
    32b4:	95 e0       	ldi	r25, 0x05	; 5
    32b6:	90 93 c4 07 	sts	0x07C4, r25	; 0x8007c4 <xEnd+0x3>
    32ba:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <xEnd+0x2>
    32be:	10 92 c2 07 	sts	0x07C2, r1	; 0x8007c2 <xEnd+0x1>
    32c2:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <xEnd>
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ca:	9c 83       	std	Y+4, r25	; 0x04
    32cc:	8b 83       	std	Y+3, r24	; 0x03
    32ce:	8b 81       	ldd	r24, Y+3	; 0x03
    32d0:	9c 81       	ldd	r25, Y+4	; 0x04
    32d2:	27 e7       	ldi	r18, 0x77	; 119
    32d4:	35 e0       	ldi	r19, 0x05	; 5
    32d6:	fc 01       	movw	r30, r24
    32d8:	33 83       	std	Z+3, r19	; 0x03
    32da:	22 83       	std	Z+2, r18	; 0x02
    32dc:	8b 81       	ldd	r24, Y+3	; 0x03
    32de:	9c 81       	ldd	r25, Y+4	; 0x04
    32e0:	21 ec       	ldi	r18, 0xC1	; 193
    32e2:	37 e0       	ldi	r19, 0x07	; 7
    32e4:	fc 01       	movw	r30, r24
    32e6:	31 83       	std	Z+1, r19	; 0x01
    32e8:	20 83       	st	Z, r18
    32ea:	00 00       	nop
    32ec:	0f 90       	pop	r0
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	df 91       	pop	r29
    32f6:	cf 91       	pop	r28
    32f8:	08 95       	ret

000032fa <xQueueGenericReset>:
    32fa:	cf 93       	push	r28
    32fc:	df 93       	push	r29
    32fe:	00 d0       	rcall	.+0      	; 0x3300 <xQueueGenericReset+0x6>
    3300:	00 d0       	rcall	.+0      	; 0x3302 <xQueueGenericReset+0x8>
    3302:	1f 92       	push	r1
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
    3308:	9c 83       	std	Y+4, r25	; 0x04
    330a:	8b 83       	std	Y+3, r24	; 0x03
    330c:	6d 83       	std	Y+5, r22	; 0x05
    330e:	8b 81       	ldd	r24, Y+3	; 0x03
    3310:	9c 81       	ldd	r25, Y+4	; 0x04
    3312:	9a 83       	std	Y+2, r25	; 0x02
    3314:	89 83       	std	Y+1, r24	; 0x01
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	f8 94       	cli
    331a:	0f 92       	push	r0
    331c:	89 81       	ldd	r24, Y+1	; 0x01
    331e:	9a 81       	ldd	r25, Y+2	; 0x02
    3320:	fc 01       	movw	r30, r24
    3322:	80 81       	ld	r24, Z
    3324:	91 81       	ldd	r25, Z+1	; 0x01
    3326:	29 81       	ldd	r18, Y+1	; 0x01
    3328:	3a 81       	ldd	r19, Y+2	; 0x02
    332a:	f9 01       	movw	r30, r18
    332c:	23 8d       	ldd	r18, Z+27	; 0x1b
    332e:	42 2f       	mov	r20, r18
    3330:	50 e0       	ldi	r21, 0x00	; 0
    3332:	29 81       	ldd	r18, Y+1	; 0x01
    3334:	3a 81       	ldd	r19, Y+2	; 0x02
    3336:	f9 01       	movw	r30, r18
    3338:	24 8d       	ldd	r18, Z+28	; 0x1c
    333a:	22 2f       	mov	r18, r18
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	42 9f       	mul	r20, r18
    3340:	b0 01       	movw	r22, r0
    3342:	43 9f       	mul	r20, r19
    3344:	70 0d       	add	r23, r0
    3346:	52 9f       	mul	r21, r18
    3348:	70 0d       	add	r23, r0
    334a:	11 24       	eor	r1, r1
    334c:	9b 01       	movw	r18, r22
    334e:	28 0f       	add	r18, r24
    3350:	39 1f       	adc	r19, r25
    3352:	89 81       	ldd	r24, Y+1	; 0x01
    3354:	9a 81       	ldd	r25, Y+2	; 0x02
    3356:	fc 01       	movw	r30, r24
    3358:	33 83       	std	Z+3, r19	; 0x03
    335a:	22 83       	std	Z+2, r18	; 0x02
    335c:	89 81       	ldd	r24, Y+1	; 0x01
    335e:	9a 81       	ldd	r25, Y+2	; 0x02
    3360:	fc 01       	movw	r30, r24
    3362:	12 8e       	std	Z+26, r1	; 0x1a
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	9a 81       	ldd	r25, Y+2	; 0x02
    3368:	fc 01       	movw	r30, r24
    336a:	20 81       	ld	r18, Z
    336c:	31 81       	ldd	r19, Z+1	; 0x01
    336e:	89 81       	ldd	r24, Y+1	; 0x01
    3370:	9a 81       	ldd	r25, Y+2	; 0x02
    3372:	fc 01       	movw	r30, r24
    3374:	35 83       	std	Z+5, r19	; 0x05
    3376:	24 83       	std	Z+4, r18	; 0x04
    3378:	89 81       	ldd	r24, Y+1	; 0x01
    337a:	9a 81       	ldd	r25, Y+2	; 0x02
    337c:	fc 01       	movw	r30, r24
    337e:	80 81       	ld	r24, Z
    3380:	91 81       	ldd	r25, Z+1	; 0x01
    3382:	29 81       	ldd	r18, Y+1	; 0x01
    3384:	3a 81       	ldd	r19, Y+2	; 0x02
    3386:	f9 01       	movw	r30, r18
    3388:	23 8d       	ldd	r18, Z+27	; 0x1b
    338a:	22 2f       	mov	r18, r18
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	a9 01       	movw	r20, r18
    3390:	41 50       	subi	r20, 0x01	; 1
    3392:	51 09       	sbc	r21, r1
    3394:	29 81       	ldd	r18, Y+1	; 0x01
    3396:	3a 81       	ldd	r19, Y+2	; 0x02
    3398:	f9 01       	movw	r30, r18
    339a:	24 8d       	ldd	r18, Z+28	; 0x1c
    339c:	22 2f       	mov	r18, r18
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	42 9f       	mul	r20, r18
    33a2:	b0 01       	movw	r22, r0
    33a4:	43 9f       	mul	r20, r19
    33a6:	70 0d       	add	r23, r0
    33a8:	52 9f       	mul	r21, r18
    33aa:	70 0d       	add	r23, r0
    33ac:	11 24       	eor	r1, r1
    33ae:	9b 01       	movw	r18, r22
    33b0:	28 0f       	add	r18, r24
    33b2:	39 1f       	adc	r19, r25
    33b4:	89 81       	ldd	r24, Y+1	; 0x01
    33b6:	9a 81       	ldd	r25, Y+2	; 0x02
    33b8:	fc 01       	movw	r30, r24
    33ba:	37 83       	std	Z+7, r19	; 0x07
    33bc:	26 83       	std	Z+6, r18	; 0x06
    33be:	89 81       	ldd	r24, Y+1	; 0x01
    33c0:	9a 81       	ldd	r25, Y+2	; 0x02
    33c2:	2f ef       	ldi	r18, 0xFF	; 255
    33c4:	fc 01       	movw	r30, r24
    33c6:	25 8f       	std	Z+29, r18	; 0x1d
    33c8:	89 81       	ldd	r24, Y+1	; 0x01
    33ca:	9a 81       	ldd	r25, Y+2	; 0x02
    33cc:	2f ef       	ldi	r18, 0xFF	; 255
    33ce:	fc 01       	movw	r30, r24
    33d0:	26 8f       	std	Z+30, r18	; 0x1e
    33d2:	8d 81       	ldd	r24, Y+5	; 0x05
    33d4:	88 23       	and	r24, r24
    33d6:	81 f4       	brne	.+32     	; 0x33f8 <xQueueGenericReset+0xfe>
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
    33da:	9a 81       	ldd	r25, Y+2	; 0x02
    33dc:	fc 01       	movw	r30, r24
    33de:	80 85       	ldd	r24, Z+8	; 0x08
    33e0:	88 23       	and	r24, r24
    33e2:	a1 f0       	breq	.+40     	; 0x340c <xQueueGenericReset+0x112>
    33e4:	89 81       	ldd	r24, Y+1	; 0x01
    33e6:	9a 81       	ldd	r25, Y+2	; 0x02
    33e8:	08 96       	adiw	r24, 0x08	; 8
    33ea:	0e 94 f5 23 	call	0x47ea	; 0x47ea <xTaskRemoveFromEventList>
    33ee:	88 23       	and	r24, r24
    33f0:	69 f0       	breq	.+26     	; 0x340c <xQueueGenericReset+0x112>
    33f2:	0e 94 54 14 	call	0x28a8	; 0x28a8 <vPortYield>
    33f6:	0a c0       	rjmp	.+20     	; 0x340c <xQueueGenericReset+0x112>
    33f8:	89 81       	ldd	r24, Y+1	; 0x01
    33fa:	9a 81       	ldd	r25, Y+2	; 0x02
    33fc:	08 96       	adiw	r24, 0x08	; 8
    33fe:	0e 94 10 11 	call	0x2220	; 0x2220 <vListInitialise>
    3402:	89 81       	ldd	r24, Y+1	; 0x01
    3404:	9a 81       	ldd	r25, Y+2	; 0x02
    3406:	41 96       	adiw	r24, 0x11	; 17
    3408:	0e 94 10 11 	call	0x2220	; 0x2220 <vListInitialise>
    340c:	0f 90       	pop	r0
    340e:	0f be       	out	0x3f, r0	; 63
    3410:	81 e0       	ldi	r24, 0x01	; 1
    3412:	0f 90       	pop	r0
    3414:	0f 90       	pop	r0
    3416:	0f 90       	pop	r0
    3418:	0f 90       	pop	r0
    341a:	0f 90       	pop	r0
    341c:	df 91       	pop	r29
    341e:	cf 91       	pop	r28
    3420:	08 95       	ret

00003422 <xQueueGenericCreate>:
    3422:	0f 93       	push	r16
    3424:	1f 93       	push	r17
    3426:	cf 93       	push	r28
    3428:	df 93       	push	r29
    342a:	cd b7       	in	r28, 0x3d	; 61
    342c:	de b7       	in	r29, 0x3e	; 62
    342e:	29 97       	sbiw	r28, 0x09	; 9
    3430:	0f b6       	in	r0, 0x3f	; 63
    3432:	f8 94       	cli
    3434:	de bf       	out	0x3e, r29	; 62
    3436:	0f be       	out	0x3f, r0	; 63
    3438:	cd bf       	out	0x3d, r28	; 61
    343a:	8f 83       	std	Y+7, r24	; 0x07
    343c:	68 87       	std	Y+8, r22	; 0x08
    343e:	49 87       	std	Y+9, r20	; 0x09
    3440:	88 85       	ldd	r24, Y+8	; 0x08
    3442:	88 23       	and	r24, r24
    3444:	19 f4       	brne	.+6      	; 0x344c <xQueueGenericCreate+0x2a>
    3446:	1a 82       	std	Y+2, r1	; 0x02
    3448:	19 82       	std	Y+1, r1	; 0x01
    344a:	0f c0       	rjmp	.+30     	; 0x346a <xQueueGenericCreate+0x48>
    344c:	8f 81       	ldd	r24, Y+7	; 0x07
    344e:	48 2f       	mov	r20, r24
    3450:	50 e0       	ldi	r21, 0x00	; 0
    3452:	88 85       	ldd	r24, Y+8	; 0x08
    3454:	28 2f       	mov	r18, r24
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	42 9f       	mul	r20, r18
    345a:	c0 01       	movw	r24, r0
    345c:	43 9f       	mul	r20, r19
    345e:	90 0d       	add	r25, r0
    3460:	52 9f       	mul	r21, r18
    3462:	90 0d       	add	r25, r0
    3464:	11 24       	eor	r1, r1
    3466:	9a 83       	std	Y+2, r25	; 0x02
    3468:	89 83       	std	Y+1, r24	; 0x01
    346a:	89 81       	ldd	r24, Y+1	; 0x01
    346c:	9a 81       	ldd	r25, Y+2	; 0x02
    346e:	81 96       	adiw	r24, 0x21	; 33
    3470:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <pvPortMalloc>
    3474:	9c 83       	std	Y+4, r25	; 0x04
    3476:	8b 83       	std	Y+3, r24	; 0x03
    3478:	8b 81       	ldd	r24, Y+3	; 0x03
    347a:	9c 81       	ldd	r25, Y+4	; 0x04
    347c:	89 2b       	or	r24, r25
    347e:	81 f0       	breq	.+32     	; 0x34a0 <xQueueGenericCreate+0x7e>
    3480:	8b 81       	ldd	r24, Y+3	; 0x03
    3482:	9c 81       	ldd	r25, Y+4	; 0x04
    3484:	81 96       	adiw	r24, 0x21	; 33
    3486:	9e 83       	std	Y+6, r25	; 0x06
    3488:	8d 83       	std	Y+5, r24	; 0x05
    348a:	2b 81       	ldd	r18, Y+3	; 0x03
    348c:	3c 81       	ldd	r19, Y+4	; 0x04
    348e:	8d 81       	ldd	r24, Y+5	; 0x05
    3490:	9e 81       	ldd	r25, Y+6	; 0x06
    3492:	89 01       	movw	r16, r18
    3494:	29 85       	ldd	r18, Y+9	; 0x09
    3496:	ac 01       	movw	r20, r24
    3498:	68 85       	ldd	r22, Y+8	; 0x08
    349a:	8f 81       	ldd	r24, Y+7	; 0x07
    349c:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <prvInitialiseNewQueue>
    34a0:	8b 81       	ldd	r24, Y+3	; 0x03
    34a2:	9c 81       	ldd	r25, Y+4	; 0x04
    34a4:	29 96       	adiw	r28, 0x09	; 9
    34a6:	0f b6       	in	r0, 0x3f	; 63
    34a8:	f8 94       	cli
    34aa:	de bf       	out	0x3e, r29	; 62
    34ac:	0f be       	out	0x3f, r0	; 63
    34ae:	cd bf       	out	0x3d, r28	; 61
    34b0:	df 91       	pop	r29
    34b2:	cf 91       	pop	r28
    34b4:	1f 91       	pop	r17
    34b6:	0f 91       	pop	r16
    34b8:	08 95       	ret

000034ba <prvInitialiseNewQueue>:
    34ba:	0f 93       	push	r16
    34bc:	1f 93       	push	r17
    34be:	cf 93       	push	r28
    34c0:	df 93       	push	r29
    34c2:	cd b7       	in	r28, 0x3d	; 61
    34c4:	de b7       	in	r29, 0x3e	; 62
    34c6:	27 97       	sbiw	r28, 0x07	; 7
    34c8:	0f b6       	in	r0, 0x3f	; 63
    34ca:	f8 94       	cli
    34cc:	de bf       	out	0x3e, r29	; 62
    34ce:	0f be       	out	0x3f, r0	; 63
    34d0:	cd bf       	out	0x3d, r28	; 61
    34d2:	89 83       	std	Y+1, r24	; 0x01
    34d4:	6a 83       	std	Y+2, r22	; 0x02
    34d6:	5c 83       	std	Y+4, r21	; 0x04
    34d8:	4b 83       	std	Y+3, r20	; 0x03
    34da:	2d 83       	std	Y+5, r18	; 0x05
    34dc:	1f 83       	std	Y+7, r17	; 0x07
    34de:	0e 83       	std	Y+6, r16	; 0x06
    34e0:	8a 81       	ldd	r24, Y+2	; 0x02
    34e2:	88 23       	and	r24, r24
    34e4:	41 f4       	brne	.+16     	; 0x34f6 <prvInitialiseNewQueue+0x3c>
    34e6:	8e 81       	ldd	r24, Y+6	; 0x06
    34e8:	9f 81       	ldd	r25, Y+7	; 0x07
    34ea:	2e 81       	ldd	r18, Y+6	; 0x06
    34ec:	3f 81       	ldd	r19, Y+7	; 0x07
    34ee:	fc 01       	movw	r30, r24
    34f0:	31 83       	std	Z+1, r19	; 0x01
    34f2:	20 83       	st	Z, r18
    34f4:	07 c0       	rjmp	.+14     	; 0x3504 <prvInitialiseNewQueue+0x4a>
    34f6:	8e 81       	ldd	r24, Y+6	; 0x06
    34f8:	9f 81       	ldd	r25, Y+7	; 0x07
    34fa:	2b 81       	ldd	r18, Y+3	; 0x03
    34fc:	3c 81       	ldd	r19, Y+4	; 0x04
    34fe:	fc 01       	movw	r30, r24
    3500:	31 83       	std	Z+1, r19	; 0x01
    3502:	20 83       	st	Z, r18
    3504:	8e 81       	ldd	r24, Y+6	; 0x06
    3506:	9f 81       	ldd	r25, Y+7	; 0x07
    3508:	29 81       	ldd	r18, Y+1	; 0x01
    350a:	fc 01       	movw	r30, r24
    350c:	23 8f       	std	Z+27, r18	; 0x1b
    350e:	8e 81       	ldd	r24, Y+6	; 0x06
    3510:	9f 81       	ldd	r25, Y+7	; 0x07
    3512:	2a 81       	ldd	r18, Y+2	; 0x02
    3514:	fc 01       	movw	r30, r24
    3516:	24 8f       	std	Z+28, r18	; 0x1c
    3518:	8e 81       	ldd	r24, Y+6	; 0x06
    351a:	9f 81       	ldd	r25, Y+7	; 0x07
    351c:	61 e0       	ldi	r22, 0x01	; 1
    351e:	0e 94 7d 19 	call	0x32fa	; 0x32fa <xQueueGenericReset>
    3522:	8e 81       	ldd	r24, Y+6	; 0x06
    3524:	9f 81       	ldd	r25, Y+7	; 0x07
    3526:	2d 81       	ldd	r18, Y+5	; 0x05
    3528:	fc 01       	movw	r30, r24
    352a:	20 a3       	std	Z+32, r18	; 0x20
    352c:	00 00       	nop
    352e:	27 96       	adiw	r28, 0x07	; 7
    3530:	0f b6       	in	r0, 0x3f	; 63
    3532:	f8 94       	cli
    3534:	de bf       	out	0x3e, r29	; 62
    3536:	0f be       	out	0x3f, r0	; 63
    3538:	cd bf       	out	0x3d, r28	; 61
    353a:	df 91       	pop	r29
    353c:	cf 91       	pop	r28
    353e:	1f 91       	pop	r17
    3540:	0f 91       	pop	r16
    3542:	08 95       	ret

00003544 <prvInitialiseMutex>:
    3544:	cf 93       	push	r28
    3546:	df 93       	push	r29
    3548:	00 d0       	rcall	.+0      	; 0x354a <prvInitialiseMutex+0x6>
    354a:	cd b7       	in	r28, 0x3d	; 61
    354c:	de b7       	in	r29, 0x3e	; 62
    354e:	9a 83       	std	Y+2, r25	; 0x02
    3550:	89 83       	std	Y+1, r24	; 0x01
    3552:	89 81       	ldd	r24, Y+1	; 0x01
    3554:	9a 81       	ldd	r25, Y+2	; 0x02
    3556:	89 2b       	or	r24, r25
    3558:	b9 f0       	breq	.+46     	; 0x3588 <prvInitialiseMutex+0x44>
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	9a 81       	ldd	r25, Y+2	; 0x02
    355e:	fc 01       	movw	r30, r24
    3560:	13 82       	std	Z+3, r1	; 0x03
    3562:	12 82       	std	Z+2, r1	; 0x02
    3564:	89 81       	ldd	r24, Y+1	; 0x01
    3566:	9a 81       	ldd	r25, Y+2	; 0x02
    3568:	fc 01       	movw	r30, r24
    356a:	11 82       	std	Z+1, r1	; 0x01
    356c:	10 82       	st	Z, r1
    356e:	89 81       	ldd	r24, Y+1	; 0x01
    3570:	9a 81       	ldd	r25, Y+2	; 0x02
    3572:	fc 01       	movw	r30, r24
    3574:	16 82       	std	Z+6, r1	; 0x06
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	9a 81       	ldd	r25, Y+2	; 0x02
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	40 e0       	ldi	r20, 0x00	; 0
    357e:	50 e0       	ldi	r21, 0x00	; 0
    3580:	60 e0       	ldi	r22, 0x00	; 0
    3582:	70 e0       	ldi	r23, 0x00	; 0
    3584:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <xQueueGenericSend>
    3588:	00 00       	nop
    358a:	0f 90       	pop	r0
    358c:	0f 90       	pop	r0
    358e:	df 91       	pop	r29
    3590:	cf 91       	pop	r28
    3592:	08 95       	ret

00003594 <xQueueCreateMutex>:
    3594:	cf 93       	push	r28
    3596:	df 93       	push	r29
    3598:	00 d0       	rcall	.+0      	; 0x359a <xQueueCreateMutex+0x6>
    359a:	00 d0       	rcall	.+0      	; 0x359c <xQueueCreateMutex+0x8>
    359c:	1f 92       	push	r1
    359e:	cd b7       	in	r28, 0x3d	; 61
    35a0:	de b7       	in	r29, 0x3e	; 62
    35a2:	8d 83       	std	Y+5, r24	; 0x05
    35a4:	81 e0       	ldi	r24, 0x01	; 1
    35a6:	89 83       	std	Y+1, r24	; 0x01
    35a8:	1a 82       	std	Y+2, r1	; 0x02
    35aa:	4d 81       	ldd	r20, Y+5	; 0x05
    35ac:	6a 81       	ldd	r22, Y+2	; 0x02
    35ae:	89 81       	ldd	r24, Y+1	; 0x01
    35b0:	0e 94 11 1a 	call	0x3422	; 0x3422 <xQueueGenericCreate>
    35b4:	9c 83       	std	Y+4, r25	; 0x04
    35b6:	8b 83       	std	Y+3, r24	; 0x03
    35b8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ba:	9c 81       	ldd	r25, Y+4	; 0x04
    35bc:	0e 94 a2 1a 	call	0x3544	; 0x3544 <prvInitialiseMutex>
    35c0:	8b 81       	ldd	r24, Y+3	; 0x03
    35c2:	9c 81       	ldd	r25, Y+4	; 0x04
    35c4:	0f 90       	pop	r0
    35c6:	0f 90       	pop	r0
    35c8:	0f 90       	pop	r0
    35ca:	0f 90       	pop	r0
    35cc:	0f 90       	pop	r0
    35ce:	df 91       	pop	r29
    35d0:	cf 91       	pop	r28
    35d2:	08 95       	ret

000035d4 <xQueueGenericSend>:
    35d4:	cf 93       	push	r28
    35d6:	df 93       	push	r29
    35d8:	cd b7       	in	r28, 0x3d	; 61
    35da:	de b7       	in	r29, 0x3e	; 62
    35dc:	2e 97       	sbiw	r28, 0x0e	; 14
    35de:	0f b6       	in	r0, 0x3f	; 63
    35e0:	f8 94       	cli
    35e2:	de bf       	out	0x3e, r29	; 62
    35e4:	0f be       	out	0x3f, r0	; 63
    35e6:	cd bf       	out	0x3d, r28	; 61
    35e8:	99 87       	std	Y+9, r25	; 0x09
    35ea:	88 87       	std	Y+8, r24	; 0x08
    35ec:	7b 87       	std	Y+11, r23	; 0x0b
    35ee:	6a 87       	std	Y+10, r22	; 0x0a
    35f0:	5d 87       	std	Y+13, r21	; 0x0d
    35f2:	4c 87       	std	Y+12, r20	; 0x0c
    35f4:	2e 87       	std	Y+14, r18	; 0x0e
    35f6:	19 82       	std	Y+1, r1	; 0x01
    35f8:	88 85       	ldd	r24, Y+8	; 0x08
    35fa:	99 85       	ldd	r25, Y+9	; 0x09
    35fc:	9b 83       	std	Y+3, r25	; 0x03
    35fe:	8a 83       	std	Y+2, r24	; 0x02
    3600:	0f b6       	in	r0, 0x3f	; 63
    3602:	f8 94       	cli
    3604:	0f 92       	push	r0
    3606:	8a 81       	ldd	r24, Y+2	; 0x02
    3608:	9b 81       	ldd	r25, Y+3	; 0x03
    360a:	fc 01       	movw	r30, r24
    360c:	22 8d       	ldd	r18, Z+26	; 0x1a
    360e:	8a 81       	ldd	r24, Y+2	; 0x02
    3610:	9b 81       	ldd	r25, Y+3	; 0x03
    3612:	fc 01       	movw	r30, r24
    3614:	83 8d       	ldd	r24, Z+27	; 0x1b
    3616:	28 17       	cp	r18, r24
    3618:	18 f0       	brcs	.+6      	; 0x3620 <xQueueGenericSend+0x4c>
    361a:	8e 85       	ldd	r24, Y+14	; 0x0e
    361c:	82 30       	cpi	r24, 0x02	; 2
    361e:	11 f5       	brne	.+68     	; 0x3664 <xQueueGenericSend+0x90>
    3620:	2a 85       	ldd	r18, Y+10	; 0x0a
    3622:	3b 85       	ldd	r19, Y+11	; 0x0b
    3624:	8a 81       	ldd	r24, Y+2	; 0x02
    3626:	9b 81       	ldd	r25, Y+3	; 0x03
    3628:	4e 85       	ldd	r20, Y+14	; 0x0e
    362a:	b9 01       	movw	r22, r18
    362c:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <prvCopyDataToQueue>
    3630:	8c 83       	std	Y+4, r24	; 0x04
    3632:	8a 81       	ldd	r24, Y+2	; 0x02
    3634:	9b 81       	ldd	r25, Y+3	; 0x03
    3636:	fc 01       	movw	r30, r24
    3638:	81 89       	ldd	r24, Z+17	; 0x11
    363a:	88 23       	and	r24, r24
    363c:	51 f0       	breq	.+20     	; 0x3652 <xQueueGenericSend+0x7e>
    363e:	8a 81       	ldd	r24, Y+2	; 0x02
    3640:	9b 81       	ldd	r25, Y+3	; 0x03
    3642:	41 96       	adiw	r24, 0x11	; 17
    3644:	0e 94 f5 23 	call	0x47ea	; 0x47ea <xTaskRemoveFromEventList>
    3648:	88 23       	and	r24, r24
    364a:	41 f0       	breq	.+16     	; 0x365c <xQueueGenericSend+0x88>
    364c:	0e 94 54 14 	call	0x28a8	; 0x28a8 <vPortYield>
    3650:	05 c0       	rjmp	.+10     	; 0x365c <xQueueGenericSend+0x88>
    3652:	8c 81       	ldd	r24, Y+4	; 0x04
    3654:	88 23       	and	r24, r24
    3656:	11 f0       	breq	.+4      	; 0x365c <xQueueGenericSend+0x88>
    3658:	0e 94 54 14 	call	0x28a8	; 0x28a8 <vPortYield>
    365c:	0f 90       	pop	r0
    365e:	0f be       	out	0x3f, r0	; 63
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	60 c0       	rjmp	.+192    	; 0x3724 <xQueueGenericSend+0x150>
    3664:	8c 85       	ldd	r24, Y+12	; 0x0c
    3666:	9d 85       	ldd	r25, Y+13	; 0x0d
    3668:	89 2b       	or	r24, r25
    366a:	21 f4       	brne	.+8      	; 0x3674 <xQueueGenericSend+0xa0>
    366c:	0f 90       	pop	r0
    366e:	0f be       	out	0x3f, r0	; 63
    3670:	80 e0       	ldi	r24, 0x00	; 0
    3672:	58 c0       	rjmp	.+176    	; 0x3724 <xQueueGenericSend+0x150>
    3674:	89 81       	ldd	r24, Y+1	; 0x01
    3676:	88 23       	and	r24, r24
    3678:	31 f4       	brne	.+12     	; 0x3686 <xQueueGenericSend+0xb2>
    367a:	ce 01       	movw	r24, r28
    367c:	05 96       	adiw	r24, 0x05	; 5
    367e:	0e 94 62 24 	call	0x48c4	; 0x48c4 <vTaskSetTimeOutState>
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	89 83       	std	Y+1, r24	; 0x01
    3686:	0f 90       	pop	r0
    3688:	0f be       	out	0x3f, r0	; 63
    368a:	0e 94 85 21 	call	0x430a	; 0x430a <vTaskSuspendAll>
    368e:	0f b6       	in	r0, 0x3f	; 63
    3690:	f8 94       	cli
    3692:	0f 92       	push	r0
    3694:	8a 81       	ldd	r24, Y+2	; 0x02
    3696:	9b 81       	ldd	r25, Y+3	; 0x03
    3698:	fc 01       	movw	r30, r24
    369a:	85 8d       	ldd	r24, Z+29	; 0x1d
    369c:	8f 3f       	cpi	r24, 0xFF	; 255
    369e:	21 f4       	brne	.+8      	; 0x36a8 <xQueueGenericSend+0xd4>
    36a0:	8a 81       	ldd	r24, Y+2	; 0x02
    36a2:	9b 81       	ldd	r25, Y+3	; 0x03
    36a4:	fc 01       	movw	r30, r24
    36a6:	15 8e       	std	Z+29, r1	; 0x1d
    36a8:	8a 81       	ldd	r24, Y+2	; 0x02
    36aa:	9b 81       	ldd	r25, Y+3	; 0x03
    36ac:	fc 01       	movw	r30, r24
    36ae:	86 8d       	ldd	r24, Z+30	; 0x1e
    36b0:	8f 3f       	cpi	r24, 0xFF	; 255
    36b2:	21 f4       	brne	.+8      	; 0x36bc <xQueueGenericSend+0xe8>
    36b4:	8a 81       	ldd	r24, Y+2	; 0x02
    36b6:	9b 81       	ldd	r25, Y+3	; 0x03
    36b8:	fc 01       	movw	r30, r24
    36ba:	16 8e       	std	Z+30, r1	; 0x1e
    36bc:	0f 90       	pop	r0
    36be:	0f be       	out	0x3f, r0	; 63
    36c0:	9e 01       	movw	r18, r28
    36c2:	24 5f       	subi	r18, 0xF4	; 244
    36c4:	3f 4f       	sbci	r19, 0xFF	; 255
    36c6:	ce 01       	movw	r24, r28
    36c8:	05 96       	adiw	r24, 0x05	; 5
    36ca:	b9 01       	movw	r22, r18
    36cc:	0e 94 7e 24 	call	0x48fc	; 0x48fc <xTaskCheckForTimeOut>
    36d0:	88 23       	and	r24, r24
    36d2:	09 f5       	brne	.+66     	; 0x3716 <xQueueGenericSend+0x142>
    36d4:	8a 81       	ldd	r24, Y+2	; 0x02
    36d6:	9b 81       	ldd	r25, Y+3	; 0x03
    36d8:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <prvIsQueueFull>
    36dc:	88 23       	and	r24, r24
    36de:	a1 f0       	breq	.+40     	; 0x3708 <xQueueGenericSend+0x134>
    36e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    36e2:	3d 85       	ldd	r19, Y+13	; 0x0d
    36e4:	8a 81       	ldd	r24, Y+2	; 0x02
    36e6:	9b 81       	ldd	r25, Y+3	; 0x03
    36e8:	08 96       	adiw	r24, 0x08	; 8
    36ea:	b9 01       	movw	r22, r18
    36ec:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <vTaskPlaceOnEventList>
    36f0:	8a 81       	ldd	r24, Y+2	; 0x02
    36f2:	9b 81       	ldd	r25, Y+3	; 0x03
    36f4:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <prvUnlockQueue>
    36f8:	0e 94 92 21 	call	0x4324	; 0x4324 <xTaskResumeAll>
    36fc:	88 23       	and	r24, r24
    36fe:	09 f0       	breq	.+2      	; 0x3702 <xQueueGenericSend+0x12e>
    3700:	7f cf       	rjmp	.-258    	; 0x3600 <xQueueGenericSend+0x2c>
    3702:	0e 94 54 14 	call	0x28a8	; 0x28a8 <vPortYield>
    3706:	7c cf       	rjmp	.-264    	; 0x3600 <xQueueGenericSend+0x2c>
    3708:	8a 81       	ldd	r24, Y+2	; 0x02
    370a:	9b 81       	ldd	r25, Y+3	; 0x03
    370c:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <prvUnlockQueue>
    3710:	0e 94 92 21 	call	0x4324	; 0x4324 <xTaskResumeAll>
    3714:	75 cf       	rjmp	.-278    	; 0x3600 <xQueueGenericSend+0x2c>
    3716:	8a 81       	ldd	r24, Y+2	; 0x02
    3718:	9b 81       	ldd	r25, Y+3	; 0x03
    371a:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <prvUnlockQueue>
    371e:	0e 94 92 21 	call	0x4324	; 0x4324 <xTaskResumeAll>
    3722:	80 e0       	ldi	r24, 0x00	; 0
    3724:	2e 96       	adiw	r28, 0x0e	; 14
    3726:	0f b6       	in	r0, 0x3f	; 63
    3728:	f8 94       	cli
    372a:	de bf       	out	0x3e, r29	; 62
    372c:	0f be       	out	0x3f, r0	; 63
    372e:	cd bf       	out	0x3d, r28	; 61
    3730:	df 91       	pop	r29
    3732:	cf 91       	pop	r28
    3734:	08 95       	ret

00003736 <xQueueGenericSendFromISR>:
    3736:	cf 93       	push	r28
    3738:	df 93       	push	r29
    373a:	cd b7       	in	r28, 0x3d	; 61
    373c:	de b7       	in	r29, 0x3e	; 62
    373e:	2c 97       	sbiw	r28, 0x0c	; 12
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	f8 94       	cli
    3744:	de bf       	out	0x3e, r29	; 62
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	cd bf       	out	0x3d, r28	; 61
    374a:	9f 83       	std	Y+7, r25	; 0x07
    374c:	8e 83       	std	Y+6, r24	; 0x06
    374e:	79 87       	std	Y+9, r23	; 0x09
    3750:	68 87       	std	Y+8, r22	; 0x08
    3752:	5b 87       	std	Y+11, r21	; 0x0b
    3754:	4a 87       	std	Y+10, r20	; 0x0a
    3756:	2c 87       	std	Y+12, r18	; 0x0c
    3758:	8e 81       	ldd	r24, Y+6	; 0x06
    375a:	9f 81       	ldd	r25, Y+7	; 0x07
    375c:	9b 83       	std	Y+3, r25	; 0x03
    375e:	8a 83       	std	Y+2, r24	; 0x02
    3760:	1c 82       	std	Y+4, r1	; 0x04
    3762:	8a 81       	ldd	r24, Y+2	; 0x02
    3764:	9b 81       	ldd	r25, Y+3	; 0x03
    3766:	fc 01       	movw	r30, r24
    3768:	22 8d       	ldd	r18, Z+26	; 0x1a
    376a:	8a 81       	ldd	r24, Y+2	; 0x02
    376c:	9b 81       	ldd	r25, Y+3	; 0x03
    376e:	fc 01       	movw	r30, r24
    3770:	83 8d       	ldd	r24, Z+27	; 0x1b
    3772:	28 17       	cp	r18, r24
    3774:	18 f0       	brcs	.+6      	; 0x377c <xQueueGenericSendFromISR+0x46>
    3776:	8c 85       	ldd	r24, Y+12	; 0x0c
    3778:	82 30       	cpi	r24, 0x02	; 2
    377a:	89 f5       	brne	.+98     	; 0x37de <xQueueGenericSendFromISR+0xa8>
    377c:	8a 81       	ldd	r24, Y+2	; 0x02
    377e:	9b 81       	ldd	r25, Y+3	; 0x03
    3780:	fc 01       	movw	r30, r24
    3782:	86 8d       	ldd	r24, Z+30	; 0x1e
    3784:	8d 83       	std	Y+5, r24	; 0x05
    3786:	28 85       	ldd	r18, Y+8	; 0x08
    3788:	39 85       	ldd	r19, Y+9	; 0x09
    378a:	8a 81       	ldd	r24, Y+2	; 0x02
    378c:	9b 81       	ldd	r25, Y+3	; 0x03
    378e:	4c 85       	ldd	r20, Y+12	; 0x0c
    3790:	b9 01       	movw	r22, r18
    3792:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <prvCopyDataToQueue>
    3796:	8d 81       	ldd	r24, Y+5	; 0x05
    3798:	8f 3f       	cpi	r24, 0xFF	; 255
    379a:	b9 f4       	brne	.+46     	; 0x37ca <xQueueGenericSendFromISR+0x94>
    379c:	8a 81       	ldd	r24, Y+2	; 0x02
    379e:	9b 81       	ldd	r25, Y+3	; 0x03
    37a0:	fc 01       	movw	r30, r24
    37a2:	81 89       	ldd	r24, Z+17	; 0x11
    37a4:	88 23       	and	r24, r24
    37a6:	c1 f0       	breq	.+48     	; 0x37d8 <xQueueGenericSendFromISR+0xa2>
    37a8:	8a 81       	ldd	r24, Y+2	; 0x02
    37aa:	9b 81       	ldd	r25, Y+3	; 0x03
    37ac:	41 96       	adiw	r24, 0x11	; 17
    37ae:	0e 94 f5 23 	call	0x47ea	; 0x47ea <xTaskRemoveFromEventList>
    37b2:	88 23       	and	r24, r24
    37b4:	89 f0       	breq	.+34     	; 0x37d8 <xQueueGenericSendFromISR+0xa2>
    37b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    37b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    37ba:	89 2b       	or	r24, r25
    37bc:	69 f0       	breq	.+26     	; 0x37d8 <xQueueGenericSendFromISR+0xa2>
    37be:	8a 85       	ldd	r24, Y+10	; 0x0a
    37c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    37c2:	21 e0       	ldi	r18, 0x01	; 1
    37c4:	fc 01       	movw	r30, r24
    37c6:	20 83       	st	Z, r18
    37c8:	07 c0       	rjmp	.+14     	; 0x37d8 <xQueueGenericSendFromISR+0xa2>
    37ca:	8d 81       	ldd	r24, Y+5	; 0x05
    37cc:	8f 5f       	subi	r24, 0xFF	; 255
    37ce:	28 2f       	mov	r18, r24
    37d0:	8a 81       	ldd	r24, Y+2	; 0x02
    37d2:	9b 81       	ldd	r25, Y+3	; 0x03
    37d4:	fc 01       	movw	r30, r24
    37d6:	26 8f       	std	Z+30, r18	; 0x1e
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	89 83       	std	Y+1, r24	; 0x01
    37dc:	01 c0       	rjmp	.+2      	; 0x37e0 <xQueueGenericSendFromISR+0xaa>
    37de:	19 82       	std	Y+1, r1	; 0x01
    37e0:	89 81       	ldd	r24, Y+1	; 0x01
    37e2:	2c 96       	adiw	r28, 0x0c	; 12
    37e4:	0f b6       	in	r0, 0x3f	; 63
    37e6:	f8 94       	cli
    37e8:	de bf       	out	0x3e, r29	; 62
    37ea:	0f be       	out	0x3f, r0	; 63
    37ec:	cd bf       	out	0x3d, r28	; 61
    37ee:	df 91       	pop	r29
    37f0:	cf 91       	pop	r28
    37f2:	08 95       	ret

000037f4 <xQueueGenericReceive>:
    37f4:	cf 93       	push	r28
    37f6:	df 93       	push	r29
    37f8:	cd b7       	in	r28, 0x3d	; 61
    37fa:	de b7       	in	r29, 0x3e	; 62
    37fc:	60 97       	sbiw	r28, 0x10	; 16
    37fe:	0f b6       	in	r0, 0x3f	; 63
    3800:	f8 94       	cli
    3802:	de bf       	out	0x3e, r29	; 62
    3804:	0f be       	out	0x3f, r0	; 63
    3806:	cd bf       	out	0x3d, r28	; 61
    3808:	9b 87       	std	Y+11, r25	; 0x0b
    380a:	8a 87       	std	Y+10, r24	; 0x0a
    380c:	7d 87       	std	Y+13, r23	; 0x0d
    380e:	6c 87       	std	Y+12, r22	; 0x0c
    3810:	5f 87       	std	Y+15, r21	; 0x0f
    3812:	4e 87       	std	Y+14, r20	; 0x0e
    3814:	28 8b       	std	Y+16, r18	; 0x10
    3816:	19 82       	std	Y+1, r1	; 0x01
    3818:	8a 85       	ldd	r24, Y+10	; 0x0a
    381a:	9b 85       	ldd	r25, Y+11	; 0x0b
    381c:	9b 83       	std	Y+3, r25	; 0x03
    381e:	8a 83       	std	Y+2, r24	; 0x02
    3820:	0f b6       	in	r0, 0x3f	; 63
    3822:	f8 94       	cli
    3824:	0f 92       	push	r0
    3826:	8a 81       	ldd	r24, Y+2	; 0x02
    3828:	9b 81       	ldd	r25, Y+3	; 0x03
    382a:	fc 01       	movw	r30, r24
    382c:	82 8d       	ldd	r24, Z+26	; 0x1a
    382e:	8c 83       	std	Y+4, r24	; 0x04
    3830:	8c 81       	ldd	r24, Y+4	; 0x04
    3832:	88 23       	and	r24, r24
    3834:	09 f4       	brne	.+2      	; 0x3838 <xQueueGenericReceive+0x44>
    3836:	51 c0       	rjmp	.+162    	; 0x38da <xQueueGenericReceive+0xe6>
    3838:	8a 81       	ldd	r24, Y+2	; 0x02
    383a:	9b 81       	ldd	r25, Y+3	; 0x03
    383c:	fc 01       	movw	r30, r24
    383e:	86 81       	ldd	r24, Z+6	; 0x06
    3840:	97 81       	ldd	r25, Z+7	; 0x07
    3842:	9e 83       	std	Y+6, r25	; 0x06
    3844:	8d 83       	std	Y+5, r24	; 0x05
    3846:	2c 85       	ldd	r18, Y+12	; 0x0c
    3848:	3d 85       	ldd	r19, Y+13	; 0x0d
    384a:	8a 81       	ldd	r24, Y+2	; 0x02
    384c:	9b 81       	ldd	r25, Y+3	; 0x03
    384e:	b9 01       	movw	r22, r18
    3850:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <prvCopyDataFromQueue>
    3854:	88 89       	ldd	r24, Y+16	; 0x10
    3856:	88 23       	and	r24, r24
    3858:	31 f5       	brne	.+76     	; 0x38a6 <xQueueGenericReceive+0xb2>
    385a:	8c 81       	ldd	r24, Y+4	; 0x04
    385c:	2f ef       	ldi	r18, 0xFF	; 255
    385e:	28 0f       	add	r18, r24
    3860:	8a 81       	ldd	r24, Y+2	; 0x02
    3862:	9b 81       	ldd	r25, Y+3	; 0x03
    3864:	fc 01       	movw	r30, r24
    3866:	22 8f       	std	Z+26, r18	; 0x1a
    3868:	8a 81       	ldd	r24, Y+2	; 0x02
    386a:	9b 81       	ldd	r25, Y+3	; 0x03
    386c:	fc 01       	movw	r30, r24
    386e:	80 81       	ld	r24, Z
    3870:	91 81       	ldd	r25, Z+1	; 0x01
    3872:	89 2b       	or	r24, r25
    3874:	41 f4       	brne	.+16     	; 0x3886 <xQueueGenericReceive+0x92>
    3876:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <pvTaskIncrementMutexHeldCount>
    387a:	9c 01       	movw	r18, r24
    387c:	8a 81       	ldd	r24, Y+2	; 0x02
    387e:	9b 81       	ldd	r25, Y+3	; 0x03
    3880:	fc 01       	movw	r30, r24
    3882:	33 83       	std	Z+3, r19	; 0x03
    3884:	22 83       	std	Z+2, r18	; 0x02
    3886:	8a 81       	ldd	r24, Y+2	; 0x02
    3888:	9b 81       	ldd	r25, Y+3	; 0x03
    388a:	fc 01       	movw	r30, r24
    388c:	80 85       	ldd	r24, Z+8	; 0x08
    388e:	88 23       	and	r24, r24
    3890:	01 f1       	breq	.+64     	; 0x38d2 <xQueueGenericReceive+0xde>
    3892:	8a 81       	ldd	r24, Y+2	; 0x02
    3894:	9b 81       	ldd	r25, Y+3	; 0x03
    3896:	08 96       	adiw	r24, 0x08	; 8
    3898:	0e 94 f5 23 	call	0x47ea	; 0x47ea <xTaskRemoveFromEventList>
    389c:	88 23       	and	r24, r24
    389e:	c9 f0       	breq	.+50     	; 0x38d2 <xQueueGenericReceive+0xde>
    38a0:	0e 94 54 14 	call	0x28a8	; 0x28a8 <vPortYield>
    38a4:	16 c0       	rjmp	.+44     	; 0x38d2 <xQueueGenericReceive+0xde>
    38a6:	8a 81       	ldd	r24, Y+2	; 0x02
    38a8:	9b 81       	ldd	r25, Y+3	; 0x03
    38aa:	2d 81       	ldd	r18, Y+5	; 0x05
    38ac:	3e 81       	ldd	r19, Y+6	; 0x06
    38ae:	fc 01       	movw	r30, r24
    38b0:	37 83       	std	Z+7, r19	; 0x07
    38b2:	26 83       	std	Z+6, r18	; 0x06
    38b4:	8a 81       	ldd	r24, Y+2	; 0x02
    38b6:	9b 81       	ldd	r25, Y+3	; 0x03
    38b8:	fc 01       	movw	r30, r24
    38ba:	81 89       	ldd	r24, Z+17	; 0x11
    38bc:	88 23       	and	r24, r24
    38be:	49 f0       	breq	.+18     	; 0x38d2 <xQueueGenericReceive+0xde>
    38c0:	8a 81       	ldd	r24, Y+2	; 0x02
    38c2:	9b 81       	ldd	r25, Y+3	; 0x03
    38c4:	41 96       	adiw	r24, 0x11	; 17
    38c6:	0e 94 f5 23 	call	0x47ea	; 0x47ea <xTaskRemoveFromEventList>
    38ca:	88 23       	and	r24, r24
    38cc:	11 f0       	breq	.+4      	; 0x38d2 <xQueueGenericReceive+0xde>
    38ce:	0e 94 54 14 	call	0x28a8	; 0x28a8 <vPortYield>
    38d2:	0f 90       	pop	r0
    38d4:	0f be       	out	0x3f, r0	; 63
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	7a c0       	rjmp	.+244    	; 0x39ce <xQueueGenericReceive+0x1da>
    38da:	8e 85       	ldd	r24, Y+14	; 0x0e
    38dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    38de:	89 2b       	or	r24, r25
    38e0:	21 f4       	brne	.+8      	; 0x38ea <xQueueGenericReceive+0xf6>
    38e2:	0f 90       	pop	r0
    38e4:	0f be       	out	0x3f, r0	; 63
    38e6:	80 e0       	ldi	r24, 0x00	; 0
    38e8:	72 c0       	rjmp	.+228    	; 0x39ce <xQueueGenericReceive+0x1da>
    38ea:	89 81       	ldd	r24, Y+1	; 0x01
    38ec:	88 23       	and	r24, r24
    38ee:	31 f4       	brne	.+12     	; 0x38fc <xQueueGenericReceive+0x108>
    38f0:	ce 01       	movw	r24, r28
    38f2:	07 96       	adiw	r24, 0x07	; 7
    38f4:	0e 94 62 24 	call	0x48c4	; 0x48c4 <vTaskSetTimeOutState>
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	89 83       	std	Y+1, r24	; 0x01
    38fc:	0f 90       	pop	r0
    38fe:	0f be       	out	0x3f, r0	; 63
    3900:	0e 94 85 21 	call	0x430a	; 0x430a <vTaskSuspendAll>
    3904:	0f b6       	in	r0, 0x3f	; 63
    3906:	f8 94       	cli
    3908:	0f 92       	push	r0
    390a:	8a 81       	ldd	r24, Y+2	; 0x02
    390c:	9b 81       	ldd	r25, Y+3	; 0x03
    390e:	fc 01       	movw	r30, r24
    3910:	85 8d       	ldd	r24, Z+29	; 0x1d
    3912:	8f 3f       	cpi	r24, 0xFF	; 255
    3914:	21 f4       	brne	.+8      	; 0x391e <xQueueGenericReceive+0x12a>
    3916:	8a 81       	ldd	r24, Y+2	; 0x02
    3918:	9b 81       	ldd	r25, Y+3	; 0x03
    391a:	fc 01       	movw	r30, r24
    391c:	15 8e       	std	Z+29, r1	; 0x1d
    391e:	8a 81       	ldd	r24, Y+2	; 0x02
    3920:	9b 81       	ldd	r25, Y+3	; 0x03
    3922:	fc 01       	movw	r30, r24
    3924:	86 8d       	ldd	r24, Z+30	; 0x1e
    3926:	8f 3f       	cpi	r24, 0xFF	; 255
    3928:	21 f4       	brne	.+8      	; 0x3932 <xQueueGenericReceive+0x13e>
    392a:	8a 81       	ldd	r24, Y+2	; 0x02
    392c:	9b 81       	ldd	r25, Y+3	; 0x03
    392e:	fc 01       	movw	r30, r24
    3930:	16 8e       	std	Z+30, r1	; 0x1e
    3932:	0f 90       	pop	r0
    3934:	0f be       	out	0x3f, r0	; 63
    3936:	9e 01       	movw	r18, r28
    3938:	22 5f       	subi	r18, 0xF2	; 242
    393a:	3f 4f       	sbci	r19, 0xFF	; 255
    393c:	ce 01       	movw	r24, r28
    393e:	07 96       	adiw	r24, 0x07	; 7
    3940:	b9 01       	movw	r22, r18
    3942:	0e 94 7e 24 	call	0x48fc	; 0x48fc <xTaskCheckForTimeOut>
    3946:	88 23       	and	r24, r24
    3948:	a1 f5       	brne	.+104    	; 0x39b2 <xQueueGenericReceive+0x1be>
    394a:	8a 81       	ldd	r24, Y+2	; 0x02
    394c:	9b 81       	ldd	r25, Y+3	; 0x03
    394e:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <prvIsQueueEmpty>
    3952:	88 23       	and	r24, r24
    3954:	39 f1       	breq	.+78     	; 0x39a4 <xQueueGenericReceive+0x1b0>
    3956:	8a 81       	ldd	r24, Y+2	; 0x02
    3958:	9b 81       	ldd	r25, Y+3	; 0x03
    395a:	fc 01       	movw	r30, r24
    395c:	80 81       	ld	r24, Z
    395e:	91 81       	ldd	r25, Z+1	; 0x01
    3960:	89 2b       	or	r24, r25
    3962:	61 f4       	brne	.+24     	; 0x397c <xQueueGenericReceive+0x188>
    3964:	0f b6       	in	r0, 0x3f	; 63
    3966:	f8 94       	cli
    3968:	0f 92       	push	r0
    396a:	8a 81       	ldd	r24, Y+2	; 0x02
    396c:	9b 81       	ldd	r25, Y+3	; 0x03
    396e:	fc 01       	movw	r30, r24
    3970:	82 81       	ldd	r24, Z+2	; 0x02
    3972:	93 81       	ldd	r25, Z+3	; 0x03
    3974:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <vTaskPriorityInherit>
    3978:	0f 90       	pop	r0
    397a:	0f be       	out	0x3f, r0	; 63
    397c:	2e 85       	ldd	r18, Y+14	; 0x0e
    397e:	3f 85       	ldd	r19, Y+15	; 0x0f
    3980:	8a 81       	ldd	r24, Y+2	; 0x02
    3982:	9b 81       	ldd	r25, Y+3	; 0x03
    3984:	41 96       	adiw	r24, 0x11	; 17
    3986:	b9 01       	movw	r22, r18
    3988:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <vTaskPlaceOnEventList>
    398c:	8a 81       	ldd	r24, Y+2	; 0x02
    398e:	9b 81       	ldd	r25, Y+3	; 0x03
    3990:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <prvUnlockQueue>
    3994:	0e 94 92 21 	call	0x4324	; 0x4324 <xTaskResumeAll>
    3998:	88 23       	and	r24, r24
    399a:	09 f0       	breq	.+2      	; 0x399e <xQueueGenericReceive+0x1aa>
    399c:	41 cf       	rjmp	.-382    	; 0x3820 <xQueueGenericReceive+0x2c>
    399e:	0e 94 54 14 	call	0x28a8	; 0x28a8 <vPortYield>
    39a2:	3e cf       	rjmp	.-388    	; 0x3820 <xQueueGenericReceive+0x2c>
    39a4:	8a 81       	ldd	r24, Y+2	; 0x02
    39a6:	9b 81       	ldd	r25, Y+3	; 0x03
    39a8:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <prvUnlockQueue>
    39ac:	0e 94 92 21 	call	0x4324	; 0x4324 <xTaskResumeAll>
    39b0:	37 cf       	rjmp	.-402    	; 0x3820 <xQueueGenericReceive+0x2c>
    39b2:	8a 81       	ldd	r24, Y+2	; 0x02
    39b4:	9b 81       	ldd	r25, Y+3	; 0x03
    39b6:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <prvUnlockQueue>
    39ba:	0e 94 92 21 	call	0x4324	; 0x4324 <xTaskResumeAll>
    39be:	8a 81       	ldd	r24, Y+2	; 0x02
    39c0:	9b 81       	ldd	r25, Y+3	; 0x03
    39c2:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <prvIsQueueEmpty>
    39c6:	88 23       	and	r24, r24
    39c8:	09 f4       	brne	.+2      	; 0x39cc <xQueueGenericReceive+0x1d8>
    39ca:	2a cf       	rjmp	.-428    	; 0x3820 <xQueueGenericReceive+0x2c>
    39cc:	80 e0       	ldi	r24, 0x00	; 0
    39ce:	60 96       	adiw	r28, 0x10	; 16
    39d0:	0f b6       	in	r0, 0x3f	; 63
    39d2:	f8 94       	cli
    39d4:	de bf       	out	0x3e, r29	; 62
    39d6:	0f be       	out	0x3f, r0	; 63
    39d8:	cd bf       	out	0x3d, r28	; 61
    39da:	df 91       	pop	r29
    39dc:	cf 91       	pop	r28
    39de:	08 95       	ret

000039e0 <uxQueueSpacesAvailable>:
    39e0:	cf 93       	push	r28
    39e2:	df 93       	push	r29
    39e4:	00 d0       	rcall	.+0      	; 0x39e6 <uxQueueSpacesAvailable+0x6>
    39e6:	00 d0       	rcall	.+0      	; 0x39e8 <uxQueueSpacesAvailable+0x8>
    39e8:	1f 92       	push	r1
    39ea:	cd b7       	in	r28, 0x3d	; 61
    39ec:	de b7       	in	r29, 0x3e	; 62
    39ee:	9d 83       	std	Y+5, r25	; 0x05
    39f0:	8c 83       	std	Y+4, r24	; 0x04
    39f2:	8c 81       	ldd	r24, Y+4	; 0x04
    39f4:	9d 81       	ldd	r25, Y+5	; 0x05
    39f6:	9a 83       	std	Y+2, r25	; 0x02
    39f8:	89 83       	std	Y+1, r24	; 0x01
    39fa:	0f b6       	in	r0, 0x3f	; 63
    39fc:	f8 94       	cli
    39fe:	0f 92       	push	r0
    3a00:	89 81       	ldd	r24, Y+1	; 0x01
    3a02:	9a 81       	ldd	r25, Y+2	; 0x02
    3a04:	fc 01       	movw	r30, r24
    3a06:	23 8d       	ldd	r18, Z+27	; 0x1b
    3a08:	89 81       	ldd	r24, Y+1	; 0x01
    3a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a0c:	fc 01       	movw	r30, r24
    3a0e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a10:	f2 2f       	mov	r31, r18
    3a12:	f8 1b       	sub	r31, r24
    3a14:	8f 2f       	mov	r24, r31
    3a16:	8b 83       	std	Y+3, r24	; 0x03
    3a18:	0f 90       	pop	r0
    3a1a:	0f be       	out	0x3f, r0	; 63
    3a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a1e:	0f 90       	pop	r0
    3a20:	0f 90       	pop	r0
    3a22:	0f 90       	pop	r0
    3a24:	0f 90       	pop	r0
    3a26:	0f 90       	pop	r0
    3a28:	df 91       	pop	r29
    3a2a:	cf 91       	pop	r28
    3a2c:	08 95       	ret

00003a2e <prvCopyDataToQueue>:
    3a2e:	cf 93       	push	r28
    3a30:	df 93       	push	r29
    3a32:	cd b7       	in	r28, 0x3d	; 61
    3a34:	de b7       	in	r29, 0x3e	; 62
    3a36:	27 97       	sbiw	r28, 0x07	; 7
    3a38:	0f b6       	in	r0, 0x3f	; 63
    3a3a:	f8 94       	cli
    3a3c:	de bf       	out	0x3e, r29	; 62
    3a3e:	0f be       	out	0x3f, r0	; 63
    3a40:	cd bf       	out	0x3d, r28	; 61
    3a42:	9c 83       	std	Y+4, r25	; 0x04
    3a44:	8b 83       	std	Y+3, r24	; 0x03
    3a46:	7e 83       	std	Y+6, r23	; 0x06
    3a48:	6d 83       	std	Y+5, r22	; 0x05
    3a4a:	4f 83       	std	Y+7, r20	; 0x07
    3a4c:	19 82       	std	Y+1, r1	; 0x01
    3a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a50:	9c 81       	ldd	r25, Y+4	; 0x04
    3a52:	fc 01       	movw	r30, r24
    3a54:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a56:	8a 83       	std	Y+2, r24	; 0x02
    3a58:	8b 81       	ldd	r24, Y+3	; 0x03
    3a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3a60:	88 23       	and	r24, r24
    3a62:	b1 f4       	brne	.+44     	; 0x3a90 <prvCopyDataToQueue+0x62>
    3a64:	8b 81       	ldd	r24, Y+3	; 0x03
    3a66:	9c 81       	ldd	r25, Y+4	; 0x04
    3a68:	fc 01       	movw	r30, r24
    3a6a:	80 81       	ld	r24, Z
    3a6c:	91 81       	ldd	r25, Z+1	; 0x01
    3a6e:	89 2b       	or	r24, r25
    3a70:	09 f0       	breq	.+2      	; 0x3a74 <prvCopyDataToQueue+0x46>
    3a72:	9c c0       	rjmp	.+312    	; 0x3bac <prvCopyDataToQueue+0x17e>
    3a74:	8b 81       	ldd	r24, Y+3	; 0x03
    3a76:	9c 81       	ldd	r25, Y+4	; 0x04
    3a78:	fc 01       	movw	r30, r24
    3a7a:	82 81       	ldd	r24, Z+2	; 0x02
    3a7c:	93 81       	ldd	r25, Z+3	; 0x03
    3a7e:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <xTaskPriorityDisinherit>
    3a82:	89 83       	std	Y+1, r24	; 0x01
    3a84:	8b 81       	ldd	r24, Y+3	; 0x03
    3a86:	9c 81       	ldd	r25, Y+4	; 0x04
    3a88:	fc 01       	movw	r30, r24
    3a8a:	13 82       	std	Z+3, r1	; 0x03
    3a8c:	12 82       	std	Z+2, r1	; 0x02
    3a8e:	8e c0       	rjmp	.+284    	; 0x3bac <prvCopyDataToQueue+0x17e>
    3a90:	8f 81       	ldd	r24, Y+7	; 0x07
    3a92:	88 23       	and	r24, r24
    3a94:	d9 f5       	brne	.+118    	; 0x3b0c <prvCopyDataToQueue+0xde>
    3a96:	8b 81       	ldd	r24, Y+3	; 0x03
    3a98:	9c 81       	ldd	r25, Y+4	; 0x04
    3a9a:	fc 01       	movw	r30, r24
    3a9c:	84 8d       	ldd	r24, Z+28	; 0x1c
    3a9e:	48 2f       	mov	r20, r24
    3aa0:	50 e0       	ldi	r21, 0x00	; 0
    3aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    3aa6:	fc 01       	movw	r30, r24
    3aa8:	84 81       	ldd	r24, Z+4	; 0x04
    3aaa:	95 81       	ldd	r25, Z+5	; 0x05
    3aac:	2d 81       	ldd	r18, Y+5	; 0x05
    3aae:	3e 81       	ldd	r19, Y+6	; 0x06
    3ab0:	b9 01       	movw	r22, r18
    3ab2:	0e 94 08 28 	call	0x5010	; 0x5010 <memcpy>
    3ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    3aba:	fc 01       	movw	r30, r24
    3abc:	24 81       	ldd	r18, Z+4	; 0x04
    3abe:	35 81       	ldd	r19, Z+5	; 0x05
    3ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ac4:	fc 01       	movw	r30, r24
    3ac6:	84 8d       	ldd	r24, Z+28	; 0x1c
    3ac8:	88 2f       	mov	r24, r24
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	28 0f       	add	r18, r24
    3ace:	39 1f       	adc	r19, r25
    3ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad4:	fc 01       	movw	r30, r24
    3ad6:	35 83       	std	Z+5, r19	; 0x05
    3ad8:	24 83       	std	Z+4, r18	; 0x04
    3ada:	8b 81       	ldd	r24, Y+3	; 0x03
    3adc:	9c 81       	ldd	r25, Y+4	; 0x04
    3ade:	fc 01       	movw	r30, r24
    3ae0:	24 81       	ldd	r18, Z+4	; 0x04
    3ae2:	35 81       	ldd	r19, Z+5	; 0x05
    3ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ae8:	fc 01       	movw	r30, r24
    3aea:	82 81       	ldd	r24, Z+2	; 0x02
    3aec:	93 81       	ldd	r25, Z+3	; 0x03
    3aee:	28 17       	cp	r18, r24
    3af0:	39 07       	cpc	r19, r25
    3af2:	08 f4       	brcc	.+2      	; 0x3af6 <prvCopyDataToQueue+0xc8>
    3af4:	5b c0       	rjmp	.+182    	; 0x3bac <prvCopyDataToQueue+0x17e>
    3af6:	8b 81       	ldd	r24, Y+3	; 0x03
    3af8:	9c 81       	ldd	r25, Y+4	; 0x04
    3afa:	fc 01       	movw	r30, r24
    3afc:	20 81       	ld	r18, Z
    3afe:	31 81       	ldd	r19, Z+1	; 0x01
    3b00:	8b 81       	ldd	r24, Y+3	; 0x03
    3b02:	9c 81       	ldd	r25, Y+4	; 0x04
    3b04:	fc 01       	movw	r30, r24
    3b06:	35 83       	std	Z+5, r19	; 0x05
    3b08:	24 83       	std	Z+4, r18	; 0x04
    3b0a:	50 c0       	rjmp	.+160    	; 0x3bac <prvCopyDataToQueue+0x17e>
    3b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b10:	fc 01       	movw	r30, r24
    3b12:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b14:	48 2f       	mov	r20, r24
    3b16:	50 e0       	ldi	r21, 0x00	; 0
    3b18:	8b 81       	ldd	r24, Y+3	; 0x03
    3b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	86 81       	ldd	r24, Z+6	; 0x06
    3b20:	97 81       	ldd	r25, Z+7	; 0x07
    3b22:	2d 81       	ldd	r18, Y+5	; 0x05
    3b24:	3e 81       	ldd	r19, Y+6	; 0x06
    3b26:	b9 01       	movw	r22, r18
    3b28:	0e 94 08 28 	call	0x5010	; 0x5010 <memcpy>
    3b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b30:	fc 01       	movw	r30, r24
    3b32:	26 81       	ldd	r18, Z+6	; 0x06
    3b34:	37 81       	ldd	r19, Z+7	; 0x07
    3b36:	8b 81       	ldd	r24, Y+3	; 0x03
    3b38:	9c 81       	ldd	r25, Y+4	; 0x04
    3b3a:	fc 01       	movw	r30, r24
    3b3c:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b3e:	88 2f       	mov	r24, r24
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	91 95       	neg	r25
    3b44:	81 95       	neg	r24
    3b46:	91 09       	sbc	r25, r1
    3b48:	28 0f       	add	r18, r24
    3b4a:	39 1f       	adc	r19, r25
    3b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b50:	fc 01       	movw	r30, r24
    3b52:	37 83       	std	Z+7, r19	; 0x07
    3b54:	26 83       	std	Z+6, r18	; 0x06
    3b56:	8b 81       	ldd	r24, Y+3	; 0x03
    3b58:	9c 81       	ldd	r25, Y+4	; 0x04
    3b5a:	fc 01       	movw	r30, r24
    3b5c:	26 81       	ldd	r18, Z+6	; 0x06
    3b5e:	37 81       	ldd	r19, Z+7	; 0x07
    3b60:	8b 81       	ldd	r24, Y+3	; 0x03
    3b62:	9c 81       	ldd	r25, Y+4	; 0x04
    3b64:	fc 01       	movw	r30, r24
    3b66:	80 81       	ld	r24, Z
    3b68:	91 81       	ldd	r25, Z+1	; 0x01
    3b6a:	28 17       	cp	r18, r24
    3b6c:	39 07       	cpc	r19, r25
    3b6e:	a8 f4       	brcc	.+42     	; 0x3b9a <prvCopyDataToQueue+0x16c>
    3b70:	8b 81       	ldd	r24, Y+3	; 0x03
    3b72:	9c 81       	ldd	r25, Y+4	; 0x04
    3b74:	fc 01       	movw	r30, r24
    3b76:	22 81       	ldd	r18, Z+2	; 0x02
    3b78:	33 81       	ldd	r19, Z+3	; 0x03
    3b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b7e:	fc 01       	movw	r30, r24
    3b80:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b82:	88 2f       	mov	r24, r24
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	91 95       	neg	r25
    3b88:	81 95       	neg	r24
    3b8a:	91 09       	sbc	r25, r1
    3b8c:	28 0f       	add	r18, r24
    3b8e:	39 1f       	adc	r19, r25
    3b90:	8b 81       	ldd	r24, Y+3	; 0x03
    3b92:	9c 81       	ldd	r25, Y+4	; 0x04
    3b94:	fc 01       	movw	r30, r24
    3b96:	37 83       	std	Z+7, r19	; 0x07
    3b98:	26 83       	std	Z+6, r18	; 0x06
    3b9a:	8f 81       	ldd	r24, Y+7	; 0x07
    3b9c:	82 30       	cpi	r24, 0x02	; 2
    3b9e:	31 f4       	brne	.+12     	; 0x3bac <prvCopyDataToQueue+0x17e>
    3ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba2:	88 23       	and	r24, r24
    3ba4:	19 f0       	breq	.+6      	; 0x3bac <prvCopyDataToQueue+0x17e>
    3ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba8:	81 50       	subi	r24, 0x01	; 1
    3baa:	8a 83       	std	Y+2, r24	; 0x02
    3bac:	8a 81       	ldd	r24, Y+2	; 0x02
    3bae:	21 e0       	ldi	r18, 0x01	; 1
    3bb0:	28 0f       	add	r18, r24
    3bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    3bb6:	fc 01       	movw	r30, r24
    3bb8:	22 8f       	std	Z+26, r18	; 0x1a
    3bba:	89 81       	ldd	r24, Y+1	; 0x01
    3bbc:	27 96       	adiw	r28, 0x07	; 7
    3bbe:	0f b6       	in	r0, 0x3f	; 63
    3bc0:	f8 94       	cli
    3bc2:	de bf       	out	0x3e, r29	; 62
    3bc4:	0f be       	out	0x3f, r0	; 63
    3bc6:	cd bf       	out	0x3d, r28	; 61
    3bc8:	df 91       	pop	r29
    3bca:	cf 91       	pop	r28
    3bcc:	08 95       	ret

00003bce <prvCopyDataFromQueue>:
    3bce:	cf 93       	push	r28
    3bd0:	df 93       	push	r29
    3bd2:	00 d0       	rcall	.+0      	; 0x3bd4 <prvCopyDataFromQueue+0x6>
    3bd4:	00 d0       	rcall	.+0      	; 0x3bd6 <prvCopyDataFromQueue+0x8>
    3bd6:	cd b7       	in	r28, 0x3d	; 61
    3bd8:	de b7       	in	r29, 0x3e	; 62
    3bda:	9a 83       	std	Y+2, r25	; 0x02
    3bdc:	89 83       	std	Y+1, r24	; 0x01
    3bde:	7c 83       	std	Y+4, r23	; 0x04
    3be0:	6b 83       	std	Y+3, r22	; 0x03
    3be2:	89 81       	ldd	r24, Y+1	; 0x01
    3be4:	9a 81       	ldd	r25, Y+2	; 0x02
    3be6:	fc 01       	movw	r30, r24
    3be8:	84 8d       	ldd	r24, Z+28	; 0x1c
    3bea:	88 23       	and	r24, r24
    3bec:	c9 f1       	breq	.+114    	; 0x3c60 <prvCopyDataFromQueue+0x92>
    3bee:	89 81       	ldd	r24, Y+1	; 0x01
    3bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf2:	fc 01       	movw	r30, r24
    3bf4:	26 81       	ldd	r18, Z+6	; 0x06
    3bf6:	37 81       	ldd	r19, Z+7	; 0x07
    3bf8:	89 81       	ldd	r24, Y+1	; 0x01
    3bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    3bfc:	fc 01       	movw	r30, r24
    3bfe:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c00:	88 2f       	mov	r24, r24
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	28 0f       	add	r18, r24
    3c06:	39 1f       	adc	r19, r25
    3c08:	89 81       	ldd	r24, Y+1	; 0x01
    3c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0c:	fc 01       	movw	r30, r24
    3c0e:	37 83       	std	Z+7, r19	; 0x07
    3c10:	26 83       	std	Z+6, r18	; 0x06
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
    3c14:	9a 81       	ldd	r25, Y+2	; 0x02
    3c16:	fc 01       	movw	r30, r24
    3c18:	26 81       	ldd	r18, Z+6	; 0x06
    3c1a:	37 81       	ldd	r19, Z+7	; 0x07
    3c1c:	89 81       	ldd	r24, Y+1	; 0x01
    3c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c20:	fc 01       	movw	r30, r24
    3c22:	82 81       	ldd	r24, Z+2	; 0x02
    3c24:	93 81       	ldd	r25, Z+3	; 0x03
    3c26:	28 17       	cp	r18, r24
    3c28:	39 07       	cpc	r19, r25
    3c2a:	50 f0       	brcs	.+20     	; 0x3c40 <prvCopyDataFromQueue+0x72>
    3c2c:	89 81       	ldd	r24, Y+1	; 0x01
    3c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c30:	fc 01       	movw	r30, r24
    3c32:	20 81       	ld	r18, Z
    3c34:	31 81       	ldd	r19, Z+1	; 0x01
    3c36:	89 81       	ldd	r24, Y+1	; 0x01
    3c38:	9a 81       	ldd	r25, Y+2	; 0x02
    3c3a:	fc 01       	movw	r30, r24
    3c3c:	37 83       	std	Z+7, r19	; 0x07
    3c3e:	26 83       	std	Z+6, r18	; 0x06
    3c40:	89 81       	ldd	r24, Y+1	; 0x01
    3c42:	9a 81       	ldd	r25, Y+2	; 0x02
    3c44:	fc 01       	movw	r30, r24
    3c46:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c48:	48 2f       	mov	r20, r24
    3c4a:	50 e0       	ldi	r21, 0x00	; 0
    3c4c:	89 81       	ldd	r24, Y+1	; 0x01
    3c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c50:	fc 01       	movw	r30, r24
    3c52:	26 81       	ldd	r18, Z+6	; 0x06
    3c54:	37 81       	ldd	r19, Z+7	; 0x07
    3c56:	8b 81       	ldd	r24, Y+3	; 0x03
    3c58:	9c 81       	ldd	r25, Y+4	; 0x04
    3c5a:	b9 01       	movw	r22, r18
    3c5c:	0e 94 08 28 	call	0x5010	; 0x5010 <memcpy>
    3c60:	00 00       	nop
    3c62:	0f 90       	pop	r0
    3c64:	0f 90       	pop	r0
    3c66:	0f 90       	pop	r0
    3c68:	0f 90       	pop	r0
    3c6a:	df 91       	pop	r29
    3c6c:	cf 91       	pop	r28
    3c6e:	08 95       	ret

00003c70 <prvUnlockQueue>:
    3c70:	cf 93       	push	r28
    3c72:	df 93       	push	r29
    3c74:	00 d0       	rcall	.+0      	; 0x3c76 <prvUnlockQueue+0x6>
    3c76:	00 d0       	rcall	.+0      	; 0x3c78 <prvUnlockQueue+0x8>
    3c78:	cd b7       	in	r28, 0x3d	; 61
    3c7a:	de b7       	in	r29, 0x3e	; 62
    3c7c:	9c 83       	std	Y+4, r25	; 0x04
    3c7e:	8b 83       	std	Y+3, r24	; 0x03
    3c80:	0f b6       	in	r0, 0x3f	; 63
    3c82:	f8 94       	cli
    3c84:	0f 92       	push	r0
    3c86:	8b 81       	ldd	r24, Y+3	; 0x03
    3c88:	9c 81       	ldd	r25, Y+4	; 0x04
    3c8a:	fc 01       	movw	r30, r24
    3c8c:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c8e:	89 83       	std	Y+1, r24	; 0x01
    3c90:	12 c0       	rjmp	.+36     	; 0x3cb6 <prvUnlockQueue+0x46>
    3c92:	8b 81       	ldd	r24, Y+3	; 0x03
    3c94:	9c 81       	ldd	r25, Y+4	; 0x04
    3c96:	fc 01       	movw	r30, r24
    3c98:	81 89       	ldd	r24, Z+17	; 0x11
    3c9a:	88 23       	and	r24, r24
    3c9c:	81 f0       	breq	.+32     	; 0x3cbe <prvUnlockQueue+0x4e>
    3c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca2:	41 96       	adiw	r24, 0x11	; 17
    3ca4:	0e 94 f5 23 	call	0x47ea	; 0x47ea <xTaskRemoveFromEventList>
    3ca8:	88 23       	and	r24, r24
    3caa:	11 f0       	breq	.+4      	; 0x3cb0 <prvUnlockQueue+0x40>
    3cac:	0e 94 e6 24 	call	0x49cc	; 0x49cc <vTaskMissedYield>
    3cb0:	89 81       	ldd	r24, Y+1	; 0x01
    3cb2:	81 50       	subi	r24, 0x01	; 1
    3cb4:	89 83       	std	Y+1, r24	; 0x01
    3cb6:	89 81       	ldd	r24, Y+1	; 0x01
    3cb8:	18 16       	cp	r1, r24
    3cba:	5c f3       	brlt	.-42     	; 0x3c92 <prvUnlockQueue+0x22>
    3cbc:	01 c0       	rjmp	.+2      	; 0x3cc0 <prvUnlockQueue+0x50>
    3cbe:	00 00       	nop
    3cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc4:	2f ef       	ldi	r18, 0xFF	; 255
    3cc6:	fc 01       	movw	r30, r24
    3cc8:	26 8f       	std	Z+30, r18	; 0x1e
    3cca:	0f 90       	pop	r0
    3ccc:	0f be       	out	0x3f, r0	; 63
    3cce:	0f b6       	in	r0, 0x3f	; 63
    3cd0:	f8 94       	cli
    3cd2:	0f 92       	push	r0
    3cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    3cd8:	fc 01       	movw	r30, r24
    3cda:	85 8d       	ldd	r24, Z+29	; 0x1d
    3cdc:	8a 83       	std	Y+2, r24	; 0x02
    3cde:	12 c0       	rjmp	.+36     	; 0x3d04 <prvUnlockQueue+0x94>
    3ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce4:	fc 01       	movw	r30, r24
    3ce6:	80 85       	ldd	r24, Z+8	; 0x08
    3ce8:	88 23       	and	r24, r24
    3cea:	81 f0       	breq	.+32     	; 0x3d0c <prvUnlockQueue+0x9c>
    3cec:	8b 81       	ldd	r24, Y+3	; 0x03
    3cee:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf0:	08 96       	adiw	r24, 0x08	; 8
    3cf2:	0e 94 f5 23 	call	0x47ea	; 0x47ea <xTaskRemoveFromEventList>
    3cf6:	88 23       	and	r24, r24
    3cf8:	11 f0       	breq	.+4      	; 0x3cfe <prvUnlockQueue+0x8e>
    3cfa:	0e 94 e6 24 	call	0x49cc	; 0x49cc <vTaskMissedYield>
    3cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3d00:	81 50       	subi	r24, 0x01	; 1
    3d02:	8a 83       	std	Y+2, r24	; 0x02
    3d04:	8a 81       	ldd	r24, Y+2	; 0x02
    3d06:	18 16       	cp	r1, r24
    3d08:	5c f3       	brlt	.-42     	; 0x3ce0 <prvUnlockQueue+0x70>
    3d0a:	01 c0       	rjmp	.+2      	; 0x3d0e <prvUnlockQueue+0x9e>
    3d0c:	00 00       	nop
    3d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d10:	9c 81       	ldd	r25, Y+4	; 0x04
    3d12:	2f ef       	ldi	r18, 0xFF	; 255
    3d14:	fc 01       	movw	r30, r24
    3d16:	25 8f       	std	Z+29, r18	; 0x1d
    3d18:	0f 90       	pop	r0
    3d1a:	0f be       	out	0x3f, r0	; 63
    3d1c:	00 00       	nop
    3d1e:	0f 90       	pop	r0
    3d20:	0f 90       	pop	r0
    3d22:	0f 90       	pop	r0
    3d24:	0f 90       	pop	r0
    3d26:	df 91       	pop	r29
    3d28:	cf 91       	pop	r28
    3d2a:	08 95       	ret

00003d2c <prvIsQueueEmpty>:
    3d2c:	cf 93       	push	r28
    3d2e:	df 93       	push	r29
    3d30:	00 d0       	rcall	.+0      	; 0x3d32 <prvIsQueueEmpty+0x6>
    3d32:	1f 92       	push	r1
    3d34:	cd b7       	in	r28, 0x3d	; 61
    3d36:	de b7       	in	r29, 0x3e	; 62
    3d38:	9b 83       	std	Y+3, r25	; 0x03
    3d3a:	8a 83       	std	Y+2, r24	; 0x02
    3d3c:	0f b6       	in	r0, 0x3f	; 63
    3d3e:	f8 94       	cli
    3d40:	0f 92       	push	r0
    3d42:	8a 81       	ldd	r24, Y+2	; 0x02
    3d44:	9b 81       	ldd	r25, Y+3	; 0x03
    3d46:	fc 01       	movw	r30, r24
    3d48:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d4a:	88 23       	and	r24, r24
    3d4c:	19 f4       	brne	.+6      	; 0x3d54 <prvIsQueueEmpty+0x28>
    3d4e:	81 e0       	ldi	r24, 0x01	; 1
    3d50:	89 83       	std	Y+1, r24	; 0x01
    3d52:	01 c0       	rjmp	.+2      	; 0x3d56 <prvIsQueueEmpty+0x2a>
    3d54:	19 82       	std	Y+1, r1	; 0x01
    3d56:	0f 90       	pop	r0
    3d58:	0f be       	out	0x3f, r0	; 63
    3d5a:	89 81       	ldd	r24, Y+1	; 0x01
    3d5c:	0f 90       	pop	r0
    3d5e:	0f 90       	pop	r0
    3d60:	0f 90       	pop	r0
    3d62:	df 91       	pop	r29
    3d64:	cf 91       	pop	r28
    3d66:	08 95       	ret

00003d68 <prvIsQueueFull>:
    3d68:	cf 93       	push	r28
    3d6a:	df 93       	push	r29
    3d6c:	00 d0       	rcall	.+0      	; 0x3d6e <prvIsQueueFull+0x6>
    3d6e:	1f 92       	push	r1
    3d70:	cd b7       	in	r28, 0x3d	; 61
    3d72:	de b7       	in	r29, 0x3e	; 62
    3d74:	9b 83       	std	Y+3, r25	; 0x03
    3d76:	8a 83       	std	Y+2, r24	; 0x02
    3d78:	0f b6       	in	r0, 0x3f	; 63
    3d7a:	f8 94       	cli
    3d7c:	0f 92       	push	r0
    3d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d80:	9b 81       	ldd	r25, Y+3	; 0x03
    3d82:	fc 01       	movw	r30, r24
    3d84:	22 8d       	ldd	r18, Z+26	; 0x1a
    3d86:	8a 81       	ldd	r24, Y+2	; 0x02
    3d88:	9b 81       	ldd	r25, Y+3	; 0x03
    3d8a:	fc 01       	movw	r30, r24
    3d8c:	83 8d       	ldd	r24, Z+27	; 0x1b
    3d8e:	28 17       	cp	r18, r24
    3d90:	19 f4       	brne	.+6      	; 0x3d98 <prvIsQueueFull+0x30>
    3d92:	81 e0       	ldi	r24, 0x01	; 1
    3d94:	89 83       	std	Y+1, r24	; 0x01
    3d96:	01 c0       	rjmp	.+2      	; 0x3d9a <prvIsQueueFull+0x32>
    3d98:	19 82       	std	Y+1, r1	; 0x01
    3d9a:	0f 90       	pop	r0
    3d9c:	0f be       	out	0x3f, r0	; 63
    3d9e:	89 81       	ldd	r24, Y+1	; 0x01
    3da0:	0f 90       	pop	r0
    3da2:	0f 90       	pop	r0
    3da4:	0f 90       	pop	r0
    3da6:	df 91       	pop	r29
    3da8:	cf 91       	pop	r28
    3daa:	08 95       	ret

00003dac <xTaskCreate>:
    3dac:	8f 92       	push	r8
    3dae:	9f 92       	push	r9
    3db0:	af 92       	push	r10
    3db2:	bf 92       	push	r11
    3db4:	cf 92       	push	r12
    3db6:	df 92       	push	r13
    3db8:	ef 92       	push	r14
    3dba:	ff 92       	push	r15
    3dbc:	0f 93       	push	r16
    3dbe:	1f 93       	push	r17
    3dc0:	cf 93       	push	r28
    3dc2:	df 93       	push	r29
    3dc4:	cd b7       	in	r28, 0x3d	; 61
    3dc6:	de b7       	in	r29, 0x3e	; 62
    3dc8:	60 97       	sbiw	r28, 0x10	; 16
    3dca:	0f b6       	in	r0, 0x3f	; 63
    3dcc:	f8 94       	cli
    3dce:	de bf       	out	0x3e, r29	; 62
    3dd0:	0f be       	out	0x3f, r0	; 63
    3dd2:	cd bf       	out	0x3d, r28	; 61
    3dd4:	9f 83       	std	Y+7, r25	; 0x07
    3dd6:	8e 83       	std	Y+6, r24	; 0x06
    3dd8:	79 87       	std	Y+9, r23	; 0x09
    3dda:	68 87       	std	Y+8, r22	; 0x08
    3ddc:	5b 87       	std	Y+11, r21	; 0x0b
    3dde:	4a 87       	std	Y+10, r20	; 0x0a
    3de0:	3d 87       	std	Y+13, r19	; 0x0d
    3de2:	2c 87       	std	Y+12, r18	; 0x0c
    3de4:	0e 87       	std	Y+14, r16	; 0x0e
    3de6:	f8 8a       	std	Y+16, r15	; 0x10
    3de8:	ef 86       	std	Y+15, r14	; 0x0f
    3dea:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dec:	9b 85       	ldd	r25, Y+11	; 0x0b
    3dee:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <pvPortMalloc>
    3df2:	9d 83       	std	Y+5, r25	; 0x05
    3df4:	8c 83       	std	Y+4, r24	; 0x04
    3df6:	8c 81       	ldd	r24, Y+4	; 0x04
    3df8:	9d 81       	ldd	r25, Y+5	; 0x05
    3dfa:	89 2b       	or	r24, r25
    3dfc:	b9 f0       	breq	.+46     	; 0x3e2c <xTaskCreate+0x80>
    3dfe:	8c e2       	ldi	r24, 0x2C	; 44
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <pvPortMalloc>
    3e06:	9a 83       	std	Y+2, r25	; 0x02
    3e08:	89 83       	std	Y+1, r24	; 0x01
    3e0a:	89 81       	ldd	r24, Y+1	; 0x01
    3e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e0e:	89 2b       	or	r24, r25
    3e10:	41 f0       	breq	.+16     	; 0x3e22 <xTaskCreate+0x76>
    3e12:	89 81       	ldd	r24, Y+1	; 0x01
    3e14:	9a 81       	ldd	r25, Y+2	; 0x02
    3e16:	2c 81       	ldd	r18, Y+4	; 0x04
    3e18:	3d 81       	ldd	r19, Y+5	; 0x05
    3e1a:	fc 01       	movw	r30, r24
    3e1c:	30 8f       	std	Z+24, r19	; 0x18
    3e1e:	27 8b       	std	Z+23, r18	; 0x17
    3e20:	07 c0       	rjmp	.+14     	; 0x3e30 <xTaskCreate+0x84>
    3e22:	8c 81       	ldd	r24, Y+4	; 0x04
    3e24:	9d 81       	ldd	r25, Y+5	; 0x05
    3e26:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <vPortFree>
    3e2a:	02 c0       	rjmp	.+4      	; 0x3e30 <xTaskCreate+0x84>
    3e2c:	1a 82       	std	Y+2, r1	; 0x02
    3e2e:	19 82       	std	Y+1, r1	; 0x01
    3e30:	89 81       	ldd	r24, Y+1	; 0x01
    3e32:	9a 81       	ldd	r25, Y+2	; 0x02
    3e34:	89 2b       	or	r24, r25
    3e36:	09 f1       	breq	.+66     	; 0x3e7a <xTaskCreate+0xce>
    3e38:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e3c:	cc 01       	movw	r24, r24
    3e3e:	a0 e0       	ldi	r26, 0x00	; 0
    3e40:	b0 e0       	ldi	r27, 0x00	; 0
    3e42:	09 81       	ldd	r16, Y+1	; 0x01
    3e44:	1a 81       	ldd	r17, Y+2	; 0x02
    3e46:	4f 85       	ldd	r20, Y+15	; 0x0f
    3e48:	58 89       	ldd	r21, Y+16	; 0x10
    3e4a:	2c 85       	ldd	r18, Y+12	; 0x0c
    3e4c:	3d 85       	ldd	r19, Y+13	; 0x0d
    3e4e:	68 85       	ldd	r22, Y+8	; 0x08
    3e50:	79 85       	ldd	r23, Y+9	; 0x09
    3e52:	ee 81       	ldd	r30, Y+6	; 0x06
    3e54:	ff 81       	ldd	r31, Y+7	; 0x07
    3e56:	81 2c       	mov	r8, r1
    3e58:	91 2c       	mov	r9, r1
    3e5a:	58 01       	movw	r10, r16
    3e5c:	6a 01       	movw	r12, r20
    3e5e:	ee 84       	ldd	r14, Y+14	; 0x0e
    3e60:	89 01       	movw	r16, r18
    3e62:	9c 01       	movw	r18, r24
    3e64:	ad 01       	movw	r20, r26
    3e66:	cf 01       	movw	r24, r30
    3e68:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <prvInitialiseNewTask>
    3e6c:	89 81       	ldd	r24, Y+1	; 0x01
    3e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e70:	0e 94 2f 20 	call	0x405e	; 0x405e <prvAddNewTaskToReadyList>
    3e74:	81 e0       	ldi	r24, 0x01	; 1
    3e76:	8b 83       	std	Y+3, r24	; 0x03
    3e78:	02 c0       	rjmp	.+4      	; 0x3e7e <xTaskCreate+0xd2>
    3e7a:	8f ef       	ldi	r24, 0xFF	; 255
    3e7c:	8b 83       	std	Y+3, r24	; 0x03
    3e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e80:	60 96       	adiw	r28, 0x10	; 16
    3e82:	0f b6       	in	r0, 0x3f	; 63
    3e84:	f8 94       	cli
    3e86:	de bf       	out	0x3e, r29	; 62
    3e88:	0f be       	out	0x3f, r0	; 63
    3e8a:	cd bf       	out	0x3d, r28	; 61
    3e8c:	df 91       	pop	r29
    3e8e:	cf 91       	pop	r28
    3e90:	1f 91       	pop	r17
    3e92:	0f 91       	pop	r16
    3e94:	ff 90       	pop	r15
    3e96:	ef 90       	pop	r14
    3e98:	df 90       	pop	r13
    3e9a:	cf 90       	pop	r12
    3e9c:	bf 90       	pop	r11
    3e9e:	af 90       	pop	r10
    3ea0:	9f 90       	pop	r9
    3ea2:	8f 90       	pop	r8
    3ea4:	08 95       	ret

00003ea6 <prvInitialiseNewTask>:
    3ea6:	8f 92       	push	r8
    3ea8:	9f 92       	push	r9
    3eaa:	af 92       	push	r10
    3eac:	bf 92       	push	r11
    3eae:	cf 92       	push	r12
    3eb0:	df 92       	push	r13
    3eb2:	ef 92       	push	r14
    3eb4:	0f 93       	push	r16
    3eb6:	1f 93       	push	r17
    3eb8:	cf 93       	push	r28
    3eba:	df 93       	push	r29
    3ebc:	cd b7       	in	r28, 0x3d	; 61
    3ebe:	de b7       	in	r29, 0x3e	; 62
    3ec0:	64 97       	sbiw	r28, 0x14	; 20
    3ec2:	0f b6       	in	r0, 0x3f	; 63
    3ec4:	f8 94       	cli
    3ec6:	de bf       	out	0x3e, r29	; 62
    3ec8:	0f be       	out	0x3f, r0	; 63
    3eca:	cd bf       	out	0x3d, r28	; 61
    3ecc:	9d 83       	std	Y+5, r25	; 0x05
    3ece:	8c 83       	std	Y+4, r24	; 0x04
    3ed0:	7f 83       	std	Y+7, r23	; 0x07
    3ed2:	6e 83       	std	Y+6, r22	; 0x06
    3ed4:	28 87       	std	Y+8, r18	; 0x08
    3ed6:	39 87       	std	Y+9, r19	; 0x09
    3ed8:	4a 87       	std	Y+10, r20	; 0x0a
    3eda:	5b 87       	std	Y+11, r21	; 0x0b
    3edc:	1d 87       	std	Y+13, r17	; 0x0d
    3ede:	0c 87       	std	Y+12, r16	; 0x0c
    3ee0:	ee 86       	std	Y+14, r14	; 0x0e
    3ee2:	d8 8a       	std	Y+16, r13	; 0x10
    3ee4:	cf 86       	std	Y+15, r12	; 0x0f
    3ee6:	ba 8a       	std	Y+18, r11	; 0x12
    3ee8:	a9 8a       	std	Y+17, r10	; 0x11
    3eea:	9c 8a       	std	Y+20, r9	; 0x14
    3eec:	8b 8a       	std	Y+19, r8	; 0x13
    3eee:	28 85       	ldd	r18, Y+8	; 0x08
    3ef0:	39 85       	ldd	r19, Y+9	; 0x09
    3ef2:	89 89       	ldd	r24, Y+17	; 0x11
    3ef4:	9a 89       	ldd	r25, Y+18	; 0x12
    3ef6:	fc 01       	movw	r30, r24
    3ef8:	87 89       	ldd	r24, Z+23	; 0x17
    3efa:	90 8d       	ldd	r25, Z+24	; 0x18
    3efc:	a9 01       	movw	r20, r18
    3efe:	65 ea       	ldi	r22, 0xA5	; 165
    3f00:	70 e0       	ldi	r23, 0x00	; 0
    3f02:	0e 94 11 28 	call	0x5022	; 0x5022 <memset>
    3f06:	89 89       	ldd	r24, Y+17	; 0x11
    3f08:	9a 89       	ldd	r25, Y+18	; 0x12
    3f0a:	fc 01       	movw	r30, r24
    3f0c:	27 89       	ldd	r18, Z+23	; 0x17
    3f0e:	30 8d       	ldd	r19, Z+24	; 0x18
    3f10:	88 85       	ldd	r24, Y+8	; 0x08
    3f12:	99 85       	ldd	r25, Y+9	; 0x09
    3f14:	01 97       	sbiw	r24, 0x01	; 1
    3f16:	82 0f       	add	r24, r18
    3f18:	93 1f       	adc	r25, r19
    3f1a:	9b 83       	std	Y+3, r25	; 0x03
    3f1c:	8a 83       	std	Y+2, r24	; 0x02
    3f1e:	19 82       	std	Y+1, r1	; 0x01
    3f20:	21 c0       	rjmp	.+66     	; 0x3f64 <prvInitialiseNewTask+0xbe>
    3f22:	89 81       	ldd	r24, Y+1	; 0x01
    3f24:	88 2f       	mov	r24, r24
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	29 81       	ldd	r18, Y+1	; 0x01
    3f2a:	22 2f       	mov	r18, r18
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	4e 81       	ldd	r20, Y+6	; 0x06
    3f30:	5f 81       	ldd	r21, Y+7	; 0x07
    3f32:	24 0f       	add	r18, r20
    3f34:	35 1f       	adc	r19, r21
    3f36:	f9 01       	movw	r30, r18
    3f38:	40 81       	ld	r20, Z
    3f3a:	29 89       	ldd	r18, Y+17	; 0x11
    3f3c:	3a 89       	ldd	r19, Y+18	; 0x12
    3f3e:	82 0f       	add	r24, r18
    3f40:	93 1f       	adc	r25, r19
    3f42:	49 96       	adiw	r24, 0x19	; 25
    3f44:	fc 01       	movw	r30, r24
    3f46:	40 83       	st	Z, r20
    3f48:	89 81       	ldd	r24, Y+1	; 0x01
    3f4a:	88 2f       	mov	r24, r24
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	2e 81       	ldd	r18, Y+6	; 0x06
    3f50:	3f 81       	ldd	r19, Y+7	; 0x07
    3f52:	82 0f       	add	r24, r18
    3f54:	93 1f       	adc	r25, r19
    3f56:	fc 01       	movw	r30, r24
    3f58:	80 81       	ld	r24, Z
    3f5a:	88 23       	and	r24, r24
    3f5c:	39 f0       	breq	.+14     	; 0x3f6c <prvInitialiseNewTask+0xc6>
    3f5e:	89 81       	ldd	r24, Y+1	; 0x01
    3f60:	8f 5f       	subi	r24, 0xFF	; 255
    3f62:	89 83       	std	Y+1, r24	; 0x01
    3f64:	89 81       	ldd	r24, Y+1	; 0x01
    3f66:	88 30       	cpi	r24, 0x08	; 8
    3f68:	e0 f2       	brcs	.-72     	; 0x3f22 <prvInitialiseNewTask+0x7c>
    3f6a:	01 c0       	rjmp	.+2      	; 0x3f6e <prvInitialiseNewTask+0xc8>
    3f6c:	00 00       	nop
    3f6e:	89 89       	ldd	r24, Y+17	; 0x11
    3f70:	9a 89       	ldd	r25, Y+18	; 0x12
    3f72:	fc 01       	movw	r30, r24
    3f74:	10 a2       	std	Z+32, r1	; 0x20
    3f76:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f78:	84 30       	cpi	r24, 0x04	; 4
    3f7a:	10 f0       	brcs	.+4      	; 0x3f80 <prvInitialiseNewTask+0xda>
    3f7c:	83 e0       	ldi	r24, 0x03	; 3
    3f7e:	8e 87       	std	Y+14, r24	; 0x0e
    3f80:	89 89       	ldd	r24, Y+17	; 0x11
    3f82:	9a 89       	ldd	r25, Y+18	; 0x12
    3f84:	2e 85       	ldd	r18, Y+14	; 0x0e
    3f86:	fc 01       	movw	r30, r24
    3f88:	26 8b       	std	Z+22, r18	; 0x16
    3f8a:	89 89       	ldd	r24, Y+17	; 0x11
    3f8c:	9a 89       	ldd	r25, Y+18	; 0x12
    3f8e:	2e 85       	ldd	r18, Y+14	; 0x0e
    3f90:	fc 01       	movw	r30, r24
    3f92:	23 a3       	std	Z+35, r18	; 0x23
    3f94:	89 89       	ldd	r24, Y+17	; 0x11
    3f96:	9a 89       	ldd	r25, Y+18	; 0x12
    3f98:	fc 01       	movw	r30, r24
    3f9a:	14 a2       	std	Z+36, r1	; 0x24
    3f9c:	89 89       	ldd	r24, Y+17	; 0x11
    3f9e:	9a 89       	ldd	r25, Y+18	; 0x12
    3fa0:	02 96       	adiw	r24, 0x02	; 2
    3fa2:	0e 94 46 11 	call	0x228c	; 0x228c <vListInitialiseItem>
    3fa6:	89 89       	ldd	r24, Y+17	; 0x11
    3fa8:	9a 89       	ldd	r25, Y+18	; 0x12
    3faa:	0c 96       	adiw	r24, 0x0c	; 12
    3fac:	0e 94 46 11 	call	0x228c	; 0x228c <vListInitialiseItem>
    3fb0:	89 89       	ldd	r24, Y+17	; 0x11
    3fb2:	9a 89       	ldd	r25, Y+18	; 0x12
    3fb4:	29 89       	ldd	r18, Y+17	; 0x11
    3fb6:	3a 89       	ldd	r19, Y+18	; 0x12
    3fb8:	fc 01       	movw	r30, r24
    3fba:	31 87       	std	Z+9, r19	; 0x09
    3fbc:	20 87       	std	Z+8, r18	; 0x08
    3fbe:	8e 85       	ldd	r24, Y+14	; 0x0e
    3fc0:	88 2f       	mov	r24, r24
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	24 e0       	ldi	r18, 0x04	; 4
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	28 1b       	sub	r18, r24
    3fca:	39 0b       	sbc	r19, r25
    3fcc:	89 89       	ldd	r24, Y+17	; 0x11
    3fce:	9a 89       	ldd	r25, Y+18	; 0x12
    3fd0:	fc 01       	movw	r30, r24
    3fd2:	35 87       	std	Z+13, r19	; 0x0d
    3fd4:	24 87       	std	Z+12, r18	; 0x0c
    3fd6:	89 89       	ldd	r24, Y+17	; 0x11
    3fd8:	9a 89       	ldd	r25, Y+18	; 0x12
    3fda:	29 89       	ldd	r18, Y+17	; 0x11
    3fdc:	3a 89       	ldd	r19, Y+18	; 0x12
    3fde:	fc 01       	movw	r30, r24
    3fe0:	33 8b       	std	Z+19, r19	; 0x13
    3fe2:	22 8b       	std	Z+18, r18	; 0x12
    3fe4:	89 89       	ldd	r24, Y+17	; 0x11
    3fe6:	9a 89       	ldd	r25, Y+18	; 0x12
    3fe8:	fc 01       	movw	r30, r24
    3fea:	16 a2       	std	Z+38, r1	; 0x26
    3fec:	15 a2       	std	Z+37, r1	; 0x25
    3fee:	89 89       	ldd	r24, Y+17	; 0x11
    3ff0:	9a 89       	ldd	r25, Y+18	; 0x12
    3ff2:	fc 01       	movw	r30, r24
    3ff4:	17 a2       	std	Z+39, r1	; 0x27
    3ff6:	10 a6       	std	Z+40, r1	; 0x28
    3ff8:	11 a6       	std	Z+41, r1	; 0x29
    3ffa:	12 a6       	std	Z+42, r1	; 0x2a
    3ffc:	89 89       	ldd	r24, Y+17	; 0x11
    3ffe:	9a 89       	ldd	r25, Y+18	; 0x12
    4000:	fc 01       	movw	r30, r24
    4002:	13 a6       	std	Z+43, r1	; 0x2b
    4004:	4c 85       	ldd	r20, Y+12	; 0x0c
    4006:	5d 85       	ldd	r21, Y+13	; 0x0d
    4008:	2c 81       	ldd	r18, Y+4	; 0x04
    400a:	3d 81       	ldd	r19, Y+5	; 0x05
    400c:	8a 81       	ldd	r24, Y+2	; 0x02
    400e:	9b 81       	ldd	r25, Y+3	; 0x03
    4010:	b9 01       	movw	r22, r18
    4012:	0e 94 76 12 	call	0x24ec	; 0x24ec <pxPortInitialiseStack>
    4016:	9c 01       	movw	r18, r24
    4018:	89 89       	ldd	r24, Y+17	; 0x11
    401a:	9a 89       	ldd	r25, Y+18	; 0x12
    401c:	fc 01       	movw	r30, r24
    401e:	31 83       	std	Z+1, r19	; 0x01
    4020:	20 83       	st	Z, r18
    4022:	8f 85       	ldd	r24, Y+15	; 0x0f
    4024:	98 89       	ldd	r25, Y+16	; 0x10
    4026:	89 2b       	or	r24, r25
    4028:	39 f0       	breq	.+14     	; 0x4038 <prvInitialiseNewTask+0x192>
    402a:	8f 85       	ldd	r24, Y+15	; 0x0f
    402c:	98 89       	ldd	r25, Y+16	; 0x10
    402e:	29 89       	ldd	r18, Y+17	; 0x11
    4030:	3a 89       	ldd	r19, Y+18	; 0x12
    4032:	fc 01       	movw	r30, r24
    4034:	31 83       	std	Z+1, r19	; 0x01
    4036:	20 83       	st	Z, r18
    4038:	00 00       	nop
    403a:	64 96       	adiw	r28, 0x14	; 20
    403c:	0f b6       	in	r0, 0x3f	; 63
    403e:	f8 94       	cli
    4040:	de bf       	out	0x3e, r29	; 62
    4042:	0f be       	out	0x3f, r0	; 63
    4044:	cd bf       	out	0x3d, r28	; 61
    4046:	df 91       	pop	r29
    4048:	cf 91       	pop	r28
    404a:	1f 91       	pop	r17
    404c:	0f 91       	pop	r16
    404e:	ef 90       	pop	r14
    4050:	df 90       	pop	r13
    4052:	cf 90       	pop	r12
    4054:	bf 90       	pop	r11
    4056:	af 90       	pop	r10
    4058:	9f 90       	pop	r9
    405a:	8f 90       	pop	r8
    405c:	08 95       	ret

0000405e <prvAddNewTaskToReadyList>:
    405e:	cf 93       	push	r28
    4060:	df 93       	push	r29
    4062:	00 d0       	rcall	.+0      	; 0x4064 <prvAddNewTaskToReadyList+0x6>
    4064:	cd b7       	in	r28, 0x3d	; 61
    4066:	de b7       	in	r29, 0x3e	; 62
    4068:	9a 83       	std	Y+2, r25	; 0x02
    406a:	89 83       	std	Y+1, r24	; 0x01
    406c:	0f b6       	in	r0, 0x3f	; 63
    406e:	f8 94       	cli
    4070:	0f 92       	push	r0
    4072:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <uxCurrentNumberOfTasks>
    4076:	8f 5f       	subi	r24, 0xFF	; 255
    4078:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <uxCurrentNumberOfTasks>
    407c:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4080:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4084:	89 2b       	or	r24, r25
    4086:	69 f4       	brne	.+26     	; 0x40a2 <prvAddNewTaskToReadyList+0x44>
    4088:	89 81       	ldd	r24, Y+1	; 0x01
    408a:	9a 81       	ldd	r25, Y+2	; 0x02
    408c:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <pxCurrentTCB+0x1>
    4090:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <pxCurrentTCB>
    4094:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <uxCurrentNumberOfTasks>
    4098:	81 30       	cpi	r24, 0x01	; 1
    409a:	c9 f4       	brne	.+50     	; 0x40ce <prvAddNewTaskToReadyList+0x70>
    409c:	0e 94 03 25 	call	0x4a06	; 0x4a06 <prvInitialiseTaskLists>
    40a0:	16 c0       	rjmp	.+44     	; 0x40ce <prvAddNewTaskToReadyList+0x70>
    40a2:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <xSchedulerRunning>
    40a6:	88 23       	and	r24, r24
    40a8:	91 f4       	brne	.+36     	; 0x40ce <prvAddNewTaskToReadyList+0x70>
    40aa:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    40ae:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    40b2:	fc 01       	movw	r30, r24
    40b4:	26 89       	ldd	r18, Z+22	; 0x16
    40b6:	89 81       	ldd	r24, Y+1	; 0x01
    40b8:	9a 81       	ldd	r25, Y+2	; 0x02
    40ba:	fc 01       	movw	r30, r24
    40bc:	86 89       	ldd	r24, Z+22	; 0x16
    40be:	82 17       	cp	r24, r18
    40c0:	30 f0       	brcs	.+12     	; 0x40ce <prvAddNewTaskToReadyList+0x70>
    40c2:	89 81       	ldd	r24, Y+1	; 0x01
    40c4:	9a 81       	ldd	r25, Y+2	; 0x02
    40c6:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <pxCurrentTCB+0x1>
    40ca:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <pxCurrentTCB>
    40ce:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <uxTaskNumber>
    40d2:	8f 5f       	subi	r24, 0xFF	; 255
    40d4:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <uxTaskNumber>
    40d8:	20 91 1d 08 	lds	r18, 0x081D	; 0x80081d <uxTaskNumber>
    40dc:	89 81       	ldd	r24, Y+1	; 0x01
    40de:	9a 81       	ldd	r25, Y+2	; 0x02
    40e0:	fc 01       	movw	r30, r24
    40e2:	21 a3       	std	Z+33, r18	; 0x21
    40e4:	89 81       	ldd	r24, Y+1	; 0x01
    40e6:	9a 81       	ldd	r25, Y+2	; 0x02
    40e8:	fc 01       	movw	r30, r24
    40ea:	96 89       	ldd	r25, Z+22	; 0x16
    40ec:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <uxTopReadyPriority>
    40f0:	89 17       	cp	r24, r25
    40f2:	30 f4       	brcc	.+12     	; 0x4100 <prvAddNewTaskToReadyList+0xa2>
    40f4:	89 81       	ldd	r24, Y+1	; 0x01
    40f6:	9a 81       	ldd	r25, Y+2	; 0x02
    40f8:	fc 01       	movw	r30, r24
    40fa:	86 89       	ldd	r24, Z+22	; 0x16
    40fc:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <uxTopReadyPriority>
    4100:	89 81       	ldd	r24, Y+1	; 0x01
    4102:	9a 81       	ldd	r25, Y+2	; 0x02
    4104:	ac 01       	movw	r20, r24
    4106:	4e 5f       	subi	r20, 0xFE	; 254
    4108:	5f 4f       	sbci	r21, 0xFF	; 255
    410a:	89 81       	ldd	r24, Y+1	; 0x01
    410c:	9a 81       	ldd	r25, Y+2	; 0x02
    410e:	fc 01       	movw	r30, r24
    4110:	86 89       	ldd	r24, Z+22	; 0x16
    4112:	28 2f       	mov	r18, r24
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	c9 01       	movw	r24, r18
    4118:	88 0f       	add	r24, r24
    411a:	99 1f       	adc	r25, r25
    411c:	88 0f       	add	r24, r24
    411e:	99 1f       	adc	r25, r25
    4120:	88 0f       	add	r24, r24
    4122:	99 1f       	adc	r25, r25
    4124:	82 0f       	add	r24, r18
    4126:	93 1f       	adc	r25, r19
    4128:	88 53       	subi	r24, 0x38	; 56
    412a:	98 4f       	sbci	r25, 0xF8	; 248
    412c:	ba 01       	movw	r22, r20
    412e:	0e 94 58 11 	call	0x22b0	; 0x22b0 <vListInsertEnd>
    4132:	0f 90       	pop	r0
    4134:	0f be       	out	0x3f, r0	; 63
    4136:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <xSchedulerRunning>
    413a:	88 23       	and	r24, r24
    413c:	71 f0       	breq	.+28     	; 0x415a <prvAddNewTaskToReadyList+0xfc>
    413e:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4142:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4146:	fc 01       	movw	r30, r24
    4148:	26 89       	ldd	r18, Z+22	; 0x16
    414a:	89 81       	ldd	r24, Y+1	; 0x01
    414c:	9a 81       	ldd	r25, Y+2	; 0x02
    414e:	fc 01       	movw	r30, r24
    4150:	86 89       	ldd	r24, Z+22	; 0x16
    4152:	28 17       	cp	r18, r24
    4154:	10 f4       	brcc	.+4      	; 0x415a <prvAddNewTaskToReadyList+0xfc>
    4156:	0e 94 54 14 	call	0x28a8	; 0x28a8 <vPortYield>
    415a:	00 00       	nop
    415c:	0f 90       	pop	r0
    415e:	0f 90       	pop	r0
    4160:	df 91       	pop	r29
    4162:	cf 91       	pop	r28
    4164:	08 95       	ret

00004166 <vTaskDelayUntil>:
    4166:	cf 93       	push	r28
    4168:	df 93       	push	r29
    416a:	cd b7       	in	r28, 0x3d	; 61
    416c:	de b7       	in	r29, 0x3e	; 62
    416e:	2a 97       	sbiw	r28, 0x0a	; 10
    4170:	0f b6       	in	r0, 0x3f	; 63
    4172:	f8 94       	cli
    4174:	de bf       	out	0x3e, r29	; 62
    4176:	0f be       	out	0x3f, r0	; 63
    4178:	cd bf       	out	0x3d, r28	; 61
    417a:	98 87       	std	Y+8, r25	; 0x08
    417c:	8f 83       	std	Y+7, r24	; 0x07
    417e:	7a 87       	std	Y+10, r23	; 0x0a
    4180:	69 87       	std	Y+9, r22	; 0x09
    4182:	19 82       	std	Y+1, r1	; 0x01
    4184:	0e 94 85 21 	call	0x430a	; 0x430a <vTaskSuspendAll>
    4188:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <xTickCount>
    418c:	90 91 17 08 	lds	r25, 0x0817	; 0x800817 <xTickCount+0x1>
    4190:	9b 83       	std	Y+3, r25	; 0x03
    4192:	8a 83       	std	Y+2, r24	; 0x02
    4194:	8f 81       	ldd	r24, Y+7	; 0x07
    4196:	98 85       	ldd	r25, Y+8	; 0x08
    4198:	fc 01       	movw	r30, r24
    419a:	20 81       	ld	r18, Z
    419c:	31 81       	ldd	r19, Z+1	; 0x01
    419e:	89 85       	ldd	r24, Y+9	; 0x09
    41a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    41a2:	82 0f       	add	r24, r18
    41a4:	93 1f       	adc	r25, r19
    41a6:	9d 83       	std	Y+5, r25	; 0x05
    41a8:	8c 83       	std	Y+4, r24	; 0x04
    41aa:	8f 81       	ldd	r24, Y+7	; 0x07
    41ac:	98 85       	ldd	r25, Y+8	; 0x08
    41ae:	fc 01       	movw	r30, r24
    41b0:	20 81       	ld	r18, Z
    41b2:	31 81       	ldd	r19, Z+1	; 0x01
    41b4:	8a 81       	ldd	r24, Y+2	; 0x02
    41b6:	9b 81       	ldd	r25, Y+3	; 0x03
    41b8:	82 17       	cp	r24, r18
    41ba:	93 07       	cpc	r25, r19
    41bc:	a0 f4       	brcc	.+40     	; 0x41e6 <vTaskDelayUntil+0x80>
    41be:	8f 81       	ldd	r24, Y+7	; 0x07
    41c0:	98 85       	ldd	r25, Y+8	; 0x08
    41c2:	fc 01       	movw	r30, r24
    41c4:	20 81       	ld	r18, Z
    41c6:	31 81       	ldd	r19, Z+1	; 0x01
    41c8:	8c 81       	ldd	r24, Y+4	; 0x04
    41ca:	9d 81       	ldd	r25, Y+5	; 0x05
    41cc:	82 17       	cp	r24, r18
    41ce:	93 07       	cpc	r25, r19
    41d0:	e8 f4       	brcc	.+58     	; 0x420c <vTaskDelayUntil+0xa6>
    41d2:	2c 81       	ldd	r18, Y+4	; 0x04
    41d4:	3d 81       	ldd	r19, Y+5	; 0x05
    41d6:	8a 81       	ldd	r24, Y+2	; 0x02
    41d8:	9b 81       	ldd	r25, Y+3	; 0x03
    41da:	82 17       	cp	r24, r18
    41dc:	93 07       	cpc	r25, r19
    41de:	b0 f4       	brcc	.+44     	; 0x420c <vTaskDelayUntil+0xa6>
    41e0:	81 e0       	ldi	r24, 0x01	; 1
    41e2:	89 83       	std	Y+1, r24	; 0x01
    41e4:	13 c0       	rjmp	.+38     	; 0x420c <vTaskDelayUntil+0xa6>
    41e6:	8f 81       	ldd	r24, Y+7	; 0x07
    41e8:	98 85       	ldd	r25, Y+8	; 0x08
    41ea:	fc 01       	movw	r30, r24
    41ec:	20 81       	ld	r18, Z
    41ee:	31 81       	ldd	r19, Z+1	; 0x01
    41f0:	8c 81       	ldd	r24, Y+4	; 0x04
    41f2:	9d 81       	ldd	r25, Y+5	; 0x05
    41f4:	82 17       	cp	r24, r18
    41f6:	93 07       	cpc	r25, r19
    41f8:	38 f0       	brcs	.+14     	; 0x4208 <vTaskDelayUntil+0xa2>
    41fa:	2c 81       	ldd	r18, Y+4	; 0x04
    41fc:	3d 81       	ldd	r19, Y+5	; 0x05
    41fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4200:	9b 81       	ldd	r25, Y+3	; 0x03
    4202:	82 17       	cp	r24, r18
    4204:	93 07       	cpc	r25, r19
    4206:	10 f4       	brcc	.+4      	; 0x420c <vTaskDelayUntil+0xa6>
    4208:	81 e0       	ldi	r24, 0x01	; 1
    420a:	89 83       	std	Y+1, r24	; 0x01
    420c:	8f 81       	ldd	r24, Y+7	; 0x07
    420e:	98 85       	ldd	r25, Y+8	; 0x08
    4210:	2c 81       	ldd	r18, Y+4	; 0x04
    4212:	3d 81       	ldd	r19, Y+5	; 0x05
    4214:	fc 01       	movw	r30, r24
    4216:	31 83       	std	Z+1, r19	; 0x01
    4218:	20 83       	st	Z, r18
    421a:	89 81       	ldd	r24, Y+1	; 0x01
    421c:	88 23       	and	r24, r24
    421e:	59 f0       	breq	.+22     	; 0x4236 <vTaskDelayUntil+0xd0>
    4220:	2c 81       	ldd	r18, Y+4	; 0x04
    4222:	3d 81       	ldd	r19, Y+5	; 0x05
    4224:	8a 81       	ldd	r24, Y+2	; 0x02
    4226:	9b 81       	ldd	r25, Y+3	; 0x03
    4228:	a9 01       	movw	r20, r18
    422a:	48 1b       	sub	r20, r24
    422c:	59 0b       	sbc	r21, r25
    422e:	ca 01       	movw	r24, r20
    4230:	60 e0       	ldi	r22, 0x00	; 0
    4232:	0e 94 56 27 	call	0x4eac	; 0x4eac <prvAddCurrentTaskToDelayedList>
    4236:	0e 94 92 21 	call	0x4324	; 0x4324 <xTaskResumeAll>
    423a:	8e 83       	std	Y+6, r24	; 0x06
    423c:	8e 81       	ldd	r24, Y+6	; 0x06
    423e:	88 23       	and	r24, r24
    4240:	11 f4       	brne	.+4      	; 0x4246 <vTaskDelayUntil+0xe0>
    4242:	0e 94 54 14 	call	0x28a8	; 0x28a8 <vPortYield>
    4246:	00 00       	nop
    4248:	2a 96       	adiw	r28, 0x0a	; 10
    424a:	0f b6       	in	r0, 0x3f	; 63
    424c:	f8 94       	cli
    424e:	de bf       	out	0x3e, r29	; 62
    4250:	0f be       	out	0x3f, r0	; 63
    4252:	cd bf       	out	0x3d, r28	; 61
    4254:	df 91       	pop	r29
    4256:	cf 91       	pop	r28
    4258:	08 95       	ret

0000425a <vTaskDelay>:
    425a:	cf 93       	push	r28
    425c:	df 93       	push	r29
    425e:	00 d0       	rcall	.+0      	; 0x4260 <vTaskDelay+0x6>
    4260:	1f 92       	push	r1
    4262:	cd b7       	in	r28, 0x3d	; 61
    4264:	de b7       	in	r29, 0x3e	; 62
    4266:	9b 83       	std	Y+3, r25	; 0x03
    4268:	8a 83       	std	Y+2, r24	; 0x02
    426a:	19 82       	std	Y+1, r1	; 0x01
    426c:	8a 81       	ldd	r24, Y+2	; 0x02
    426e:	9b 81       	ldd	r25, Y+3	; 0x03
    4270:	89 2b       	or	r24, r25
    4272:	51 f0       	breq	.+20     	; 0x4288 <vTaskDelay+0x2e>
    4274:	0e 94 85 21 	call	0x430a	; 0x430a <vTaskSuspendAll>
    4278:	8a 81       	ldd	r24, Y+2	; 0x02
    427a:	9b 81       	ldd	r25, Y+3	; 0x03
    427c:	60 e0       	ldi	r22, 0x00	; 0
    427e:	0e 94 56 27 	call	0x4eac	; 0x4eac <prvAddCurrentTaskToDelayedList>
    4282:	0e 94 92 21 	call	0x4324	; 0x4324 <xTaskResumeAll>
    4286:	89 83       	std	Y+1, r24	; 0x01
    4288:	89 81       	ldd	r24, Y+1	; 0x01
    428a:	88 23       	and	r24, r24
    428c:	11 f4       	brne	.+4      	; 0x4292 <vTaskDelay+0x38>
    428e:	0e 94 54 14 	call	0x28a8	; 0x28a8 <vPortYield>
    4292:	00 00       	nop
    4294:	0f 90       	pop	r0
    4296:	0f 90       	pop	r0
    4298:	0f 90       	pop	r0
    429a:	df 91       	pop	r29
    429c:	cf 91       	pop	r28
    429e:	08 95       	ret

000042a0 <vTaskStartScheduler>:
    42a0:	ef 92       	push	r14
    42a2:	ff 92       	push	r15
    42a4:	0f 93       	push	r16
    42a6:	cf 93       	push	r28
    42a8:	df 93       	push	r29
    42aa:	1f 92       	push	r1
    42ac:	cd b7       	in	r28, 0x3d	; 61
    42ae:	de b7       	in	r29, 0x3e	; 62
    42b0:	0f 2e       	mov	r0, r31
    42b2:	f0 e2       	ldi	r31, 0x20	; 32
    42b4:	ef 2e       	mov	r14, r31
    42b6:	f8 e0       	ldi	r31, 0x08	; 8
    42b8:	ff 2e       	mov	r15, r31
    42ba:	f0 2d       	mov	r31, r0
    42bc:	00 e0       	ldi	r16, 0x00	; 0
    42be:	20 e0       	ldi	r18, 0x00	; 0
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	45 e5       	ldi	r20, 0x55	; 85
    42c4:	50 e0       	ldi	r21, 0x00	; 0
    42c6:	61 e7       	ldi	r22, 0x71	; 113
    42c8:	71 e0       	ldi	r23, 0x01	; 1
    42ca:	81 ef       	ldi	r24, 0xF1	; 241
    42cc:	94 e2       	ldi	r25, 0x24	; 36
    42ce:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <xTaskCreate>
    42d2:	89 83       	std	Y+1, r24	; 0x01
    42d4:	89 81       	ldd	r24, Y+1	; 0x01
    42d6:	81 30       	cpi	r24, 0x01	; 1
    42d8:	81 f4       	brne	.+32     	; 0x42fa <vTaskStartScheduler+0x5a>
    42da:	f8 94       	cli
    42dc:	8f ef       	ldi	r24, 0xFF	; 255
    42de:	9f ef       	ldi	r25, 0xFF	; 255
    42e0:	90 93 1f 08 	sts	0x081F, r25	; 0x80081f <xNextTaskUnblockTime+0x1>
    42e4:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <xNextTaskUnblockTime>
    42e8:	81 e0       	ldi	r24, 0x01	; 1
    42ea:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <xSchedulerRunning>
    42ee:	10 92 17 08 	sts	0x0817, r1	; 0x800817 <xTickCount+0x1>
    42f2:	10 92 16 08 	sts	0x0816, r1	; 0x800816 <xTickCount>
    42f6:	0e 94 1f 14 	call	0x283e	; 0x283e <xPortStartScheduler>
    42fa:	00 00       	nop
    42fc:	0f 90       	pop	r0
    42fe:	df 91       	pop	r29
    4300:	cf 91       	pop	r28
    4302:	0f 91       	pop	r16
    4304:	ff 90       	pop	r15
    4306:	ef 90       	pop	r14
    4308:	08 95       	ret

0000430a <vTaskSuspendAll>:
    430a:	cf 93       	push	r28
    430c:	df 93       	push	r29
    430e:	cd b7       	in	r28, 0x3d	; 61
    4310:	de b7       	in	r29, 0x3e	; 62
    4312:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <uxSchedulerSuspended>
    4316:	8f 5f       	subi	r24, 0xFF	; 255
    4318:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <uxSchedulerSuspended>
    431c:	00 00       	nop
    431e:	df 91       	pop	r29
    4320:	cf 91       	pop	r28
    4322:	08 95       	ret

00004324 <xTaskResumeAll>:
    4324:	cf 93       	push	r28
    4326:	df 93       	push	r29
    4328:	00 d0       	rcall	.+0      	; 0x432a <xTaskResumeAll+0x6>
    432a:	00 d0       	rcall	.+0      	; 0x432c <xTaskResumeAll+0x8>
    432c:	cd b7       	in	r28, 0x3d	; 61
    432e:	de b7       	in	r29, 0x3e	; 62
    4330:	1a 82       	std	Y+2, r1	; 0x02
    4332:	19 82       	std	Y+1, r1	; 0x01
    4334:	1b 82       	std	Y+3, r1	; 0x03
    4336:	0f b6       	in	r0, 0x3f	; 63
    4338:	f8 94       	cli
    433a:	0f 92       	push	r0
    433c:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <uxSchedulerSuspended>
    4340:	81 50       	subi	r24, 0x01	; 1
    4342:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <uxSchedulerSuspended>
    4346:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <uxSchedulerSuspended>
    434a:	88 23       	and	r24, r24
    434c:	09 f0       	breq	.+2      	; 0x4350 <xTaskResumeAll+0x2c>
    434e:	77 c0       	rjmp	.+238    	; 0x443e <xTaskResumeAll+0x11a>
    4350:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <uxCurrentNumberOfTasks>
    4354:	88 23       	and	r24, r24
    4356:	09 f4       	brne	.+2      	; 0x435a <xTaskResumeAll+0x36>
    4358:	72 c0       	rjmp	.+228    	; 0x443e <xTaskResumeAll+0x11a>
    435a:	49 c0       	rjmp	.+146    	; 0x43ee <xTaskResumeAll+0xca>
    435c:	80 91 07 08 	lds	r24, 0x0807	; 0x800807 <xPendingReadyList+0x5>
    4360:	90 91 08 08 	lds	r25, 0x0808	; 0x800808 <xPendingReadyList+0x6>
    4364:	fc 01       	movw	r30, r24
    4366:	86 81       	ldd	r24, Z+6	; 0x06
    4368:	97 81       	ldd	r25, Z+7	; 0x07
    436a:	9a 83       	std	Y+2, r25	; 0x02
    436c:	89 83       	std	Y+1, r24	; 0x01
    436e:	89 81       	ldd	r24, Y+1	; 0x01
    4370:	9a 81       	ldd	r25, Y+2	; 0x02
    4372:	0c 96       	adiw	r24, 0x0c	; 12
    4374:	0e 94 1f 12 	call	0x243e	; 0x243e <uxListRemove>
    4378:	89 81       	ldd	r24, Y+1	; 0x01
    437a:	9a 81       	ldd	r25, Y+2	; 0x02
    437c:	02 96       	adiw	r24, 0x02	; 2
    437e:	0e 94 1f 12 	call	0x243e	; 0x243e <uxListRemove>
    4382:	89 81       	ldd	r24, Y+1	; 0x01
    4384:	9a 81       	ldd	r25, Y+2	; 0x02
    4386:	fc 01       	movw	r30, r24
    4388:	96 89       	ldd	r25, Z+22	; 0x16
    438a:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <uxTopReadyPriority>
    438e:	89 17       	cp	r24, r25
    4390:	30 f4       	brcc	.+12     	; 0x439e <xTaskResumeAll+0x7a>
    4392:	89 81       	ldd	r24, Y+1	; 0x01
    4394:	9a 81       	ldd	r25, Y+2	; 0x02
    4396:	fc 01       	movw	r30, r24
    4398:	86 89       	ldd	r24, Z+22	; 0x16
    439a:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <uxTopReadyPriority>
    439e:	89 81       	ldd	r24, Y+1	; 0x01
    43a0:	9a 81       	ldd	r25, Y+2	; 0x02
    43a2:	ac 01       	movw	r20, r24
    43a4:	4e 5f       	subi	r20, 0xFE	; 254
    43a6:	5f 4f       	sbci	r21, 0xFF	; 255
    43a8:	89 81       	ldd	r24, Y+1	; 0x01
    43aa:	9a 81       	ldd	r25, Y+2	; 0x02
    43ac:	fc 01       	movw	r30, r24
    43ae:	86 89       	ldd	r24, Z+22	; 0x16
    43b0:	28 2f       	mov	r18, r24
    43b2:	30 e0       	ldi	r19, 0x00	; 0
    43b4:	c9 01       	movw	r24, r18
    43b6:	88 0f       	add	r24, r24
    43b8:	99 1f       	adc	r25, r25
    43ba:	88 0f       	add	r24, r24
    43bc:	99 1f       	adc	r25, r25
    43be:	88 0f       	add	r24, r24
    43c0:	99 1f       	adc	r25, r25
    43c2:	82 0f       	add	r24, r18
    43c4:	93 1f       	adc	r25, r19
    43c6:	88 53       	subi	r24, 0x38	; 56
    43c8:	98 4f       	sbci	r25, 0xF8	; 248
    43ca:	ba 01       	movw	r22, r20
    43cc:	0e 94 58 11 	call	0x22b0	; 0x22b0 <vListInsertEnd>
    43d0:	89 81       	ldd	r24, Y+1	; 0x01
    43d2:	9a 81       	ldd	r25, Y+2	; 0x02
    43d4:	fc 01       	movw	r30, r24
    43d6:	26 89       	ldd	r18, Z+22	; 0x16
    43d8:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    43dc:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    43e0:	fc 01       	movw	r30, r24
    43e2:	86 89       	ldd	r24, Z+22	; 0x16
    43e4:	28 17       	cp	r18, r24
    43e6:	18 f0       	brcs	.+6      	; 0x43ee <xTaskResumeAll+0xca>
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <xYieldPending>
    43ee:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <xPendingReadyList>
    43f2:	88 23       	and	r24, r24
    43f4:	09 f0       	breq	.+2      	; 0x43f8 <xTaskResumeAll+0xd4>
    43f6:	b2 cf       	rjmp	.-156    	; 0x435c <xTaskResumeAll+0x38>
    43f8:	89 81       	ldd	r24, Y+1	; 0x01
    43fa:	9a 81       	ldd	r25, Y+2	; 0x02
    43fc:	89 2b       	or	r24, r25
    43fe:	11 f0       	breq	.+4      	; 0x4404 <xTaskResumeAll+0xe0>
    4400:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <prvResetNextTaskUnblockTime>
    4404:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <uxPendedTicks>
    4408:	8c 83       	std	Y+4, r24	; 0x04
    440a:	8c 81       	ldd	r24, Y+4	; 0x04
    440c:	88 23       	and	r24, r24
    440e:	79 f0       	breq	.+30     	; 0x442e <xTaskResumeAll+0x10a>
    4410:	0e 94 40 22 	call	0x4480	; 0x4480 <xTaskIncrementTick>
    4414:	88 23       	and	r24, r24
    4416:	19 f0       	breq	.+6      	; 0x441e <xTaskResumeAll+0xfa>
    4418:	81 e0       	ldi	r24, 0x01	; 1
    441a:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <xYieldPending>
    441e:	8c 81       	ldd	r24, Y+4	; 0x04
    4420:	81 50       	subi	r24, 0x01	; 1
    4422:	8c 83       	std	Y+4, r24	; 0x04
    4424:	8c 81       	ldd	r24, Y+4	; 0x04
    4426:	88 23       	and	r24, r24
    4428:	99 f7       	brne	.-26     	; 0x4410 <xTaskResumeAll+0xec>
    442a:	10 92 1a 08 	sts	0x081A, r1	; 0x80081a <uxPendedTicks>
    442e:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <xYieldPending>
    4432:	88 23       	and	r24, r24
    4434:	21 f0       	breq	.+8      	; 0x443e <xTaskResumeAll+0x11a>
    4436:	81 e0       	ldi	r24, 0x01	; 1
    4438:	8b 83       	std	Y+3, r24	; 0x03
    443a:	0e 94 54 14 	call	0x28a8	; 0x28a8 <vPortYield>
    443e:	0f 90       	pop	r0
    4440:	0f be       	out	0x3f, r0	; 63
    4442:	8b 81       	ldd	r24, Y+3	; 0x03
    4444:	0f 90       	pop	r0
    4446:	0f 90       	pop	r0
    4448:	0f 90       	pop	r0
    444a:	0f 90       	pop	r0
    444c:	df 91       	pop	r29
    444e:	cf 91       	pop	r28
    4450:	08 95       	ret

00004452 <xTaskGetTickCount>:
    4452:	cf 93       	push	r28
    4454:	df 93       	push	r29
    4456:	00 d0       	rcall	.+0      	; 0x4458 <xTaskGetTickCount+0x6>
    4458:	cd b7       	in	r28, 0x3d	; 61
    445a:	de b7       	in	r29, 0x3e	; 62
    445c:	0f b6       	in	r0, 0x3f	; 63
    445e:	f8 94       	cli
    4460:	0f 92       	push	r0
    4462:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <xTickCount>
    4466:	90 91 17 08 	lds	r25, 0x0817	; 0x800817 <xTickCount+0x1>
    446a:	9a 83       	std	Y+2, r25	; 0x02
    446c:	89 83       	std	Y+1, r24	; 0x01
    446e:	0f 90       	pop	r0
    4470:	0f be       	out	0x3f, r0	; 63
    4472:	89 81       	ldd	r24, Y+1	; 0x01
    4474:	9a 81       	ldd	r25, Y+2	; 0x02
    4476:	0f 90       	pop	r0
    4478:	0f 90       	pop	r0
    447a:	df 91       	pop	r29
    447c:	cf 91       	pop	r28
    447e:	08 95       	ret

00004480 <xTaskIncrementTick>:
    4480:	cf 93       	push	r28
    4482:	df 93       	push	r29
    4484:	cd b7       	in	r28, 0x3d	; 61
    4486:	de b7       	in	r29, 0x3e	; 62
    4488:	29 97       	sbiw	r28, 0x09	; 9
    448a:	0f b6       	in	r0, 0x3f	; 63
    448c:	f8 94       	cli
    448e:	de bf       	out	0x3e, r29	; 62
    4490:	0f be       	out	0x3f, r0	; 63
    4492:	cd bf       	out	0x3d, r28	; 61
    4494:	19 82       	std	Y+1, r1	; 0x01
    4496:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <uxSchedulerSuspended>
    449a:	88 23       	and	r24, r24
    449c:	09 f0       	breq	.+2      	; 0x44a0 <xTaskIncrementTick+0x20>
    449e:	c8 c0       	rjmp	.+400    	; 0x4630 <xTaskIncrementTick+0x1b0>
    44a0:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <xTickCount>
    44a4:	90 91 17 08 	lds	r25, 0x0817	; 0x800817 <xTickCount+0x1>
    44a8:	01 96       	adiw	r24, 0x01	; 1
    44aa:	9b 83       	std	Y+3, r25	; 0x03
    44ac:	8a 83       	std	Y+2, r24	; 0x02
    44ae:	8a 81       	ldd	r24, Y+2	; 0x02
    44b0:	9b 81       	ldd	r25, Y+3	; 0x03
    44b2:	90 93 17 08 	sts	0x0817, r25	; 0x800817 <xTickCount+0x1>
    44b6:	80 93 16 08 	sts	0x0816, r24	; 0x800816 <xTickCount>
    44ba:	8a 81       	ldd	r24, Y+2	; 0x02
    44bc:	9b 81       	ldd	r25, Y+3	; 0x03
    44be:	89 2b       	or	r24, r25
    44c0:	d9 f4       	brne	.+54     	; 0x44f8 <xTaskIncrementTick+0x78>
    44c2:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <pxDelayedTaskList>
    44c6:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <pxDelayedTaskList+0x1>
    44ca:	9d 83       	std	Y+5, r25	; 0x05
    44cc:	8c 83       	std	Y+4, r24	; 0x04
    44ce:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <pxOverflowDelayedTaskList>
    44d2:	90 91 01 08 	lds	r25, 0x0801	; 0x800801 <pxOverflowDelayedTaskList+0x1>
    44d6:	90 93 ff 07 	sts	0x07FF, r25	; 0x8007ff <pxDelayedTaskList+0x1>
    44da:	80 93 fe 07 	sts	0x07FE, r24	; 0x8007fe <pxDelayedTaskList>
    44de:	8c 81       	ldd	r24, Y+4	; 0x04
    44e0:	9d 81       	ldd	r25, Y+5	; 0x05
    44e2:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <pxOverflowDelayedTaskList+0x1>
    44e6:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <pxOverflowDelayedTaskList>
    44ea:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <xNumOfOverflows>
    44ee:	8f 5f       	subi	r24, 0xFF	; 255
    44f0:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <xNumOfOverflows>
    44f4:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <prvResetNextTaskUnblockTime>
    44f8:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <xNextTaskUnblockTime>
    44fc:	90 91 1f 08 	lds	r25, 0x081F	; 0x80081f <xNextTaskUnblockTime+0x1>
    4500:	2a 81       	ldd	r18, Y+2	; 0x02
    4502:	3b 81       	ldd	r19, Y+3	; 0x03
    4504:	28 17       	cp	r18, r24
    4506:	39 07       	cpc	r19, r25
    4508:	08 f4       	brcc	.+2      	; 0x450c <xTaskIncrementTick+0x8c>
    450a:	78 c0       	rjmp	.+240    	; 0x45fc <xTaskIncrementTick+0x17c>
    450c:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <pxDelayedTaskList>
    4510:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <pxDelayedTaskList+0x1>
    4514:	fc 01       	movw	r30, r24
    4516:	80 81       	ld	r24, Z
    4518:	88 23       	and	r24, r24
    451a:	39 f4       	brne	.+14     	; 0x452a <xTaskIncrementTick+0xaa>
    451c:	8f ef       	ldi	r24, 0xFF	; 255
    451e:	9f ef       	ldi	r25, 0xFF	; 255
    4520:	90 93 1f 08 	sts	0x081F, r25	; 0x80081f <xNextTaskUnblockTime+0x1>
    4524:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <xNextTaskUnblockTime>
    4528:	69 c0       	rjmp	.+210    	; 0x45fc <xTaskIncrementTick+0x17c>
    452a:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <pxDelayedTaskList>
    452e:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <pxDelayedTaskList+0x1>
    4532:	fc 01       	movw	r30, r24
    4534:	85 81       	ldd	r24, Z+5	; 0x05
    4536:	96 81       	ldd	r25, Z+6	; 0x06
    4538:	fc 01       	movw	r30, r24
    453a:	86 81       	ldd	r24, Z+6	; 0x06
    453c:	97 81       	ldd	r25, Z+7	; 0x07
    453e:	9f 83       	std	Y+7, r25	; 0x07
    4540:	8e 83       	std	Y+6, r24	; 0x06
    4542:	8e 81       	ldd	r24, Y+6	; 0x06
    4544:	9f 81       	ldd	r25, Y+7	; 0x07
    4546:	fc 01       	movw	r30, r24
    4548:	82 81       	ldd	r24, Z+2	; 0x02
    454a:	93 81       	ldd	r25, Z+3	; 0x03
    454c:	99 87       	std	Y+9, r25	; 0x09
    454e:	88 87       	std	Y+8, r24	; 0x08
    4550:	2a 81       	ldd	r18, Y+2	; 0x02
    4552:	3b 81       	ldd	r19, Y+3	; 0x03
    4554:	88 85       	ldd	r24, Y+8	; 0x08
    4556:	99 85       	ldd	r25, Y+9	; 0x09
    4558:	28 17       	cp	r18, r24
    455a:	39 07       	cpc	r19, r25
    455c:	38 f4       	brcc	.+14     	; 0x456c <xTaskIncrementTick+0xec>
    455e:	88 85       	ldd	r24, Y+8	; 0x08
    4560:	99 85       	ldd	r25, Y+9	; 0x09
    4562:	90 93 1f 08 	sts	0x081F, r25	; 0x80081f <xNextTaskUnblockTime+0x1>
    4566:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <xNextTaskUnblockTime>
    456a:	48 c0       	rjmp	.+144    	; 0x45fc <xTaskIncrementTick+0x17c>
    456c:	8e 81       	ldd	r24, Y+6	; 0x06
    456e:	9f 81       	ldd	r25, Y+7	; 0x07
    4570:	02 96       	adiw	r24, 0x02	; 2
    4572:	0e 94 1f 12 	call	0x243e	; 0x243e <uxListRemove>
    4576:	8e 81       	ldd	r24, Y+6	; 0x06
    4578:	9f 81       	ldd	r25, Y+7	; 0x07
    457a:	fc 01       	movw	r30, r24
    457c:	84 89       	ldd	r24, Z+20	; 0x14
    457e:	95 89       	ldd	r25, Z+21	; 0x15
    4580:	89 2b       	or	r24, r25
    4582:	29 f0       	breq	.+10     	; 0x458e <xTaskIncrementTick+0x10e>
    4584:	8e 81       	ldd	r24, Y+6	; 0x06
    4586:	9f 81       	ldd	r25, Y+7	; 0x07
    4588:	0c 96       	adiw	r24, 0x0c	; 12
    458a:	0e 94 1f 12 	call	0x243e	; 0x243e <uxListRemove>
    458e:	8e 81       	ldd	r24, Y+6	; 0x06
    4590:	9f 81       	ldd	r25, Y+7	; 0x07
    4592:	fc 01       	movw	r30, r24
    4594:	96 89       	ldd	r25, Z+22	; 0x16
    4596:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <uxTopReadyPriority>
    459a:	89 17       	cp	r24, r25
    459c:	30 f4       	brcc	.+12     	; 0x45aa <xTaskIncrementTick+0x12a>
    459e:	8e 81       	ldd	r24, Y+6	; 0x06
    45a0:	9f 81       	ldd	r25, Y+7	; 0x07
    45a2:	fc 01       	movw	r30, r24
    45a4:	86 89       	ldd	r24, Z+22	; 0x16
    45a6:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <uxTopReadyPriority>
    45aa:	8e 81       	ldd	r24, Y+6	; 0x06
    45ac:	9f 81       	ldd	r25, Y+7	; 0x07
    45ae:	ac 01       	movw	r20, r24
    45b0:	4e 5f       	subi	r20, 0xFE	; 254
    45b2:	5f 4f       	sbci	r21, 0xFF	; 255
    45b4:	8e 81       	ldd	r24, Y+6	; 0x06
    45b6:	9f 81       	ldd	r25, Y+7	; 0x07
    45b8:	fc 01       	movw	r30, r24
    45ba:	86 89       	ldd	r24, Z+22	; 0x16
    45bc:	28 2f       	mov	r18, r24
    45be:	30 e0       	ldi	r19, 0x00	; 0
    45c0:	c9 01       	movw	r24, r18
    45c2:	88 0f       	add	r24, r24
    45c4:	99 1f       	adc	r25, r25
    45c6:	88 0f       	add	r24, r24
    45c8:	99 1f       	adc	r25, r25
    45ca:	88 0f       	add	r24, r24
    45cc:	99 1f       	adc	r25, r25
    45ce:	82 0f       	add	r24, r18
    45d0:	93 1f       	adc	r25, r19
    45d2:	88 53       	subi	r24, 0x38	; 56
    45d4:	98 4f       	sbci	r25, 0xF8	; 248
    45d6:	ba 01       	movw	r22, r20
    45d8:	0e 94 58 11 	call	0x22b0	; 0x22b0 <vListInsertEnd>
    45dc:	8e 81       	ldd	r24, Y+6	; 0x06
    45de:	9f 81       	ldd	r25, Y+7	; 0x07
    45e0:	fc 01       	movw	r30, r24
    45e2:	26 89       	ldd	r18, Z+22	; 0x16
    45e4:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    45e8:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    45ec:	fc 01       	movw	r30, r24
    45ee:	86 89       	ldd	r24, Z+22	; 0x16
    45f0:	28 17       	cp	r18, r24
    45f2:	08 f4       	brcc	.+2      	; 0x45f6 <xTaskIncrementTick+0x176>
    45f4:	8b cf       	rjmp	.-234    	; 0x450c <xTaskIncrementTick+0x8c>
    45f6:	81 e0       	ldi	r24, 0x01	; 1
    45f8:	89 83       	std	Y+1, r24	; 0x01
    45fa:	88 cf       	rjmp	.-240    	; 0x450c <xTaskIncrementTick+0x8c>
    45fc:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4600:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4604:	fc 01       	movw	r30, r24
    4606:	86 89       	ldd	r24, Z+22	; 0x16
    4608:	28 2f       	mov	r18, r24
    460a:	30 e0       	ldi	r19, 0x00	; 0
    460c:	c9 01       	movw	r24, r18
    460e:	88 0f       	add	r24, r24
    4610:	99 1f       	adc	r25, r25
    4612:	88 0f       	add	r24, r24
    4614:	99 1f       	adc	r25, r25
    4616:	88 0f       	add	r24, r24
    4618:	99 1f       	adc	r25, r25
    461a:	82 0f       	add	r24, r18
    461c:	93 1f       	adc	r25, r19
    461e:	88 53       	subi	r24, 0x38	; 56
    4620:	98 4f       	sbci	r25, 0xF8	; 248
    4622:	fc 01       	movw	r30, r24
    4624:	80 81       	ld	r24, Z
    4626:	82 30       	cpi	r24, 0x02	; 2
    4628:	40 f0       	brcs	.+16     	; 0x463a <xTaskIncrementTick+0x1ba>
    462a:	81 e0       	ldi	r24, 0x01	; 1
    462c:	89 83       	std	Y+1, r24	; 0x01
    462e:	05 c0       	rjmp	.+10     	; 0x463a <xTaskIncrementTick+0x1ba>
    4630:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <uxPendedTicks>
    4634:	8f 5f       	subi	r24, 0xFF	; 255
    4636:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <uxPendedTicks>
    463a:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <xYieldPending>
    463e:	88 23       	and	r24, r24
    4640:	11 f0       	breq	.+4      	; 0x4646 <xTaskIncrementTick+0x1c6>
    4642:	81 e0       	ldi	r24, 0x01	; 1
    4644:	89 83       	std	Y+1, r24	; 0x01
    4646:	89 81       	ldd	r24, Y+1	; 0x01
    4648:	29 96       	adiw	r28, 0x09	; 9
    464a:	0f b6       	in	r0, 0x3f	; 63
    464c:	f8 94       	cli
    464e:	de bf       	out	0x3e, r29	; 62
    4650:	0f be       	out	0x3f, r0	; 63
    4652:	cd bf       	out	0x3d, r28	; 61
    4654:	df 91       	pop	r29
    4656:	cf 91       	pop	r28
    4658:	08 95       	ret

0000465a <vTaskSwitchContext>:
    465a:	cf 93       	push	r28
    465c:	df 93       	push	r29
    465e:	00 d0       	rcall	.+0      	; 0x4660 <vTaskSwitchContext+0x6>
    4660:	1f 92       	push	r1
    4662:	cd b7       	in	r28, 0x3d	; 61
    4664:	de b7       	in	r29, 0x3e	; 62
    4666:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <uxSchedulerSuspended>
    466a:	88 23       	and	r24, r24
    466c:	21 f0       	breq	.+8      	; 0x4676 <vTaskSwitchContext+0x1c>
    466e:	81 e0       	ldi	r24, 0x01	; 1
    4670:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <xYieldPending>
    4674:	90 c0       	rjmp	.+288    	; 0x4796 <vTaskSwitchContext+0x13c>
    4676:	10 92 1b 08 	sts	0x081B, r1	; 0x80081b <xYieldPending>
    467a:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    467e:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4682:	fc 01       	movw	r30, r24
    4684:	85 a1       	ldd	r24, Z+37	; 0x25
    4686:	96 a1       	ldd	r25, Z+38	; 0x26
    4688:	0e 94 58 10 	call	0x20b0	; 0x20b0 <switch_out>
    468c:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4690:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4694:	fc 01       	movw	r30, r24
    4696:	20 81       	ld	r18, Z
    4698:	31 81       	ldd	r19, Z+1	; 0x01
    469a:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    469e:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    46a2:	fc 01       	movw	r30, r24
    46a4:	87 89       	ldd	r24, Z+23	; 0x17
    46a6:	90 8d       	ldd	r25, Z+24	; 0x18
    46a8:	82 17       	cp	r24, r18
    46aa:	93 07       	cpc	r25, r19
    46ac:	70 f0       	brcs	.+28     	; 0x46ca <vTaskSwitchContext+0x70>
    46ae:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    46b2:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    46b6:	9c 01       	movw	r18, r24
    46b8:	27 5e       	subi	r18, 0xE7	; 231
    46ba:	3f 4f       	sbci	r19, 0xFF	; 255
    46bc:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    46c0:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    46c4:	b9 01       	movw	r22, r18
    46c6:	0e 94 bb 09 	call	0x1376	; 0x1376 <vApplicationStackOverflowHook>
    46ca:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <uxTopReadyPriority>
    46ce:	89 83       	std	Y+1, r24	; 0x01
    46d0:	03 c0       	rjmp	.+6      	; 0x46d8 <vTaskSwitchContext+0x7e>
    46d2:	89 81       	ldd	r24, Y+1	; 0x01
    46d4:	81 50       	subi	r24, 0x01	; 1
    46d6:	89 83       	std	Y+1, r24	; 0x01
    46d8:	89 81       	ldd	r24, Y+1	; 0x01
    46da:	28 2f       	mov	r18, r24
    46dc:	30 e0       	ldi	r19, 0x00	; 0
    46de:	c9 01       	movw	r24, r18
    46e0:	88 0f       	add	r24, r24
    46e2:	99 1f       	adc	r25, r25
    46e4:	88 0f       	add	r24, r24
    46e6:	99 1f       	adc	r25, r25
    46e8:	88 0f       	add	r24, r24
    46ea:	99 1f       	adc	r25, r25
    46ec:	82 0f       	add	r24, r18
    46ee:	93 1f       	adc	r25, r19
    46f0:	88 53       	subi	r24, 0x38	; 56
    46f2:	98 4f       	sbci	r25, 0xF8	; 248
    46f4:	fc 01       	movw	r30, r24
    46f6:	80 81       	ld	r24, Z
    46f8:	88 23       	and	r24, r24
    46fa:	59 f3       	breq	.-42     	; 0x46d2 <vTaskSwitchContext+0x78>
    46fc:	89 81       	ldd	r24, Y+1	; 0x01
    46fe:	28 2f       	mov	r18, r24
    4700:	30 e0       	ldi	r19, 0x00	; 0
    4702:	c9 01       	movw	r24, r18
    4704:	88 0f       	add	r24, r24
    4706:	99 1f       	adc	r25, r25
    4708:	88 0f       	add	r24, r24
    470a:	99 1f       	adc	r25, r25
    470c:	88 0f       	add	r24, r24
    470e:	99 1f       	adc	r25, r25
    4710:	82 0f       	add	r24, r18
    4712:	93 1f       	adc	r25, r19
    4714:	88 53       	subi	r24, 0x38	; 56
    4716:	98 4f       	sbci	r25, 0xF8	; 248
    4718:	9b 83       	std	Y+3, r25	; 0x03
    471a:	8a 83       	std	Y+2, r24	; 0x02
    471c:	8a 81       	ldd	r24, Y+2	; 0x02
    471e:	9b 81       	ldd	r25, Y+3	; 0x03
    4720:	fc 01       	movw	r30, r24
    4722:	81 81       	ldd	r24, Z+1	; 0x01
    4724:	92 81       	ldd	r25, Z+2	; 0x02
    4726:	fc 01       	movw	r30, r24
    4728:	22 81       	ldd	r18, Z+2	; 0x02
    472a:	33 81       	ldd	r19, Z+3	; 0x03
    472c:	8a 81       	ldd	r24, Y+2	; 0x02
    472e:	9b 81       	ldd	r25, Y+3	; 0x03
    4730:	fc 01       	movw	r30, r24
    4732:	32 83       	std	Z+2, r19	; 0x02
    4734:	21 83       	std	Z+1, r18	; 0x01
    4736:	8a 81       	ldd	r24, Y+2	; 0x02
    4738:	9b 81       	ldd	r25, Y+3	; 0x03
    473a:	fc 01       	movw	r30, r24
    473c:	21 81       	ldd	r18, Z+1	; 0x01
    473e:	32 81       	ldd	r19, Z+2	; 0x02
    4740:	8a 81       	ldd	r24, Y+2	; 0x02
    4742:	9b 81       	ldd	r25, Y+3	; 0x03
    4744:	03 96       	adiw	r24, 0x03	; 3
    4746:	28 17       	cp	r18, r24
    4748:	39 07       	cpc	r19, r25
    474a:	69 f4       	brne	.+26     	; 0x4766 <vTaskSwitchContext+0x10c>
    474c:	8a 81       	ldd	r24, Y+2	; 0x02
    474e:	9b 81       	ldd	r25, Y+3	; 0x03
    4750:	fc 01       	movw	r30, r24
    4752:	81 81       	ldd	r24, Z+1	; 0x01
    4754:	92 81       	ldd	r25, Z+2	; 0x02
    4756:	fc 01       	movw	r30, r24
    4758:	22 81       	ldd	r18, Z+2	; 0x02
    475a:	33 81       	ldd	r19, Z+3	; 0x03
    475c:	8a 81       	ldd	r24, Y+2	; 0x02
    475e:	9b 81       	ldd	r25, Y+3	; 0x03
    4760:	fc 01       	movw	r30, r24
    4762:	32 83       	std	Z+2, r19	; 0x02
    4764:	21 83       	std	Z+1, r18	; 0x01
    4766:	8a 81       	ldd	r24, Y+2	; 0x02
    4768:	9b 81       	ldd	r25, Y+3	; 0x03
    476a:	fc 01       	movw	r30, r24
    476c:	81 81       	ldd	r24, Z+1	; 0x01
    476e:	92 81       	ldd	r25, Z+2	; 0x02
    4770:	fc 01       	movw	r30, r24
    4772:	86 81       	ldd	r24, Z+6	; 0x06
    4774:	97 81       	ldd	r25, Z+7	; 0x07
    4776:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <pxCurrentTCB+0x1>
    477a:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <pxCurrentTCB>
    477e:	89 81       	ldd	r24, Y+1	; 0x01
    4780:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <uxTopReadyPriority>
    4784:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4788:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    478c:	fc 01       	movw	r30, r24
    478e:	85 a1       	ldd	r24, Z+37	; 0x25
    4790:	96 a1       	ldd	r25, Z+38	; 0x26
    4792:	0e 94 33 10 	call	0x2066	; 0x2066 <switch_in>
    4796:	00 00       	nop
    4798:	0f 90       	pop	r0
    479a:	0f 90       	pop	r0
    479c:	0f 90       	pop	r0
    479e:	df 91       	pop	r29
    47a0:	cf 91       	pop	r28
    47a2:	08 95       	ret

000047a4 <vTaskPlaceOnEventList>:
    47a4:	cf 93       	push	r28
    47a6:	df 93       	push	r29
    47a8:	00 d0       	rcall	.+0      	; 0x47aa <vTaskPlaceOnEventList+0x6>
    47aa:	00 d0       	rcall	.+0      	; 0x47ac <vTaskPlaceOnEventList+0x8>
    47ac:	cd b7       	in	r28, 0x3d	; 61
    47ae:	de b7       	in	r29, 0x3e	; 62
    47b0:	9a 83       	std	Y+2, r25	; 0x02
    47b2:	89 83       	std	Y+1, r24	; 0x01
    47b4:	7c 83       	std	Y+4, r23	; 0x04
    47b6:	6b 83       	std	Y+3, r22	; 0x03
    47b8:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    47bc:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    47c0:	9c 01       	movw	r18, r24
    47c2:	24 5f       	subi	r18, 0xF4	; 244
    47c4:	3f 4f       	sbci	r19, 0xFF	; 255
    47c6:	89 81       	ldd	r24, Y+1	; 0x01
    47c8:	9a 81       	ldd	r25, Y+2	; 0x02
    47ca:	b9 01       	movw	r22, r18
    47cc:	0e 94 a7 11 	call	0x234e	; 0x234e <vListInsert>
    47d0:	8b 81       	ldd	r24, Y+3	; 0x03
    47d2:	9c 81       	ldd	r25, Y+4	; 0x04
    47d4:	61 e0       	ldi	r22, 0x01	; 1
    47d6:	0e 94 56 27 	call	0x4eac	; 0x4eac <prvAddCurrentTaskToDelayedList>
    47da:	00 00       	nop
    47dc:	0f 90       	pop	r0
    47de:	0f 90       	pop	r0
    47e0:	0f 90       	pop	r0
    47e2:	0f 90       	pop	r0
    47e4:	df 91       	pop	r29
    47e6:	cf 91       	pop	r28
    47e8:	08 95       	ret

000047ea <xTaskRemoveFromEventList>:
    47ea:	cf 93       	push	r28
    47ec:	df 93       	push	r29
    47ee:	00 d0       	rcall	.+0      	; 0x47f0 <xTaskRemoveFromEventList+0x6>
    47f0:	00 d0       	rcall	.+0      	; 0x47f2 <xTaskRemoveFromEventList+0x8>
    47f2:	1f 92       	push	r1
    47f4:	cd b7       	in	r28, 0x3d	; 61
    47f6:	de b7       	in	r29, 0x3e	; 62
    47f8:	9d 83       	std	Y+5, r25	; 0x05
    47fa:	8c 83       	std	Y+4, r24	; 0x04
    47fc:	8c 81       	ldd	r24, Y+4	; 0x04
    47fe:	9d 81       	ldd	r25, Y+5	; 0x05
    4800:	fc 01       	movw	r30, r24
    4802:	85 81       	ldd	r24, Z+5	; 0x05
    4804:	96 81       	ldd	r25, Z+6	; 0x06
    4806:	fc 01       	movw	r30, r24
    4808:	86 81       	ldd	r24, Z+6	; 0x06
    480a:	97 81       	ldd	r25, Z+7	; 0x07
    480c:	9b 83       	std	Y+3, r25	; 0x03
    480e:	8a 83       	std	Y+2, r24	; 0x02
    4810:	8a 81       	ldd	r24, Y+2	; 0x02
    4812:	9b 81       	ldd	r25, Y+3	; 0x03
    4814:	0c 96       	adiw	r24, 0x0c	; 12
    4816:	0e 94 1f 12 	call	0x243e	; 0x243e <uxListRemove>
    481a:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <uxSchedulerSuspended>
    481e:	88 23       	and	r24, r24
    4820:	69 f5       	brne	.+90     	; 0x487c <xTaskRemoveFromEventList+0x92>
    4822:	8a 81       	ldd	r24, Y+2	; 0x02
    4824:	9b 81       	ldd	r25, Y+3	; 0x03
    4826:	02 96       	adiw	r24, 0x02	; 2
    4828:	0e 94 1f 12 	call	0x243e	; 0x243e <uxListRemove>
    482c:	8a 81       	ldd	r24, Y+2	; 0x02
    482e:	9b 81       	ldd	r25, Y+3	; 0x03
    4830:	fc 01       	movw	r30, r24
    4832:	96 89       	ldd	r25, Z+22	; 0x16
    4834:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <uxTopReadyPriority>
    4838:	89 17       	cp	r24, r25
    483a:	30 f4       	brcc	.+12     	; 0x4848 <xTaskRemoveFromEventList+0x5e>
    483c:	8a 81       	ldd	r24, Y+2	; 0x02
    483e:	9b 81       	ldd	r25, Y+3	; 0x03
    4840:	fc 01       	movw	r30, r24
    4842:	86 89       	ldd	r24, Z+22	; 0x16
    4844:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <uxTopReadyPriority>
    4848:	8a 81       	ldd	r24, Y+2	; 0x02
    484a:	9b 81       	ldd	r25, Y+3	; 0x03
    484c:	ac 01       	movw	r20, r24
    484e:	4e 5f       	subi	r20, 0xFE	; 254
    4850:	5f 4f       	sbci	r21, 0xFF	; 255
    4852:	8a 81       	ldd	r24, Y+2	; 0x02
    4854:	9b 81       	ldd	r25, Y+3	; 0x03
    4856:	fc 01       	movw	r30, r24
    4858:	86 89       	ldd	r24, Z+22	; 0x16
    485a:	28 2f       	mov	r18, r24
    485c:	30 e0       	ldi	r19, 0x00	; 0
    485e:	c9 01       	movw	r24, r18
    4860:	88 0f       	add	r24, r24
    4862:	99 1f       	adc	r25, r25
    4864:	88 0f       	add	r24, r24
    4866:	99 1f       	adc	r25, r25
    4868:	88 0f       	add	r24, r24
    486a:	99 1f       	adc	r25, r25
    486c:	82 0f       	add	r24, r18
    486e:	93 1f       	adc	r25, r19
    4870:	88 53       	subi	r24, 0x38	; 56
    4872:	98 4f       	sbci	r25, 0xF8	; 248
    4874:	ba 01       	movw	r22, r20
    4876:	0e 94 58 11 	call	0x22b0	; 0x22b0 <vListInsertEnd>
    487a:	08 c0       	rjmp	.+16     	; 0x488c <xTaskRemoveFromEventList+0xa2>
    487c:	8a 81       	ldd	r24, Y+2	; 0x02
    487e:	9b 81       	ldd	r25, Y+3	; 0x03
    4880:	0c 96       	adiw	r24, 0x0c	; 12
    4882:	bc 01       	movw	r22, r24
    4884:	82 e0       	ldi	r24, 0x02	; 2
    4886:	98 e0       	ldi	r25, 0x08	; 8
    4888:	0e 94 58 11 	call	0x22b0	; 0x22b0 <vListInsertEnd>
    488c:	8a 81       	ldd	r24, Y+2	; 0x02
    488e:	9b 81       	ldd	r25, Y+3	; 0x03
    4890:	fc 01       	movw	r30, r24
    4892:	26 89       	ldd	r18, Z+22	; 0x16
    4894:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4898:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    489c:	fc 01       	movw	r30, r24
    489e:	86 89       	ldd	r24, Z+22	; 0x16
    48a0:	82 17       	cp	r24, r18
    48a2:	30 f4       	brcc	.+12     	; 0x48b0 <xTaskRemoveFromEventList+0xc6>
    48a4:	81 e0       	ldi	r24, 0x01	; 1
    48a6:	89 83       	std	Y+1, r24	; 0x01
    48a8:	81 e0       	ldi	r24, 0x01	; 1
    48aa:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <xYieldPending>
    48ae:	01 c0       	rjmp	.+2      	; 0x48b2 <xTaskRemoveFromEventList+0xc8>
    48b0:	19 82       	std	Y+1, r1	; 0x01
    48b2:	89 81       	ldd	r24, Y+1	; 0x01
    48b4:	0f 90       	pop	r0
    48b6:	0f 90       	pop	r0
    48b8:	0f 90       	pop	r0
    48ba:	0f 90       	pop	r0
    48bc:	0f 90       	pop	r0
    48be:	df 91       	pop	r29
    48c0:	cf 91       	pop	r28
    48c2:	08 95       	ret

000048c4 <vTaskSetTimeOutState>:
    48c4:	cf 93       	push	r28
    48c6:	df 93       	push	r29
    48c8:	00 d0       	rcall	.+0      	; 0x48ca <vTaskSetTimeOutState+0x6>
    48ca:	cd b7       	in	r28, 0x3d	; 61
    48cc:	de b7       	in	r29, 0x3e	; 62
    48ce:	9a 83       	std	Y+2, r25	; 0x02
    48d0:	89 83       	std	Y+1, r24	; 0x01
    48d2:	20 91 1c 08 	lds	r18, 0x081C	; 0x80081c <xNumOfOverflows>
    48d6:	89 81       	ldd	r24, Y+1	; 0x01
    48d8:	9a 81       	ldd	r25, Y+2	; 0x02
    48da:	fc 01       	movw	r30, r24
    48dc:	20 83       	st	Z, r18
    48de:	20 91 16 08 	lds	r18, 0x0816	; 0x800816 <xTickCount>
    48e2:	30 91 17 08 	lds	r19, 0x0817	; 0x800817 <xTickCount+0x1>
    48e6:	89 81       	ldd	r24, Y+1	; 0x01
    48e8:	9a 81       	ldd	r25, Y+2	; 0x02
    48ea:	fc 01       	movw	r30, r24
    48ec:	32 83       	std	Z+2, r19	; 0x02
    48ee:	21 83       	std	Z+1, r18	; 0x01
    48f0:	00 00       	nop
    48f2:	0f 90       	pop	r0
    48f4:	0f 90       	pop	r0
    48f6:	df 91       	pop	r29
    48f8:	cf 91       	pop	r28
    48fa:	08 95       	ret

000048fc <xTaskCheckForTimeOut>:
    48fc:	cf 93       	push	r28
    48fe:	df 93       	push	r29
    4900:	cd b7       	in	r28, 0x3d	; 61
    4902:	de b7       	in	r29, 0x3e	; 62
    4904:	27 97       	sbiw	r28, 0x07	; 7
    4906:	0f b6       	in	r0, 0x3f	; 63
    4908:	f8 94       	cli
    490a:	de bf       	out	0x3e, r29	; 62
    490c:	0f be       	out	0x3f, r0	; 63
    490e:	cd bf       	out	0x3d, r28	; 61
    4910:	9d 83       	std	Y+5, r25	; 0x05
    4912:	8c 83       	std	Y+4, r24	; 0x04
    4914:	7f 83       	std	Y+7, r23	; 0x07
    4916:	6e 83       	std	Y+6, r22	; 0x06
    4918:	0f b6       	in	r0, 0x3f	; 63
    491a:	f8 94       	cli
    491c:	0f 92       	push	r0
    491e:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <xTickCount>
    4922:	90 91 17 08 	lds	r25, 0x0817	; 0x800817 <xTickCount+0x1>
    4926:	9b 83       	std	Y+3, r25	; 0x03
    4928:	8a 83       	std	Y+2, r24	; 0x02
    492a:	8c 81       	ldd	r24, Y+4	; 0x04
    492c:	9d 81       	ldd	r25, Y+5	; 0x05
    492e:	fc 01       	movw	r30, r24
    4930:	90 81       	ld	r25, Z
    4932:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <xNumOfOverflows>
    4936:	98 17       	cp	r25, r24
    4938:	69 f0       	breq	.+26     	; 0x4954 <xTaskCheckForTimeOut+0x58>
    493a:	8c 81       	ldd	r24, Y+4	; 0x04
    493c:	9d 81       	ldd	r25, Y+5	; 0x05
    493e:	fc 01       	movw	r30, r24
    4940:	21 81       	ldd	r18, Z+1	; 0x01
    4942:	32 81       	ldd	r19, Z+2	; 0x02
    4944:	8a 81       	ldd	r24, Y+2	; 0x02
    4946:	9b 81       	ldd	r25, Y+3	; 0x03
    4948:	82 17       	cp	r24, r18
    494a:	93 07       	cpc	r25, r19
    494c:	18 f0       	brcs	.+6      	; 0x4954 <xTaskCheckForTimeOut+0x58>
    494e:	81 e0       	ldi	r24, 0x01	; 1
    4950:	89 83       	std	Y+1, r24	; 0x01
    4952:	30 c0       	rjmp	.+96     	; 0x49b4 <xTaskCheckForTimeOut+0xb8>
    4954:	8c 81       	ldd	r24, Y+4	; 0x04
    4956:	9d 81       	ldd	r25, Y+5	; 0x05
    4958:	fc 01       	movw	r30, r24
    495a:	81 81       	ldd	r24, Z+1	; 0x01
    495c:	92 81       	ldd	r25, Z+2	; 0x02
    495e:	2a 81       	ldd	r18, Y+2	; 0x02
    4960:	3b 81       	ldd	r19, Y+3	; 0x03
    4962:	28 1b       	sub	r18, r24
    4964:	39 0b       	sbc	r19, r25
    4966:	8e 81       	ldd	r24, Y+6	; 0x06
    4968:	9f 81       	ldd	r25, Y+7	; 0x07
    496a:	fc 01       	movw	r30, r24
    496c:	80 81       	ld	r24, Z
    496e:	91 81       	ldd	r25, Z+1	; 0x01
    4970:	28 17       	cp	r18, r24
    4972:	39 07       	cpc	r19, r25
    4974:	e8 f4       	brcc	.+58     	; 0x49b0 <xTaskCheckForTimeOut+0xb4>
    4976:	8e 81       	ldd	r24, Y+6	; 0x06
    4978:	9f 81       	ldd	r25, Y+7	; 0x07
    497a:	fc 01       	movw	r30, r24
    497c:	20 81       	ld	r18, Z
    497e:	31 81       	ldd	r19, Z+1	; 0x01
    4980:	8c 81       	ldd	r24, Y+4	; 0x04
    4982:	9d 81       	ldd	r25, Y+5	; 0x05
    4984:	fc 01       	movw	r30, r24
    4986:	41 81       	ldd	r20, Z+1	; 0x01
    4988:	52 81       	ldd	r21, Z+2	; 0x02
    498a:	8a 81       	ldd	r24, Y+2	; 0x02
    498c:	9b 81       	ldd	r25, Y+3	; 0x03
    498e:	ba 01       	movw	r22, r20
    4990:	68 1b       	sub	r22, r24
    4992:	79 0b       	sbc	r23, r25
    4994:	cb 01       	movw	r24, r22
    4996:	28 0f       	add	r18, r24
    4998:	39 1f       	adc	r19, r25
    499a:	8e 81       	ldd	r24, Y+6	; 0x06
    499c:	9f 81       	ldd	r25, Y+7	; 0x07
    499e:	fc 01       	movw	r30, r24
    49a0:	31 83       	std	Z+1, r19	; 0x01
    49a2:	20 83       	st	Z, r18
    49a4:	8c 81       	ldd	r24, Y+4	; 0x04
    49a6:	9d 81       	ldd	r25, Y+5	; 0x05
    49a8:	0e 94 62 24 	call	0x48c4	; 0x48c4 <vTaskSetTimeOutState>
    49ac:	19 82       	std	Y+1, r1	; 0x01
    49ae:	02 c0       	rjmp	.+4      	; 0x49b4 <xTaskCheckForTimeOut+0xb8>
    49b0:	81 e0       	ldi	r24, 0x01	; 1
    49b2:	89 83       	std	Y+1, r24	; 0x01
    49b4:	0f 90       	pop	r0
    49b6:	0f be       	out	0x3f, r0	; 63
    49b8:	89 81       	ldd	r24, Y+1	; 0x01
    49ba:	27 96       	adiw	r28, 0x07	; 7
    49bc:	0f b6       	in	r0, 0x3f	; 63
    49be:	f8 94       	cli
    49c0:	de bf       	out	0x3e, r29	; 62
    49c2:	0f be       	out	0x3f, r0	; 63
    49c4:	cd bf       	out	0x3d, r28	; 61
    49c6:	df 91       	pop	r29
    49c8:	cf 91       	pop	r28
    49ca:	08 95       	ret

000049cc <vTaskMissedYield>:
    49cc:	cf 93       	push	r28
    49ce:	df 93       	push	r29
    49d0:	cd b7       	in	r28, 0x3d	; 61
    49d2:	de b7       	in	r29, 0x3e	; 62
    49d4:	81 e0       	ldi	r24, 0x01	; 1
    49d6:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <xYieldPending>
    49da:	00 00       	nop
    49dc:	df 91       	pop	r29
    49de:	cf 91       	pop	r28
    49e0:	08 95       	ret

000049e2 <prvIdleTask>:
    49e2:	cf 93       	push	r28
    49e4:	df 93       	push	r29
    49e6:	00 d0       	rcall	.+0      	; 0x49e8 <prvIdleTask+0x6>
    49e8:	cd b7       	in	r28, 0x3d	; 61
    49ea:	de b7       	in	r29, 0x3e	; 62
    49ec:	9a 83       	std	Y+2, r25	; 0x02
    49ee:	89 83       	std	Y+1, r24	; 0x01
    49f0:	0e 94 41 25 	call	0x4a82	; 0x4a82 <prvCheckTasksWaitingTermination>
    49f4:	80 91 c8 07 	lds	r24, 0x07C8	; 0x8007c8 <pxReadyTasksLists>
    49f8:	82 30       	cpi	r24, 0x02	; 2
    49fa:	10 f0       	brcs	.+4      	; 0x4a00 <prvIdleTask+0x1e>
    49fc:	0e 94 54 14 	call	0x28a8	; 0x28a8 <vPortYield>
    4a00:	0e 94 1a 09 	call	0x1234	; 0x1234 <vApplicationIdleHook>
    4a04:	f5 cf       	rjmp	.-22     	; 0x49f0 <prvIdleTask+0xe>

00004a06 <prvInitialiseTaskLists>:
    4a06:	cf 93       	push	r28
    4a08:	df 93       	push	r29
    4a0a:	1f 92       	push	r1
    4a0c:	cd b7       	in	r28, 0x3d	; 61
    4a0e:	de b7       	in	r29, 0x3e	; 62
    4a10:	19 82       	std	Y+1, r1	; 0x01
    4a12:	13 c0       	rjmp	.+38     	; 0x4a3a <prvInitialiseTaskLists+0x34>
    4a14:	89 81       	ldd	r24, Y+1	; 0x01
    4a16:	28 2f       	mov	r18, r24
    4a18:	30 e0       	ldi	r19, 0x00	; 0
    4a1a:	c9 01       	movw	r24, r18
    4a1c:	88 0f       	add	r24, r24
    4a1e:	99 1f       	adc	r25, r25
    4a20:	88 0f       	add	r24, r24
    4a22:	99 1f       	adc	r25, r25
    4a24:	88 0f       	add	r24, r24
    4a26:	99 1f       	adc	r25, r25
    4a28:	82 0f       	add	r24, r18
    4a2a:	93 1f       	adc	r25, r19
    4a2c:	88 53       	subi	r24, 0x38	; 56
    4a2e:	98 4f       	sbci	r25, 0xF8	; 248
    4a30:	0e 94 10 11 	call	0x2220	; 0x2220 <vListInitialise>
    4a34:	89 81       	ldd	r24, Y+1	; 0x01
    4a36:	8f 5f       	subi	r24, 0xFF	; 255
    4a38:	89 83       	std	Y+1, r24	; 0x01
    4a3a:	89 81       	ldd	r24, Y+1	; 0x01
    4a3c:	84 30       	cpi	r24, 0x04	; 4
    4a3e:	50 f3       	brcs	.-44     	; 0x4a14 <prvInitialiseTaskLists+0xe>
    4a40:	8c ee       	ldi	r24, 0xEC	; 236
    4a42:	97 e0       	ldi	r25, 0x07	; 7
    4a44:	0e 94 10 11 	call	0x2220	; 0x2220 <vListInitialise>
    4a48:	85 ef       	ldi	r24, 0xF5	; 245
    4a4a:	97 e0       	ldi	r25, 0x07	; 7
    4a4c:	0e 94 10 11 	call	0x2220	; 0x2220 <vListInitialise>
    4a50:	82 e0       	ldi	r24, 0x02	; 2
    4a52:	98 e0       	ldi	r25, 0x08	; 8
    4a54:	0e 94 10 11 	call	0x2220	; 0x2220 <vListInitialise>
    4a58:	8b e0       	ldi	r24, 0x0B	; 11
    4a5a:	98 e0       	ldi	r25, 0x08	; 8
    4a5c:	0e 94 10 11 	call	0x2220	; 0x2220 <vListInitialise>
    4a60:	8c ee       	ldi	r24, 0xEC	; 236
    4a62:	97 e0       	ldi	r25, 0x07	; 7
    4a64:	90 93 ff 07 	sts	0x07FF, r25	; 0x8007ff <pxDelayedTaskList+0x1>
    4a68:	80 93 fe 07 	sts	0x07FE, r24	; 0x8007fe <pxDelayedTaskList>
    4a6c:	85 ef       	ldi	r24, 0xF5	; 245
    4a6e:	97 e0       	ldi	r25, 0x07	; 7
    4a70:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <pxOverflowDelayedTaskList+0x1>
    4a74:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <pxOverflowDelayedTaskList>
    4a78:	00 00       	nop
    4a7a:	0f 90       	pop	r0
    4a7c:	df 91       	pop	r29
    4a7e:	cf 91       	pop	r28
    4a80:	08 95       	ret

00004a82 <prvCheckTasksWaitingTermination>:
    4a82:	cf 93       	push	r28
    4a84:	df 93       	push	r29
    4a86:	00 d0       	rcall	.+0      	; 0x4a88 <prvCheckTasksWaitingTermination+0x6>
    4a88:	1f 92       	push	r1
    4a8a:	cd b7       	in	r28, 0x3d	; 61
    4a8c:	de b7       	in	r29, 0x3e	; 62
    4a8e:	2f c0       	rjmp	.+94     	; 0x4aee <prvCheckTasksWaitingTermination+0x6c>
    4a90:	0e 94 85 21 	call	0x430a	; 0x430a <vTaskSuspendAll>
    4a94:	90 91 0b 08 	lds	r25, 0x080B	; 0x80080b <xTasksWaitingTermination>
    4a98:	81 e0       	ldi	r24, 0x01	; 1
    4a9a:	99 23       	and	r25, r25
    4a9c:	09 f0       	breq	.+2      	; 0x4aa0 <prvCheckTasksWaitingTermination+0x1e>
    4a9e:	80 e0       	ldi	r24, 0x00	; 0
    4aa0:	89 83       	std	Y+1, r24	; 0x01
    4aa2:	0e 94 92 21 	call	0x4324	; 0x4324 <xTaskResumeAll>
    4aa6:	89 81       	ldd	r24, Y+1	; 0x01
    4aa8:	88 23       	and	r24, r24
    4aaa:	09 f5       	brne	.+66     	; 0x4aee <prvCheckTasksWaitingTermination+0x6c>
    4aac:	0f b6       	in	r0, 0x3f	; 63
    4aae:	f8 94       	cli
    4ab0:	0f 92       	push	r0
    4ab2:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <xTasksWaitingTermination+0x5>
    4ab6:	90 91 11 08 	lds	r25, 0x0811	; 0x800811 <xTasksWaitingTermination+0x6>
    4aba:	fc 01       	movw	r30, r24
    4abc:	86 81       	ldd	r24, Z+6	; 0x06
    4abe:	97 81       	ldd	r25, Z+7	; 0x07
    4ac0:	9b 83       	std	Y+3, r25	; 0x03
    4ac2:	8a 83       	std	Y+2, r24	; 0x02
    4ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ac6:	9b 81       	ldd	r25, Y+3	; 0x03
    4ac8:	02 96       	adiw	r24, 0x02	; 2
    4aca:	0e 94 1f 12 	call	0x243e	; 0x243e <uxListRemove>
    4ace:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <uxCurrentNumberOfTasks>
    4ad2:	81 50       	subi	r24, 0x01	; 1
    4ad4:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <uxCurrentNumberOfTasks>
    4ad8:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <uxDeletedTasksWaitingCleanUp>
    4adc:	81 50       	subi	r24, 0x01	; 1
    4ade:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <uxDeletedTasksWaitingCleanUp>
    4ae2:	0f 90       	pop	r0
    4ae4:	0f be       	out	0x3f, r0	; 63
    4ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    4aea:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <prvDeleteTCB>
    4aee:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <uxDeletedTasksWaitingCleanUp>
    4af2:	88 23       	and	r24, r24
    4af4:	69 f6       	brne	.-102    	; 0x4a90 <prvCheckTasksWaitingTermination+0xe>
    4af6:	00 00       	nop
    4af8:	0f 90       	pop	r0
    4afa:	0f 90       	pop	r0
    4afc:	0f 90       	pop	r0
    4afe:	df 91       	pop	r29
    4b00:	cf 91       	pop	r28
    4b02:	08 95       	ret

00004b04 <prvTaskCheckFreeStackSpace>:
    4b04:	cf 93       	push	r28
    4b06:	df 93       	push	r29
    4b08:	00 d0       	rcall	.+0      	; 0x4b0a <prvTaskCheckFreeStackSpace+0x6>
    4b0a:	00 d0       	rcall	.+0      	; 0x4b0c <prvTaskCheckFreeStackSpace+0x8>
    4b0c:	00 d0       	rcall	.+0      	; 0x4b0e <prvTaskCheckFreeStackSpace+0xa>
    4b0e:	cd b7       	in	r28, 0x3d	; 61
    4b10:	de b7       	in	r29, 0x3e	; 62
    4b12:	9e 83       	std	Y+6, r25	; 0x06
    4b14:	8d 83       	std	Y+5, r24	; 0x05
    4b16:	19 82       	std	Y+1, r1	; 0x01
    4b18:	1a 82       	std	Y+2, r1	; 0x02
    4b1a:	1b 82       	std	Y+3, r1	; 0x03
    4b1c:	1c 82       	std	Y+4, r1	; 0x04
    4b1e:	10 c0       	rjmp	.+32     	; 0x4b40 <prvTaskCheckFreeStackSpace+0x3c>
    4b20:	8d 81       	ldd	r24, Y+5	; 0x05
    4b22:	9e 81       	ldd	r25, Y+6	; 0x06
    4b24:	01 96       	adiw	r24, 0x01	; 1
    4b26:	9e 83       	std	Y+6, r25	; 0x06
    4b28:	8d 83       	std	Y+5, r24	; 0x05
    4b2a:	89 81       	ldd	r24, Y+1	; 0x01
    4b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    4b2e:	ab 81       	ldd	r26, Y+3	; 0x03
    4b30:	bc 81       	ldd	r27, Y+4	; 0x04
    4b32:	01 96       	adiw	r24, 0x01	; 1
    4b34:	a1 1d       	adc	r26, r1
    4b36:	b1 1d       	adc	r27, r1
    4b38:	89 83       	std	Y+1, r24	; 0x01
    4b3a:	9a 83       	std	Y+2, r25	; 0x02
    4b3c:	ab 83       	std	Y+3, r26	; 0x03
    4b3e:	bc 83       	std	Y+4, r27	; 0x04
    4b40:	8d 81       	ldd	r24, Y+5	; 0x05
    4b42:	9e 81       	ldd	r25, Y+6	; 0x06
    4b44:	fc 01       	movw	r30, r24
    4b46:	80 81       	ld	r24, Z
    4b48:	85 3a       	cpi	r24, 0xA5	; 165
    4b4a:	51 f3       	breq	.-44     	; 0x4b20 <prvTaskCheckFreeStackSpace+0x1c>
    4b4c:	89 81       	ldd	r24, Y+1	; 0x01
    4b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b50:	26 96       	adiw	r28, 0x06	; 6
    4b52:	0f b6       	in	r0, 0x3f	; 63
    4b54:	f8 94       	cli
    4b56:	de bf       	out	0x3e, r29	; 62
    4b58:	0f be       	out	0x3f, r0	; 63
    4b5a:	cd bf       	out	0x3d, r28	; 61
    4b5c:	df 91       	pop	r29
    4b5e:	cf 91       	pop	r28
    4b60:	08 95       	ret

00004b62 <uxTaskGetStackHighWaterMark>:
    4b62:	cf 93       	push	r28
    4b64:	df 93       	push	r29
    4b66:	cd b7       	in	r28, 0x3d	; 61
    4b68:	de b7       	in	r29, 0x3e	; 62
    4b6a:	27 97       	sbiw	r28, 0x07	; 7
    4b6c:	0f b6       	in	r0, 0x3f	; 63
    4b6e:	f8 94       	cli
    4b70:	de bf       	out	0x3e, r29	; 62
    4b72:	0f be       	out	0x3f, r0	; 63
    4b74:	cd bf       	out	0x3d, r28	; 61
    4b76:	9f 83       	std	Y+7, r25	; 0x07
    4b78:	8e 83       	std	Y+6, r24	; 0x06
    4b7a:	8e 81       	ldd	r24, Y+6	; 0x06
    4b7c:	9f 81       	ldd	r25, Y+7	; 0x07
    4b7e:	89 2b       	or	r24, r25
    4b80:	29 f4       	brne	.+10     	; 0x4b8c <uxTaskGetStackHighWaterMark+0x2a>
    4b82:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4b86:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4b8a:	02 c0       	rjmp	.+4      	; 0x4b90 <uxTaskGetStackHighWaterMark+0x2e>
    4b8c:	8e 81       	ldd	r24, Y+6	; 0x06
    4b8e:	9f 81       	ldd	r25, Y+7	; 0x07
    4b90:	9a 83       	std	Y+2, r25	; 0x02
    4b92:	89 83       	std	Y+1, r24	; 0x01
    4b94:	89 81       	ldd	r24, Y+1	; 0x01
    4b96:	9a 81       	ldd	r25, Y+2	; 0x02
    4b98:	fc 01       	movw	r30, r24
    4b9a:	87 89       	ldd	r24, Z+23	; 0x17
    4b9c:	90 8d       	ldd	r25, Z+24	; 0x18
    4b9e:	9c 83       	std	Y+4, r25	; 0x04
    4ba0:	8b 83       	std	Y+3, r24	; 0x03
    4ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ba6:	0e 94 82 25 	call	0x4b04	; 0x4b04 <prvTaskCheckFreeStackSpace>
    4baa:	8d 83       	std	Y+5, r24	; 0x05
    4bac:	8d 81       	ldd	r24, Y+5	; 0x05
    4bae:	27 96       	adiw	r28, 0x07	; 7
    4bb0:	0f b6       	in	r0, 0x3f	; 63
    4bb2:	f8 94       	cli
    4bb4:	de bf       	out	0x3e, r29	; 62
    4bb6:	0f be       	out	0x3f, r0	; 63
    4bb8:	cd bf       	out	0x3d, r28	; 61
    4bba:	df 91       	pop	r29
    4bbc:	cf 91       	pop	r28
    4bbe:	08 95       	ret

00004bc0 <prvDeleteTCB>:
    4bc0:	cf 93       	push	r28
    4bc2:	df 93       	push	r29
    4bc4:	00 d0       	rcall	.+0      	; 0x4bc6 <prvDeleteTCB+0x6>
    4bc6:	cd b7       	in	r28, 0x3d	; 61
    4bc8:	de b7       	in	r29, 0x3e	; 62
    4bca:	9a 83       	std	Y+2, r25	; 0x02
    4bcc:	89 83       	std	Y+1, r24	; 0x01
    4bce:	89 81       	ldd	r24, Y+1	; 0x01
    4bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    4bd2:	fc 01       	movw	r30, r24
    4bd4:	87 89       	ldd	r24, Z+23	; 0x17
    4bd6:	90 8d       	ldd	r25, Z+24	; 0x18
    4bd8:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <vPortFree>
    4bdc:	89 81       	ldd	r24, Y+1	; 0x01
    4bde:	9a 81       	ldd	r25, Y+2	; 0x02
    4be0:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <vPortFree>
    4be4:	00 00       	nop
    4be6:	0f 90       	pop	r0
    4be8:	0f 90       	pop	r0
    4bea:	df 91       	pop	r29
    4bec:	cf 91       	pop	r28
    4bee:	08 95       	ret

00004bf0 <prvResetNextTaskUnblockTime>:
    4bf0:	cf 93       	push	r28
    4bf2:	df 93       	push	r29
    4bf4:	00 d0       	rcall	.+0      	; 0x4bf6 <prvResetNextTaskUnblockTime+0x6>
    4bf6:	cd b7       	in	r28, 0x3d	; 61
    4bf8:	de b7       	in	r29, 0x3e	; 62
    4bfa:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <pxDelayedTaskList>
    4bfe:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <pxDelayedTaskList+0x1>
    4c02:	fc 01       	movw	r30, r24
    4c04:	80 81       	ld	r24, Z
    4c06:	88 23       	and	r24, r24
    4c08:	39 f4       	brne	.+14     	; 0x4c18 <prvResetNextTaskUnblockTime+0x28>
    4c0a:	8f ef       	ldi	r24, 0xFF	; 255
    4c0c:	9f ef       	ldi	r25, 0xFF	; 255
    4c0e:	90 93 1f 08 	sts	0x081F, r25	; 0x80081f <xNextTaskUnblockTime+0x1>
    4c12:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <xNextTaskUnblockTime>
    4c16:	15 c0       	rjmp	.+42     	; 0x4c42 <prvResetNextTaskUnblockTime+0x52>
    4c18:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <pxDelayedTaskList>
    4c1c:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <pxDelayedTaskList+0x1>
    4c20:	fc 01       	movw	r30, r24
    4c22:	85 81       	ldd	r24, Z+5	; 0x05
    4c24:	96 81       	ldd	r25, Z+6	; 0x06
    4c26:	fc 01       	movw	r30, r24
    4c28:	86 81       	ldd	r24, Z+6	; 0x06
    4c2a:	97 81       	ldd	r25, Z+7	; 0x07
    4c2c:	9a 83       	std	Y+2, r25	; 0x02
    4c2e:	89 83       	std	Y+1, r24	; 0x01
    4c30:	89 81       	ldd	r24, Y+1	; 0x01
    4c32:	9a 81       	ldd	r25, Y+2	; 0x02
    4c34:	fc 01       	movw	r30, r24
    4c36:	82 81       	ldd	r24, Z+2	; 0x02
    4c38:	93 81       	ldd	r25, Z+3	; 0x03
    4c3a:	90 93 1f 08 	sts	0x081F, r25	; 0x80081f <xNextTaskUnblockTime+0x1>
    4c3e:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <xNextTaskUnblockTime>
    4c42:	00 00       	nop
    4c44:	0f 90       	pop	r0
    4c46:	0f 90       	pop	r0
    4c48:	df 91       	pop	r29
    4c4a:	cf 91       	pop	r28
    4c4c:	08 95       	ret

00004c4e <vTaskPriorityInherit>:
    4c4e:	cf 93       	push	r28
    4c50:	df 93       	push	r29
    4c52:	00 d0       	rcall	.+0      	; 0x4c54 <vTaskPriorityInherit+0x6>
    4c54:	00 d0       	rcall	.+0      	; 0x4c56 <vTaskPriorityInherit+0x8>
    4c56:	cd b7       	in	r28, 0x3d	; 61
    4c58:	de b7       	in	r29, 0x3e	; 62
    4c5a:	9c 83       	std	Y+4, r25	; 0x04
    4c5c:	8b 83       	std	Y+3, r24	; 0x03
    4c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c60:	9c 81       	ldd	r25, Y+4	; 0x04
    4c62:	9a 83       	std	Y+2, r25	; 0x02
    4c64:	89 83       	std	Y+1, r24	; 0x01
    4c66:	8b 81       	ldd	r24, Y+3	; 0x03
    4c68:	9c 81       	ldd	r25, Y+4	; 0x04
    4c6a:	89 2b       	or	r24, r25
    4c6c:	09 f4       	brne	.+2      	; 0x4c70 <vTaskPriorityInherit+0x22>
    4c6e:	7f c0       	rjmp	.+254    	; 0x4d6e <vTaskPriorityInherit+0x120>
    4c70:	89 81       	ldd	r24, Y+1	; 0x01
    4c72:	9a 81       	ldd	r25, Y+2	; 0x02
    4c74:	fc 01       	movw	r30, r24
    4c76:	26 89       	ldd	r18, Z+22	; 0x16
    4c78:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4c7c:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4c80:	fc 01       	movw	r30, r24
    4c82:	86 89       	ldd	r24, Z+22	; 0x16
    4c84:	28 17       	cp	r18, r24
    4c86:	08 f0       	brcs	.+2      	; 0x4c8a <vTaskPriorityInherit+0x3c>
    4c88:	72 c0       	rjmp	.+228    	; 0x4d6e <vTaskPriorityInherit+0x120>
    4c8a:	89 81       	ldd	r24, Y+1	; 0x01
    4c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c8e:	fc 01       	movw	r30, r24
    4c90:	84 85       	ldd	r24, Z+12	; 0x0c
    4c92:	95 85       	ldd	r25, Z+13	; 0x0d
    4c94:	99 23       	and	r25, r25
    4c96:	8c f0       	brlt	.+34     	; 0x4cba <vTaskPriorityInherit+0x6c>
    4c98:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4c9c:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4ca0:	fc 01       	movw	r30, r24
    4ca2:	86 89       	ldd	r24, Z+22	; 0x16
    4ca4:	88 2f       	mov	r24, r24
    4ca6:	90 e0       	ldi	r25, 0x00	; 0
    4ca8:	24 e0       	ldi	r18, 0x04	; 4
    4caa:	30 e0       	ldi	r19, 0x00	; 0
    4cac:	28 1b       	sub	r18, r24
    4cae:	39 0b       	sbc	r19, r25
    4cb0:	89 81       	ldd	r24, Y+1	; 0x01
    4cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    4cb4:	fc 01       	movw	r30, r24
    4cb6:	35 87       	std	Z+13, r19	; 0x0d
    4cb8:	24 87       	std	Z+12, r18	; 0x0c
    4cba:	89 81       	ldd	r24, Y+1	; 0x01
    4cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    4cbe:	fc 01       	movw	r30, r24
    4cc0:	42 85       	ldd	r20, Z+10	; 0x0a
    4cc2:	53 85       	ldd	r21, Z+11	; 0x0b
    4cc4:	89 81       	ldd	r24, Y+1	; 0x01
    4cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    4cc8:	fc 01       	movw	r30, r24
    4cca:	86 89       	ldd	r24, Z+22	; 0x16
    4ccc:	28 2f       	mov	r18, r24
    4cce:	30 e0       	ldi	r19, 0x00	; 0
    4cd0:	c9 01       	movw	r24, r18
    4cd2:	88 0f       	add	r24, r24
    4cd4:	99 1f       	adc	r25, r25
    4cd6:	88 0f       	add	r24, r24
    4cd8:	99 1f       	adc	r25, r25
    4cda:	88 0f       	add	r24, r24
    4cdc:	99 1f       	adc	r25, r25
    4cde:	82 0f       	add	r24, r18
    4ce0:	93 1f       	adc	r25, r19
    4ce2:	88 53       	subi	r24, 0x38	; 56
    4ce4:	98 4f       	sbci	r25, 0xF8	; 248
    4ce6:	48 17       	cp	r20, r24
    4ce8:	59 07       	cpc	r21, r25
    4cea:	b9 f5       	brne	.+110    	; 0x4d5a <vTaskPriorityInherit+0x10c>
    4cec:	89 81       	ldd	r24, Y+1	; 0x01
    4cee:	9a 81       	ldd	r25, Y+2	; 0x02
    4cf0:	02 96       	adiw	r24, 0x02	; 2
    4cf2:	0e 94 1f 12 	call	0x243e	; 0x243e <uxListRemove>
    4cf6:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4cfa:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4cfe:	fc 01       	movw	r30, r24
    4d00:	26 89       	ldd	r18, Z+22	; 0x16
    4d02:	89 81       	ldd	r24, Y+1	; 0x01
    4d04:	9a 81       	ldd	r25, Y+2	; 0x02
    4d06:	fc 01       	movw	r30, r24
    4d08:	26 8b       	std	Z+22, r18	; 0x16
    4d0a:	89 81       	ldd	r24, Y+1	; 0x01
    4d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d0e:	fc 01       	movw	r30, r24
    4d10:	96 89       	ldd	r25, Z+22	; 0x16
    4d12:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <uxTopReadyPriority>
    4d16:	89 17       	cp	r24, r25
    4d18:	30 f4       	brcc	.+12     	; 0x4d26 <vTaskPriorityInherit+0xd8>
    4d1a:	89 81       	ldd	r24, Y+1	; 0x01
    4d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d1e:	fc 01       	movw	r30, r24
    4d20:	86 89       	ldd	r24, Z+22	; 0x16
    4d22:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <uxTopReadyPriority>
    4d26:	89 81       	ldd	r24, Y+1	; 0x01
    4d28:	9a 81       	ldd	r25, Y+2	; 0x02
    4d2a:	ac 01       	movw	r20, r24
    4d2c:	4e 5f       	subi	r20, 0xFE	; 254
    4d2e:	5f 4f       	sbci	r21, 0xFF	; 255
    4d30:	89 81       	ldd	r24, Y+1	; 0x01
    4d32:	9a 81       	ldd	r25, Y+2	; 0x02
    4d34:	fc 01       	movw	r30, r24
    4d36:	86 89       	ldd	r24, Z+22	; 0x16
    4d38:	28 2f       	mov	r18, r24
    4d3a:	30 e0       	ldi	r19, 0x00	; 0
    4d3c:	c9 01       	movw	r24, r18
    4d3e:	88 0f       	add	r24, r24
    4d40:	99 1f       	adc	r25, r25
    4d42:	88 0f       	add	r24, r24
    4d44:	99 1f       	adc	r25, r25
    4d46:	88 0f       	add	r24, r24
    4d48:	99 1f       	adc	r25, r25
    4d4a:	82 0f       	add	r24, r18
    4d4c:	93 1f       	adc	r25, r19
    4d4e:	88 53       	subi	r24, 0x38	; 56
    4d50:	98 4f       	sbci	r25, 0xF8	; 248
    4d52:	ba 01       	movw	r22, r20
    4d54:	0e 94 58 11 	call	0x22b0	; 0x22b0 <vListInsertEnd>
    4d58:	0a c0       	rjmp	.+20     	; 0x4d6e <vTaskPriorityInherit+0x120>
    4d5a:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4d5e:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4d62:	fc 01       	movw	r30, r24
    4d64:	26 89       	ldd	r18, Z+22	; 0x16
    4d66:	89 81       	ldd	r24, Y+1	; 0x01
    4d68:	9a 81       	ldd	r25, Y+2	; 0x02
    4d6a:	fc 01       	movw	r30, r24
    4d6c:	26 8b       	std	Z+22, r18	; 0x16
    4d6e:	00 00       	nop
    4d70:	0f 90       	pop	r0
    4d72:	0f 90       	pop	r0
    4d74:	0f 90       	pop	r0
    4d76:	0f 90       	pop	r0
    4d78:	df 91       	pop	r29
    4d7a:	cf 91       	pop	r28
    4d7c:	08 95       	ret

00004d7e <xTaskPriorityDisinherit>:
    4d7e:	cf 93       	push	r28
    4d80:	df 93       	push	r29
    4d82:	00 d0       	rcall	.+0      	; 0x4d84 <xTaskPriorityDisinherit+0x6>
    4d84:	00 d0       	rcall	.+0      	; 0x4d86 <xTaskPriorityDisinherit+0x8>
    4d86:	1f 92       	push	r1
    4d88:	cd b7       	in	r28, 0x3d	; 61
    4d8a:	de b7       	in	r29, 0x3e	; 62
    4d8c:	9d 83       	std	Y+5, r25	; 0x05
    4d8e:	8c 83       	std	Y+4, r24	; 0x04
    4d90:	8c 81       	ldd	r24, Y+4	; 0x04
    4d92:	9d 81       	ldd	r25, Y+5	; 0x05
    4d94:	9b 83       	std	Y+3, r25	; 0x03
    4d96:	8a 83       	std	Y+2, r24	; 0x02
    4d98:	19 82       	std	Y+1, r1	; 0x01
    4d9a:	8c 81       	ldd	r24, Y+4	; 0x04
    4d9c:	9d 81       	ldd	r25, Y+5	; 0x05
    4d9e:	89 2b       	or	r24, r25
    4da0:	09 f4       	brne	.+2      	; 0x4da4 <xTaskPriorityDisinherit+0x26>
    4da2:	61 c0       	rjmp	.+194    	; 0x4e66 <xTaskPriorityDisinherit+0xe8>
    4da4:	8a 81       	ldd	r24, Y+2	; 0x02
    4da6:	9b 81       	ldd	r25, Y+3	; 0x03
    4da8:	fc 01       	movw	r30, r24
    4daa:	84 a1       	ldd	r24, Z+36	; 0x24
    4dac:	2f ef       	ldi	r18, 0xFF	; 255
    4dae:	28 0f       	add	r18, r24
    4db0:	8a 81       	ldd	r24, Y+2	; 0x02
    4db2:	9b 81       	ldd	r25, Y+3	; 0x03
    4db4:	fc 01       	movw	r30, r24
    4db6:	24 a3       	std	Z+36, r18	; 0x24
    4db8:	8a 81       	ldd	r24, Y+2	; 0x02
    4dba:	9b 81       	ldd	r25, Y+3	; 0x03
    4dbc:	fc 01       	movw	r30, r24
    4dbe:	26 89       	ldd	r18, Z+22	; 0x16
    4dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    4dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    4dc4:	fc 01       	movw	r30, r24
    4dc6:	83 a1       	ldd	r24, Z+35	; 0x23
    4dc8:	28 17       	cp	r18, r24
    4dca:	09 f4       	brne	.+2      	; 0x4dce <xTaskPriorityDisinherit+0x50>
    4dcc:	4c c0       	rjmp	.+152    	; 0x4e66 <xTaskPriorityDisinherit+0xe8>
    4dce:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    4dd2:	fc 01       	movw	r30, r24
    4dd4:	84 a1       	ldd	r24, Z+36	; 0x24
    4dd6:	88 23       	and	r24, r24
    4dd8:	09 f0       	breq	.+2      	; 0x4ddc <xTaskPriorityDisinherit+0x5e>
    4dda:	45 c0       	rjmp	.+138    	; 0x4e66 <xTaskPriorityDisinherit+0xe8>
    4ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    4dde:	9b 81       	ldd	r25, Y+3	; 0x03
    4de0:	02 96       	adiw	r24, 0x02	; 2
    4de2:	0e 94 1f 12 	call	0x243e	; 0x243e <uxListRemove>
    4de6:	8a 81       	ldd	r24, Y+2	; 0x02
    4de8:	9b 81       	ldd	r25, Y+3	; 0x03
    4dea:	fc 01       	movw	r30, r24
    4dec:	23 a1       	ldd	r18, Z+35	; 0x23
    4dee:	8a 81       	ldd	r24, Y+2	; 0x02
    4df0:	9b 81       	ldd	r25, Y+3	; 0x03
    4df2:	fc 01       	movw	r30, r24
    4df4:	26 8b       	std	Z+22, r18	; 0x16
    4df6:	8a 81       	ldd	r24, Y+2	; 0x02
    4df8:	9b 81       	ldd	r25, Y+3	; 0x03
    4dfa:	fc 01       	movw	r30, r24
    4dfc:	86 89       	ldd	r24, Z+22	; 0x16
    4dfe:	88 2f       	mov	r24, r24
    4e00:	90 e0       	ldi	r25, 0x00	; 0
    4e02:	24 e0       	ldi	r18, 0x04	; 4
    4e04:	30 e0       	ldi	r19, 0x00	; 0
    4e06:	28 1b       	sub	r18, r24
    4e08:	39 0b       	sbc	r19, r25
    4e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    4e0e:	fc 01       	movw	r30, r24
    4e10:	35 87       	std	Z+13, r19	; 0x0d
    4e12:	24 87       	std	Z+12, r18	; 0x0c
    4e14:	8a 81       	ldd	r24, Y+2	; 0x02
    4e16:	9b 81       	ldd	r25, Y+3	; 0x03
    4e18:	fc 01       	movw	r30, r24
    4e1a:	96 89       	ldd	r25, Z+22	; 0x16
    4e1c:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <uxTopReadyPriority>
    4e20:	89 17       	cp	r24, r25
    4e22:	30 f4       	brcc	.+12     	; 0x4e30 <xTaskPriorityDisinherit+0xb2>
    4e24:	8a 81       	ldd	r24, Y+2	; 0x02
    4e26:	9b 81       	ldd	r25, Y+3	; 0x03
    4e28:	fc 01       	movw	r30, r24
    4e2a:	86 89       	ldd	r24, Z+22	; 0x16
    4e2c:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <uxTopReadyPriority>
    4e30:	8a 81       	ldd	r24, Y+2	; 0x02
    4e32:	9b 81       	ldd	r25, Y+3	; 0x03
    4e34:	ac 01       	movw	r20, r24
    4e36:	4e 5f       	subi	r20, 0xFE	; 254
    4e38:	5f 4f       	sbci	r21, 0xFF	; 255
    4e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    4e3e:	fc 01       	movw	r30, r24
    4e40:	86 89       	ldd	r24, Z+22	; 0x16
    4e42:	28 2f       	mov	r18, r24
    4e44:	30 e0       	ldi	r19, 0x00	; 0
    4e46:	c9 01       	movw	r24, r18
    4e48:	88 0f       	add	r24, r24
    4e4a:	99 1f       	adc	r25, r25
    4e4c:	88 0f       	add	r24, r24
    4e4e:	99 1f       	adc	r25, r25
    4e50:	88 0f       	add	r24, r24
    4e52:	99 1f       	adc	r25, r25
    4e54:	82 0f       	add	r24, r18
    4e56:	93 1f       	adc	r25, r19
    4e58:	88 53       	subi	r24, 0x38	; 56
    4e5a:	98 4f       	sbci	r25, 0xF8	; 248
    4e5c:	ba 01       	movw	r22, r20
    4e5e:	0e 94 58 11 	call	0x22b0	; 0x22b0 <vListInsertEnd>
    4e62:	81 e0       	ldi	r24, 0x01	; 1
    4e64:	89 83       	std	Y+1, r24	; 0x01
    4e66:	89 81       	ldd	r24, Y+1	; 0x01
    4e68:	0f 90       	pop	r0
    4e6a:	0f 90       	pop	r0
    4e6c:	0f 90       	pop	r0
    4e6e:	0f 90       	pop	r0
    4e70:	0f 90       	pop	r0
    4e72:	df 91       	pop	r29
    4e74:	cf 91       	pop	r28
    4e76:	08 95       	ret

00004e78 <pvTaskIncrementMutexHeldCount>:
    4e78:	cf 93       	push	r28
    4e7a:	df 93       	push	r29
    4e7c:	cd b7       	in	r28, 0x3d	; 61
    4e7e:	de b7       	in	r29, 0x3e	; 62
    4e80:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4e84:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4e88:	89 2b       	or	r24, r25
    4e8a:	49 f0       	breq	.+18     	; 0x4e9e <pvTaskIncrementMutexHeldCount+0x26>
    4e8c:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4e90:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4e94:	fc 01       	movw	r30, r24
    4e96:	24 a1       	ldd	r18, Z+36	; 0x24
    4e98:	2f 5f       	subi	r18, 0xFF	; 255
    4e9a:	fc 01       	movw	r30, r24
    4e9c:	24 a3       	std	Z+36, r18	; 0x24
    4e9e:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4ea2:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4ea6:	df 91       	pop	r29
    4ea8:	cf 91       	pop	r28
    4eaa:	08 95       	ret

00004eac <prvAddCurrentTaskToDelayedList>:
    4eac:	cf 93       	push	r28
    4eae:	df 93       	push	r29
    4eb0:	cd b7       	in	r28, 0x3d	; 61
    4eb2:	de b7       	in	r29, 0x3e	; 62
    4eb4:	27 97       	sbiw	r28, 0x07	; 7
    4eb6:	0f b6       	in	r0, 0x3f	; 63
    4eb8:	f8 94       	cli
    4eba:	de bf       	out	0x3e, r29	; 62
    4ebc:	0f be       	out	0x3f, r0	; 63
    4ebe:	cd bf       	out	0x3d, r28	; 61
    4ec0:	9e 83       	std	Y+6, r25	; 0x06
    4ec2:	8d 83       	std	Y+5, r24	; 0x05
    4ec4:	6f 83       	std	Y+7, r22	; 0x07
    4ec6:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <xTickCount>
    4eca:	90 91 17 08 	lds	r25, 0x0817	; 0x800817 <xTickCount+0x1>
    4ece:	9a 83       	std	Y+2, r25	; 0x02
    4ed0:	89 83       	std	Y+1, r24	; 0x01
    4ed2:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4ed6:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4eda:	02 96       	adiw	r24, 0x02	; 2
    4edc:	0e 94 1f 12 	call	0x243e	; 0x243e <uxListRemove>
    4ee0:	29 81       	ldd	r18, Y+1	; 0x01
    4ee2:	3a 81       	ldd	r19, Y+2	; 0x02
    4ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ee8:	82 0f       	add	r24, r18
    4eea:	93 1f       	adc	r25, r19
    4eec:	9c 83       	std	Y+4, r25	; 0x04
    4eee:	8b 83       	std	Y+3, r24	; 0x03
    4ef0:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4ef4:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4ef8:	2b 81       	ldd	r18, Y+3	; 0x03
    4efa:	3c 81       	ldd	r19, Y+4	; 0x04
    4efc:	fc 01       	movw	r30, r24
    4efe:	33 83       	std	Z+3, r19	; 0x03
    4f00:	22 83       	std	Z+2, r18	; 0x02
    4f02:	2b 81       	ldd	r18, Y+3	; 0x03
    4f04:	3c 81       	ldd	r19, Y+4	; 0x04
    4f06:	89 81       	ldd	r24, Y+1	; 0x01
    4f08:	9a 81       	ldd	r25, Y+2	; 0x02
    4f0a:	28 17       	cp	r18, r24
    4f0c:	39 07       	cpc	r19, r25
    4f0e:	78 f4       	brcc	.+30     	; 0x4f2e <prvAddCurrentTaskToDelayedList+0x82>
    4f10:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4f14:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4f18:	9c 01       	movw	r18, r24
    4f1a:	2e 5f       	subi	r18, 0xFE	; 254
    4f1c:	3f 4f       	sbci	r19, 0xFF	; 255
    4f1e:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <pxOverflowDelayedTaskList>
    4f22:	90 91 01 08 	lds	r25, 0x0801	; 0x800801 <pxOverflowDelayedTaskList+0x1>
    4f26:	b9 01       	movw	r22, r18
    4f28:	0e 94 a7 11 	call	0x234e	; 0x234e <vListInsert>
    4f2c:	1d c0       	rjmp	.+58     	; 0x4f68 <prvAddCurrentTaskToDelayedList+0xbc>
    4f2e:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4f32:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4f36:	9c 01       	movw	r18, r24
    4f38:	2e 5f       	subi	r18, 0xFE	; 254
    4f3a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f3c:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <pxDelayedTaskList>
    4f40:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <pxDelayedTaskList+0x1>
    4f44:	b9 01       	movw	r22, r18
    4f46:	0e 94 a7 11 	call	0x234e	; 0x234e <vListInsert>
    4f4a:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <xNextTaskUnblockTime>
    4f4e:	90 91 1f 08 	lds	r25, 0x081F	; 0x80081f <xNextTaskUnblockTime+0x1>
    4f52:	2b 81       	ldd	r18, Y+3	; 0x03
    4f54:	3c 81       	ldd	r19, Y+4	; 0x04
    4f56:	28 17       	cp	r18, r24
    4f58:	39 07       	cpc	r19, r25
    4f5a:	30 f4       	brcc	.+12     	; 0x4f68 <prvAddCurrentTaskToDelayedList+0xbc>
    4f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f60:	90 93 1f 08 	sts	0x081F, r25	; 0x80081f <xNextTaskUnblockTime+0x1>
    4f64:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <xNextTaskUnblockTime>
    4f68:	00 00       	nop
    4f6a:	27 96       	adiw	r28, 0x07	; 7
    4f6c:	0f b6       	in	r0, 0x3f	; 63
    4f6e:	f8 94       	cli
    4f70:	de bf       	out	0x3e, r29	; 62
    4f72:	0f be       	out	0x3f, r0	; 63
    4f74:	cd bf       	out	0x3d, r28	; 61
    4f76:	df 91       	pop	r29
    4f78:	cf 91       	pop	r28
    4f7a:	08 95       	ret

00004f7c <__divmodhi4>:
    4f7c:	97 fb       	bst	r25, 7
    4f7e:	07 2e       	mov	r0, r23
    4f80:	16 f4       	brtc	.+4      	; 0x4f86 <__divmodhi4+0xa>
    4f82:	00 94       	com	r0
    4f84:	07 d0       	rcall	.+14     	; 0x4f94 <__divmodhi4_neg1>
    4f86:	77 fd       	sbrc	r23, 7
    4f88:	09 d0       	rcall	.+18     	; 0x4f9c <__divmodhi4_neg2>
    4f8a:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <__udivmodhi4>
    4f8e:	07 fc       	sbrc	r0, 7
    4f90:	05 d0       	rcall	.+10     	; 0x4f9c <__divmodhi4_neg2>
    4f92:	3e f4       	brtc	.+14     	; 0x4fa2 <__divmodhi4_exit>

00004f94 <__divmodhi4_neg1>:
    4f94:	90 95       	com	r25
    4f96:	81 95       	neg	r24
    4f98:	9f 4f       	sbci	r25, 0xFF	; 255
    4f9a:	08 95       	ret

00004f9c <__divmodhi4_neg2>:
    4f9c:	70 95       	com	r23
    4f9e:	61 95       	neg	r22
    4fa0:	7f 4f       	sbci	r23, 0xFF	; 255

00004fa2 <__divmodhi4_exit>:
    4fa2:	08 95       	ret

00004fa4 <__udivmodsi4>:
    4fa4:	a1 e2       	ldi	r26, 0x21	; 33
    4fa6:	1a 2e       	mov	r1, r26
    4fa8:	aa 1b       	sub	r26, r26
    4faa:	bb 1b       	sub	r27, r27
    4fac:	fd 01       	movw	r30, r26
    4fae:	0d c0       	rjmp	.+26     	; 0x4fca <__udivmodsi4_ep>

00004fb0 <__udivmodsi4_loop>:
    4fb0:	aa 1f       	adc	r26, r26
    4fb2:	bb 1f       	adc	r27, r27
    4fb4:	ee 1f       	adc	r30, r30
    4fb6:	ff 1f       	adc	r31, r31
    4fb8:	a2 17       	cp	r26, r18
    4fba:	b3 07       	cpc	r27, r19
    4fbc:	e4 07       	cpc	r30, r20
    4fbe:	f5 07       	cpc	r31, r21
    4fc0:	20 f0       	brcs	.+8      	; 0x4fca <__udivmodsi4_ep>
    4fc2:	a2 1b       	sub	r26, r18
    4fc4:	b3 0b       	sbc	r27, r19
    4fc6:	e4 0b       	sbc	r30, r20
    4fc8:	f5 0b       	sbc	r31, r21

00004fca <__udivmodsi4_ep>:
    4fca:	66 1f       	adc	r22, r22
    4fcc:	77 1f       	adc	r23, r23
    4fce:	88 1f       	adc	r24, r24
    4fd0:	99 1f       	adc	r25, r25
    4fd2:	1a 94       	dec	r1
    4fd4:	69 f7       	brne	.-38     	; 0x4fb0 <__udivmodsi4_loop>
    4fd6:	60 95       	com	r22
    4fd8:	70 95       	com	r23
    4fda:	80 95       	com	r24
    4fdc:	90 95       	com	r25
    4fde:	9b 01       	movw	r18, r22
    4fe0:	ac 01       	movw	r20, r24
    4fe2:	bd 01       	movw	r22, r26
    4fe4:	cf 01       	movw	r24, r30
    4fe6:	08 95       	ret

00004fe8 <__udivmodhi4>:
    4fe8:	aa 1b       	sub	r26, r26
    4fea:	bb 1b       	sub	r27, r27
    4fec:	51 e1       	ldi	r21, 0x11	; 17
    4fee:	07 c0       	rjmp	.+14     	; 0x4ffe <__udivmodhi4_ep>

00004ff0 <__udivmodhi4_loop>:
    4ff0:	aa 1f       	adc	r26, r26
    4ff2:	bb 1f       	adc	r27, r27
    4ff4:	a6 17       	cp	r26, r22
    4ff6:	b7 07       	cpc	r27, r23
    4ff8:	10 f0       	brcs	.+4      	; 0x4ffe <__udivmodhi4_ep>
    4ffa:	a6 1b       	sub	r26, r22
    4ffc:	b7 0b       	sbc	r27, r23

00004ffe <__udivmodhi4_ep>:
    4ffe:	88 1f       	adc	r24, r24
    5000:	99 1f       	adc	r25, r25
    5002:	5a 95       	dec	r21
    5004:	a9 f7       	brne	.-22     	; 0x4ff0 <__udivmodhi4_loop>
    5006:	80 95       	com	r24
    5008:	90 95       	com	r25
    500a:	bc 01       	movw	r22, r24
    500c:	cd 01       	movw	r24, r26
    500e:	08 95       	ret

00005010 <memcpy>:
    5010:	fb 01       	movw	r30, r22
    5012:	dc 01       	movw	r26, r24
    5014:	02 c0       	rjmp	.+4      	; 0x501a <memcpy+0xa>
    5016:	01 90       	ld	r0, Z+
    5018:	0d 92       	st	X+, r0
    501a:	41 50       	subi	r20, 0x01	; 1
    501c:	50 40       	sbci	r21, 0x00	; 0
    501e:	d8 f7       	brcc	.-10     	; 0x5016 <memcpy+0x6>
    5020:	08 95       	ret

00005022 <memset>:
    5022:	dc 01       	movw	r26, r24
    5024:	01 c0       	rjmp	.+2      	; 0x5028 <memset+0x6>
    5026:	6d 93       	st	X+, r22
    5028:	41 50       	subi	r20, 0x01	; 1
    502a:	50 40       	sbci	r21, 0x00	; 0
    502c:	e0 f7       	brcc	.-8      	; 0x5026 <memset+0x4>
    502e:	08 95       	ret

00005030 <strlen>:
    5030:	fc 01       	movw	r30, r24
    5032:	01 90       	ld	r0, Z+
    5034:	00 20       	and	r0, r0
    5036:	e9 f7       	brne	.-6      	; 0x5032 <strlen+0x2>
    5038:	80 95       	com	r24
    503a:	90 95       	com	r25
    503c:	8e 0f       	add	r24, r30
    503e:	9f 1f       	adc	r25, r31
    5040:	08 95       	ret

00005042 <_exit>:
    5042:	f8 94       	cli

00005044 <__stop_program>:
    5044:	ff cf       	rjmp	.-2      	; 0x5044 <__stop_program>
