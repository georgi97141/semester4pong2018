
SEP4E-Two-player-pingPong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00005008  0000509c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005008  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006ad  00800176  00800176  00005112  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005112  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005144  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000668  00000000  00000000  00005184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005148  00000000  00000000  000057ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001880  00000000  00000000  0000a934  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004799  00000000  00000000  0000c1b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001804  00000000  00000000  00010950  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000212e  00000000  00000000  00012154  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000329c  00000000  00000000  00014282  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000588  00000000  00000000  0001751e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 67 15 	jmp	0x2ace	; 0x2ace <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__vector_16>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__vector_20>
      54:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <__vector_21>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__vector_28>
      74:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__vector_29>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e8 e0       	ldi	r30, 0x08	; 8
      90:	f0 e5       	ldi	r31, 0x50	; 80
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a6 37       	cpi	r26, 0x76	; 118
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	28 e0       	ldi	r18, 0x08	; 8
      a0:	a6 e7       	ldi	r26, 0x76	; 118
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a3 32       	cpi	r26, 0x23	; 35
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 dd 09 	call	0x13ba	; 0x13ba <main>
      b2:	0c 94 02 28 	jmp	0x5004	; 0x5004 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <byte_stuff>:
#include "byteStuffing.h"

uint8_t byte_stuff(uint8_t *data_buff, uint8_t data_buff_size, uint8_t *frame_buff, uint8_t	frame_buff_size)
{
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	cd b7       	in	r28, 0x3d	; 61
      c0:	de b7       	in	r29, 0x3e	; 62
      c2:	2c 97       	sbiw	r28, 0x0c	; 12
      c4:	0f b6       	in	r0, 0x3f	; 63
      c6:	f8 94       	cli
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	0f be       	out	0x3f, r0	; 63
      cc:	cd bf       	out	0x3d, r28	; 61
      ce:	98 87       	std	Y+8, r25	; 0x08
      d0:	8f 83       	std	Y+7, r24	; 0x07
      d2:	69 87       	std	Y+9, r22	; 0x09
      d4:	5b 87       	std	Y+11, r21	; 0x0b
      d6:	4a 87       	std	Y+10, r20	; 0x0a
      d8:	2c 87       	std	Y+12, r18	; 0x0c
	uint8_t const *frame_buff_start = frame_buff;
      da:	8a 85       	ldd	r24, Y+10	; 0x0a
      dc:	9b 85       	ldd	r25, Y+11	; 0x0b
      de:	9a 83       	std	Y+2, r25	; 0x02
      e0:	89 83       	std	Y+1, r24	; 0x01
	uint8_t const *frame_buff_end = frame_buff + frame_buff_size;
      e2:	8c 85       	ldd	r24, Y+12	; 0x0c
      e4:	88 2f       	mov	r24, r24
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	2a 85       	ldd	r18, Y+10	; 0x0a
      ea:	3b 85       	ldd	r19, Y+11	; 0x0b
      ec:	82 0f       	add	r24, r18
      ee:	93 1f       	adc	r25, r19
      f0:	9c 83       	std	Y+4, r25	; 0x04
      f2:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t const *data_buff_end = data_buff + data_buff_size;
      f4:	89 85       	ldd	r24, Y+9	; 0x09
      f6:	88 2f       	mov	r24, r24
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	2f 81       	ldd	r18, Y+7	; 0x07
      fc:	38 85       	ldd	r19, Y+8	; 0x08
      fe:	82 0f       	add	r24, r18
     100:	93 1f       	adc	r25, r19
     102:	9e 83       	std	Y+6, r25	; 0x06
     104:	8d 83       	std	Y+5, r24	; 0x05
	while (data_buff < data_buff_end && frame_buff < frame_buff_end)
     106:	69 c0       	rjmp	.+210    	; 0x1da <byte_stuff+0x120>
	{
		switch (*data_buff)
     108:	8f 81       	ldd	r24, Y+7	; 0x07
     10a:	98 85       	ldd	r25, Y+8	; 0x08
     10c:	fc 01       	movw	r30, r24
     10e:	80 81       	ld	r24, Z
     110:	88 2f       	mov	r24, r24
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	00 97       	sbiw	r24, 0x00	; 0
     116:	21 f0       	breq	.+8      	; 0x120 <byte_stuff+0x66>
     118:	8f 3f       	cpi	r24, 0xFF	; 255
     11a:	91 05       	cpc	r25, r1
     11c:	41 f1       	breq	.+80     	; 0x16e <byte_stuff+0xb4>
     11e:	4a c0       	rjmp	.+148    	; 0x1b4 <byte_stuff+0xfa>
		{
		case LINK_ESC:
		{
			if (frame_buff < (frame_buff_end - 1))
     120:	8b 81       	ldd	r24, Y+3	; 0x03
     122:	9c 81       	ldd	r25, Y+4	; 0x04
     124:	9c 01       	movw	r18, r24
     126:	21 50       	subi	r18, 0x01	; 1
     128:	31 09       	sbc	r19, r1
     12a:	8a 85       	ldd	r24, Y+10	; 0x0a
     12c:	9b 85       	ldd	r25, Y+11	; 0x0b
     12e:	82 17       	cp	r24, r18
     130:	93 07       	cpc	r25, r19
     132:	d8 f4       	brcc	.+54     	; 0x16a <byte_stuff+0xb0>
			{
				*frame_buff++ = *data_buff;
     134:	8a 85       	ldd	r24, Y+10	; 0x0a
     136:	9b 85       	ldd	r25, Y+11	; 0x0b
     138:	9c 01       	movw	r18, r24
     13a:	2f 5f       	subi	r18, 0xFF	; 255
     13c:	3f 4f       	sbci	r19, 0xFF	; 255
     13e:	3b 87       	std	Y+11, r19	; 0x0b
     140:	2a 87       	std	Y+10, r18	; 0x0a
     142:	2f 81       	ldd	r18, Y+7	; 0x07
     144:	38 85       	ldd	r19, Y+8	; 0x08
     146:	f9 01       	movw	r30, r18
     148:	20 81       	ld	r18, Z
     14a:	fc 01       	movw	r30, r24
     14c:	20 83       	st	Z, r18
				*frame_buff++ = *data_buff;
     14e:	8a 85       	ldd	r24, Y+10	; 0x0a
     150:	9b 85       	ldd	r25, Y+11	; 0x0b
     152:	9c 01       	movw	r18, r24
     154:	2f 5f       	subi	r18, 0xFF	; 255
     156:	3f 4f       	sbci	r19, 0xFF	; 255
     158:	3b 87       	std	Y+11, r19	; 0x0b
     15a:	2a 87       	std	Y+10, r18	; 0x0a
     15c:	2f 81       	ldd	r18, Y+7	; 0x07
     15e:	38 85       	ldd	r19, Y+8	; 0x08
     160:	f9 01       	movw	r30, r18
     162:	20 81       	ld	r18, Z
     164:	fc 01       	movw	r30, r24
     166:	20 83       	st	Z, r18
			{
				//no room
				return 0;
			}
		}
		break;
     168:	33 c0       	rjmp	.+102    	; 0x1d0 <byte_stuff+0x116>
				*frame_buff++ = *data_buff;
			}
			else
			{
				//no room
				return 0;
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	4d c0       	rjmp	.+154    	; 0x208 <byte_stuff+0x14e>
			}
		}
		break;
		case LINK_FLAG:
		{
			if (frame_buff < (frame_buff_end - 1))
     16e:	8b 81       	ldd	r24, Y+3	; 0x03
     170:	9c 81       	ldd	r25, Y+4	; 0x04
     172:	9c 01       	movw	r18, r24
     174:	21 50       	subi	r18, 0x01	; 1
     176:	31 09       	sbc	r19, r1
     178:	8a 85       	ldd	r24, Y+10	; 0x0a
     17a:	9b 85       	ldd	r25, Y+11	; 0x0b
     17c:	82 17       	cp	r24, r18
     17e:	93 07       	cpc	r25, r19
     180:	b8 f4       	brcc	.+46     	; 0x1b0 <byte_stuff+0xf6>
			{
				*frame_buff++ = LINK_ESC;
     182:	8a 85       	ldd	r24, Y+10	; 0x0a
     184:	9b 85       	ldd	r25, Y+11	; 0x0b
     186:	9c 01       	movw	r18, r24
     188:	2f 5f       	subi	r18, 0xFF	; 255
     18a:	3f 4f       	sbci	r19, 0xFF	; 255
     18c:	3b 87       	std	Y+11, r19	; 0x0b
     18e:	2a 87       	std	Y+10, r18	; 0x0a
     190:	fc 01       	movw	r30, r24
     192:	10 82       	st	Z, r1
				*frame_buff++ = *data_buff;
     194:	8a 85       	ldd	r24, Y+10	; 0x0a
     196:	9b 85       	ldd	r25, Y+11	; 0x0b
     198:	9c 01       	movw	r18, r24
     19a:	2f 5f       	subi	r18, 0xFF	; 255
     19c:	3f 4f       	sbci	r19, 0xFF	; 255
     19e:	3b 87       	std	Y+11, r19	; 0x0b
     1a0:	2a 87       	std	Y+10, r18	; 0x0a
     1a2:	2f 81       	ldd	r18, Y+7	; 0x07
     1a4:	38 85       	ldd	r19, Y+8	; 0x08
     1a6:	f9 01       	movw	r30, r18
     1a8:	20 81       	ld	r18, Z
     1aa:	fc 01       	movw	r30, r24
     1ac:	20 83       	st	Z, r18
			{
				//no room
				return 0;
			}
		}
		break;
     1ae:	10 c0       	rjmp	.+32     	; 0x1d0 <byte_stuff+0x116>
				*frame_buff++ = *data_buff;
			}
			else
			{
				//no room
				return 0;
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	2a c0       	rjmp	.+84     	; 0x208 <byte_stuff+0x14e>
			}
		}
		break;
		default:
		{
			*frame_buff++ = *data_buff;
     1b4:	8a 85       	ldd	r24, Y+10	; 0x0a
     1b6:	9b 85       	ldd	r25, Y+11	; 0x0b
     1b8:	9c 01       	movw	r18, r24
     1ba:	2f 5f       	subi	r18, 0xFF	; 255
     1bc:	3f 4f       	sbci	r19, 0xFF	; 255
     1be:	3b 87       	std	Y+11, r19	; 0x0b
     1c0:	2a 87       	std	Y+10, r18	; 0x0a
     1c2:	2f 81       	ldd	r18, Y+7	; 0x07
     1c4:	38 85       	ldd	r19, Y+8	; 0x08
     1c6:	f9 01       	movw	r30, r18
     1c8:	20 81       	ld	r18, Z
     1ca:	fc 01       	movw	r30, r24
     1cc:	20 83       	st	Z, r18
		}
		break;
     1ce:	00 00       	nop
		}
		data_buff++;
     1d0:	8f 81       	ldd	r24, Y+7	; 0x07
     1d2:	98 85       	ldd	r25, Y+8	; 0x08
     1d4:	01 96       	adiw	r24, 0x01	; 1
     1d6:	98 87       	std	Y+8, r25	; 0x08
     1d8:	8f 83       	std	Y+7, r24	; 0x07
uint8_t byte_stuff(uint8_t *data_buff, uint8_t data_buff_size, uint8_t *frame_buff, uint8_t	frame_buff_size)
{
	uint8_t const *frame_buff_start = frame_buff;
	uint8_t const *frame_buff_end = frame_buff + frame_buff_size;
	uint8_t const *data_buff_end = data_buff + data_buff_size;
	while (data_buff < data_buff_end && frame_buff < frame_buff_end)
     1da:	2f 81       	ldd	r18, Y+7	; 0x07
     1dc:	38 85       	ldd	r19, Y+8	; 0x08
     1de:	8d 81       	ldd	r24, Y+5	; 0x05
     1e0:	9e 81       	ldd	r25, Y+6	; 0x06
     1e2:	28 17       	cp	r18, r24
     1e4:	39 07       	cpc	r19, r25
     1e6:	40 f4       	brcc	.+16     	; 0x1f8 <byte_stuff+0x13e>
     1e8:	2a 85       	ldd	r18, Y+10	; 0x0a
     1ea:	3b 85       	ldd	r19, Y+11	; 0x0b
     1ec:	8b 81       	ldd	r24, Y+3	; 0x03
     1ee:	9c 81       	ldd	r25, Y+4	; 0x04
     1f0:	28 17       	cp	r18, r24
     1f2:	39 07       	cpc	r19, r25
     1f4:	08 f4       	brcc	.+2      	; 0x1f8 <byte_stuff+0x13e>
     1f6:	88 cf       	rjmp	.-240    	; 0x108 <byte_stuff+0x4e>
		break;
		}
		data_buff++;

	}
	return frame_buff - frame_buff_start;
     1f8:	2a 85       	ldd	r18, Y+10	; 0x0a
     1fa:	3b 85       	ldd	r19, Y+11	; 0x0b
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
     1fe:	9a 81       	ldd	r25, Y+2	; 0x02
     200:	a9 01       	movw	r20, r18
     202:	48 1b       	sub	r20, r24
     204:	59 0b       	sbc	r21, r25
     206:	ca 01       	movw	r24, r20
}
     208:	2c 96       	adiw	r28, 0x0c	; 12
     20a:	0f b6       	in	r0, 0x3f	; 63
     20c:	f8 94       	cli
     20e:	de bf       	out	0x3e, r29	; 62
     210:	0f be       	out	0x3f, r0	; 63
     212:	cd bf       	out	0x3d, r28	; 61
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	08 95       	ret

0000021a <byte_unstuff>:
uint8_t byte_unstuff(uint8_t *dst_buffer, uint8_t dst_buffer_size, uint8_t *link_data_buffer, uint8_t link_data_buffer_size)
{
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
     222:	2c 97       	sbiw	r28, 0x0c	; 12
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	f8 94       	cli
     228:	de bf       	out	0x3e, r29	; 62
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	cd bf       	out	0x3d, r28	; 61
     22e:	98 87       	std	Y+8, r25	; 0x08
     230:	8f 83       	std	Y+7, r24	; 0x07
     232:	69 87       	std	Y+9, r22	; 0x09
     234:	5b 87       	std	Y+11, r21	; 0x0b
     236:	4a 87       	std	Y+10, r20	; 0x0a
     238:	2c 87       	std	Y+12, r18	; 0x0c
	uint8_t const *dst_buffer_start = dst_buffer;
     23a:	8f 81       	ldd	r24, Y+7	; 0x07
     23c:	98 85       	ldd	r25, Y+8	; 0x08
     23e:	9a 83       	std	Y+2, r25	; 0x02
     240:	89 83       	std	Y+1, r24	; 0x01
	uint8_t const *dst_buffer_end = dst_buffer + dst_buffer_size;
     242:	89 85       	ldd	r24, Y+9	; 0x09
     244:	88 2f       	mov	r24, r24
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	2f 81       	ldd	r18, Y+7	; 0x07
     24a:	38 85       	ldd	r19, Y+8	; 0x08
     24c:	82 0f       	add	r24, r18
     24e:	93 1f       	adc	r25, r19
     250:	9c 83       	std	Y+4, r25	; 0x04
     252:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t const *link_data_buffer_end = link_data_buffer + link_data_buffer_size;
     254:	8c 85       	ldd	r24, Y+12	; 0x0c
     256:	88 2f       	mov	r24, r24
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	2a 85       	ldd	r18, Y+10	; 0x0a
     25c:	3b 85       	ldd	r19, Y+11	; 0x0b
     25e:	82 0f       	add	r24, r18
     260:	93 1f       	adc	r25, r19
     262:	9e 83       	std	Y+6, r25	; 0x06
     264:	8d 83       	std	Y+5, r24	; 0x05
	while (dst_buffer < dst_buffer_end && link_data_buffer < link_data_buffer_end)
     266:	39 c0       	rjmp	.+114    	; 0x2da <byte_unstuff+0xc0>
	{
		if (*link_data_buffer == LINK_ESC)
     268:	8a 85       	ldd	r24, Y+10	; 0x0a
     26a:	9b 85       	ldd	r25, Y+11	; 0x0b
     26c:	fc 01       	movw	r30, r24
     26e:	80 81       	ld	r24, Z
     270:	88 23       	and	r24, r24
     272:	09 f5       	brne	.+66     	; 0x2b6 <byte_unstuff+0x9c>
		{
			link_data_buffer++;
     274:	8a 85       	ldd	r24, Y+10	; 0x0a
     276:	9b 85       	ldd	r25, Y+11	; 0x0b
     278:	01 96       	adiw	r24, 0x01	; 1
     27a:	9b 87       	std	Y+11, r25	; 0x0b
     27c:	8a 87       	std	Y+10, r24	; 0x0a
			if ((*link_data_buffer == LINK_ESC) || (*link_data_buffer == LINK_FLAG))
     27e:	8a 85       	ldd	r24, Y+10	; 0x0a
     280:	9b 85       	ldd	r25, Y+11	; 0x0b
     282:	fc 01       	movw	r30, r24
     284:	80 81       	ld	r24, Z
     286:	88 23       	and	r24, r24
     288:	31 f0       	breq	.+12     	; 0x296 <byte_unstuff+0x7c>
     28a:	8a 85       	ldd	r24, Y+10	; 0x0a
     28c:	9b 85       	ldd	r25, Y+11	; 0x0b
     28e:	fc 01       	movw	r30, r24
     290:	80 81       	ld	r24, Z
     292:	8f 3f       	cpi	r24, 0xFF	; 255
     294:	71 f4       	brne	.+28     	; 0x2b2 <byte_unstuff+0x98>
				*dst_buffer++ = *link_data_buffer;
     296:	8f 81       	ldd	r24, Y+7	; 0x07
     298:	98 85       	ldd	r25, Y+8	; 0x08
     29a:	9c 01       	movw	r18, r24
     29c:	2f 5f       	subi	r18, 0xFF	; 255
     29e:	3f 4f       	sbci	r19, 0xFF	; 255
     2a0:	38 87       	std	Y+8, r19	; 0x08
     2a2:	2f 83       	std	Y+7, r18	; 0x07
     2a4:	2a 85       	ldd	r18, Y+10	; 0x0a
     2a6:	3b 85       	ldd	r19, Y+11	; 0x0b
     2a8:	f9 01       	movw	r30, r18
     2aa:	20 81       	ld	r18, Z
     2ac:	fc 01       	movw	r30, r24
     2ae:	20 83       	st	Z, r18
     2b0:	0f c0       	rjmp	.+30     	; 0x2d0 <byte_unstuff+0xb6>
			else
				return 0;
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	29 c0       	rjmp	.+82     	; 0x308 <byte_unstuff+0xee>
		}
		else
			*dst_buffer++ = *link_data_buffer;
     2b6:	8f 81       	ldd	r24, Y+7	; 0x07
     2b8:	98 85       	ldd	r25, Y+8	; 0x08
     2ba:	9c 01       	movw	r18, r24
     2bc:	2f 5f       	subi	r18, 0xFF	; 255
     2be:	3f 4f       	sbci	r19, 0xFF	; 255
     2c0:	38 87       	std	Y+8, r19	; 0x08
     2c2:	2f 83       	std	Y+7, r18	; 0x07
     2c4:	2a 85       	ldd	r18, Y+10	; 0x0a
     2c6:	3b 85       	ldd	r19, Y+11	; 0x0b
     2c8:	f9 01       	movw	r30, r18
     2ca:	20 81       	ld	r18, Z
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 83       	st	Z, r18

		link_data_buffer++;
     2d0:	8a 85       	ldd	r24, Y+10	; 0x0a
     2d2:	9b 85       	ldd	r25, Y+11	; 0x0b
     2d4:	01 96       	adiw	r24, 0x01	; 1
     2d6:	9b 87       	std	Y+11, r25	; 0x0b
     2d8:	8a 87       	std	Y+10, r24	; 0x0a
uint8_t byte_unstuff(uint8_t *dst_buffer, uint8_t dst_buffer_size, uint8_t *link_data_buffer, uint8_t link_data_buffer_size)
{
	uint8_t const *dst_buffer_start = dst_buffer;
	uint8_t const *dst_buffer_end = dst_buffer + dst_buffer_size;
	uint8_t const *link_data_buffer_end = link_data_buffer + link_data_buffer_size;
	while (dst_buffer < dst_buffer_end && link_data_buffer < link_data_buffer_end)
     2da:	2f 81       	ldd	r18, Y+7	; 0x07
     2dc:	38 85       	ldd	r19, Y+8	; 0x08
     2de:	8b 81       	ldd	r24, Y+3	; 0x03
     2e0:	9c 81       	ldd	r25, Y+4	; 0x04
     2e2:	28 17       	cp	r18, r24
     2e4:	39 07       	cpc	r19, r25
     2e6:	40 f4       	brcc	.+16     	; 0x2f8 <byte_unstuff+0xde>
     2e8:	2a 85       	ldd	r18, Y+10	; 0x0a
     2ea:	3b 85       	ldd	r19, Y+11	; 0x0b
     2ec:	8d 81       	ldd	r24, Y+5	; 0x05
     2ee:	9e 81       	ldd	r25, Y+6	; 0x06
     2f0:	28 17       	cp	r18, r24
     2f2:	39 07       	cpc	r19, r25
     2f4:	08 f4       	brcc	.+2      	; 0x2f8 <byte_unstuff+0xde>
     2f6:	b8 cf       	rjmp	.-144    	; 0x268 <byte_unstuff+0x4e>
		else
			*dst_buffer++ = *link_data_buffer;

		link_data_buffer++;
	}
	return dst_buffer - dst_buffer_start;
     2f8:	2f 81       	ldd	r18, Y+7	; 0x07
     2fa:	38 85       	ldd	r19, Y+8	; 0x08
     2fc:	89 81       	ldd	r24, Y+1	; 0x01
     2fe:	9a 81       	ldd	r25, Y+2	; 0x02
     300:	a9 01       	movw	r20, r18
     302:	48 1b       	sub	r20, r24
     304:	59 0b       	sbc	r21, r25
     306:	ca 01       	movw	r24, r20
     308:	2c 96       	adiw	r28, 0x0c	; 12
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	f8 94       	cli
     30e:	de bf       	out	0x3e, r29	; 62
     310:	0f be       	out	0x3f, r0	; 63
     312:	cd bf       	out	0x3d, r28	; 61
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <bat_move>:
bool score=false;
int* bata[3];
int* batb[3];

void bat_move(Player_t player, Direction_t direction)
{
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	00 d0       	rcall	.+0      	; 0x320 <bat_move+0x6>
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	89 83       	std	Y+1, r24	; 0x01
     326:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(direction)
     328:	8a 81       	ldd	r24, Y+2	; 0x02
     32a:	88 2f       	mov	r24, r24
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	81 30       	cpi	r24, 0x01	; 1
     330:	91 05       	cpc	r25, r1
     332:	09 f4       	brne	.+2      	; 0x336 <bat_move+0x1c>
     334:	73 c0       	rjmp	.+230    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     336:	02 97       	sbiw	r24, 0x02	; 2
     338:	09 f0       	breq	.+2      	; 0x33c <bat_move+0x22>
		bats[player]->pixels[1] -=14;
		bats[player]->pixels[2] -=14;}
		break;
	}

}
     33a:	e3 c0       	rjmp	.+454    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
{
	
	switch(direction)
	{ //interrupt messing the exec time. no mutex
		case D_UP:
		if( (player==PL_ONE&& bats[player]->pixels[0]<127 )|| (player==PL_TWO && bats[player]->pixels[0]<138)){
     33c:	89 81       	ldd	r24, Y+1	; 0x01
     33e:	88 23       	and	r24, r24
     340:	71 f4       	brne	.+28     	; 0x35e <bat_move+0x44>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 2f       	mov	r24, r24
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	88 0f       	add	r24, r24
     34a:	99 1f       	adc	r25, r25
     34c:	8a 58       	subi	r24, 0x8A	; 138
     34e:	9e 4f       	sbci	r25, 0xFE	; 254
     350:	fc 01       	movw	r30, r24
     352:	80 81       	ld	r24, Z
     354:	91 81       	ldd	r25, Z+1	; 0x01
     356:	fc 01       	movw	r30, r24
     358:	81 81       	ldd	r24, Z+1	; 0x01
     35a:	8f 37       	cpi	r24, 0x7F	; 127
     35c:	98 f0       	brcs	.+38     	; 0x384 <bat_move+0x6a>
     35e:	89 81       	ldd	r24, Y+1	; 0x01
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	09 f0       	breq	.+2      	; 0x366 <bat_move+0x4c>
     364:	cb c0       	rjmp	.+406    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	88 2f       	mov	r24, r24
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	88 0f       	add	r24, r24
     36e:	99 1f       	adc	r25, r25
     370:	8a 58       	subi	r24, 0x8A	; 138
     372:	9e 4f       	sbci	r25, 0xFE	; 254
     374:	fc 01       	movw	r30, r24
     376:	80 81       	ld	r24, Z
     378:	91 81       	ldd	r25, Z+1	; 0x01
     37a:	fc 01       	movw	r30, r24
     37c:	81 81       	ldd	r24, Z+1	; 0x01
     37e:	8a 38       	cpi	r24, 0x8A	; 138
     380:	08 f0       	brcs	.+2      	; 0x384 <bat_move+0x6a>
     382:	bc c0       	rjmp	.+376    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
		bats[player]->pixels[0] += 14;
     384:	89 81       	ldd	r24, Y+1	; 0x01
     386:	88 2f       	mov	r24, r24
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	88 0f       	add	r24, r24
     38c:	99 1f       	adc	r25, r25
     38e:	8a 58       	subi	r24, 0x8A	; 138
     390:	9e 4f       	sbci	r25, 0xFE	; 254
     392:	fc 01       	movw	r30, r24
     394:	80 81       	ld	r24, Z
     396:	91 81       	ldd	r25, Z+1	; 0x01
     398:	29 81       	ldd	r18, Y+1	; 0x01
     39a:	22 2f       	mov	r18, r18
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	22 0f       	add	r18, r18
     3a0:	33 1f       	adc	r19, r19
     3a2:	2a 58       	subi	r18, 0x8A	; 138
     3a4:	3e 4f       	sbci	r19, 0xFE	; 254
     3a6:	f9 01       	movw	r30, r18
     3a8:	20 81       	ld	r18, Z
     3aa:	31 81       	ldd	r19, Z+1	; 0x01
     3ac:	f9 01       	movw	r30, r18
     3ae:	21 81       	ldd	r18, Z+1	; 0x01
     3b0:	22 5f       	subi	r18, 0xF2	; 242
     3b2:	fc 01       	movw	r30, r24
     3b4:	21 83       	std	Z+1, r18	; 0x01
		bats[player]->pixels[1] +=14;
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	88 2f       	mov	r24, r24
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	88 0f       	add	r24, r24
     3be:	99 1f       	adc	r25, r25
     3c0:	8a 58       	subi	r24, 0x8A	; 138
     3c2:	9e 4f       	sbci	r25, 0xFE	; 254
     3c4:	fc 01       	movw	r30, r24
     3c6:	80 81       	ld	r24, Z
     3c8:	91 81       	ldd	r25, Z+1	; 0x01
     3ca:	29 81       	ldd	r18, Y+1	; 0x01
     3cc:	22 2f       	mov	r18, r18
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	22 0f       	add	r18, r18
     3d2:	33 1f       	adc	r19, r19
     3d4:	2a 58       	subi	r18, 0x8A	; 138
     3d6:	3e 4f       	sbci	r19, 0xFE	; 254
     3d8:	f9 01       	movw	r30, r18
     3da:	20 81       	ld	r18, Z
     3dc:	31 81       	ldd	r19, Z+1	; 0x01
     3de:	f9 01       	movw	r30, r18
     3e0:	22 81       	ldd	r18, Z+2	; 0x02
     3e2:	22 5f       	subi	r18, 0xF2	; 242
     3e4:	fc 01       	movw	r30, r24
     3e6:	22 83       	std	Z+2, r18	; 0x02
		bats[player]->pixels[2] +=14;
     3e8:	89 81       	ldd	r24, Y+1	; 0x01
     3ea:	88 2f       	mov	r24, r24
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	88 0f       	add	r24, r24
     3f0:	99 1f       	adc	r25, r25
     3f2:	8a 58       	subi	r24, 0x8A	; 138
     3f4:	9e 4f       	sbci	r25, 0xFE	; 254
     3f6:	fc 01       	movw	r30, r24
     3f8:	80 81       	ld	r24, Z
     3fa:	91 81       	ldd	r25, Z+1	; 0x01
     3fc:	29 81       	ldd	r18, Y+1	; 0x01
     3fe:	22 2f       	mov	r18, r18
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	22 0f       	add	r18, r18
     404:	33 1f       	adc	r19, r19
     406:	2a 58       	subi	r18, 0x8A	; 138
     408:	3e 4f       	sbci	r19, 0xFE	; 254
     40a:	f9 01       	movw	r30, r18
     40c:	20 81       	ld	r18, Z
     40e:	31 81       	ldd	r19, Z+1	; 0x01
     410:	f9 01       	movw	r30, r18
     412:	23 81       	ldd	r18, Z+3	; 0x03
     414:	22 5f       	subi	r18, 0xF2	; 242
     416:	fc 01       	movw	r30, r24
     418:	23 83       	std	Z+3, r18	; 0x03
		}
		
		break;
     41a:	70 c0       	rjmp	.+224    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
		case D_DOWN:
		if((player==PL_ONE&& bats[player]->pixels[2]>1)||(player==PL_TWO&& bats[player]->pixels[2]>12)){
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	88 23       	and	r24, r24
     420:	71 f4       	brne	.+28     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	88 2f       	mov	r24, r24
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	8a 58       	subi	r24, 0x8A	; 138
     42e:	9e 4f       	sbci	r25, 0xFE	; 254
     430:	fc 01       	movw	r30, r24
     432:	80 81       	ld	r24, Z
     434:	91 81       	ldd	r25, Z+1	; 0x01
     436:	fc 01       	movw	r30, r24
     438:	83 81       	ldd	r24, Z+3	; 0x03
     43a:	82 30       	cpi	r24, 0x02	; 2
     43c:	98 f4       	brcc	.+38     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	81 30       	cpi	r24, 0x01	; 1
     442:	09 f0       	breq	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     444:	5d c0       	rjmp	.+186    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	88 2f       	mov	r24, r24
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	88 0f       	add	r24, r24
     44e:	99 1f       	adc	r25, r25
     450:	8a 58       	subi	r24, 0x8A	; 138
     452:	9e 4f       	sbci	r25, 0xFE	; 254
     454:	fc 01       	movw	r30, r24
     456:	80 81       	ld	r24, Z
     458:	91 81       	ldd	r25, Z+1	; 0x01
     45a:	fc 01       	movw	r30, r24
     45c:	83 81       	ldd	r24, Z+3	; 0x03
     45e:	8d 30       	cpi	r24, 0x0D	; 13
     460:	08 f4       	brcc	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     462:	4e c0       	rjmp	.+156    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		bats[player]->pixels[0] -= 14;
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	88 2f       	mov	r24, r24
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	8a 58       	subi	r24, 0x8A	; 138
     470:	9e 4f       	sbci	r25, 0xFE	; 254
     472:	fc 01       	movw	r30, r24
     474:	80 81       	ld	r24, Z
     476:	91 81       	ldd	r25, Z+1	; 0x01
     478:	29 81       	ldd	r18, Y+1	; 0x01
     47a:	22 2f       	mov	r18, r18
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	22 0f       	add	r18, r18
     480:	33 1f       	adc	r19, r19
     482:	2a 58       	subi	r18, 0x8A	; 138
     484:	3e 4f       	sbci	r19, 0xFE	; 254
     486:	f9 01       	movw	r30, r18
     488:	20 81       	ld	r18, Z
     48a:	31 81       	ldd	r19, Z+1	; 0x01
     48c:	f9 01       	movw	r30, r18
     48e:	21 81       	ldd	r18, Z+1	; 0x01
     490:	2e 50       	subi	r18, 0x0E	; 14
     492:	fc 01       	movw	r30, r24
     494:	21 83       	std	Z+1, r18	; 0x01
		bats[player]->pixels[1] -=14;
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	88 2f       	mov	r24, r24
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	88 0f       	add	r24, r24
     49e:	99 1f       	adc	r25, r25
     4a0:	8a 58       	subi	r24, 0x8A	; 138
     4a2:	9e 4f       	sbci	r25, 0xFE	; 254
     4a4:	fc 01       	movw	r30, r24
     4a6:	80 81       	ld	r24, Z
     4a8:	91 81       	ldd	r25, Z+1	; 0x01
     4aa:	29 81       	ldd	r18, Y+1	; 0x01
     4ac:	22 2f       	mov	r18, r18
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	22 0f       	add	r18, r18
     4b2:	33 1f       	adc	r19, r19
     4b4:	2a 58       	subi	r18, 0x8A	; 138
     4b6:	3e 4f       	sbci	r19, 0xFE	; 254
     4b8:	f9 01       	movw	r30, r18
     4ba:	20 81       	ld	r18, Z
     4bc:	31 81       	ldd	r19, Z+1	; 0x01
     4be:	f9 01       	movw	r30, r18
     4c0:	22 81       	ldd	r18, Z+2	; 0x02
     4c2:	2e 50       	subi	r18, 0x0E	; 14
     4c4:	fc 01       	movw	r30, r24
     4c6:	22 83       	std	Z+2, r18	; 0x02
		bats[player]->pixels[2] -=14;}
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	88 2f       	mov	r24, r24
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	8a 58       	subi	r24, 0x8A	; 138
     4d4:	9e 4f       	sbci	r25, 0xFE	; 254
     4d6:	fc 01       	movw	r30, r24
     4d8:	80 81       	ld	r24, Z
     4da:	91 81       	ldd	r25, Z+1	; 0x01
     4dc:	29 81       	ldd	r18, Y+1	; 0x01
     4de:	22 2f       	mov	r18, r18
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	22 0f       	add	r18, r18
     4e4:	33 1f       	adc	r19, r19
     4e6:	2a 58       	subi	r18, 0x8A	; 138
     4e8:	3e 4f       	sbci	r19, 0xFE	; 254
     4ea:	f9 01       	movw	r30, r18
     4ec:	20 81       	ld	r18, Z
     4ee:	31 81       	ldd	r19, Z+1	; 0x01
     4f0:	f9 01       	movw	r30, r18
     4f2:	23 81       	ldd	r18, Z+3	; 0x03
     4f4:	2e 50       	subi	r18, 0x0E	; 14
     4f6:	fc 01       	movw	r30, r24
     4f8:	23 83       	std	Z+3, r18	; 0x03
		break;
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		bats[player]->pixels[0] += 14;
		bats[player]->pixels[1] +=14;
		bats[player]->pixels[2] +=14;
		}
		
		break;
     4fc:	00 00       	nop
     4fe:	01 c0       	rjmp	.+2      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		case D_DOWN:
		if((player==PL_ONE&& bats[player]->pixels[2]>1)||(player==PL_TWO&& bats[player]->pixels[2]>12)){
		bats[player]->pixels[0] -= 14;
		bats[player]->pixels[1] -=14;
		bats[player]->pixels[2] -=14;}
		break;
     500:	00 00       	nop
	}

}
     502:	00 00       	nop
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <restart_game>:

void restart_game()
{
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
	if(!run_game)
     516:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <run_game>
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	89 27       	eor	r24, r25
     51e:	88 23       	and	r24, r24
     520:	a9 f0       	breq	.+42     	; 0x54c <restart_game+0x3e>
	{	score=false;
     522:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <score>
		scoreone = 0;
     526:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <scoreone+0x1>
     52a:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <scoreone>
		scoretwo=0;
     52e:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <scoretwo+0x1>
     532:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <scoretwo>
		run_game = true;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <run_game>
		com_send_string("Game is restarted!");
     53c:	86 e2       	ldi	r24, 0x26	; 38
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	0e 94 c9 02 	call	0x592	; 0x592 <com_send_string>
		init_game(bats);
     544:	86 e7       	ldi	r24, 0x76	; 118
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	0e 94 a9 05 	call	0xb52	; 0xb52 <init_game>
	    
	}
}
     54c:	00 00       	nop
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <end_game>:
void end_game()
{
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
	run_game = false;
     55c:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <run_game>
}
     560:	00 00       	nop
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <xy_to_pixel_id>:

uint8_t xy_to_pixel_id(uint8_t x, uint8_t y)
{
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	00 d0       	rcall	.+0      	; 0x56e <xy_to_pixel_id+0x6>
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	89 83       	std	Y+1, r24	; 0x01
     574:	6a 83       	std	Y+2, r22	; 0x02
	return x + y * SCREEN_DIMENSION_X;
     576:	8a 81       	ldd	r24, Y+2	; 0x02
     578:	88 0f       	add	r24, r24
     57a:	98 2f       	mov	r25, r24
     57c:	99 0f       	add	r25, r25
     57e:	99 0f       	add	r25, r25
     580:	99 0f       	add	r25, r25
     582:	98 1b       	sub	r25, r24
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	89 0f       	add	r24, r25
}
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <com_send_string>:

void com_send_string(char *str)
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	00 d0       	rcall	.+0      	; 0x598 <com_send_string+0x6>
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
     59c:	9a 83       	std	Y+2, r25	; 0x02
     59e:	89 83       	std	Y+1, r24	; 0x01
	send_bytes(str, strlen(str)+1);
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	9a 81       	ldd	r25, Y+2	; 0x02
     5a4:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <strlen>
     5a8:	21 e0       	ldi	r18, 0x01	; 1
     5aa:	28 0f       	add	r18, r24
     5ac:	89 81       	ldd	r24, Y+1	; 0x01
     5ae:	9a 81       	ldd	r25, Y+2	; 0x02
     5b0:	62 2f       	mov	r22, r18
     5b2:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <send_bytes>
}
     5b6:	00 00       	nop
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	08 95       	ret

000005c2 <game_renderer_task>:


void game_renderer_task(void *pvParameters)
{
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
     5ce:	2a 97       	sbiw	r28, 0x0a	; 10
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	9a 87       	std	Y+10, r25	; 0x0a
     5dc:	89 87       	std	Y+9, r24	; 0x09
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	//vTaskSetApplicationTaskTag( NULL, ( void * ) 3 );
	#endif

	uint16_t* frame_buf = pvParameters;
     5de:	89 85       	ldd	r24, Y+9	; 0x09
     5e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5e2:	9d 83       	std	Y+5, r25	; 0x05
     5e4:	8c 83       	std	Y+4, r24	; 0x04

	for(uint8_t i = 0; i < 2; i++)
     5e6:	19 82       	std	Y+1, r1	; 0x01
     5e8:	11 c0       	rjmp	.+34     	; 0x60c <game_renderer_task+0x4a>
	{
		bats[i] = bat_new_instance();
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	08 2f       	mov	r16, r24
     5ee:	10 e0       	ldi	r17, 0x00	; 0
     5f0:	0e 94 8c 05 	call	0xb18	; 0xb18 <bat_new_instance>
     5f4:	9c 01       	movw	r18, r24
     5f6:	c8 01       	movw	r24, r16
     5f8:	88 0f       	add	r24, r24
     5fa:	99 1f       	adc	r25, r25
     5fc:	8a 58       	subi	r24, 0x8A	; 138
     5fe:	9e 4f       	sbci	r25, 0xFE	; 254
     600:	fc 01       	movw	r30, r24
     602:	31 83       	std	Z+1, r19	; 0x01
     604:	20 83       	st	Z, r18
	//vTaskSetApplicationTaskTag( NULL, ( void * ) 3 );
	#endif

	uint16_t* frame_buf = pvParameters;

	for(uint8_t i = 0; i < 2; i++)
     606:	89 81       	ldd	r24, Y+1	; 0x01
     608:	8f 5f       	subi	r24, 0xFF	; 255
     60a:	89 83       	std	Y+1, r24	; 0x01
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	82 30       	cpi	r24, 0x02	; 2
     610:	60 f3       	brcs	.-40     	; 0x5ea <game_renderer_task+0x28>
	{
		bats[i] = bat_new_instance();
	}

	TickType_t game_renderer_task_lastwake = xTaskGetTickCount();
     612:	0e 94 da 21 	call	0x43b4	; 0x43b4 <xTaskGetTickCount>
     616:	98 87       	std	Y+8, r25	; 0x08
     618:	8f 83       	std	Y+7, r24	; 0x07
	

	clear_screen(frame_buf);			//clearing from the screen from bootup display.
     61a:	8c 81       	ldd	r24, Y+4	; 0x04
     61c:	9d 81       	ldd	r25, Y+5	; 0x05
     61e:	0e 94 10 06 	call	0xc20	; 0xc20 <clear_screen>
	init_game(bats);
     622:	86 e7       	ldi	r24, 0x76	; 118
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	0e 94 a9 05 	call	0xb52	; 0xb52 <init_game>
	
	draw_game(frame_buf, bats, ball_location);
     62a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     62e:	8c 81       	ldd	r24, Y+4	; 0x04
     630:	9d 81       	ldd	r25, Y+5	; 0x05
     632:	42 2f       	mov	r20, r18
     634:	66 e7       	ldi	r22, 0x76	; 118
     636:	71 e0       	ldi	r23, 0x01	; 1
     638:	0e 94 65 06 	call	0xcca	; 0xcca <draw_game>
	
	while(1)
	{
		UBaseType_t stackUsage = uxTaskGetStackHighWaterMark(NULL);
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 92 25 	call	0x4b24	; 0x4b24 <uxTaskGetStackHighWaterMark>
     644:	8e 83       	std	Y+6, r24	; 0x06
		//Set task period
		vTaskDelayUntil(&game_renderer_task_lastwake, GAME_RENDERER_TASK_PERIOD);
     646:	ce 01       	movw	r24, r28
     648:	07 96       	adiw	r24, 0x07	; 7
     64a:	69 e1       	ldi	r22, 0x19	; 25
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	0e 94 64 20 	call	0x40c8	; 0x40c8 <vTaskDelayUntil>
		//Action5
		
		if(score==true){timer++;}
     652:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <score>
     656:	88 23       	and	r24, r24
     658:	49 f0       	breq	.+18     	; 0x66c <game_renderer_task+0xaa>
     65a:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <timer>
     65e:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <timer+0x1>
     662:	01 96       	adiw	r24, 0x01	; 1
     664:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <timer+0x1>
     668:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <timer>
		if(timer%123==0&&run_game==false&&score==true){run_game=true; score=false;}
     66c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <timer>
     670:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <timer+0x1>
     674:	2b e7       	ldi	r18, 0x7B	; 123
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	b9 01       	movw	r22, r18
     67a:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <__divmodhi4>
     67e:	89 2b       	or	r24, r25
     680:	79 f4       	brne	.+30     	; 0x6a0 <game_renderer_task+0xde>
     682:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <run_game>
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	89 27       	eor	r24, r25
     68a:	88 23       	and	r24, r24
     68c:	49 f0       	breq	.+18     	; 0x6a0 <game_renderer_task+0xde>
     68e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <score>
     692:	88 23       	and	r24, r24
     694:	29 f0       	breq	.+10     	; 0x6a0 <game_renderer_task+0xde>
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <run_game>
     69c:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <score>
		if(timer==356){timer=0;}
     6a0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <timer>
     6a4:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <timer+0x1>
     6a8:	84 36       	cpi	r24, 0x64	; 100
     6aa:	91 40       	sbci	r25, 0x01	; 1
     6ac:	21 f4       	brne	.+8      	; 0x6b6 <game_renderer_task+0xf4>
     6ae:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <timer+0x1>
     6b2:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <timer>
			
		if(run_game)
     6b6:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <run_game>
     6ba:	88 23       	and	r24, r24
     6bc:	09 f4       	brne	.+2      	; 0x6c0 <game_renderer_task+0xfe>
     6be:	be cf       	rjmp	.-132    	; 0x63c <game_renderer_task+0x7a>
		{
			clear_screen(frame_buf);
     6c0:	8c 81       	ldd	r24, Y+4	; 0x04
     6c2:	9d 81       	ldd	r25, Y+5	; 0x05
     6c4:	0e 94 10 06 	call	0xc20	; 0xc20 <clear_screen>
			//remove this for
			for(int i = 0; i < 2; i++)
     6c8:	1b 82       	std	Y+3, r1	; 0x03
     6ca:	1a 82       	std	Y+2, r1	; 0x02
     6cc:	9c c1       	rjmp	.+824    	; 0xa06 <__stack+0x107>
			{
				
			if(ball_location%13==ball_location/13-1)			//first player scores 
     6ce:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     6d2:	8f e4       	ldi	r24, 0x4F	; 79
     6d4:	98 9f       	mul	r25, r24
     6d6:	81 2d       	mov	r24, r1
     6d8:	11 24       	eor	r1, r1
     6da:	86 95       	lsr	r24
     6dc:	86 95       	lsr	r24
     6de:	2d e0       	ldi	r18, 0x0D	; 13
     6e0:	82 9f       	mul	r24, r18
     6e2:	80 2d       	mov	r24, r0
     6e4:	11 24       	eor	r1, r1
     6e6:	29 2f       	mov	r18, r25
     6e8:	28 1b       	sub	r18, r24
     6ea:	82 2f       	mov	r24, r18
     6ec:	28 2f       	mov	r18, r24
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     6f4:	8f e4       	ldi	r24, 0x4F	; 79
     6f6:	98 9f       	mul	r25, r24
     6f8:	81 2d       	mov	r24, r1
     6fa:	11 24       	eor	r1, r1
     6fc:	86 95       	lsr	r24
     6fe:	86 95       	lsr	r24
     700:	88 2f       	mov	r24, r24
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	28 17       	cp	r18, r24
     708:	39 07       	cpc	r19, r25
     70a:	29 f5       	brne	.+74     	; 0x756 <game_renderer_task+0x194>
			{
				scoreone++;
     70c:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <scoreone>
     710:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <scoreone+0x1>
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <scoreone+0x1>
     71a:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <scoreone>
				ball_location=21;
     71e:	85 e1       	ldi	r24, 0x15	; 21
     720:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				dir=2;
     724:	82 e0       	ldi	r24, 0x02	; 2
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     72c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
				//hide_game(frame_buf, bats);
				draw_scores(frame_buf, scoreone, scoretwo);
     730:	40 91 7d 01 	lds	r20, 0x017D	; 0x80017d <scoretwo>
     734:	50 91 7e 01 	lds	r21, 0x017E	; 0x80017e <scoretwo+0x1>
     738:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <scoreone>
     73c:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <scoreone+0x1>
     740:	8c 81       	ldd	r24, Y+4	; 0x04
     742:	9d 81       	ldd	r25, Y+5	; 0x05
     744:	b9 01       	movw	r22, r18
     746:	0e 94 24 07 	call	0xe48	; 0xe48 <draw_scores>
				run_game=false;
     74a:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <run_game>
				score=true;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <score>
     754:	66 c0       	rjmp	.+204    	; 0x822 <game_renderer_task+0x260>
				
					} //score
				
				else if
				((ball_location-12)%14==0 && ball_location==bats[PL_TWO]->pixels[0]	)
     756:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     75a:	88 2f       	mov	r24, r24
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0c 97       	sbiw	r24, 0x0c	; 12
     760:	2e e0       	ldi	r18, 0x0E	; 14
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	b9 01       	movw	r22, r18
     766:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <__divmodhi4>
     76a:	89 2b       	or	r24, r25
     76c:	b9 f4       	brne	.+46     	; 0x79c <game_renderer_task+0x1da>
     76e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <__data_end+0x2>
     772:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <__data_end+0x3>
     776:	fc 01       	movw	r30, r24
     778:	91 81       	ldd	r25, Z+1	; 0x01
     77a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     77e:	98 17       	cp	r25, r24
     780:	69 f4       	brne	.+26     	; 0x79c <game_renderer_task+0x1da>
				{
					dir=2;
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     78a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
					up=1;
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <up+0x1>
     796:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <up>
     79a:	43 c0       	rjmp	.+134    	; 0x822 <game_renderer_task+0x260>
				}
					else if
					((ball_location-12)%14==0 && ball_location==bats[PL_TWO]->pixels[1]	)
     79c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     7a0:	88 2f       	mov	r24, r24
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0c 97       	sbiw	r24, 0x0c	; 12
     7a6:	2e e0       	ldi	r18, 0x0E	; 14
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	b9 01       	movw	r22, r18
     7ac:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <__divmodhi4>
     7b0:	89 2b       	or	r24, r25
     7b2:	b9 f4       	brne	.+46     	; 0x7e2 <game_renderer_task+0x220>
     7b4:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <__data_end+0x2>
     7b8:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <__data_end+0x3>
     7bc:	fc 01       	movw	r30, r24
     7be:	92 81       	ldd	r25, Z+2	; 0x02
     7c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     7c4:	98 17       	cp	r25, r24
     7c6:	69 f4       	brne	.+26     	; 0x7e2 <game_renderer_task+0x220>
					{
						dir=2;
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     7d0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
						up=2;
     7d4:	82 e0       	ldi	r24, 0x02	; 2
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <up+0x1>
     7dc:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <up>
     7e0:	20 c0       	rjmp	.+64     	; 0x822 <game_renderer_task+0x260>
					}
					//
					else if
					((ball_location-12)%14==0 && ball_location==bats[PL_TWO]->pixels[2]	)
     7e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     7e6:	88 2f       	mov	r24, r24
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0c 97       	sbiw	r24, 0x0c	; 12
     7ec:	2e e0       	ldi	r18, 0x0E	; 14
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	b9 01       	movw	r22, r18
     7f2:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <__divmodhi4>
     7f6:	89 2b       	or	r24, r25
     7f8:	a1 f4       	brne	.+40     	; 0x822 <game_renderer_task+0x260>
     7fa:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <__data_end+0x2>
     7fe:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <__data_end+0x3>
     802:	fc 01       	movw	r30, r24
     804:	93 81       	ldd	r25, Z+3	; 0x03
     806:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     80a:	98 17       	cp	r25, r24
     80c:	51 f4       	brne	.+20     	; 0x822 <game_renderer_task+0x260>
					{
						dir=2;
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     816:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
						up=0;
     81a:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <up+0x1>
     81e:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <up>
					}
					
				if(ball_location%14==0)							//second player scores.
     822:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     826:	92 2f       	mov	r25, r18
     828:	96 95       	lsr	r25
     82a:	83 e9       	ldi	r24, 0x93	; 147
     82c:	98 9f       	mul	r25, r24
     82e:	81 2d       	mov	r24, r1
     830:	11 24       	eor	r1, r1
     832:	86 95       	lsr	r24
     834:	86 95       	lsr	r24
     836:	98 2f       	mov	r25, r24
     838:	89 2f       	mov	r24, r25
     83a:	88 0f       	add	r24, r24
     83c:	98 2f       	mov	r25, r24
     83e:	89 2f       	mov	r24, r25
     840:	88 0f       	add	r24, r24
     842:	88 0f       	add	r24, r24
     844:	88 0f       	add	r24, r24
     846:	89 1b       	sub	r24, r25
     848:	f2 2f       	mov	r31, r18
     84a:	f8 1b       	sub	r31, r24
     84c:	8f 2f       	mov	r24, r31
     84e:	88 23       	and	r24, r24
     850:	29 f5       	brne	.+74     	; 0x89c <game_renderer_task+0x2da>
					{
				scoretwo++;
     852:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <scoretwo>
     856:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <scoretwo+0x1>
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <scoretwo+0x1>
     860:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <scoretwo>
				dir=1;	
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     86c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
				ball_location = 21;
     870:	85 e1       	ldi	r24, 0x15	; 21
     872:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				//hide_game(frame_buf, bats);
				draw_scores(frame_buf, scoreone, scoretwo);
     876:	40 91 7d 01 	lds	r20, 0x017D	; 0x80017d <scoretwo>
     87a:	50 91 7e 01 	lds	r21, 0x017E	; 0x80017e <scoretwo+0x1>
     87e:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <scoreone>
     882:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <scoreone+0x1>
     886:	8c 81       	ldd	r24, Y+4	; 0x04
     888:	9d 81       	ldd	r25, Y+5	; 0x05
     88a:	b9 01       	movw	r22, r18
     88c:	0e 94 24 07 	call	0xe48	; 0xe48 <draw_scores>
				run_game=false;
     890:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <run_game>
				score=true;
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <score>
     89a:	66 c0       	rjmp	.+204    	; 0x968 <__stack+0x69>
				
					} //SCORE
				else if((ball_location-1)%14==0 && ball_location==bats[PL_ONE]->pixels[0])
     89c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     8a0:	88 2f       	mov	r24, r24
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	01 97       	sbiw	r24, 0x01	; 1
     8a6:	2e e0       	ldi	r18, 0x0E	; 14
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	b9 01       	movw	r22, r18
     8ac:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <__divmodhi4>
     8b0:	89 2b       	or	r24, r25
     8b2:	b9 f4       	brne	.+46     	; 0x8e2 <game_renderer_task+0x320>
     8b4:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
     8b8:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <__data_end+0x1>
     8bc:	fc 01       	movw	r30, r24
     8be:	91 81       	ldd	r25, Z+1	; 0x01
     8c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     8c4:	98 17       	cp	r25, r24
     8c6:	69 f4       	brne	.+26     	; 0x8e2 <game_renderer_task+0x320>
				{
				
					dir=1;
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     8d0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
					up=1;
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <up+0x1>
     8dc:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <up>
     8e0:	43 c0       	rjmp	.+134    	; 0x968 <__stack+0x69>
				}
			
				//
				else if((ball_location-1)%14==0 && ball_location==bats[PL_ONE]->pixels[1])
     8e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     8e6:	88 2f       	mov	r24, r24
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	2e e0       	ldi	r18, 0x0E	; 14
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	b9 01       	movw	r22, r18
     8f2:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <__divmodhi4>
     8f6:	89 2b       	or	r24, r25
     8f8:	b9 f4       	brne	.+46     	; 0x928 <__stack+0x29>
     8fa:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
     8fe:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <__data_end+0x1>
     902:	fc 01       	movw	r30, r24
     904:	92 81       	ldd	r25, Z+2	; 0x02
     906:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     90a:	98 17       	cp	r25, r24
     90c:	69 f4       	brne	.+26     	; 0x928 <__stack+0x29>
						{	
							dir=1;
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     916:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
							up=2;	
     91a:	82 e0       	ldi	r24, 0x02	; 2
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <up+0x1>
     922:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <up>
     926:	20 c0       	rjmp	.+64     	; 0x968 <__stack+0x69>
						}
			
				//
					else if((ball_location-1)%14==0 && ball_location==bats[PL_ONE]->pixels[2])
     928:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     92c:	88 2f       	mov	r24, r24
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	2e e0       	ldi	r18, 0x0E	; 14
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	b9 01       	movw	r22, r18
     938:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <__divmodhi4>
     93c:	89 2b       	or	r24, r25
     93e:	a1 f4       	brne	.+40     	; 0x968 <__stack+0x69>
     940:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
     944:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <__data_end+0x1>
     948:	fc 01       	movw	r30, r24
     94a:	93 81       	ldd	r25, Z+3	; 0x03
     94c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     950:	98 17       	cp	r25, r24
     952:	51 f4       	brne	.+20     	; 0x968 <__stack+0x69>
					{
						dir=1;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <dir+0x1>
     95c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
						up=0;
     960:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <up+0x1>
     964:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <up>
					}
				
				if(z%27==0)				//z is the ball period.
     968:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <z>
     96c:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <z+0x1>
     970:	2b e1       	ldi	r18, 0x1B	; 27
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	b9 01       	movw	r22, r18
     976:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <__divmodhi4>
     97a:	89 2b       	or	r24, r25
     97c:	49 f4       	brne	.+18     	; 0x990 <__stack+0x91>
					{
					move_ball(&ball_location,dir);
     97e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dir>
     982:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <dir+0x1>
     986:	bc 01       	movw	r22, r24
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	0e 94 14 05 	call	0xa28	; 0xa28 <move_ball>
					}
				z++;
     990:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <z>
     994:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <z+0x1>
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <z+0x1>
     99e:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <z>
				if(z==270)
     9a2:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <z>
     9a6:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <z+0x1>
     9aa:	8e 30       	cpi	r24, 0x0E	; 14
     9ac:	91 40       	sbci	r25, 0x01	; 1
     9ae:	21 f4       	brne	.+8      	; 0x9b8 <__stack+0xb9>
				z=0;
     9b0:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <z+0x1>
     9b4:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <z>
				
				if(scoreone>=2||scoretwo>=2)
     9b8:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <scoreone>
     9bc:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <scoreone+0x1>
     9c0:	02 97       	sbiw	r24, 0x02	; 2
     9c2:	30 f4       	brcc	.+12     	; 0x9d0 <__stack+0xd1>
     9c4:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <scoretwo>
     9c8:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <scoretwo+0x1>
     9cc:	02 97       	sbiw	r24, 0x02	; 2
     9ce:	b0 f0       	brcs	.+44     	; 0x9fc <__stack+0xfd>
					{
						if(scoreone>=2)
     9d0:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <scoreone>
     9d4:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <scoreone+0x1>
     9d8:	02 97       	sbiw	r24, 0x02	; 2
     9da:	20 f0       	brcs	.+8      	; 0x9e4 <__stack+0xe5>
						com_send_string("player 1 won");
     9dc:	89 e3       	ldi	r24, 0x39	; 57
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	0e 94 c9 02 	call	0x592	; 0x592 <com_send_string>
						if(scoretwo>=2)
     9e4:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <scoretwo>
     9e8:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <scoretwo+0x1>
     9ec:	02 97       	sbiw	r24, 0x02	; 2
     9ee:	20 f0       	brcs	.+8      	; 0x9f8 <__stack+0xf9>
						com_send_string("player 2 won");
     9f0:	86 e4       	ldi	r24, 0x46	; 70
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	0e 94 c9 02 	call	0x592	; 0x592 <com_send_string>
						 end_game();
     9f8:	0e 94 aa 02 	call	0x554	; 0x554 <end_game>
			
		if(run_game)
		{
			clear_screen(frame_buf);
			//remove this for
			for(int i = 0; i < 2; i++)
     9fc:	8a 81       	ldd	r24, Y+2	; 0x02
     9fe:	9b 81       	ldd	r25, Y+3	; 0x03
     a00:	01 96       	adiw	r24, 0x01	; 1
     a02:	9b 83       	std	Y+3, r25	; 0x03
     a04:	8a 83       	std	Y+2, r24	; 0x02
     a06:	8a 81       	ldd	r24, Y+2	; 0x02
     a08:	9b 81       	ldd	r25, Y+3	; 0x03
     a0a:	02 97       	sbiw	r24, 0x02	; 2
     a0c:	0c f4       	brge	.+2      	; 0xa10 <__stack+0x111>
     a0e:	5f ce       	rjmp	.-834    	; 0x6ce <game_renderer_task+0x10c>
						 end_game();
					}
				
			}
		
			draw_game(frame_buf, bats, ball_location);
     a10:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     a14:	8c 81       	ldd	r24, Y+4	; 0x04
     a16:	9d 81       	ldd	r25, Y+5	; 0x05
     a18:	42 2f       	mov	r20, r18
     a1a:	66 e7       	ldi	r22, 0x76	; 118
     a1c:	71 e0       	ldi	r23, 0x01	; 1
     a1e:	0e 94 65 06 	call	0xcca	; 0xcca <draw_game>
			SemGive();
     a22:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <SemGive>
		}
		// it should give the semaphore regardless if it sends data or not!!! Semaphore for synchro.
			
	}
     a26:	0a ce       	rjmp	.-1004   	; 0x63c <game_renderer_task+0x7a>

00000a28 <move_ball>:
}

void move_ball(uint8_t *location, uint8_t* dir)
{
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <move_ball+0x6>
     a2e:	00 d0       	rcall	.+0      	; 0xa30 <move_ball+0x8>
     a30:	1f 92       	push	r1
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	9b 83       	std	Y+3, r25	; 0x03
     a38:	8a 83       	std	Y+2, r24	; 0x02
     a3a:	7d 83       	std	Y+5, r23	; 0x05
     a3c:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t x = *location;
     a3e:	8a 81       	ldd	r24, Y+2	; 0x02
     a40:	9b 81       	ldd	r25, Y+3	; 0x03
     a42:	fc 01       	movw	r30, r24
     a44:	80 81       	ld	r24, Z
     a46:	89 83       	std	Y+1, r24	; 0x01
	
	//boolean up 
	if(x>125) up = 0; //bouncing of the ball from the wall
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	8e 37       	cpi	r24, 0x7E	; 126
     a4c:	20 f0       	brcs	.+8      	; 0xa56 <move_ball+0x2e>
     a4e:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <up+0x1>
     a52:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <up>
	if(x<13) up = 1;  //bouncing of the ball from the wall
     a56:	89 81       	ldd	r24, Y+1	; 0x01
     a58:	8d 30       	cpi	r24, 0x0D	; 13
     a5a:	30 f4       	brcc	.+12     	; 0xa68 <move_ball+0x40>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <up+0x1>
     a64:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <up>
	
	if(dir==1)
     a68:	8c 81       	ldd	r24, Y+4	; 0x04
     a6a:	9d 81       	ldd	r25, Y+5	; 0x05
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	f1 f4       	brne	.+60     	; 0xaac <move_ball+0x84>
	{
		if(up==1) x=x+15;
     a70:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <up>
     a74:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <up+0x1>
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	21 f4       	brne	.+8      	; 0xa84 <move_ball+0x5c>
     a7c:	89 81       	ldd	r24, Y+1	; 0x01
     a7e:	81 5f       	subi	r24, 0xF1	; 241
     a80:	89 83       	std	Y+1, r24	; 0x01
     a82:	31 c0       	rjmp	.+98     	; 0xae6 <move_ball+0xbe>
		else if(up==0) x=x-13; //move down; keep the direction 
     a84:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <up>
     a88:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <up+0x1>
     a8c:	89 2b       	or	r24, r25
     a8e:	21 f4       	brne	.+8      	; 0xa98 <move_ball+0x70>
     a90:	89 81       	ldd	r24, Y+1	; 0x01
     a92:	8d 50       	subi	r24, 0x0D	; 13
     a94:	89 83       	std	Y+1, r24	; 0x01
     a96:	27 c0       	rjmp	.+78     	; 0xae6 <move_ball+0xbe>
		else if(up==2) x=x+1;	//when up=2 move straight
     a98:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <up>
     a9c:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <up+0x1>
     aa0:	02 97       	sbiw	r24, 0x02	; 2
     aa2:	09 f5       	brne	.+66     	; 0xae6 <move_ball+0xbe>
     aa4:	89 81       	ldd	r24, Y+1	; 0x01
     aa6:	8f 5f       	subi	r24, 0xFF	; 255
     aa8:	89 83       	std	Y+1, r24	; 0x01
     aaa:	1d c0       	rjmp	.+58     	; 0xae6 <move_ball+0xbe>
	}
	else  
	{
		if(up==1) x=x+13;
     aac:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <up>
     ab0:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <up+0x1>
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	21 f4       	brne	.+8      	; 0xac0 <move_ball+0x98>
     ab8:	89 81       	ldd	r24, Y+1	; 0x01
     aba:	83 5f       	subi	r24, 0xF3	; 243
     abc:	89 83       	std	Y+1, r24	; 0x01
     abe:	13 c0       	rjmp	.+38     	; 0xae6 <move_ball+0xbe>
		else if(up==0) x=x-15; //do the maths ;
     ac0:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <up>
     ac4:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <up+0x1>
     ac8:	89 2b       	or	r24, r25
     aca:	21 f4       	brne	.+8      	; 0xad4 <move_ball+0xac>
     acc:	89 81       	ldd	r24, Y+1	; 0x01
     ace:	8f 50       	subi	r24, 0x0F	; 15
     ad0:	89 83       	std	Y+1, r24	; 0x01
     ad2:	09 c0       	rjmp	.+18     	; 0xae6 <move_ball+0xbe>
		else if (up==2) x=x-1;
     ad4:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <up>
     ad8:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <up+0x1>
     adc:	02 97       	sbiw	r24, 0x02	; 2
     ade:	19 f4       	brne	.+6      	; 0xae6 <move_ball+0xbe>
     ae0:	89 81       	ldd	r24, Y+1	; 0x01
     ae2:	81 50       	subi	r24, 0x01	; 1
     ae4:	89 83       	std	Y+1, r24	; 0x01
	}
	x %= SCREEN_DIMENSION_X * SCREEN_DIMENSION_Y;		//makes sure the ball doesn't go out of the screen.
     ae6:	89 81       	ldd	r24, Y+1	; 0x01
     ae8:	91 e0       	ldi	r25, 0x01	; 1
     aea:	8c 38       	cpi	r24, 0x8C	; 140
     aec:	08 f4       	brcc	.+2      	; 0xaf0 <move_ball+0xc8>
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	2c e8       	ldi	r18, 0x8C	; 140
     af2:	92 9f       	mul	r25, r18
     af4:	90 2d       	mov	r25, r0
     af6:	11 24       	eor	r1, r1
     af8:	89 1b       	sub	r24, r25
     afa:	89 83       	std	Y+1, r24	; 0x01
	*location = x;
     afc:	8a 81       	ldd	r24, Y+2	; 0x02
     afe:	9b 81       	ldd	r25, Y+3	; 0x03
     b00:	29 81       	ldd	r18, Y+1	; 0x01
     b02:	fc 01       	movw	r30, r24
     b04:	20 83       	st	Z, r18
}
     b06:	00 00       	nop
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <bat_new_instance>:

bat_t* bat_new_instance()
{//?
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	00 d0       	rcall	.+0      	; 0xb1e <bat_new_instance+0x6>
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
	bat_t *ret = pvPortMalloc(sizeof *ret);
     b22:	84 e0       	ldi	r24, 0x04	; 4
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 d7 17 	call	0x2fae	; 0x2fae <pvPortMalloc>
     b2a:	9a 83       	std	Y+2, r25	; 0x02
     b2c:	89 83       	std	Y+1, r24	; 0x01
	if(ret == NULL)
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	9a 81       	ldd	r25, Y+2	; 0x02
     b32:	89 2b       	or	r24, r25
     b34:	19 f4       	brne	.+6      	; 0xb3c <bat_new_instance+0x24>
		return ret;
     b36:	89 81       	ldd	r24, Y+1	; 0x01
     b38:	9a 81       	ldd	r25, Y+2	; 0x02
     b3a:	06 c0       	rjmp	.+12     	; 0xb48 <bat_new_instance+0x30>

	ret->length = 0;
     b3c:	89 81       	ldd	r24, Y+1	; 0x01
     b3e:	9a 81       	ldd	r25, Y+2	; 0x02
     b40:	fc 01       	movw	r30, r24
     b42:	10 82       	st	Z, r1

	return ret;
     b44:	89 81       	ldd	r24, Y+1	; 0x01
     b46:	9a 81       	ldd	r25, Y+2	; 0x02
}
     b48:	0f 90       	pop	r0
     b4a:	0f 90       	pop	r0
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	08 95       	ret

00000b52 <init_game>:
void init_game(bat_t **bats)
{
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	00 d0       	rcall	.+0      	; 0xb5c <init_game+0xa>
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
     b60:	9a 83       	std	Y+2, r25	; 0x02
     b62:	89 83       	std	Y+1, r24	; 0x01
	
	bats[PL_ONE]->length = 3;//
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	9a 81       	ldd	r25, Y+2	; 0x02
     b68:	fc 01       	movw	r30, r24
     b6a:	80 81       	ld	r24, Z
     b6c:	91 81       	ldd	r25, Z+1	; 0x01
     b6e:	23 e0       	ldi	r18, 0x03	; 3
     b70:	fc 01       	movw	r30, r24
     b72:	20 83       	st	Z, r18
	bats[PL_ONE]->pixels[0] = xy_to_pixel_id(1,2);
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	9a 81       	ldd	r25, Y+2	; 0x02
     b78:	fc 01       	movw	r30, r24
     b7a:	00 81       	ld	r16, Z
     b7c:	11 81       	ldd	r17, Z+1	; 0x01
     b7e:	62 e0       	ldi	r22, 0x02	; 2
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	0e 94 b4 02 	call	0x568	; 0x568 <xy_to_pixel_id>
     b86:	f8 01       	movw	r30, r16
     b88:	81 83       	std	Z+1, r24	; 0x01
	bats[PL_ONE]->pixels[1] = xy_to_pixel_id(1,1);
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	9a 81       	ldd	r25, Y+2	; 0x02
     b8e:	fc 01       	movw	r30, r24
     b90:	00 81       	ld	r16, Z
     b92:	11 81       	ldd	r17, Z+1	; 0x01
     b94:	61 e0       	ldi	r22, 0x01	; 1
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	0e 94 b4 02 	call	0x568	; 0x568 <xy_to_pixel_id>
     b9c:	f8 01       	movw	r30, r16
     b9e:	82 83       	std	Z+2, r24	; 0x02
	bats[PL_ONE]->pixels[2] = xy_to_pixel_id(1, 0);
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	9a 81       	ldd	r25, Y+2	; 0x02
     ba4:	fc 01       	movw	r30, r24
     ba6:	00 81       	ld	r16, Z
     ba8:	11 81       	ldd	r17, Z+1	; 0x01
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	0e 94 b4 02 	call	0x568	; 0x568 <xy_to_pixel_id>
     bb2:	f8 01       	movw	r30, r16
     bb4:	83 83       	std	Z+3, r24	; 0x03


	bats[PL_TWO]->length = 3;//
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	9a 81       	ldd	r25, Y+2	; 0x02
     bba:	02 96       	adiw	r24, 0x02	; 2
     bbc:	fc 01       	movw	r30, r24
     bbe:	80 81       	ld	r24, Z
     bc0:	91 81       	ldd	r25, Z+1	; 0x01
     bc2:	23 e0       	ldi	r18, 0x03	; 3
     bc4:	fc 01       	movw	r30, r24
     bc6:	20 83       	st	Z, r18
	bats[PL_TWO]->pixels[0] = xy_to_pixel_id(12, 9);
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	9a 81       	ldd	r25, Y+2	; 0x02
     bcc:	02 96       	adiw	r24, 0x02	; 2
     bce:	fc 01       	movw	r30, r24
     bd0:	00 81       	ld	r16, Z
     bd2:	11 81       	ldd	r17, Z+1	; 0x01
     bd4:	69 e0       	ldi	r22, 0x09	; 9
     bd6:	8c e0       	ldi	r24, 0x0C	; 12
     bd8:	0e 94 b4 02 	call	0x568	; 0x568 <xy_to_pixel_id>
     bdc:	f8 01       	movw	r30, r16
     bde:	81 83       	std	Z+1, r24	; 0x01
	bats[PL_TWO]->pixels[1] = xy_to_pixel_id(12, 8);
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	9a 81       	ldd	r25, Y+2	; 0x02
     be4:	02 96       	adiw	r24, 0x02	; 2
     be6:	fc 01       	movw	r30, r24
     be8:	00 81       	ld	r16, Z
     bea:	11 81       	ldd	r17, Z+1	; 0x01
     bec:	68 e0       	ldi	r22, 0x08	; 8
     bee:	8c e0       	ldi	r24, 0x0C	; 12
     bf0:	0e 94 b4 02 	call	0x568	; 0x568 <xy_to_pixel_id>
     bf4:	f8 01       	movw	r30, r16
     bf6:	82 83       	std	Z+2, r24	; 0x02
	bats[PL_TWO]->pixels[2] = xy_to_pixel_id(12, 7);
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	9a 81       	ldd	r25, Y+2	; 0x02
     bfc:	02 96       	adiw	r24, 0x02	; 2
     bfe:	fc 01       	movw	r30, r24
     c00:	00 81       	ld	r16, Z
     c02:	11 81       	ldd	r17, Z+1	; 0x01
     c04:	67 e0       	ldi	r22, 0x07	; 7
     c06:	8c e0       	ldi	r24, 0x0C	; 12
     c08:	0e 94 b4 02 	call	0x568	; 0x568 <xy_to_pixel_id>
     c0c:	f8 01       	movw	r30, r16
     c0e:	83 83       	std	Z+3, r24	; 0x03
}
     c10:	00 00       	nop
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	08 95       	ret

00000c20 <clear_screen>:

void clear_screen(uint16_t* framebuffer)
{
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	00 d0       	rcall	.+0      	; 0xc26 <clear_screen+0x6>
     c26:	1f 92       	push	r1
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	9b 83       	std	Y+3, r25	; 0x03
     c2e:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8_t x = 0; x < SCREEN_DIMENSION_X; x++)
     c30:	19 82       	std	Y+1, r1	; 0x01
     c32:	0f c0       	rjmp	.+30     	; 0xc52 <clear_screen+0x32>
		framebuffer[x] = 0;
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	88 2f       	mov	r24, r24
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	2a 81       	ldd	r18, Y+2	; 0x02
     c40:	3b 81       	ldd	r19, Y+3	; 0x03
     c42:	82 0f       	add	r24, r18
     c44:	93 1f       	adc	r25, r19
     c46:	fc 01       	movw	r30, r24
     c48:	11 82       	std	Z+1, r1	; 0x01
     c4a:	10 82       	st	Z, r1
	bats[PL_TWO]->pixels[2] = xy_to_pixel_id(12, 7);
}

void clear_screen(uint16_t* framebuffer)
{
	for(uint8_t x = 0; x < SCREEN_DIMENSION_X; x++)
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	8f 5f       	subi	r24, 0xFF	; 255
     c50:	89 83       	std	Y+1, r24	; 0x01
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	8e 30       	cpi	r24, 0x0E	; 14
     c56:	70 f3       	brcs	.-36     	; 0xc34 <clear_screen+0x14>
		framebuffer[x] = 0;
}
     c58:	00 00       	nop
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret

00000c66 <y_offset>:

uint8_t y_offset(uint8_t pixel_id)
{
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	1f 92       	push	r1
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	89 83       	std	Y+1, r24	; 0x01
	return pixel_id / SCREEN_DIMENSION_X;
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	98 2f       	mov	r25, r24
     c76:	96 95       	lsr	r25
     c78:	83 e9       	ldi	r24, 0x93	; 147
     c7a:	98 9f       	mul	r25, r24
     c7c:	81 2d       	mov	r24, r1
     c7e:	11 24       	eor	r1, r1
     c80:	86 95       	lsr	r24
     c82:	86 95       	lsr	r24
}
     c84:	0f 90       	pop	r0
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	08 95       	ret

00000c8c <x_offset>:
uint8_t x_offset(uint8_t pixel_id)
{
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	1f 92       	push	r1
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	89 83       	std	Y+1, r24	; 0x01
	return pixel_id % SCREEN_DIMENSION_X;
     c98:	29 81       	ldd	r18, Y+1	; 0x01
     c9a:	92 2f       	mov	r25, r18
     c9c:	96 95       	lsr	r25
     c9e:	83 e9       	ldi	r24, 0x93	; 147
     ca0:	98 9f       	mul	r25, r24
     ca2:	81 2d       	mov	r24, r1
     ca4:	11 24       	eor	r1, r1
     ca6:	86 95       	lsr	r24
     ca8:	86 95       	lsr	r24
     caa:	98 2f       	mov	r25, r24
     cac:	89 2f       	mov	r24, r25
     cae:	88 0f       	add	r24, r24
     cb0:	98 2f       	mov	r25, r24
     cb2:	89 2f       	mov	r24, r25
     cb4:	88 0f       	add	r24, r24
     cb6:	88 0f       	add	r24, r24
     cb8:	88 0f       	add	r24, r24
     cba:	89 1b       	sub	r24, r25
     cbc:	92 2f       	mov	r25, r18
     cbe:	98 1b       	sub	r25, r24
     cc0:	89 2f       	mov	r24, r25
}
     cc2:	0f 90       	pop	r0
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <draw_game>:

void draw_game(uint16_t* framebuffer, bat_t **bats, uint8_t ball_location)
{
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	27 97       	sbiw	r28, 0x07	; 7
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	de bf       	out	0x3e, r29	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	cd bf       	out	0x3d, r28	; 61
     ce2:	9c 83       	std	Y+4, r25	; 0x04
     ce4:	8b 83       	std	Y+3, r24	; 0x03
     ce6:	7e 83       	std	Y+6, r23	; 0x06
     ce8:	6d 83       	std	Y+5, r22	; 0x05
     cea:	4f 83       	std	Y+7, r20	; 0x07
	framebuffer[x_offset(ball_location)] |=  _BV((SCREEN_DIMENSION_Y - (y_offset(ball_location)+1)));
     cec:	8f 81       	ldd	r24, Y+7	; 0x07
     cee:	0e 94 33 06 	call	0xc66	; 0xc66 <y_offset>
     cf2:	88 2f       	mov	r24, r24
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	29 e0       	ldi	r18, 0x09	; 9
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	28 1b       	sub	r18, r24
     cfc:	39 0b       	sbc	r19, r25
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	8c 01       	movw	r16, r24
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <draw_game+0x40>
     d06:	00 0f       	add	r16, r16
     d08:	11 1f       	adc	r17, r17
     d0a:	2a 95       	dec	r18
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <draw_game+0x3c>
     d0e:	8f 81       	ldd	r24, Y+7	; 0x07
     d10:	0e 94 46 06 	call	0xc8c	; 0xc8c <x_offset>
     d14:	48 2f       	mov	r20, r24
     d16:	84 2f       	mov	r24, r20
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	2b 81       	ldd	r18, Y+3	; 0x03
     d20:	3c 81       	ldd	r19, Y+4	; 0x04
     d22:	82 0f       	add	r24, r18
     d24:	93 1f       	adc	r25, r19
     d26:	24 2f       	mov	r18, r20
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	22 0f       	add	r18, r18
     d2c:	33 1f       	adc	r19, r19
     d2e:	4b 81       	ldd	r20, Y+3	; 0x03
     d30:	5c 81       	ldd	r21, Y+4	; 0x04
     d32:	24 0f       	add	r18, r20
     d34:	35 1f       	adc	r19, r21
     d36:	f9 01       	movw	r30, r18
     d38:	20 81       	ld	r18, Z
     d3a:	31 81       	ldd	r19, Z+1	; 0x01
     d3c:	a8 01       	movw	r20, r16
     d3e:	24 2b       	or	r18, r20
     d40:	35 2b       	or	r19, r21
     d42:	fc 01       	movw	r30, r24
     d44:	31 83       	std	Z+1, r19	; 0x01
     d46:	20 83       	st	Z, r18
	for(Player_t player = 0; player < 2; player++)
     d48:	19 82       	std	Y+1, r1	; 0x01
     d4a:	6e c0       	rjmp	.+220    	; 0xe28 <draw_game+0x15e>
	{
		for(uint8_t i = 0; i < bats[player]->length; i++)
     d4c:	1a 82       	std	Y+2, r1	; 0x02
     d4e:	57 c0       	rjmp	.+174    	; 0xdfe <draw_game+0x134>
		{
			framebuffer[x_offset(bats[player]->pixels[i])] |= _BV((SCREEN_DIMENSION_Y - (y_offset(bats[player]->pixels[i])+1)));
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	88 2f       	mov	r24, r24
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	2d 81       	ldd	r18, Y+5	; 0x05
     d5c:	3e 81       	ldd	r19, Y+6	; 0x06
     d5e:	82 0f       	add	r24, r18
     d60:	93 1f       	adc	r25, r19
     d62:	fc 01       	movw	r30, r24
     d64:	20 81       	ld	r18, Z
     d66:	31 81       	ldd	r19, Z+1	; 0x01
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	88 2f       	mov	r24, r24
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	82 0f       	add	r24, r18
     d70:	93 1f       	adc	r25, r19
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	fc 01       	movw	r30, r24
     d76:	80 81       	ld	r24, Z
     d78:	0e 94 33 06 	call	0xc66	; 0xc66 <y_offset>
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	29 e0       	ldi	r18, 0x09	; 9
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	28 1b       	sub	r18, r24
     d86:	39 0b       	sbc	r19, r25
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	8c 01       	movw	r16, r24
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <draw_game+0xca>
     d90:	00 0f       	add	r16, r16
     d92:	11 1f       	adc	r17, r17
     d94:	2a 95       	dec	r18
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <draw_game+0xc6>
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	88 2f       	mov	r24, r24
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	2d 81       	ldd	r18, Y+5	; 0x05
     da4:	3e 81       	ldd	r19, Y+6	; 0x06
     da6:	82 0f       	add	r24, r18
     da8:	93 1f       	adc	r25, r19
     daa:	fc 01       	movw	r30, r24
     dac:	20 81       	ld	r18, Z
     dae:	31 81       	ldd	r19, Z+1	; 0x01
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	82 0f       	add	r24, r18
     db8:	93 1f       	adc	r25, r19
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	fc 01       	movw	r30, r24
     dbe:	80 81       	ld	r24, Z
     dc0:	0e 94 46 06 	call	0xc8c	; 0xc8c <x_offset>
     dc4:	48 2f       	mov	r20, r24
     dc6:	84 2f       	mov	r24, r20
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	2b 81       	ldd	r18, Y+3	; 0x03
     dd0:	3c 81       	ldd	r19, Y+4	; 0x04
     dd2:	82 0f       	add	r24, r18
     dd4:	93 1f       	adc	r25, r19
     dd6:	24 2f       	mov	r18, r20
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	22 0f       	add	r18, r18
     ddc:	33 1f       	adc	r19, r19
     dde:	4b 81       	ldd	r20, Y+3	; 0x03
     de0:	5c 81       	ldd	r21, Y+4	; 0x04
     de2:	24 0f       	add	r18, r20
     de4:	35 1f       	adc	r19, r21
     de6:	f9 01       	movw	r30, r18
     de8:	20 81       	ld	r18, Z
     dea:	31 81       	ldd	r19, Z+1	; 0x01
     dec:	a8 01       	movw	r20, r16
     dee:	24 2b       	or	r18, r20
     df0:	35 2b       	or	r19, r21
     df2:	fc 01       	movw	r30, r24
     df4:	31 83       	std	Z+1, r19	; 0x01
     df6:	20 83       	st	Z, r18
void draw_game(uint16_t* framebuffer, bat_t **bats, uint8_t ball_location)
{
	framebuffer[x_offset(ball_location)] |=  _BV((SCREEN_DIMENSION_Y - (y_offset(ball_location)+1)));
	for(Player_t player = 0; player < 2; player++)
	{
		for(uint8_t i = 0; i < bats[player]->length; i++)
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	8f 5f       	subi	r24, 0xFF	; 255
     dfc:	8a 83       	std	Y+2, r24	; 0x02
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	88 2f       	mov	r24, r24
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	2d 81       	ldd	r18, Y+5	; 0x05
     e0a:	3e 81       	ldd	r19, Y+6	; 0x06
     e0c:	82 0f       	add	r24, r18
     e0e:	93 1f       	adc	r25, r19
     e10:	fc 01       	movw	r30, r24
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	fc 01       	movw	r30, r24
     e18:	90 81       	ld	r25, Z
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	89 17       	cp	r24, r25
     e1e:	08 f4       	brcc	.+2      	; 0xe22 <draw_game+0x158>
     e20:	97 cf       	rjmp	.-210    	; 0xd50 <draw_game+0x86>
}

void draw_game(uint16_t* framebuffer, bat_t **bats, uint8_t ball_location)
{
	framebuffer[x_offset(ball_location)] |=  _BV((SCREEN_DIMENSION_Y - (y_offset(ball_location)+1)));
	for(Player_t player = 0; player < 2; player++)
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	8f 5f       	subi	r24, 0xFF	; 255
     e26:	89 83       	std	Y+1, r24	; 0x01
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	82 30       	cpi	r24, 0x02	; 2
     e2c:	08 f4       	brcc	.+2      	; 0xe30 <draw_game+0x166>
     e2e:	8e cf       	rjmp	.-228    	; 0xd4c <draw_game+0x82>
		for(uint8_t i = 0; i < bats[player]->length; i++)
		{
			framebuffer[x_offset(bats[player]->pixels[i])] |= _BV((SCREEN_DIMENSION_Y - (y_offset(bats[player]->pixels[i])+1)));
		}
	}
}
     e30:	00 00       	nop
     e32:	27 96       	adiw	r28, 0x07	; 7
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	08 95       	ret

00000e48 <draw_scores>:

void draw_scores(uint16_t* framebuffer, uint8_t score_right, uint8_t score_left)
{			
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	28 97       	sbiw	r28, 0x08	; 8
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	9e 83       	std	Y+6, r25	; 0x06
     e62:	8d 83       	std	Y+5, r24	; 0x05
     e64:	6f 83       	std	Y+7, r22	; 0x07
     e66:	48 87       	std	Y+8, r20	; 0x08
	if(score_right==1)
     e68:	8f 81       	ldd	r24, Y+7	; 0x07
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	09 f0       	breq	.+2      	; 0xe70 <draw_scores+0x28>
     e6e:	43 c0       	rjmp	.+134    	; 0xef6 <draw_scores+0xae>
	{
		for(uint8_t i = 31; i <=101; i++)
     e70:	8f e1       	ldi	r24, 0x1F	; 31
     e72:	89 83       	std	Y+1, r24	; 0x01
     e74:	3c c0       	rjmp	.+120    	; 0xeee <draw_scores+0xa6>
		{
			if((i-3)%14==0)
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	88 2f       	mov	r24, r24
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	03 97       	sbiw	r24, 0x03	; 3
     e7e:	2e e0       	ldi	r18, 0x0E	; 14
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	b9 01       	movw	r22, r18
     e84:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <__divmodhi4>
     e88:	89 2b       	or	r24, r25
     e8a:	71 f5       	brne	.+92     	; 0xee8 <draw_scores+0xa0>
			framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	0e 94 33 06 	call	0xc66	; 0xc66 <y_offset>
     e92:	88 2f       	mov	r24, r24
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	29 e0       	ldi	r18, 0x09	; 9
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	28 1b       	sub	r18, r24
     e9c:	39 0b       	sbc	r19, r25
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	8c 01       	movw	r16, r24
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <draw_scores+0x62>
     ea6:	00 0f       	add	r16, r16
     ea8:	11 1f       	adc	r17, r17
     eaa:	2a 95       	dec	r18
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <draw_scores+0x5e>
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	0e 94 46 06 	call	0xc8c	; 0xc8c <x_offset>
     eb4:	48 2f       	mov	r20, r24
     eb6:	84 2f       	mov	r24, r20
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	2d 81       	ldd	r18, Y+5	; 0x05
     ec0:	3e 81       	ldd	r19, Y+6	; 0x06
     ec2:	82 0f       	add	r24, r18
     ec4:	93 1f       	adc	r25, r19
     ec6:	24 2f       	mov	r18, r20
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	22 0f       	add	r18, r18
     ecc:	33 1f       	adc	r19, r19
     ece:	4d 81       	ldd	r20, Y+5	; 0x05
     ed0:	5e 81       	ldd	r21, Y+6	; 0x06
     ed2:	24 0f       	add	r18, r20
     ed4:	35 1f       	adc	r19, r21
     ed6:	f9 01       	movw	r30, r18
     ed8:	20 81       	ld	r18, Z
     eda:	31 81       	ldd	r19, Z+1	; 0x01
     edc:	a8 01       	movw	r20, r16
     ede:	24 2b       	or	r18, r20
     ee0:	35 2b       	or	r19, r21
     ee2:	fc 01       	movw	r30, r24
     ee4:	31 83       	std	Z+1, r19	; 0x01
     ee6:	20 83       	st	Z, r18

void draw_scores(uint16_t* framebuffer, uint8_t score_right, uint8_t score_left)
{			
	if(score_right==1)
	{
		for(uint8_t i = 31; i <=101; i++)
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	8f 5f       	subi	r24, 0xFF	; 255
     eec:	89 83       	std	Y+1, r24	; 0x01
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	86 36       	cpi	r24, 0x66	; 102
     ef2:	08 f2       	brcs	.-126    	; 0xe76 <draw_scores+0x2e>
     ef4:	80 c0       	rjmp	.+256    	; 0xff6 <draw_scores+0x1ae>
		{
			if((i-3)%14==0)
			framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
		}
	}
	else if(score_right==2)
     ef6:	8f 81       	ldd	r24, Y+7	; 0x07
     ef8:	82 30       	cpi	r24, 0x02	; 2
     efa:	09 f0       	breq	.+2      	; 0xefe <draw_scores+0xb6>
     efc:	7c c0       	rjmp	.+248    	; 0xff6 <draw_scores+0x1ae>
		{
			for(uint8_t i = 31; i <=103; i++)
     efe:	8f e1       	ldi	r24, 0x1F	; 31
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	75 c0       	rjmp	.+234    	; 0xfee <draw_scores+0x1a6>
			{
				if((i-3)%14==0)
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	88 2f       	mov	r24, r24
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	03 97       	sbiw	r24, 0x03	; 3
     f0c:	2e e0       	ldi	r18, 0x0E	; 14
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	b9 01       	movw	r22, r18
     f12:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <__divmodhi4>
     f16:	89 2b       	or	r24, r25
     f18:	71 f5       	brne	.+92     	; 0xf76 <draw_scores+0x12e>
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	0e 94 33 06 	call	0xc66	; 0xc66 <y_offset>
     f20:	88 2f       	mov	r24, r24
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	29 e0       	ldi	r18, 0x09	; 9
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	28 1b       	sub	r18, r24
     f2a:	39 0b       	sbc	r19, r25
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	8c 01       	movw	r16, r24
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <draw_scores+0xf0>
     f34:	00 0f       	add	r16, r16
     f36:	11 1f       	adc	r17, r17
     f38:	2a 95       	dec	r18
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <draw_scores+0xec>
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	0e 94 46 06 	call	0xc8c	; 0xc8c <x_offset>
     f42:	48 2f       	mov	r20, r24
     f44:	84 2f       	mov	r24, r20
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	2d 81       	ldd	r18, Y+5	; 0x05
     f4e:	3e 81       	ldd	r19, Y+6	; 0x06
     f50:	82 0f       	add	r24, r18
     f52:	93 1f       	adc	r25, r19
     f54:	24 2f       	mov	r18, r20
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	22 0f       	add	r18, r18
     f5a:	33 1f       	adc	r19, r19
     f5c:	4d 81       	ldd	r20, Y+5	; 0x05
     f5e:	5e 81       	ldd	r21, Y+6	; 0x06
     f60:	24 0f       	add	r18, r20
     f62:	35 1f       	adc	r19, r21
     f64:	f9 01       	movw	r30, r18
     f66:	20 81       	ld	r18, Z
     f68:	31 81       	ldd	r19, Z+1	; 0x01
     f6a:	a8 01       	movw	r20, r16
     f6c:	24 2b       	or	r18, r20
     f6e:	35 2b       	or	r19, r21
     f70:	fc 01       	movw	r30, r24
     f72:	31 83       	std	Z+1, r19	; 0x01
     f74:	20 83       	st	Z, r18
			
				if((i-5)%14==0)
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	88 2f       	mov	r24, r24
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	05 97       	sbiw	r24, 0x05	; 5
     f7e:	2e e0       	ldi	r18, 0x0E	; 14
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	b9 01       	movw	r22, r18
     f84:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <__divmodhi4>
     f88:	89 2b       	or	r24, r25
     f8a:	71 f5       	brne	.+92     	; 0xfe8 <draw_scores+0x1a0>
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	0e 94 33 06 	call	0xc66	; 0xc66 <y_offset>
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	29 e0       	ldi	r18, 0x09	; 9
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	28 1b       	sub	r18, r24
     f9c:	39 0b       	sbc	r19, r25
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	8c 01       	movw	r16, r24
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <draw_scores+0x162>
     fa6:	00 0f       	add	r16, r16
     fa8:	11 1f       	adc	r17, r17
     faa:	2a 95       	dec	r18
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <draw_scores+0x15e>
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	0e 94 46 06 	call	0xc8c	; 0xc8c <x_offset>
     fb4:	48 2f       	mov	r20, r24
     fb6:	84 2f       	mov	r24, r20
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	2d 81       	ldd	r18, Y+5	; 0x05
     fc0:	3e 81       	ldd	r19, Y+6	; 0x06
     fc2:	82 0f       	add	r24, r18
     fc4:	93 1f       	adc	r25, r19
     fc6:	24 2f       	mov	r18, r20
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	22 0f       	add	r18, r18
     fcc:	33 1f       	adc	r19, r19
     fce:	4d 81       	ldd	r20, Y+5	; 0x05
     fd0:	5e 81       	ldd	r21, Y+6	; 0x06
     fd2:	24 0f       	add	r18, r20
     fd4:	35 1f       	adc	r19, r21
     fd6:	f9 01       	movw	r30, r18
     fd8:	20 81       	ld	r18, Z
     fda:	31 81       	ldd	r19, Z+1	; 0x01
     fdc:	a8 01       	movw	r20, r16
     fde:	24 2b       	or	r18, r20
     fe0:	35 2b       	or	r19, r21
     fe2:	fc 01       	movw	r30, r24
     fe4:	31 83       	std	Z+1, r19	; 0x01
     fe6:	20 83       	st	Z, r18
			framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
		}
	}
	else if(score_right==2)
		{
			for(uint8_t i = 31; i <=103; i++)
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	8f 5f       	subi	r24, 0xFF	; 255
     fec:	8a 83       	std	Y+2, r24	; 0x02
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	88 36       	cpi	r24, 0x68	; 104
     ff2:	08 f4       	brcc	.+2      	; 0xff6 <draw_scores+0x1ae>
     ff4:	87 cf       	rjmp	.-242    	; 0xf04 <draw_scores+0xbc>
			}
		}
		
	
	
		if(score_left==1)
     ff6:	88 85       	ldd	r24, Y+8	; 0x08
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	09 f0       	breq	.+2      	; 0xffe <draw_scores+0x1b6>
     ffc:	43 c0       	rjmp	.+134    	; 0x1084 <draw_scores+0x23c>
		{
			for(uint8_t i = 37; i <=107; i++)
     ffe:	85 e2       	ldi	r24, 0x25	; 37
    1000:	8b 83       	std	Y+3, r24	; 0x03
    1002:	3c c0       	rjmp	.+120    	; 0x107c <draw_scores+0x234>
			{
				if((i-9)%14==0)
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	09 97       	sbiw	r24, 0x09	; 9
    100c:	2e e0       	ldi	r18, 0x0E	; 14
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	b9 01       	movw	r22, r18
    1012:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <__divmodhi4>
    1016:	89 2b       	or	r24, r25
    1018:	71 f5       	brne	.+92     	; 0x1076 <draw_scores+0x22e>
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	0e 94 33 06 	call	0xc66	; 0xc66 <y_offset>
    1020:	88 2f       	mov	r24, r24
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	29 e0       	ldi	r18, 0x09	; 9
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	28 1b       	sub	r18, r24
    102a:	39 0b       	sbc	r19, r25
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	8c 01       	movw	r16, r24
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <draw_scores+0x1f0>
    1034:	00 0f       	add	r16, r16
    1036:	11 1f       	adc	r17, r17
    1038:	2a 95       	dec	r18
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <draw_scores+0x1ec>
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	0e 94 46 06 	call	0xc8c	; 0xc8c <x_offset>
    1042:	48 2f       	mov	r20, r24
    1044:	84 2f       	mov	r24, r20
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	2d 81       	ldd	r18, Y+5	; 0x05
    104e:	3e 81       	ldd	r19, Y+6	; 0x06
    1050:	82 0f       	add	r24, r18
    1052:	93 1f       	adc	r25, r19
    1054:	24 2f       	mov	r18, r20
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	22 0f       	add	r18, r18
    105a:	33 1f       	adc	r19, r19
    105c:	4d 81       	ldd	r20, Y+5	; 0x05
    105e:	5e 81       	ldd	r21, Y+6	; 0x06
    1060:	24 0f       	add	r18, r20
    1062:	35 1f       	adc	r19, r21
    1064:	f9 01       	movw	r30, r18
    1066:	20 81       	ld	r18, Z
    1068:	31 81       	ldd	r19, Z+1	; 0x01
    106a:	a8 01       	movw	r20, r16
    106c:	24 2b       	or	r18, r20
    106e:	35 2b       	or	r19, r21
    1070:	fc 01       	movw	r30, r24
    1072:	31 83       	std	Z+1, r19	; 0x01
    1074:	20 83       	st	Z, r18
		
	
	
		if(score_left==1)
		{
			for(uint8_t i = 37; i <=107; i++)
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	8f 5f       	subi	r24, 0xFF	; 255
    107a:	8b 83       	std	Y+3, r24	; 0x03
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	8c 36       	cpi	r24, 0x6C	; 108
    1080:	08 f2       	brcs	.-126    	; 0x1004 <draw_scores+0x1bc>
		}
		
		
		
	
}
    1082:	80 c0       	rjmp	.+256    	; 0x1184 <draw_scores+0x33c>
			{
				if((i-9)%14==0)
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
			}
		}
		else if(score_left==2)
    1084:	88 85       	ldd	r24, Y+8	; 0x08
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	09 f0       	breq	.+2      	; 0x108c <draw_scores+0x244>
    108a:	7c c0       	rjmp	.+248    	; 0x1184 <draw_scores+0x33c>
		{
			for(uint8_t i = 37; i <=109; i++)
    108c:	85 e2       	ldi	r24, 0x25	; 37
    108e:	8c 83       	std	Y+4, r24	; 0x04
    1090:	75 c0       	rjmp	.+234    	; 0x117c <draw_scores+0x334>
			{
				if((i-9)%14==0)
    1092:	8c 81       	ldd	r24, Y+4	; 0x04
    1094:	88 2f       	mov	r24, r24
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	09 97       	sbiw	r24, 0x09	; 9
    109a:	2e e0       	ldi	r18, 0x0E	; 14
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	b9 01       	movw	r22, r18
    10a0:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <__divmodhi4>
    10a4:	89 2b       	or	r24, r25
    10a6:	71 f5       	brne	.+92     	; 0x1104 <draw_scores+0x2bc>
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
    10a8:	8c 81       	ldd	r24, Y+4	; 0x04
    10aa:	0e 94 33 06 	call	0xc66	; 0xc66 <y_offset>
    10ae:	88 2f       	mov	r24, r24
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	29 e0       	ldi	r18, 0x09	; 9
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	28 1b       	sub	r18, r24
    10b8:	39 0b       	sbc	r19, r25
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	8c 01       	movw	r16, r24
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <draw_scores+0x27e>
    10c2:	00 0f       	add	r16, r16
    10c4:	11 1f       	adc	r17, r17
    10c6:	2a 95       	dec	r18
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <draw_scores+0x27a>
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	0e 94 46 06 	call	0xc8c	; 0xc8c <x_offset>
    10d0:	48 2f       	mov	r20, r24
    10d2:	84 2f       	mov	r24, r20
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	2d 81       	ldd	r18, Y+5	; 0x05
    10dc:	3e 81       	ldd	r19, Y+6	; 0x06
    10de:	82 0f       	add	r24, r18
    10e0:	93 1f       	adc	r25, r19
    10e2:	24 2f       	mov	r18, r20
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	22 0f       	add	r18, r18
    10e8:	33 1f       	adc	r19, r19
    10ea:	4d 81       	ldd	r20, Y+5	; 0x05
    10ec:	5e 81       	ldd	r21, Y+6	; 0x06
    10ee:	24 0f       	add	r18, r20
    10f0:	35 1f       	adc	r19, r21
    10f2:	f9 01       	movw	r30, r18
    10f4:	20 81       	ld	r18, Z
    10f6:	31 81       	ldd	r19, Z+1	; 0x01
    10f8:	a8 01       	movw	r20, r16
    10fa:	24 2b       	or	r18, r20
    10fc:	35 2b       	or	r19, r21
    10fe:	fc 01       	movw	r30, r24
    1100:	31 83       	std	Z+1, r19	; 0x01
    1102:	20 83       	st	Z, r18
				if((i-11)%14==0)
    1104:	8c 81       	ldd	r24, Y+4	; 0x04
    1106:	88 2f       	mov	r24, r24
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0b 97       	sbiw	r24, 0x0b	; 11
    110c:	2e e0       	ldi	r18, 0x0E	; 14
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	b9 01       	movw	r22, r18
    1112:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <__divmodhi4>
    1116:	89 2b       	or	r24, r25
    1118:	71 f5       	brne	.+92     	; 0x1176 <draw_scores+0x32e>
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
    111a:	8c 81       	ldd	r24, Y+4	; 0x04
    111c:	0e 94 33 06 	call	0xc66	; 0xc66 <y_offset>
    1120:	88 2f       	mov	r24, r24
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	29 e0       	ldi	r18, 0x09	; 9
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	28 1b       	sub	r18, r24
    112a:	39 0b       	sbc	r19, r25
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	8c 01       	movw	r16, r24
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <draw_scores+0x2f0>
    1134:	00 0f       	add	r16, r16
    1136:	11 1f       	adc	r17, r17
    1138:	2a 95       	dec	r18
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <draw_scores+0x2ec>
    113c:	8c 81       	ldd	r24, Y+4	; 0x04
    113e:	0e 94 46 06 	call	0xc8c	; 0xc8c <x_offset>
    1142:	48 2f       	mov	r20, r24
    1144:	84 2f       	mov	r24, r20
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	2d 81       	ldd	r18, Y+5	; 0x05
    114e:	3e 81       	ldd	r19, Y+6	; 0x06
    1150:	82 0f       	add	r24, r18
    1152:	93 1f       	adc	r25, r19
    1154:	24 2f       	mov	r18, r20
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	22 0f       	add	r18, r18
    115a:	33 1f       	adc	r19, r19
    115c:	4d 81       	ldd	r20, Y+5	; 0x05
    115e:	5e 81       	ldd	r21, Y+6	; 0x06
    1160:	24 0f       	add	r18, r20
    1162:	35 1f       	adc	r19, r21
    1164:	f9 01       	movw	r30, r18
    1166:	20 81       	ld	r18, Z
    1168:	31 81       	ldd	r19, Z+1	; 0x01
    116a:	a8 01       	movw	r20, r16
    116c:	24 2b       	or	r18, r20
    116e:	35 2b       	or	r19, r21
    1170:	fc 01       	movw	r30, r24
    1172:	31 83       	std	Z+1, r19	; 0x01
    1174:	20 83       	st	Z, r18
				framebuffer[x_offset(i)] |= _BV((SCREEN_DIMENSION_Y - (y_offset(i)+1)));
			}
		}
		else if(score_left==2)
		{
			for(uint8_t i = 37; i <=109; i++)
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	8f 5f       	subi	r24, 0xFF	; 255
    117a:	8c 83       	std	Y+4, r24	; 0x04
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	8e 36       	cpi	r24, 0x6E	; 110
    1180:	08 f4       	brcc	.+2      	; 0x1184 <draw_scores+0x33c>
    1182:	87 cf       	rjmp	.-242    	; 0x1092 <draw_scores+0x24a>
		}
		
		
		
	
}
    1184:	00 00       	nop
    1186:	28 96       	adiw	r28, 0x08	; 8
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	08 95       	ret

0000119c <read_joystick>:
#include "joystick.h"

#include <FreeRTOS.h>

uint8_t read_joystick()
{
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
	return  (PINC & _BV(PINC6)) | (PINC & _BV(PINC0)) | (PIND & _BV(PIND3));
    11a4:	86 e2       	ldi	r24, 0x26	; 38
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	fc 01       	movw	r30, r24
    11aa:	80 81       	ld	r24, Z
    11ac:	28 2f       	mov	r18, r24
    11ae:	20 74       	andi	r18, 0x40	; 64
    11b0:	86 e2       	ldi	r24, 0x26	; 38
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	fc 01       	movw	r30, r24
    11b6:	80 81       	ld	r24, Z
    11b8:	81 70       	andi	r24, 0x01	; 1
    11ba:	28 2b       	or	r18, r24
    11bc:	89 e2       	ldi	r24, 0x29	; 41
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	fc 01       	movw	r30, r24
    11c2:	80 81       	ld	r24, Z
    11c4:	88 70       	andi	r24, 0x08	; 8
    11c6:	82 2b       	or	r24, r18
}
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	08 95       	ret

000011ce <joystick_task>:


void joystick_task(void *pvParameters)
{
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <joystick_task+0x6>
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <joystick_task+0x8>
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	9c 83       	std	Y+4, r25	; 0x04
    11dc:	8b 83       	std	Y+3, r24	; 0x03
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
    vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );
    11de:	62 e0       	ldi	r22, 0x02	; 2
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 de 22 	call	0x45bc	; 0x45bc <vTaskSetApplicationTaskTag>
	#endif

	TickType_t joystick_task_lastwake = xTaskGetTickCount();
    11ea:	0e 94 da 21 	call	0x43b4	; 0x43b4 <xTaskGetTickCount>
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01
	
	while(1)
	{
		//Set task period
		vTaskDelayUntil(&joystick_task_lastwake, JOYSTICK_TASK_PERIOD);
    11f2:	69 e1       	ldi	r22, 0x19	; 25
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	ce 01       	movw	r24, r28
    11f8:	01 96       	adiw	r24, 0x01	; 1
    11fa:	0e 94 64 20 	call	0x40c8	; 0x40c8 <vTaskDelayUntil>
		
		//Action
		
	
		if((read_joystick() & JOYSTICK_UP) == 0)
    11fe:	0e 94 ce 08 	call	0x119c	; 0x119c <read_joystick>
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	80 74       	andi	r24, 0x40	; 64
    1208:	99 27       	eor	r25, r25
    120a:	89 2b       	or	r24, r25
    120c:	21 f4       	brne	.+8      	; 0x1216 <joystick_task+0x48>
		{
			bat_move(PL_ONE, D_UP);
    120e:	62 e0       	ldi	r22, 0x02	; 2
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	0e 94 8d 01 	call	0x31a	; 0x31a <bat_move>
		}
		if((read_joystick() & JOYSTICK_DOWN) == 0)
    1216:	0e 94 ce 08 	call	0x119c	; 0x119c <read_joystick>
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	81 70       	andi	r24, 0x01	; 1
    1220:	99 27       	eor	r25, r25
    1222:	89 2b       	or	r24, r25
    1224:	21 f4       	brne	.+8      	; 0x122e <joystick_task+0x60>
		{
			bat_move(PL_ONE, D_DOWN);
    1226:	61 e0       	ldi	r22, 0x01	; 1
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	0e 94 8d 01 	call	0x31a	; 0x31a <bat_move>
		}
		if((read_joystick() & JOYSTICK_PUSH) == 0)
    122e:	0e 94 ce 08 	call	0x119c	; 0x119c <read_joystick>
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	88 70       	andi	r24, 0x08	; 8
    1238:	99 27       	eor	r25, r25
    123a:	89 2b       	or	r24, r25
    123c:	d1 f6       	brne	.-76     	; 0x11f2 <joystick_task+0x24>
		{
			restart_game();
    123e:	0e 94 87 02 	call	0x50e	; 0x50e <restart_game>
		}
	}
    1242:	d7 cf       	rjmp	.-82     	; 0x11f2 <joystick_task+0x24>

00001244 <vApplicationIdleHook>:
// frame_buf contains a bit pattern for each column in the display
uint16_t frame_buf[14] = {1023, 1+256+512, 28+512, 62, 126, 254, 508, 254, 126, 62, 28 + 512, 1+256+512 , 1023, 0 };

//-----------------------------------------
void vApplicationIdleHook( void )
{
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
	//
}
    124c:	00 00       	nop
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
	// Set SER to 1
	PORTD |= _BV(PORTD2);
    125c:	8b e2       	ldi	r24, 0x2B	; 43
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	2b e2       	ldi	r18, 0x2B	; 43
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	f9 01       	movw	r30, r18
    1266:	20 81       	ld	r18, Z
    1268:	24 60       	ori	r18, 0x04	; 4
    126a:	fc 01       	movw	r30, r24
    126c:	20 83       	st	Z, r18
}
    126e:	00 00       	nop
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	08 95       	ret

00001276 <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
	// one SCK pulse
	PORTD |= _BV(PORTD5);
    127e:	8b e2       	ldi	r24, 0x2B	; 43
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	2b e2       	ldi	r18, 0x2B	; 43
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	f9 01       	movw	r30, r18
    1288:	20 81       	ld	r18, Z
    128a:	20 62       	ori	r18, 0x20	; 32
    128c:	fc 01       	movw	r30, r24
    128e:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
    1290:	8b e2       	ldi	r24, 0x2B	; 43
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	2b e2       	ldi	r18, 0x2B	; 43
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	f9 01       	movw	r30, r18
    129a:	20 81       	ld	r18, Z
    129c:	2f 7d       	andi	r18, 0xDF	; 223
    129e:	fc 01       	movw	r30, r24
    12a0:	20 83       	st	Z, r18
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
    12a2:	8b e2       	ldi	r24, 0x2B	; 43
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	2b e2       	ldi	r18, 0x2B	; 43
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	f9 01       	movw	r30, r18
    12ac:	20 81       	ld	r18, Z
    12ae:	20 61       	ori	r18, 0x10	; 16
    12b0:	fc 01       	movw	r30, r24
    12b2:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
    12b4:	8b e2       	ldi	r24, 0x2B	; 43
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	2b e2       	ldi	r18, 0x2B	; 43
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	f9 01       	movw	r30, r18
    12be:	20 81       	ld	r18, Z
    12c0:	2f 7e       	andi	r18, 0xEF	; 239
    12c2:	fc 01       	movw	r30, r24
    12c4:	20 83       	st	Z, r18
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
    12c6:	8b e2       	ldi	r24, 0x2B	; 43
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	2b e2       	ldi	r18, 0x2B	; 43
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	f9 01       	movw	r30, r18
    12d0:	20 81       	ld	r18, Z
    12d2:	2b 7f       	andi	r18, 0xFB	; 251
    12d4:	fc 01       	movw	r30, r24
    12d6:	20 83       	st	Z, r18
}
    12d8:	00 00       	nop
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	08 95       	ret

000012e0 <load_col_value>:

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <load_col_value+0x6>
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	9a 83       	std	Y+2, r25	; 0x02
    12ec:	89 83       	std	Y+1, r24	; 0x01
	PORTA = ~(col_value & 0xFF);
    12ee:	82 e2       	ldi	r24, 0x22	; 34
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	29 81       	ldd	r18, Y+1	; 0x01
    12f4:	20 95       	com	r18
    12f6:	fc 01       	movw	r30, r24
    12f8:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
    12fa:	85 e2       	ldi	r24, 0x25	; 37
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	25 e2       	ldi	r18, 0x25	; 37
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	f9 01       	movw	r30, r18
    1304:	20 81       	ld	r18, Z
    1306:	23 60       	ori	r18, 0x03	; 3
    1308:	fc 01       	movw	r30, r24
    130a:	20 83       	st	Z, r18
	PORTB &= ~((col_value >> 8) & 0x03);
    130c:	85 e2       	ldi	r24, 0x25	; 37
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	25 e2       	ldi	r18, 0x25	; 37
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	f9 01       	movw	r30, r18
    1316:	40 81       	ld	r20, Z
    1318:	29 81       	ldd	r18, Y+1	; 0x01
    131a:	3a 81       	ldd	r19, Y+2	; 0x02
    131c:	23 2f       	mov	r18, r19
    131e:	33 27       	eor	r19, r19
    1320:	23 70       	andi	r18, 0x03	; 3
    1322:	20 95       	com	r18
    1324:	24 23       	and	r18, r20
    1326:	fc 01       	movw	r30, r24
    1328:	20 83       	st	Z, r18
}
    132a:	00 00       	nop
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	08 95       	ret

00001336 <handle_display>:

//-----------------------------------------
void handle_display(void)
{
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
	static uint8_t col = 0;
	
	if (col == 0)
    133e:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <col.2142>
    1342:	88 23       	and	r24, r24
    1344:	11 f4       	brne	.+4      	; 0x134a <handle_display+0x14>
	{
		prepare_shiftregister();
    1346:	0e 94 2a 09 	call	0x1254	; 0x1254 <prepare_shiftregister>
	}
	
	load_col_value(frame_buf[col]);
    134a:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <col.2142>
    134e:	88 2f       	mov	r24, r24
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	8d 5f       	subi	r24, 0xFD	; 253
    1358:	9e 4f       	sbci	r25, 0xFE	; 254
    135a:	fc 01       	movw	r30, r24
    135c:	80 81       	ld	r24, Z
    135e:	91 81       	ldd	r25, Z+1	; 0x01
    1360:	0e 94 70 09 	call	0x12e0	; 0x12e0 <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
    1364:	0e 94 3b 09 	call	0x1276	; 0x1276 <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
    1368:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <col.2142>
    136c:	8f 5f       	subi	r24, 0xFF	; 255
    136e:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <col.2142>
	if (col > 13)
    1372:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <col.2142>
    1376:	8e 30       	cpi	r24, 0x0E	; 14
    1378:	10 f0       	brcs	.+4      	; 0x137e <handle_display+0x48>
	{
		col = 0;
    137a:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <col.2142>
	}
}
    137e:	00 00       	nop
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	08 95       	ret

00001386 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask,signed char *pcTaskName )
{
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	00 d0       	rcall	.+0      	; 0x138c <vApplicationStackOverflowHook+0x6>
    138c:	00 d0       	rcall	.+0      	; 0x138e <vApplicationStackOverflowHook+0x8>
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	9a 83       	std	Y+2, r25	; 0x02
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	7c 83       	std	Y+4, r23	; 0x04
    1398:	6b 83       	std	Y+3, r22	; 0x03
	

}
    139a:	00 00       	nop
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	08 95       	ret

000013aa <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62

}
    13b2:	00 00       	nop
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	08 95       	ret

000013ba <main>:

//-----------------------------------------
int main(void)
{	
    13ba:	ef 92       	push	r14
    13bc:	ff 92       	push	r15
    13be:	0f 93       	push	r16
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <main+0xc>
    13c6:	1f 92       	push	r1
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
	cli();
    13cc:	f8 94       	cli
	//
	init_board();
    13ce:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
    13d2:	8b e2       	ldi	r24, 0x2B	; 43
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	2b e2       	ldi	r18, 0x2B	; 43
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	f9 01       	movw	r30, r18
    13dc:	20 81       	ld	r18, Z
    13de:	2f 7b       	andi	r18, 0xBF	; 191
    13e0:	fc 01       	movw	r30, r24
    13e2:	20 83       	st	Z, r18
	
	//Tasks 
	
	BaseType_t t1 = xTaskCreate(serial_com_task, (const char *)"serial_com", 250, (void *)NULL, tskIDLE_PRIORITY+3, NULL);
    13e4:	e1 2c       	mov	r14, r1
    13e6:	f1 2c       	mov	r15, r1
    13e8:	03 e0       	ldi	r16, 0x03	; 3
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	4a ef       	ldi	r20, 0xFA	; 250
    13f0:	50 e0       	ldi	r21, 0x00	; 0
    13f2:	63 e5       	ldi	r22, 0x53	; 83
    13f4:	71 e0       	ldi	r23, 0x01	; 1
    13f6:	86 ed       	ldi	r24, 0xD6	; 214
    13f8:	9c e0       	ldi	r25, 0x0C	; 12
    13fa:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <xTaskCreate>
    13fe:	89 83       	std	Y+1, r24	; 0x01
	BaseType_t t2 = xTaskCreate(joystick_task, (const char *)"joystick", configMINIMAL_STACK_SIZE + 50, (void *)NULL, tskIDLE_PRIORITY+2, NULL);
    1400:	e1 2c       	mov	r14, r1
    1402:	f1 2c       	mov	r15, r1
    1404:	02 e0       	ldi	r16, 0x02	; 2
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	47 e8       	ldi	r20, 0x87	; 135
    140c:	50 e0       	ldi	r21, 0x00	; 0
    140e:	6e e5       	ldi	r22, 0x5E	; 94
    1410:	71 e0       	ldi	r23, 0x01	; 1
    1412:	87 ee       	ldi	r24, 0xE7	; 231
    1414:	98 e0       	ldi	r25, 0x08	; 8
    1416:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <xTaskCreate>
    141a:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t t3 = xTaskCreate(game_renderer_task, (const char *)"game_rend", configMINIMAL_STACK_SIZE+50, frame_buf, tskIDLE_PRIORITY+4, NULL);
    141c:	e1 2c       	mov	r14, r1
    141e:	f1 2c       	mov	r15, r1
    1420:	04 e0       	ldi	r16, 0x04	; 4
    1422:	23 e0       	ldi	r18, 0x03	; 3
    1424:	31 e0       	ldi	r19, 0x01	; 1
    1426:	47 e8       	ldi	r20, 0x87	; 135
    1428:	50 e0       	ldi	r21, 0x00	; 0
    142a:	67 e6       	ldi	r22, 0x67	; 103
    142c:	71 e0       	ldi	r23, 0x01	; 1
    142e:	81 ee       	ldi	r24, 0xE1	; 225
    1430:	92 e0       	ldi	r25, 0x02	; 2
    1432:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <xTaskCreate>
    1436:	8b 83       	std	Y+3, r24	; 0x03

	// Start the display handler timer
	init_display_timer(handle_display);
    1438:	8b e9       	ldi	r24, 0x9B	; 155
    143a:	99 e0       	ldi	r25, 0x09	; 9
    143c:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <init_display_timer>
	
	sei();
    1440:	78 94       	sei
	
	//Start the scheduler
	vTaskStartScheduler();
    1442:	0e 94 01 21 	call	0x4202	; 0x4202 <vTaskStartScheduler>
	
	//Should never reach here
	while (1)
	{

	}
    1446:	ff cf       	rjmp	.-2      	; 0x1446 <main+0x8c>

00001448 <compute_crc8>:
#include "protocol.h"
#include <FreeRTOS.h>
#include <queue.h>

CRC compute_crc8(uint8_t data[], uint8_t data_size)
{
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	27 97       	sbiw	r28, 0x07	; 7
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	9e 83       	std	Y+6, r25	; 0x06
    145e:	8d 83       	std	Y+5, r24	; 0x05
    1460:	6f 83       	std	Y+7, r22	; 0x07
	CRC crc = 0;
    1462:	19 82       	std	Y+1, r1	; 0x01

	for (uint8_t i = 0; i < data_size; i++)
    1464:	1a 82       	std	Y+2, r1	; 0x02
    1466:	26 c0       	rjmp	.+76     	; 0x14b4 <compute_crc8+0x6c>
	{
		crc ^= data[i];
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	88 2f       	mov	r24, r24
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	2d 81       	ldd	r18, Y+5	; 0x05
    1470:	3e 81       	ldd	r19, Y+6	; 0x06
    1472:	82 0f       	add	r24, r18
    1474:	93 1f       	adc	r25, r19
    1476:	fc 01       	movw	r30, r24
    1478:	80 81       	ld	r24, Z
    147a:	99 81       	ldd	r25, Y+1	; 0x01
    147c:	89 27       	eor	r24, r25
    147e:	89 83       	std	Y+1, r24	; 0x01
		for (uint8_t j = 0; j < 8; j++)
    1480:	1b 82       	std	Y+3, r1	; 0x03
    1482:	12 c0       	rjmp	.+36     	; 0x14a8 <compute_crc8+0x60>
		{
			uint8_t msb = (crc >> 7) & 1;
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	88 1f       	adc	r24, r24
    1488:	88 27       	eor	r24, r24
    148a:	88 1f       	adc	r24, r24
    148c:	8c 83       	std	Y+4, r24	; 0x04
			crc <<= 1;
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	88 0f       	add	r24, r24
    1492:	89 83       	std	Y+1, r24	; 0x01
			if (msb) {
    1494:	8c 81       	ldd	r24, Y+4	; 0x04
    1496:	88 23       	and	r24, r24
    1498:	21 f0       	breq	.+8      	; 0x14a2 <compute_crc8+0x5a>
				crc ^= CRC8_POLYNOMIAL;
    149a:	99 81       	ldd	r25, Y+1	; 0x01
    149c:	87 e0       	ldi	r24, 0x07	; 7
    149e:	89 27       	eor	r24, r25
    14a0:	89 83       	std	Y+1, r24	; 0x01
	CRC crc = 0;

	for (uint8_t i = 0; i < data_size; i++)
	{
		crc ^= data[i];
		for (uint8_t j = 0; j < 8; j++)
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	8f 5f       	subi	r24, 0xFF	; 255
    14a6:	8b 83       	std	Y+3, r24	; 0x03
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	88 30       	cpi	r24, 0x08	; 8
    14ac:	58 f3       	brcs	.-42     	; 0x1484 <compute_crc8+0x3c>

CRC compute_crc8(uint8_t data[], uint8_t data_size)
{
	CRC crc = 0;

	for (uint8_t i = 0; i < data_size; i++)
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	8f 5f       	subi	r24, 0xFF	; 255
    14b2:	8a 83       	std	Y+2, r24	; 0x02
    14b4:	9a 81       	ldd	r25, Y+2	; 0x02
    14b6:	8f 81       	ldd	r24, Y+7	; 0x07
    14b8:	98 17       	cp	r25, r24
    14ba:	b0 f2       	brcs	.-84     	; 0x1468 <compute_crc8+0x20>
			if (msb) {
				crc ^= CRC8_POLYNOMIAL;
			}
		}
	}
	return crc;
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    14be:	27 96       	adiw	r28, 0x07	; 7
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	f8 94       	cli
    14c4:	de bf       	out	0x3e, r29	; 62
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	cd bf       	out	0x3d, r28	; 61
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	08 95       	ret

000014d0 <unpack_data_frame>:

Frame_type_t unpack_data_frame(uint8_t *frame_buffer, uint8_t frame_buffer_size, uint8_t *data_length)
{
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	28 97       	sbiw	r28, 0x08	; 8
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	9d 83       	std	Y+5, r25	; 0x05
    14e6:	8c 83       	std	Y+4, r24	; 0x04
    14e8:	6e 83       	std	Y+6, r22	; 0x06
    14ea:	58 87       	std	Y+8, r21	; 0x08
    14ec:	4f 83       	std	Y+7, r20	; 0x07
	if (frame_buffer_size < MIN_FRAME_SIZE)
    14ee:	8e 81       	ldd	r24, Y+6	; 0x06
    14f0:	84 30       	cpi	r24, 0x04	; 4
    14f2:	10 f4       	brcc	.+4      	; 0x14f8 <unpack_data_frame+0x28>
		return FrameInvalid;
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	41 c0       	rjmp	.+130    	; 0x157a <unpack_data_frame+0xaa>
	if (!is_start_of_frame(*frame_buffer))
    14f8:	8c 81       	ldd	r24, Y+4	; 0x04
    14fa:	9d 81       	ldd	r25, Y+5	; 0x05
    14fc:	fc 01       	movw	r30, r24
    14fe:	80 81       	ld	r24, Z
    1500:	0e 94 c9 0b 	call	0x1792	; 0x1792 <is_start_of_frame>
    1504:	98 2f       	mov	r25, r24
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	89 27       	eor	r24, r25
    150a:	88 23       	and	r24, r24
    150c:	11 f0       	breq	.+4      	; 0x1512 <unpack_data_frame+0x42>
		return FrameInvalid;
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	34 c0       	rjmp	.+104    	; 0x157a <unpack_data_frame+0xaa>

	uint8_t frame_size = get_frame_size(frame_buffer, frame_buffer_size);
    1512:	8c 81       	ldd	r24, Y+4	; 0x04
    1514:	9d 81       	ldd	r25, Y+5	; 0x05
    1516:	6e 81       	ldd	r22, Y+6	; 0x06
    1518:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <get_frame_size>
    151c:	89 83       	std	Y+1, r24	; 0x01
	if (!is_CRC_valid(frame_buffer, frame_size))
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	69 81       	ldd	r22, Y+1	; 0x01
    1524:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <is_CRC_valid>
    1528:	98 2f       	mov	r25, r24
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	89 27       	eor	r24, r25
    152e:	88 23       	and	r24, r24
    1530:	11 f0       	breq	.+4      	; 0x1536 <unpack_data_frame+0x66>
		return FrameInvalid;
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	22 c0       	rjmp	.+68     	; 0x157a <unpack_data_frame+0xaa>

	Frame_type_t type = *(frame_buffer + LINK_FLAG_SIZE);
    1536:	8c 81       	ldd	r24, Y+4	; 0x04
    1538:	9d 81       	ldd	r25, Y+5	; 0x05
    153a:	fc 01       	movw	r30, r24
    153c:	81 81       	ldd	r24, Z+1	; 0x01
    153e:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t data_offset = LINK_FLAG_SIZE + FLAGS_SIZE + TOTAL_LENGTH_SIZE;
    1540:	83 e0       	ldi	r24, 0x03	; 3
    1542:	8b 83       	std	Y+3, r24	; 0x03

	*data_length = byte_unstuff(frame_buffer, frame_buffer_size, frame_buffer + data_offset, frame_size - (data_offset + CRC_SIZE));
    1544:	99 81       	ldd	r25, Y+1	; 0x01
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	f9 2f       	mov	r31, r25
    154a:	f8 1b       	sub	r31, r24
    154c:	8f 2f       	mov	r24, r31
    154e:	6f ef       	ldi	r22, 0xFF	; 255
    1550:	68 0f       	add	r22, r24
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	88 2f       	mov	r24, r24
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	2c 81       	ldd	r18, Y+4	; 0x04
    155a:	3d 81       	ldd	r19, Y+5	; 0x05
    155c:	a9 01       	movw	r20, r18
    155e:	48 0f       	add	r20, r24
    1560:	59 1f       	adc	r21, r25
    1562:	8c 81       	ldd	r24, Y+4	; 0x04
    1564:	9d 81       	ldd	r25, Y+5	; 0x05
    1566:	26 2f       	mov	r18, r22
    1568:	6e 81       	ldd	r22, Y+6	; 0x06
    156a:	0e 94 0d 01 	call	0x21a	; 0x21a <byte_unstuff>
    156e:	28 2f       	mov	r18, r24
    1570:	8f 81       	ldd	r24, Y+7	; 0x07
    1572:	98 85       	ldd	r25, Y+8	; 0x08
    1574:	fc 01       	movw	r30, r24
    1576:	20 83       	st	Z, r18

	return type;
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
}
    157a:	28 96       	adiw	r28, 0x08	; 8
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	08 95       	ret

0000158c <get_data_frame>:
uint8_t get_data_frame(uint8_t *frame_buffer, uint8_t frame_buffer_size, uint8_t *data_buffer, uint8_t data_buffer_size)//, uint16_t *seq_num, uint16_t ack_num)
{
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	2c 97       	sbiw	r28, 0x0c	; 12
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	cd bf       	out	0x3d, r28	; 61
    15a0:	98 87       	std	Y+8, r25	; 0x08
    15a2:	8f 83       	std	Y+7, r24	; 0x07
    15a4:	69 87       	std	Y+9, r22	; 0x09
    15a6:	5b 87       	std	Y+11, r21	; 0x0b
    15a8:	4a 87       	std	Y+10, r20	; 0x0a
    15aa:	2c 87       	std	Y+12, r18	; 0x0c
	uint8_t const *frame_buffer_start = frame_buffer;
    15ac:	8f 81       	ldd	r24, Y+7	; 0x07
    15ae:	98 85       	ldd	r25, Y+8	; 0x08
    15b0:	9b 83       	std	Y+3, r25	; 0x03
    15b2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t *stuffed_bytes = pvPortMalloc(frame_buffer_size);
    15b4:	89 85       	ldd	r24, Y+9	; 0x09
    15b6:	88 2f       	mov	r24, r24
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	0e 94 d7 17 	call	0x2fae	; 0x2fae <pvPortMalloc>
    15be:	9d 83       	std	Y+5, r25	; 0x05
    15c0:	8c 83       	std	Y+4, r24	; 0x04
	if(!stuffed_bytes)
    15c2:	8c 81       	ldd	r24, Y+4	; 0x04
    15c4:	9d 81       	ldd	r25, Y+5	; 0x05
    15c6:	89 2b       	or	r24, r25
    15c8:	11 f4       	brne	.+4      	; 0x15ce <get_data_frame+0x42>
		return 0;
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	7f c0       	rjmp	.+254    	; 0x16cc <get_data_frame+0x140>
	uint8_t payload_bytes = 0;
    15ce:	1e 82       	std	Y+6, r1	; 0x06
	if ((payload_bytes = byte_stuff(data_buffer, data_buffer_size, stuffed_bytes, data_buffer_size * 2)))
    15d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    15d2:	28 2f       	mov	r18, r24
    15d4:	22 0f       	add	r18, r18
    15d6:	4c 81       	ldd	r20, Y+4	; 0x04
    15d8:	5d 81       	ldd	r21, Y+5	; 0x05
    15da:	8a 85       	ldd	r24, Y+10	; 0x0a
    15dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    15de:	6c 85       	ldd	r22, Y+12	; 0x0c
    15e0:	0e 94 5d 00 	call	0xba	; 0xba <byte_stuff>
    15e4:	8e 83       	std	Y+6, r24	; 0x06
    15e6:	8e 81       	ldd	r24, Y+6	; 0x06
    15e8:	88 23       	and	r24, r24
    15ea:	09 f4       	brne	.+2      	; 0x15ee <get_data_frame+0x62>
    15ec:	6a c0       	rjmp	.+212    	; 0x16c2 <get_data_frame+0x136>
	{
		if ((payload_bytes <= MAX_PAYLOAD_SIZE) && (frame_buffer_size >= (payload_bytes + FRAME_OVERHEAD)))
    15ee:	89 85       	ldd	r24, Y+9	; 0x09
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	8e 81       	ldd	r24, Y+6	; 0x06
    15f6:	88 2f       	mov	r24, r24
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	04 96       	adiw	r24, 0x04	; 4
    15fc:	28 17       	cp	r18, r24
    15fe:	39 07       	cpc	r19, r25
    1600:	08 f4       	brcc	.+2      	; 0x1604 <get_data_frame+0x78>
    1602:	5f c0       	rjmp	.+190    	; 0x16c2 <get_data_frame+0x136>
		{
			*frame_buffer++ = LINK_FLAG;
    1604:	8f 81       	ldd	r24, Y+7	; 0x07
    1606:	98 85       	ldd	r25, Y+8	; 0x08
    1608:	9c 01       	movw	r18, r24
    160a:	2f 5f       	subi	r18, 0xFF	; 255
    160c:	3f 4f       	sbci	r19, 0xFF	; 255
    160e:	38 87       	std	Y+8, r19	; 0x08
    1610:	2f 83       	std	Y+7, r18	; 0x07
    1612:	2f ef       	ldi	r18, 0xFF	; 255
    1614:	fc 01       	movw	r30, r24
    1616:	20 83       	st	Z, r18
			*frame_buffer++ = PLACEHOLDER_FLAG;
    1618:	8f 81       	ldd	r24, Y+7	; 0x07
    161a:	98 85       	ldd	r25, Y+8	; 0x08
    161c:	9c 01       	movw	r18, r24
    161e:	2f 5f       	subi	r18, 0xFF	; 255
    1620:	3f 4f       	sbci	r19, 0xFF	; 255
    1622:	38 87       	std	Y+8, r19	; 0x08
    1624:	2f 83       	std	Y+7, r18	; 0x07
    1626:	21 e0       	ldi	r18, 0x01	; 1
    1628:	fc 01       	movw	r30, r24
    162a:	20 83       	st	Z, r18
			*frame_buffer++ = payload_bytes + FRAME_OVERHEAD;
    162c:	8f 81       	ldd	r24, Y+7	; 0x07
    162e:	98 85       	ldd	r25, Y+8	; 0x08
    1630:	9c 01       	movw	r18, r24
    1632:	2f 5f       	subi	r18, 0xFF	; 255
    1634:	3f 4f       	sbci	r19, 0xFF	; 255
    1636:	38 87       	std	Y+8, r19	; 0x08
    1638:	2f 83       	std	Y+7, r18	; 0x07
    163a:	2e 81       	ldd	r18, Y+6	; 0x06
    163c:	2c 5f       	subi	r18, 0xFC	; 252
    163e:	fc 01       	movw	r30, r24
    1640:	20 83       	st	Z, r18
			for (uint8_t i = 0; i < payload_bytes; i++) //maybe I should use memcpy..
    1642:	19 82       	std	Y+1, r1	; 0x01
    1644:	15 c0       	rjmp	.+42     	; 0x1670 <get_data_frame+0xe4>
				*frame_buffer++ = stuffed_bytes[i];
    1646:	8f 81       	ldd	r24, Y+7	; 0x07
    1648:	98 85       	ldd	r25, Y+8	; 0x08
    164a:	9c 01       	movw	r18, r24
    164c:	2f 5f       	subi	r18, 0xFF	; 255
    164e:	3f 4f       	sbci	r19, 0xFF	; 255
    1650:	38 87       	std	Y+8, r19	; 0x08
    1652:	2f 83       	std	Y+7, r18	; 0x07
    1654:	29 81       	ldd	r18, Y+1	; 0x01
    1656:	22 2f       	mov	r18, r18
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	4c 81       	ldd	r20, Y+4	; 0x04
    165c:	5d 81       	ldd	r21, Y+5	; 0x05
    165e:	24 0f       	add	r18, r20
    1660:	35 1f       	adc	r19, r21
    1662:	f9 01       	movw	r30, r18
    1664:	20 81       	ld	r18, Z
    1666:	fc 01       	movw	r30, r24
    1668:	20 83       	st	Z, r18
		if ((payload_bytes <= MAX_PAYLOAD_SIZE) && (frame_buffer_size >= (payload_bytes + FRAME_OVERHEAD)))
		{
			*frame_buffer++ = LINK_FLAG;
			*frame_buffer++ = PLACEHOLDER_FLAG;
			*frame_buffer++ = payload_bytes + FRAME_OVERHEAD;
			for (uint8_t i = 0; i < payload_bytes; i++) //maybe I should use memcpy..
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	8f 5f       	subi	r24, 0xFF	; 255
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	99 81       	ldd	r25, Y+1	; 0x01
    1672:	8e 81       	ldd	r24, Y+6	; 0x06
    1674:	98 17       	cp	r25, r24
    1676:	38 f3       	brcs	.-50     	; 0x1646 <get_data_frame+0xba>
				*frame_buffer++ = stuffed_bytes[i];

			vPortFree(stuffed_bytes);
    1678:	8c 81       	ldd	r24, Y+4	; 0x04
    167a:	9d 81       	ldd	r25, Y+5	; 0x05
    167c:	0e 94 cc 18 	call	0x3198	; 0x3198 <vPortFree>

			*frame_buffer = compute_crc8(frame_buffer_start, frame_buffer - frame_buffer_start);
    1680:	2f 81       	ldd	r18, Y+7	; 0x07
    1682:	38 85       	ldd	r19, Y+8	; 0x08
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	9b 81       	ldd	r25, Y+3	; 0x03
    1688:	a9 01       	movw	r20, r18
    168a:	48 1b       	sub	r20, r24
    168c:	59 0b       	sbc	r21, r25
    168e:	ca 01       	movw	r24, r20
    1690:	28 2f       	mov	r18, r24
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	9b 81       	ldd	r25, Y+3	; 0x03
    1696:	62 2f       	mov	r22, r18
    1698:	0e 94 24 0a 	call	0x1448	; 0x1448 <compute_crc8>
    169c:	28 2f       	mov	r18, r24
    169e:	8f 81       	ldd	r24, Y+7	; 0x07
    16a0:	98 85       	ldd	r25, Y+8	; 0x08
    16a2:	fc 01       	movw	r30, r24
    16a4:	20 83       	st	Z, r18
			frame_buffer++;
    16a6:	8f 81       	ldd	r24, Y+7	; 0x07
    16a8:	98 85       	ldd	r25, Y+8	; 0x08
    16aa:	01 96       	adiw	r24, 0x01	; 1
    16ac:	98 87       	std	Y+8, r25	; 0x08
    16ae:	8f 83       	std	Y+7, r24	; 0x07

			return frame_buffer - frame_buffer_start;
    16b0:	2f 81       	ldd	r18, Y+7	; 0x07
    16b2:	38 85       	ldd	r19, Y+8	; 0x08
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	9b 81       	ldd	r25, Y+3	; 0x03
    16b8:	a9 01       	movw	r20, r18
    16ba:	48 1b       	sub	r20, r24
    16bc:	59 0b       	sbc	r21, r25
    16be:	ca 01       	movw	r24, r20
    16c0:	05 c0       	rjmp	.+10     	; 0x16cc <get_data_frame+0x140>
		}
	}
	vPortFree(stuffed_bytes);
    16c2:	8c 81       	ldd	r24, Y+4	; 0x04
    16c4:	9d 81       	ldd	r25, Y+5	; 0x05
    16c6:	0e 94 cc 18 	call	0x3198	; 0x3198 <vPortFree>
	return 0;
    16ca:	80 e0       	ldi	r24, 0x00	; 0
}
    16cc:	2c 96       	adiw	r28, 0x0c	; 12
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	08 95       	ret

000016de <get_acknowledge_frame>:
uint8_t get_acknowledge_frame(uint8_t *frame_buffer, uint8_t frame_buffer_size)
{
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <get_acknowledge_frame+0x6>
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <get_acknowledge_frame+0x8>
    16e6:	1f 92       	push	r1
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	9c 83       	std	Y+4, r25	; 0x04
    16ee:	8b 83       	std	Y+3, r24	; 0x03
    16f0:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t const *frame_buffer_start = frame_buffer;
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	9a 83       	std	Y+2, r25	; 0x02
    16f8:	89 83       	std	Y+1, r24	; 0x01
	if (frame_buffer_size >= LINK_FLAG_SIZE + HEADER_SIZE + CRC_SIZE)
    16fa:	8d 81       	ldd	r24, Y+5	; 0x05
    16fc:	84 30       	cpi	r24, 0x04	; 4
    16fe:	08 f4       	brcc	.+2      	; 0x1702 <get_acknowledge_frame+0x24>
    1700:	3f c0       	rjmp	.+126    	; 0x1780 <get_acknowledge_frame+0xa2>
	{
		*frame_buffer++ = LINK_FLAG;
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	9c 81       	ldd	r25, Y+4	; 0x04
    1706:	9c 01       	movw	r18, r24
    1708:	2f 5f       	subi	r18, 0xFF	; 255
    170a:	3f 4f       	sbci	r19, 0xFF	; 255
    170c:	3c 83       	std	Y+4, r19	; 0x04
    170e:	2b 83       	std	Y+3, r18	; 0x03
    1710:	2f ef       	ldi	r18, 0xFF	; 255
    1712:	fc 01       	movw	r30, r24
    1714:	20 83       	st	Z, r18
		*frame_buffer++ = ACK_FLAG;
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	9c 81       	ldd	r25, Y+4	; 0x04
    171a:	9c 01       	movw	r18, r24
    171c:	2f 5f       	subi	r18, 0xFF	; 255
    171e:	3f 4f       	sbci	r19, 0xFF	; 255
    1720:	3c 83       	std	Y+4, r19	; 0x04
    1722:	2b 83       	std	Y+3, r18	; 0x03
    1724:	22 e0       	ldi	r18, 0x02	; 2
    1726:	fc 01       	movw	r30, r24
    1728:	20 83       	st	Z, r18
		*frame_buffer++ = FRAME_OVERHEAD;
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	9c 81       	ldd	r25, Y+4	; 0x04
    172e:	9c 01       	movw	r18, r24
    1730:	2f 5f       	subi	r18, 0xFF	; 255
    1732:	3f 4f       	sbci	r19, 0xFF	; 255
    1734:	3c 83       	std	Y+4, r19	; 0x04
    1736:	2b 83       	std	Y+3, r18	; 0x03
    1738:	24 e0       	ldi	r18, 0x04	; 4
    173a:	fc 01       	movw	r30, r24
    173c:	20 83       	st	Z, r18

		*frame_buffer = compute_crc8(frame_buffer_start, frame_buffer - frame_buffer_start);
    173e:	2b 81       	ldd	r18, Y+3	; 0x03
    1740:	3c 81       	ldd	r19, Y+4	; 0x04
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	9a 81       	ldd	r25, Y+2	; 0x02
    1746:	a9 01       	movw	r20, r18
    1748:	48 1b       	sub	r20, r24
    174a:	59 0b       	sbc	r21, r25
    174c:	ca 01       	movw	r24, r20
    174e:	28 2f       	mov	r18, r24
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	9a 81       	ldd	r25, Y+2	; 0x02
    1754:	62 2f       	mov	r22, r18
    1756:	0e 94 24 0a 	call	0x1448	; 0x1448 <compute_crc8>
    175a:	28 2f       	mov	r18, r24
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	9c 81       	ldd	r25, Y+4	; 0x04
    1760:	fc 01       	movw	r30, r24
    1762:	20 83       	st	Z, r18
		frame_buffer++;
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	9c 81       	ldd	r25, Y+4	; 0x04
    1768:	01 96       	adiw	r24, 0x01	; 1
    176a:	9c 83       	std	Y+4, r25	; 0x04
    176c:	8b 83       	std	Y+3, r24	; 0x03
		return frame_buffer - frame_buffer_start;
    176e:	2b 81       	ldd	r18, Y+3	; 0x03
    1770:	3c 81       	ldd	r19, Y+4	; 0x04
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	9a 81       	ldd	r25, Y+2	; 0x02
    1776:	a9 01       	movw	r20, r18
    1778:	48 1b       	sub	r20, r24
    177a:	59 0b       	sbc	r21, r25
    177c:	ca 01       	movw	r24, r20
    177e:	01 c0       	rjmp	.+2      	; 0x1782 <get_acknowledge_frame+0xa4>
	}
	return 0;
    1780:	80 e0       	ldi	r24, 0x00	; 0
}
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	08 95       	ret

00001792 <is_start_of_frame>:
bool is_start_of_frame(uint8_t byte)
{
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	1f 92       	push	r1
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	89 83       	std	Y+1, r24	; 0x01
	return byte == LINK_FLAG;
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	99 81       	ldd	r25, Y+1	; 0x01
    17a2:	9f 3f       	cpi	r25, 0xFF	; 255
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <is_start_of_frame+0x16>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
}
    17a8:	0f 90       	pop	r0
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	08 95       	ret

000017b0 <is_CRC_valid>:
bool is_CRC_valid(uint8_t *frame_buffer, uint8_t bytes)
{
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <is_CRC_valid+0x6>
    17b6:	1f 92       	push	r1
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	9a 83       	std	Y+2, r25	; 0x02
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	6b 83       	std	Y+3, r22	; 0x03
	return compute_crc8(frame_buffer, bytes) == 0;
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	9a 81       	ldd	r25, Y+2	; 0x02
    17c6:	6b 81       	ldd	r22, Y+3	; 0x03
    17c8:	0e 94 24 0a 	call	0x1448	; 0x1448 <compute_crc8>
    17cc:	98 2f       	mov	r25, r24
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	99 23       	and	r25, r25
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <is_CRC_valid+0x26>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
}
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	08 95       	ret

000017e2 <get_frame_size>:
uint8_t get_frame_size(uint8_t *byte_buffer, uint8_t byte_buffer_size)
{
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	00 d0       	rcall	.+0      	; 0x17e8 <get_frame_size+0x6>
    17e8:	1f 92       	push	r1
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	9a 83       	std	Y+2, r25	; 0x02
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	6b 83       	std	Y+3, r22	; 0x03
	if (byte_buffer_size < (HEADER_SIZE + LINK_FLAG_SIZE))
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	83 30       	cpi	r24, 0x03	; 3
    17f8:	10 f4       	brcc	.+4      	; 0x17fe <get_frame_size+0x1c>
		return 0;
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	16 c0       	rjmp	.+44     	; 0x182a <get_frame_size+0x48>
	if (*byte_buffer != LINK_FLAG)
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
    1802:	fc 01       	movw	r30, r24
    1804:	80 81       	ld	r24, Z
    1806:	8f 3f       	cpi	r24, 0xFF	; 255
    1808:	11 f0       	breq	.+4      	; 0x180e <get_frame_size+0x2c>
		return 0;
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	0e c0       	rjmp	.+28     	; 0x182a <get_frame_size+0x48>
	byte_buffer += LINK_FLAG_SIZE;
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	9a 81       	ldd	r25, Y+2	; 0x02
    1812:	01 96       	adiw	r24, 0x01	; 1
    1814:	9a 83       	std	Y+2, r25	; 0x02
    1816:	89 83       	std	Y+1, r24	; 0x01
	byte_buffer += FLAGS_SIZE;
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	9a 81       	ldd	r25, Y+2	; 0x02
    181c:	01 96       	adiw	r24, 0x01	; 1
    181e:	9a 83       	std	Y+2, r25	; 0x02
    1820:	89 83       	std	Y+1, r24	; 0x01

	return *byte_buffer;
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	9a 81       	ldd	r25, Y+2	; 0x02
    1826:	fc 01       	movw	r30, r24
    1828:	80 81       	ld	r24, Z
}
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	08 95       	ret

00001836 <is_ack_frame>:

bool is_ack_frame(uint8_t *frame_buffer, uint8_t frame_buffer_size)
{
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	00 d0       	rcall	.+0      	; 0x183c <is_ack_frame+0x6>
    183c:	1f 92       	push	r1
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	9a 83       	std	Y+2, r25	; 0x02
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	6b 83       	std	Y+3, r22	; 0x03
	if (frame_buffer_size < (HEADER_SIZE + LINK_FLAG_SIZE))
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	83 30       	cpi	r24, 0x03	; 3
    184c:	10 f4       	brcc	.+4      	; 0x1852 <is_ack_frame+0x1c>
		return false;
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	11 c0       	rjmp	.+34     	; 0x1874 <is_ack_frame+0x3e>

	frame_buffer += LINK_FLAG_SIZE;
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	9a 83       	std	Y+2, r25	; 0x02
    185a:	89 83       	std	Y+1, r24	; 0x01
	return (*frame_buffer & ACK_FLAG);
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	9a 81       	ldd	r25, Y+2	; 0x02
    1860:	fc 01       	movw	r30, r24
    1862:	80 81       	ld	r24, Z
    1864:	88 2f       	mov	r24, r24
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	82 70       	andi	r24, 0x02	; 2
    186a:	99 27       	eor	r25, r25
    186c:	21 e0       	ldi	r18, 0x01	; 1
    186e:	89 2b       	or	r24, r25
    1870:	09 f4       	brne	.+2      	; 0x1874 <is_ack_frame+0x3e>
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	82 2f       	mov	r24, r18
}
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret

00001882 <get_frame_from_queue>:

bool get_frame_from_queue(QueueHandle_t queue, uint8_t *buffer, uint8_t buffer_size, uint8_t *frame_size)
{
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	28 97       	sbiw	r28, 0x08	; 8
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	9b 83       	std	Y+3, r25	; 0x03
    1898:	8a 83       	std	Y+2, r24	; 0x02
    189a:	7d 83       	std	Y+5, r23	; 0x05
    189c:	6c 83       	std	Y+4, r22	; 0x04
    189e:	4e 83       	std	Y+6, r20	; 0x06
    18a0:	38 87       	std	Y+8, r19	; 0x08
    18a2:	2f 83       	std	Y+7, r18	; 0x07
	if (buffer_size < MIN_FRAME_SIZE)
    18a4:	8e 81       	ldd	r24, Y+6	; 0x06
    18a6:	84 30       	cpi	r24, 0x04	; 4
    18a8:	08 f0       	brcs	.+2      	; 0x18ac <get_frame_from_queue+0x2a>
    18aa:	6f c0       	rjmp	.+222    	; 0x198a <get_frame_from_queue+0x108>
	return false;
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	75 c0       	rjmp	.+234    	; 0x199a <get_frame_from_queue+0x118>

	while(*frame_size <= buffer_size)
	{
		if(!xQueueReceive(queue, (buffer + *frame_size), 0))
    18b0:	8f 81       	ldd	r24, Y+7	; 0x07
    18b2:	98 85       	ldd	r25, Y+8	; 0x08
    18b4:	fc 01       	movw	r30, r24
    18b6:	80 81       	ld	r24, Z
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	2c 81       	ldd	r18, Y+4	; 0x04
    18be:	3d 81       	ldd	r19, Y+5	; 0x05
    18c0:	b9 01       	movw	r22, r18
    18c2:	68 0f       	add	r22, r24
    18c4:	79 1f       	adc	r23, r25
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	40 e0       	ldi	r20, 0x00	; 0
    18ce:	50 e0       	ldi	r21, 0x00	; 0
    18d0:	0e 94 ab 1b 	call	0x3756	; 0x3756 <xQueueGenericReceive>
    18d4:	88 23       	and	r24, r24
    18d6:	11 f4       	brne	.+4      	; 0x18dc <get_frame_from_queue+0x5a>
		return false;
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	5f c0       	rjmp	.+190    	; 0x199a <get_frame_from_queue+0x118>

		if (((*frame_size) == 0) && (!is_start_of_frame(*buffer)))
    18dc:	8f 81       	ldd	r24, Y+7	; 0x07
    18de:	98 85       	ldd	r25, Y+8	; 0x08
    18e0:	fc 01       	movw	r30, r24
    18e2:	80 81       	ld	r24, Z
    18e4:	88 23       	and	r24, r24
    18e6:	61 f4       	brne	.+24     	; 0x1900 <get_frame_from_queue+0x7e>
    18e8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ea:	9d 81       	ldd	r25, Y+5	; 0x05
    18ec:	fc 01       	movw	r30, r24
    18ee:	80 81       	ld	r24, Z
    18f0:	0e 94 c9 0b 	call	0x1792	; 0x1792 <is_start_of_frame>
    18f4:	98 2f       	mov	r25, r24
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	89 27       	eor	r24, r25
    18fa:	88 23       	and	r24, r24
    18fc:	09 f0       	breq	.+2      	; 0x1900 <get_frame_from_queue+0x7e>
		continue; //Seek the start of a new frame
    18fe:	45 c0       	rjmp	.+138    	; 0x198a <get_frame_from_queue+0x108>

		(*frame_size)++;
    1900:	8f 81       	ldd	r24, Y+7	; 0x07
    1902:	98 85       	ldd	r25, Y+8	; 0x08
    1904:	fc 01       	movw	r30, r24
    1906:	80 81       	ld	r24, Z
    1908:	21 e0       	ldi	r18, 0x01	; 1
    190a:	28 0f       	add	r18, r24
    190c:	8f 81       	ldd	r24, Y+7	; 0x07
    190e:	98 85       	ldd	r25, Y+8	; 0x08
    1910:	fc 01       	movw	r30, r24
    1912:	20 83       	st	Z, r18
		
		if (*frame_size >= (LINK_FLAG_SIZE + HEADER_SIZE))
    1914:	8f 81       	ldd	r24, Y+7	; 0x07
    1916:	98 85       	ldd	r25, Y+8	; 0x08
    1918:	fc 01       	movw	r30, r24
    191a:	80 81       	ld	r24, Z
    191c:	83 30       	cpi	r24, 0x03	; 3
    191e:	a8 f1       	brcs	.+106    	; 0x198a <get_frame_from_queue+0x108>
		{
			//frame is big enough to have the header -> size should be available.
			uint8_t f_size = get_frame_size(buffer, LINK_FLAG_SIZE + HEADER_SIZE);
    1920:	8c 81       	ldd	r24, Y+4	; 0x04
    1922:	9d 81       	ldd	r25, Y+5	; 0x05
    1924:	63 e0       	ldi	r22, 0x03	; 3
    1926:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <get_frame_size>
    192a:	89 83       	std	Y+1, r24	; 0x01
			if (buffer_size < f_size)
    192c:	9e 81       	ldd	r25, Y+6	; 0x06
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	98 17       	cp	r25, r24
    1932:	10 f5       	brcc	.+68     	; 0x1978 <get_frame_from_queue+0xf6>
			return false;
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	31 c0       	rjmp	.+98     	; 0x199a <get_frame_from_queue+0x118>

			//try to get the rest
			while ((*frame_size < f_size))
			{
				if(!xQueueReceive(queue, (buffer + *frame_size), 0))
    1938:	8f 81       	ldd	r24, Y+7	; 0x07
    193a:	98 85       	ldd	r25, Y+8	; 0x08
    193c:	fc 01       	movw	r30, r24
    193e:	80 81       	ld	r24, Z
    1940:	88 2f       	mov	r24, r24
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	2c 81       	ldd	r18, Y+4	; 0x04
    1946:	3d 81       	ldd	r19, Y+5	; 0x05
    1948:	b9 01       	movw	r22, r18
    194a:	68 0f       	add	r22, r24
    194c:	79 1f       	adc	r23, r25
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	9b 81       	ldd	r25, Y+3	; 0x03
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	40 e0       	ldi	r20, 0x00	; 0
    1956:	50 e0       	ldi	r21, 0x00	; 0
    1958:	0e 94 ab 1b 	call	0x3756	; 0x3756 <xQueueGenericReceive>
    195c:	88 23       	and	r24, r24
    195e:	11 f4       	brne	.+4      	; 0x1964 <get_frame_from_queue+0xe2>
				return false;
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	1b c0       	rjmp	.+54     	; 0x199a <get_frame_from_queue+0x118>

				(*frame_size)++;
    1964:	8f 81       	ldd	r24, Y+7	; 0x07
    1966:	98 85       	ldd	r25, Y+8	; 0x08
    1968:	fc 01       	movw	r30, r24
    196a:	80 81       	ld	r24, Z
    196c:	21 e0       	ldi	r18, 0x01	; 1
    196e:	28 0f       	add	r18, r24
    1970:	8f 81       	ldd	r24, Y+7	; 0x07
    1972:	98 85       	ldd	r25, Y+8	; 0x08
    1974:	fc 01       	movw	r30, r24
    1976:	20 83       	st	Z, r18
			uint8_t f_size = get_frame_size(buffer, LINK_FLAG_SIZE + HEADER_SIZE);
			if (buffer_size < f_size)
			return false;

			//try to get the rest
			while ((*frame_size < f_size))
    1978:	8f 81       	ldd	r24, Y+7	; 0x07
    197a:	98 85       	ldd	r25, Y+8	; 0x08
    197c:	fc 01       	movw	r30, r24
    197e:	90 81       	ld	r25, Z
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	98 17       	cp	r25, r24
    1984:	c8 f2       	brcs	.-78     	; 0x1938 <get_frame_from_queue+0xb6>

				(*frame_size)++;
			}

			//Survived the loop! must be at the end of the frame
			return true;
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	08 c0       	rjmp	.+16     	; 0x199a <get_frame_from_queue+0x118>
bool get_frame_from_queue(QueueHandle_t queue, uint8_t *buffer, uint8_t buffer_size, uint8_t *frame_size)
{
	if (buffer_size < MIN_FRAME_SIZE)
	return false;

	while(*frame_size <= buffer_size)
    198a:	8f 81       	ldd	r24, Y+7	; 0x07
    198c:	98 85       	ldd	r25, Y+8	; 0x08
    198e:	fc 01       	movw	r30, r24
    1990:	90 81       	ld	r25, Z
    1992:	8e 81       	ldd	r24, Y+6	; 0x06
    1994:	89 17       	cp	r24, r25
    1996:	08 f0       	brcs	.+2      	; 0x199a <get_frame_from_queue+0x118>
    1998:	8b cf       	rjmp	.-234    	; 0x18b0 <get_frame_from_queue+0x2e>

			//Survived the loop! must be at the end of the frame
			return true;
		}
	}
    199a:	28 96       	adiw	r28, 0x08	; 8
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	08 95       	ret

000019ac <serial_com_task>:
static TickType_t last_frame_time = 0;
static uint8_t ack_timeouts = 0;


void serial_com_task(void *pvParameters)
{
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	c1 57       	subi	r28, 0x71	; 113
    19b6:	d1 09       	sbc	r29, r1
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	9e 01       	movw	r18, r28
    19c4:	20 59       	subi	r18, 0x90	; 144
    19c6:	3f 4f       	sbci	r19, 0xFF	; 255
    19c8:	f9 01       	movw	r30, r18
    19ca:	91 83       	std	Z+1, r25	; 0x01
    19cc:	80 83       	st	Z, r24
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	//vTaskSetApplicationTaskTag( NULL, ( void * ) 3 );
	#endif

	com_send_frame_buffer = xQueueCreate(COM_SEND_QUEUE_SIZE, sizeof(uint8_t));
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	61 e0       	ldi	r22, 0x01	; 1
    19d2:	84 e6       	ldi	r24, 0x64	; 100
    19d4:	0e 94 0a 1a 	call	0x3414	; 0x3414 <xQueueGenericCreate>
    19d8:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <com_send_frame_buffer+0x1>
    19dc:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <com_send_frame_buffer>
	com_send_queue_add_sem = xSemaphoreCreateBinary(); //xSemaphoreCreateBinary( void );  //		//should be semphores
    19e0:	43 e0       	ldi	r20, 0x03	; 3
    19e2:	60 e0       	ldi	r22, 0x00	; 0
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	0e 94 0a 1a 	call	0x3414	; 0x3414 <xQueueGenericCreate>
    19ea:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <com_send_queue_add_sem+0x1>
    19ee:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <com_send_queue_add_sem>
	_x_com_received_chars_queue = xQueueCreate( _COM_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
    19f2:	8e e1       	ldi	r24, 0x1E	; 30
    19f4:	40 e0       	ldi	r20, 0x00	; 0
    19f6:	61 e0       	ldi	r22, 0x01	; 1
    19f8:	0e 94 0a 1a 	call	0x3414	; 0x3414 <xQueueGenericCreate>
    19fc:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <_x_com_received_chars_queue+0x1>
    1a00:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <_x_com_received_chars_queue>
	init_com(_x_com_received_chars_queue);
    1a04:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <_x_com_received_chars_queue>
    1a08:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <_x_com_received_chars_queue+0x1>
    1a0c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <init_com>

	
	uint8_t frame[MAX_FRAME_SIZE];
	uint8_t frame_size = 0;
    1a10:	ce 01       	movw	r24, r28
    1a12:	88 59       	subi	r24, 0x98	; 152
    1a14:	9f 4f       	sbci	r25, 0xFF	; 255
    1a16:	fc 01       	movw	r30, r24
    1a18:	10 82       	st	Z, r1

	TickType_t serial_com_task_lastwake = xTaskGetTickCount();
    1a1a:	0e 94 da 21 	call	0x43b4	; 0x43b4 <xTaskGetTickCount>
    1a1e:	9c 01       	movw	r18, r24
    1a20:	ce 01       	movw	r24, r28
    1a22:	87 59       	subi	r24, 0x97	; 151
    1a24:	9f 4f       	sbci	r25, 0xFF	; 255
    1a26:	fc 01       	movw	r30, r24
    1a28:	31 83       	std	Z+1, r19	; 0x01
    1a2a:	20 83       	st	Z, r18
	
	while(1)
	{
		//UBaseType_t stackUsage = uxTaskGetStackHighWaterMark(NULL);
		//Set task period
		vTaskDelayUntil(&serial_com_task_lastwake, SERIAL_COM_TASK_PERIOD);
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	87 59       	subi	r24, 0x97	; 151
    1a30:	9f 4f       	sbci	r25, 0xFF	; 255
    1a32:	62 e3       	ldi	r22, 0x32	; 50
    1a34:	70 e0       	ldi	r23, 0x00	; 0
    1a36:	0e 94 64 20 	call	0x40c8	; 0x40c8 <vTaskDelayUntil>
		
		//Actions:
		//Receive frames
		if(get_frame_from_queue(_x_com_received_chars_queue, frame, MAX_FRAME_SIZE, &frame_size))
    1a3a:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <_x_com_received_chars_queue>
    1a3e:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <_x_com_received_chars_queue+0x1>
    1a42:	9e 01       	movw	r18, r28
    1a44:	28 59       	subi	r18, 0x98	; 152
    1a46:	3f 4f       	sbci	r19, 0xFF	; 255
    1a48:	be 01       	movw	r22, r28
    1a4a:	6c 5f       	subi	r22, 0xFC	; 252
    1a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4e:	44 e6       	ldi	r20, 0x64	; 100
    1a50:	0e 94 41 0c 	call	0x1882	; 0x1882 <get_frame_from_queue>
    1a54:	88 23       	and	r24, r24
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <serial_com_task+0xae>
    1a58:	6d c0       	rjmp	.+218    	; 0x1b34 <serial_com_task+0x188>
		{
			uint8_t data_length = 0;
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	85 59       	subi	r24, 0x95	; 149
    1a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a60:	fc 01       	movw	r30, r24
    1a62:	10 82       	st	Z, r1
			Frame_type_t type = unpack_data_frame(frame, MAX_FRAME_SIZE, &data_length);
    1a64:	9e 01       	movw	r18, r28
    1a66:	25 59       	subi	r18, 0x95	; 149
    1a68:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	04 96       	adiw	r24, 0x04	; 4
    1a6e:	a9 01       	movw	r20, r18
    1a70:	64 e6       	ldi	r22, 0x64	; 100
    1a72:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <unpack_data_frame>
    1a76:	8a 83       	std	Y+2, r24	; 0x02
			if (type == ACK)
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	82 30       	cpi	r24, 0x02	; 2
    1a7c:	51 f4       	brne	.+20     	; 0x1a92 <serial_com_task+0xe6>
			{
				//Ready to get the next out-frame from queue
				RTS = true;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <RTS>
				last_sent_frame[0] = 0;
    1a84:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <last_sent_frame>
				last_sent_frame_size = 0;
    1a88:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <last_sent_frame_size>
				ack_timeouts = 0;
    1a8c:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <ack_timeouts>
    1a90:	4b c0       	rjmp	.+150    	; 0x1b28 <serial_com_task+0x17c>
			}
			else if(type == DATA)
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <serial_com_task+0xee>
    1a98:	44 c0       	rjmp	.+136    	; 0x1b22 <serial_com_task+0x176>
			{
				uint8_t ack_frame[LINK_FLAG_SIZE + HEADER_SIZE + CRC_SIZE];
				uint8_t ack_frame_size = 0;
    1a9a:	1b 82       	std	Y+3, r1	; 0x03
				if ((ack_frame_size = get_acknowledge_frame(ack_frame, sizeof(ack_frame))))
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	84 59       	subi	r24, 0x94	; 148
    1aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa2:	64 e0       	ldi	r22, 0x04	; 4
    1aa4:	0e 94 6f 0b 	call	0x16de	; 0x16de <get_acknowledge_frame>
    1aa8:	8b 83       	std	Y+3, r24	; 0x03
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	88 23       	and	r24, r24
    1aae:	61 f1       	breq	.+88     	; 0x1b08 <serial_com_task+0x15c>
				{
					//25
					if(xSemaphoreTake(com_send_queue_add_sem, 50))
    1ab0:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <com_send_queue_add_sem>
    1ab4:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <com_send_queue_add_sem+0x1>
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	42 e3       	ldi	r20, 0x32	; 50
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	0e 94 ab 1b 	call	0x3756	; 0x3756 <xQueueGenericReceive>
    1ac6:	88 23       	and	r24, r24
    1ac8:	f9 f0       	breq	.+62     	; 0x1b08 <serial_com_task+0x15c>
					for (uint8_t i = 0; i < ack_frame_size; i++)
    1aca:	19 82       	std	Y+1, r1	; 0x01
    1acc:	17 c0       	rjmp	.+46     	; 0x1afc <serial_com_task+0x150>
					{
						if (!xQueueSend(com_send_frame_buffer, ack_frame+i, 0))
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	88 2f       	mov	r24, r24
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	9e 01       	movw	r18, r28
    1ad6:	24 59       	subi	r18, 0x94	; 148
    1ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    1ada:	b9 01       	movw	r22, r18
    1adc:	68 0f       	add	r22, r24
    1ade:	79 1f       	adc	r23, r25
    1ae0:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <com_send_frame_buffer>
    1ae4:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <com_send_frame_buffer+0x1>
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	0e 94 9b 1a 	call	0x3536	; 0x3536 <xQueueGenericSend>
    1af2:	88 23       	and	r24, r24
    1af4:	41 f0       	breq	.+16     	; 0x1b06 <serial_com_task+0x15a>
				uint8_t ack_frame_size = 0;
				if ((ack_frame_size = get_acknowledge_frame(ack_frame, sizeof(ack_frame))))
				{
					//25
					if(xSemaphoreTake(com_send_queue_add_sem, 50))
					for (uint8_t i = 0; i < ack_frame_size; i++)
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	8f 5f       	subi	r24, 0xFF	; 255
    1afa:	89 83       	std	Y+1, r24	; 0x01
    1afc:	99 81       	ldd	r25, Y+1	; 0x01
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	98 17       	cp	r25, r24
    1b02:	28 f3       	brcs	.-54     	; 0x1ace <serial_com_task+0x122>
    1b04:	01 c0       	rjmp	.+2      	; 0x1b08 <serial_com_task+0x15c>
					{
						if (!xQueueSend(com_send_frame_buffer, ack_frame+i, 0))
							break;
    1b06:	00 00       	nop
					}
					//xSemaphoreGive(com_send_queue_add_sem);
				}
				//now handle the received data:
				handle_serial_input(frame, data_length);
    1b08:	ce 01       	movw	r24, r28
    1b0a:	85 59       	subi	r24, 0x95	; 149
    1b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0e:	fc 01       	movw	r30, r24
    1b10:	80 81       	ld	r24, Z
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	ce 01       	movw	r24, r28
    1b18:	04 96       	adiw	r24, 0x04	; 4
    1b1a:	b9 01       	movw	r22, r18
    1b1c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <handle_serial_input>
    1b20:	03 c0       	rjmp	.+6      	; 0x1b28 <serial_com_task+0x17c>
			}
			else
			{
				RTS = true; //breakpoint
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <RTS>

			}
			//Make ready for next frame
			frame[0] = 0;
    1b28:	1c 82       	std	Y+4, r1	; 0x04
			frame_size = 0;
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	88 59       	subi	r24, 0x98	; 152
    1b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b30:	fc 01       	movw	r30, r24
    1b32:	10 82       	st	Z, r1
		}


		if(RTS)
    1b34:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <RTS>
    1b38:	88 23       	and	r24, r24
    1b3a:	89 f0       	breq	.+34     	; 0x1b5e <serial_com_task+0x1b2>
		{
			//Get the next frame
			if(get_frame_from_queue(com_send_frame_buffer, last_sent_frame, MAX_FRAME_SIZE, &last_sent_frame_size))
    1b3c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <com_send_frame_buffer>
    1b40:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <com_send_frame_buffer+0x1>
    1b44:	21 ef       	ldi	r18, 0xF1	; 241
    1b46:	31 e0       	ldi	r19, 0x01	; 1
    1b48:	44 e6       	ldi	r20, 0x64	; 100
    1b4a:	6d e8       	ldi	r22, 0x8D	; 141
    1b4c:	71 e0       	ldi	r23, 0x01	; 1
    1b4e:	0e 94 41 0c 	call	0x1882	; 0x1882 <get_frame_from_queue>
    1b52:	88 23       	and	r24, r24
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <serial_com_task+0x1ac>
    1b56:	6a cf       	rjmp	.-300    	; 0x1a2c <serial_com_task+0x80>
			{
				send_current_frame();
    1b58:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <send_current_frame>
    1b5c:	67 cf       	rjmp	.-306    	; 0x1a2c <serial_com_task+0x80>
			}
		}
		else
		{
			if ((xTaskGetTickCount() - last_frame_time) >= ACK_TIMEOUT)
    1b5e:	0e 94 da 21 	call	0x43b4	; 0x43b4 <xTaskGetTickCount>
    1b62:	9c 01       	movw	r18, r24
    1b64:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <last_frame_time>
    1b68:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <last_frame_time+0x1>
    1b6c:	a9 01       	movw	r20, r18
    1b6e:	48 1b       	sub	r20, r24
    1b70:	59 0b       	sbc	r21, r25
    1b72:	ca 01       	movw	r24, r20
    1b74:	84 36       	cpi	r24, 0x64	; 100
    1b76:	91 05       	cpc	r25, r1
    1b78:	08 f4       	brcc	.+2      	; 0x1b7c <serial_com_task+0x1d0>
    1b7a:	58 cf       	rjmp	.-336    	; 0x1a2c <serial_com_task+0x80>
			{
				ack_timeouts++; //could overflow but thats probably low-risk
    1b7c:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <ack_timeouts>
    1b80:	8f 5f       	subi	r24, 0xFF	; 255
    1b82:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <ack_timeouts>
				if(ack_timeouts <= MAX_CONSECUTIVE_ACK_TIMEOUTS)
    1b86:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <ack_timeouts>
    1b8a:	86 30       	cpi	r24, 0x06	; 6
    1b8c:	18 f4       	brcc	.+6      	; 0x1b94 <serial_com_task+0x1e8>
				{
					send_current_frame(); //resend
    1b8e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <send_current_frame>
    1b92:	4c cf       	rjmp	.-360    	; 0x1a2c <serial_com_task+0x80>
				}
				else
				{
					//Remote end seems to be refusing to send acks, will just continue sending data then..
					RTS = true;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <RTS>
					last_sent_frame[0] = 0;
    1b9a:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <last_sent_frame>
					last_sent_frame_size = 0;
    1b9e:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <last_sent_frame_size>
					ack_timeouts = 0;
    1ba2:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <ack_timeouts>
				}
			}
		}
	}
    1ba6:	42 cf       	rjmp	.-380    	; 0x1a2c <serial_com_task+0x80>

00001ba8 <send_current_frame>:
}
void send_current_frame()
{
    1ba8:	cf 93       	push	r28
    1baa:	df 93       	push	r29
    1bac:	1f 92       	push	r1
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
	if(last_sent_frame_size)
    1bb2:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <last_sent_frame_size>
    1bb6:	88 23       	and	r24, r24
    1bb8:	39 f1       	breq	.+78     	; 0x1c08 <send_current_frame+0x60>
	{
		//Send it
		for(uint8_t i = 0; i < last_sent_frame_size;)
    1bba:	19 82       	std	Y+1, r1	; 0x01
    1bbc:	13 c0       	rjmp	.+38     	; 0x1be4 <send_current_frame+0x3c>
		{
			if(com_send_byte(last_sent_frame[i]) == BUFFER_OK)
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	88 2f       	mov	r24, r24
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	83 57       	subi	r24, 0x73	; 115
    1bc6:	9e 4f       	sbci	r25, 0xFE	; 254
    1bc8:	fc 01       	movw	r30, r24
    1bca:	80 81       	ld	r24, Z
    1bcc:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <com_send_byte>
    1bd0:	88 23       	and	r24, r24
    1bd2:	21 f4       	brne	.+8      	; 0x1bdc <send_current_frame+0x34>
				i++; //continue to next byte
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	8f 5f       	subi	r24, 0xFF	; 255
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	04 c0       	rjmp	.+8      	; 0x1be4 <send_current_frame+0x3c>
			else
				vTaskDelay(COM_BUFFER_FULL_DELAY); //Wait a bit and retry
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	0e 94 de 20 	call	0x41bc	; 0x41bc <vTaskDelay>
void send_current_frame()
{
	if(last_sent_frame_size)
	{
		//Send it
		for(uint8_t i = 0; i < last_sent_frame_size;)
    1be4:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <last_sent_frame_size>
    1be8:	99 81       	ldd	r25, Y+1	; 0x01
    1bea:	98 17       	cp	r25, r24
    1bec:	40 f3       	brcs	.-48     	; 0x1bbe <send_current_frame+0x16>
			if(com_send_byte(last_sent_frame[i]) == BUFFER_OK)
				i++; //continue to next byte
			else
				vTaskDelay(COM_BUFFER_FULL_DELAY); //Wait a bit and retry
		}
		last_frame_time = xTaskGetTickCount();
    1bee:	0e 94 da 21 	call	0x43b4	; 0x43b4 <xTaskGetTickCount>
    1bf2:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <last_frame_time+0x1>
    1bf6:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <last_frame_time>
		RTS = is_ack_frame(last_sent_frame, MIN_FRAME_SIZE); //Only dataframes require us to wait for acks
    1bfa:	64 e0       	ldi	r22, 0x04	; 4
    1bfc:	8d e8       	ldi	r24, 0x8D	; 141
    1bfe:	91 e0       	ldi	r25, 0x01	; 1
    1c00:	0e 94 1b 0c 	call	0x1836	; 0x1836 <is_ack_frame>
    1c04:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <RTS>
	}
}
    1c08:	00 00       	nop
    1c0a:	0f 90       	pop	r0
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	08 95       	ret

00001c12 <count_illegal_chars>:
uint8_t count_illegal_chars(uint8_t *byte_buffer, uint8_t buffer_size)
{
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <count_illegal_chars+0x6>
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <count_illegal_chars+0x8>
    1c1a:	1f 92       	push	r1
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	9c 83       	std	Y+4, r25	; 0x04
    1c22:	8b 83       	std	Y+3, r24	; 0x03
    1c24:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t c = 0;
    1c26:	19 82       	std	Y+1, r1	; 0x01
	for(uint8_t i = 0; i < buffer_size; i++)
    1c28:	1a 82       	std	Y+2, r1	; 0x02
    1c2a:	17 c0       	rjmp	.+46     	; 0x1c5a <count_illegal_chars+0x48>
	{
		if((*byte_buffer == LINK_FLAG) || (*byte_buffer == LINK_ESC))
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	fc 01       	movw	r30, r24
    1c32:	80 81       	ld	r24, Z
    1c34:	8f 3f       	cpi	r24, 0xFF	; 255
    1c36:	31 f0       	breq	.+12     	; 0x1c44 <count_illegal_chars+0x32>
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	80 81       	ld	r24, Z
    1c40:	88 23       	and	r24, r24
    1c42:	19 f4       	brne	.+6      	; 0x1c4a <count_illegal_chars+0x38>
			c++;
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	8f 5f       	subi	r24, 0xFF	; 255
    1c48:	89 83       	std	Y+1, r24	; 0x01

		byte_buffer++;
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4e:	01 96       	adiw	r24, 0x01	; 1
    1c50:	9c 83       	std	Y+4, r25	; 0x04
    1c52:	8b 83       	std	Y+3, r24	; 0x03
	}
}
uint8_t count_illegal_chars(uint8_t *byte_buffer, uint8_t buffer_size)
{
	uint8_t c = 0;
	for(uint8_t i = 0; i < buffer_size; i++)
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	8f 5f       	subi	r24, 0xFF	; 255
    1c58:	8a 83       	std	Y+2, r24	; 0x02
    1c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5e:	98 17       	cp	r25, r24
    1c60:	28 f3       	brcs	.-54     	; 0x1c2c <count_illegal_chars+0x1a>
		if((*byte_buffer == LINK_FLAG) || (*byte_buffer == LINK_ESC))
			c++;

		byte_buffer++;
	}
	return c;
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	08 95       	ret

00001c74 <send_bytes>:
bool send_bytes(uint8_t *byte_buffer, uint8_t buffer_size)
{
    1c74:	cf 93       	push	r28
    1c76:	df 93       	push	r29
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	27 97       	sbiw	r28, 0x07	; 7
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	9e 83       	std	Y+6, r25	; 0x06
    1c8a:	8d 83       	std	Y+5, r24	; 0x05
    1c8c:	6f 83       	std	Y+7, r22	; 0x07
	if (buffer_size > MAX_PAYLOAD_SIZE)
		return false;
	uint8_t *frame;
	uint8_t frame_size = buffer_size + FRAME_OVERHEAD + (count_illegal_chars(byte_buffer, buffer_size) * 2);
    1c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c90:	9e 81       	ldd	r25, Y+6	; 0x06
    1c92:	6f 81       	ldd	r22, Y+7	; 0x07
    1c94:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <count_illegal_chars>
    1c98:	98 2f       	mov	r25, r24
    1c9a:	99 0f       	add	r25, r25
    1c9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c9e:	89 0f       	add	r24, r25
    1ca0:	8c 5f       	subi	r24, 0xFC	; 252
    1ca2:	89 83       	std	Y+1, r24	; 0x01
	if(frame_size > MAX_FRAME_SIZE)
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	85 36       	cpi	r24, 0x65	; 101
    1ca8:	10 f0       	brcs	.+4      	; 0x1cae <send_bytes+0x3a>
		frame_size = MAX_FRAME_SIZE;
    1caa:	84 e6       	ldi	r24, 0x64	; 100
    1cac:	89 83       	std	Y+1, r24	; 0x01
	
	frame = pvPortMalloc(frame_size);
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	88 2f       	mov	r24, r24
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	0e 94 d7 17 	call	0x2fae	; 0x2fae <pvPortMalloc>
    1cb8:	9c 83       	std	Y+4, r25	; 0x04
    1cba:	8b 83       	std	Y+3, r24	; 0x03
	if(!frame)
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	89 2b       	or	r24, r25
    1cc2:	11 f4       	brne	.+4      	; 0x1cc8 <send_bytes+0x54>
		return false;
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	3b c0       	rjmp	.+118    	; 0x1d3e <send_bytes+0xca>
	frame_size = get_data_frame(frame, frame_size, byte_buffer, buffer_size);
    1cc8:	4d 81       	ldd	r20, Y+5	; 0x05
    1cca:	5e 81       	ldd	r21, Y+6	; 0x06
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd0:	2f 81       	ldd	r18, Y+7	; 0x07
    1cd2:	69 81       	ldd	r22, Y+1	; 0x01
    1cd4:	0e 94 c6 0a 	call	0x158c	; 0x158c <get_data_frame>
    1cd8:	89 83       	std	Y+1, r24	; 0x01
	if (frame_size)
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	88 23       	and	r24, r24
    1cde:	51 f1       	breq	.+84     	; 0x1d34 <send_bytes+0xc0>
	{
		if (uxQueueSpacesAvailable(com_send_frame_buffer) >= frame_size)
    1ce0:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <com_send_frame_buffer>
    1ce4:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <com_send_frame_buffer+0x1>
    1ce8:	0e 94 a1 1c 	call	0x3942	; 0x3942 <uxQueueSpacesAvailable>
    1cec:	98 2f       	mov	r25, r24
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	98 17       	cp	r25, r24
    1cf2:	00 f1       	brcs	.+64     	; 0x1d34 <send_bytes+0xc0>
		{
			//if(xSemaphoreTake(com_send_queue_add_sem, 50))
			for (uint8_t i = 0; i < frame_size; i++)
    1cf4:	1a 82       	std	Y+2, r1	; 0x02
    1cf6:	14 c0       	rjmp	.+40     	; 0x1d20 <send_bytes+0xac>
			{
				xQueueSend(com_send_frame_buffer, frame+i, 0);
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	88 2f       	mov	r24, r24
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	2b 81       	ldd	r18, Y+3	; 0x03
    1d00:	3c 81       	ldd	r19, Y+4	; 0x04
    1d02:	b9 01       	movw	r22, r18
    1d04:	68 0f       	add	r22, r24
    1d06:	79 1f       	adc	r23, r25
    1d08:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <com_send_frame_buffer>
    1d0c:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <com_send_frame_buffer+0x1>
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	50 e0       	ldi	r21, 0x00	; 0
    1d16:	0e 94 9b 1a 	call	0x3536	; 0x3536 <xQueueGenericSend>
	if (frame_size)
	{
		if (uxQueueSpacesAvailable(com_send_frame_buffer) >= frame_size)
		{
			//if(xSemaphoreTake(com_send_queue_add_sem, 50))
			for (uint8_t i = 0; i < frame_size; i++)
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	8f 5f       	subi	r24, 0xFF	; 255
    1d1e:	8a 83       	std	Y+2, r24	; 0x02
    1d20:	9a 81       	ldd	r25, Y+2	; 0x02
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	98 17       	cp	r25, r24
    1d26:	40 f3       	brcs	.-48     	; 0x1cf8 <send_bytes+0x84>
			{
				xQueueSend(com_send_frame_buffer, frame+i, 0);
			}
			//xSemaphoreGive(com_send_queue_add_sem);
			vPortFree(frame);
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	0e 94 cc 18 	call	0x3198	; 0x3198 <vPortFree>
			return true;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	05 c0       	rjmp	.+10     	; 0x1d3e <send_bytes+0xca>
		}
	}
	vPortFree(frame);
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	9c 81       	ldd	r25, Y+4	; 0x04
    1d38:	0e 94 cc 18 	call	0x3198	; 0x3198 <vPortFree>
	return false;
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
}
    1d3e:	27 96       	adiw	r28, 0x07	; 7
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	08 95       	ret

00001d50 <SemGive>:
void SemGive(){xSemaphoreGive(com_send_queue_add_sem);}
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <com_send_queue_add_sem>
    1d5c:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <com_send_queue_add_sem+0x1>
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	50 e0       	ldi	r21, 0x00	; 0
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	70 e0       	ldi	r23, 0x00	; 0
    1d6a:	0e 94 9b 1a 	call	0x3536	; 0x3536 <xQueueGenericSend>
    1d6e:	00 00       	nop
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	08 95       	ret

00001d76 <handle_serial_input>:

void handle_serial_input(uint8_t *buffer, uint8_t length)
{
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <handle_serial_input+0x6>
    1d7c:	1f 92       	push	r1
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	9a 83       	std	Y+2, r25	; 0x02
    1d84:	89 83       	std	Y+1, r24	; 0x01
    1d86:	6b 83       	std	Y+3, r22	; 0x03
	if(length == 1)
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	81 30       	cpi	r24, 0x01	; 1
    1d8c:	a9 f4       	brne	.+42     	; 0x1db8 <handle_serial_input+0x42>
	{ //keyboard input
		 if(*buffer == 0x26)
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	9a 81       	ldd	r25, Y+2	; 0x02
    1d92:	fc 01       	movw	r30, r24
    1d94:	80 81       	ld	r24, Z
    1d96:	86 32       	cpi	r24, 0x26	; 38
    1d98:	29 f4       	brne	.+10     	; 0x1da4 <handle_serial_input+0x2e>
		bat_move(PL_TWO, D_UP);
    1d9a:	62 e0       	ldi	r22, 0x02	; 2
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	0e 94 8d 01 	call	0x31a	; 0x31a <bat_move>
		
		else if(*buffer == 0x28)
		bat_move(PL_TWO, D_DOWN);
	}
    1da2:	0a c0       	rjmp	.+20     	; 0x1db8 <handle_serial_input+0x42>
	if(length == 1)
	{ //keyboard input
		 if(*buffer == 0x26)
		bat_move(PL_TWO, D_UP);
		
		else if(*buffer == 0x28)
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	9a 81       	ldd	r25, Y+2	; 0x02
    1da8:	fc 01       	movw	r30, r24
    1daa:	80 81       	ld	r24, Z
    1dac:	88 32       	cpi	r24, 0x28	; 40
    1dae:	21 f4       	brne	.+8      	; 0x1db8 <handle_serial_input+0x42>
		bat_move(PL_TWO, D_DOWN);
    1db0:	61 e0       	ldi	r22, 0x01	; 1
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	0e 94 8d 01 	call	0x31a	; 0x31a <bat_move>
	}
    1db8:	00 00       	nop
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	08 95       	ret

00001dc6 <_com_call_back>:
}

// ----------------------------------------------------------------------------------------------------------------------
uint8_t com_send_bytes(uint8_t *bytes, uint8_t len) {
	return serial_send_bytes(_com_serial_instance, bytes, len);
}
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	00 d0       	rcall	.+0      	; 0x1dcc <_com_call_back+0x6>
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <_com_call_back+0x8>
    1dce:	cd b7       	in	r28, 0x3d	; 61
    1dd0:	de b7       	in	r29, 0x3e	; 62
    1dd2:	9b 83       	std	Y+3, r25	; 0x03
    1dd4:	8a 83       	std	Y+2, r24	; 0x02
    1dd6:	6c 83       	std	Y+4, r22	; 0x04
    1dd8:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <_x_rx_com_queue>
    1ddc:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <_x_rx_com_queue+0x1>
    1de0:	89 2b       	or	r24, r25
    1de2:	99 f0       	breq	.+38     	; 0x1e0a <_com_call_back+0x44>
    1de4:	19 82       	std	Y+1, r1	; 0x01
    1de6:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <_x_rx_com_queue>
    1dea:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <_x_rx_com_queue+0x1>
    1dee:	be 01       	movw	r22, r28
    1df0:	6c 5f       	subi	r22, 0xFC	; 252
    1df2:	7f 4f       	sbci	r23, 0xFF	; 255
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	ae 01       	movw	r20, r28
    1df8:	4f 5f       	subi	r20, 0xFF	; 255
    1dfa:	5f 4f       	sbci	r21, 0xFF	; 255
    1dfc:	0e 94 4c 1b 	call	0x3698	; 0x3698 <xQueueGenericSendFromISR>
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	88 23       	and	r24, r24
    1e04:	11 f0       	breq	.+4      	; 0x1e0a <_com_call_back+0x44>
    1e06:	0e 94 4d 14 	call	0x289a	; 0x289a <vPortYield>
    1e0a:	00 00       	nop
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	08 95       	ret

00001e1a <init_com>:
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <init_com+0x6>
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	9a 83       	std	Y+2, r25	; 0x02
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2c:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <_x_rx_com_queue+0x1>
    1e30:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <_x_rx_com_queue>
    1e34:	00 00       	nop
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	df 91       	pop	r29
    1e3c:	cf 91       	pop	r28
    1e3e:	08 95       	ret

00001e40 <init_display_timer>:
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <init_display_timer+0x6>
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	9a 83       	std	Y+2, r25	; 0x02
    1e4c:	89 83       	std	Y+1, r24	; 0x01
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	9a 81       	ldd	r25, Y+2	; 0x02
    1e52:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <cb_ptr+0x1>
    1e56:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <cb_ptr>
    1e5a:	87 e4       	ldi	r24, 0x47	; 71
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	2a e0       	ldi	r18, 0x0A	; 10
    1e60:	fc 01       	movw	r30, r24
    1e62:	20 83       	st	Z, r18
    1e64:	84 e4       	ldi	r24, 0x44	; 68
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	24 e4       	ldi	r18, 0x44	; 68
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	f9 01       	movw	r30, r18
    1e6e:	20 81       	ld	r18, Z
    1e70:	22 60       	ori	r18, 0x02	; 2
    1e72:	fc 01       	movw	r30, r24
    1e74:	20 83       	st	Z, r18
    1e76:	8e e6       	ldi	r24, 0x6E	; 110
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	2e e6       	ldi	r18, 0x6E	; 110
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	f9 01       	movw	r30, r18
    1e80:	20 81       	ld	r18, Z
    1e82:	22 60       	ori	r18, 0x02	; 2
    1e84:	fc 01       	movw	r30, r24
    1e86:	20 83       	st	Z, r18
    1e88:	85 e4       	ldi	r24, 0x45	; 69
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	25 e4       	ldi	r18, 0x45	; 69
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	f9 01       	movw	r30, r18
    1e92:	20 81       	ld	r18, Z
    1e94:	25 60       	ori	r18, 0x05	; 5
    1e96:	fc 01       	movw	r30, r24
    1e98:	20 83       	st	Z, r18
    1e9a:	00 00       	nop
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	08 95       	ret

00001ea6 <__vector_16>:
    1ea6:	1f 92       	push	r1
    1ea8:	0f 92       	push	r0
    1eaa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1eae:	0f 92       	push	r0
    1eb0:	11 24       	eor	r1, r1
    1eb2:	2f 93       	push	r18
    1eb4:	3f 93       	push	r19
    1eb6:	4f 93       	push	r20
    1eb8:	5f 93       	push	r21
    1eba:	6f 93       	push	r22
    1ebc:	7f 93       	push	r23
    1ebe:	8f 93       	push	r24
    1ec0:	9f 93       	push	r25
    1ec2:	af 93       	push	r26
    1ec4:	bf 93       	push	r27
    1ec6:	ef 93       	push	r30
    1ec8:	ff 93       	push	r31
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <cb_ptr>
    1ed6:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <cb_ptr+0x1>
    1eda:	89 2b       	or	r24, r25
    1edc:	31 f0       	breq	.+12     	; 0x1eea <__vector_16+0x44>
    1ede:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <cb_ptr>
    1ee2:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <cb_ptr+0x1>
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	09 95       	icall
    1eea:	00 00       	nop
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	ff 91       	pop	r31
    1ef2:	ef 91       	pop	r30
    1ef4:	bf 91       	pop	r27
    1ef6:	af 91       	pop	r26
    1ef8:	9f 91       	pop	r25
    1efa:	8f 91       	pop	r24
    1efc:	7f 91       	pop	r23
    1efe:	6f 91       	pop	r22
    1f00:	5f 91       	pop	r21
    1f02:	4f 91       	pop	r20
    1f04:	3f 91       	pop	r19
    1f06:	2f 91       	pop	r18
    1f08:	0f 90       	pop	r0
    1f0a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1f0e:	0f 90       	pop	r0
    1f10:	1f 90       	pop	r1
    1f12:	18 95       	reti

00001f14 <com_send_byte>:
uint8_t com_send_byte(uint8_t byte) {
    1f14:	cf 93       	push	r28
    1f16:	df 93       	push	r29
    1f18:	1f 92       	push	r1
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	89 83       	std	Y+1, r24	; 0x01
	return serial_send_byte(_com_serial_instance, byte);
    1f20:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <_com_serial_instance>
    1f24:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <_com_serial_instance+0x1>
    1f28:	69 81       	ldd	r22, Y+1	; 0x01
    1f2a:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <serial_send_byte>
}
    1f2e:	0f 90       	pop	r0
    1f30:	df 91       	pop	r29
    1f32:	cf 91       	pop	r28
    1f34:	08 95       	ret

00001f36 <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
    1f36:	8f 92       	push	r8
    1f38:	9f 92       	push	r9
    1f3a:	af 92       	push	r10
    1f3c:	bf 92       	push	r11
    1f3e:	cf 92       	push	r12
    1f40:	df 92       	push	r13
    1f42:	ef 92       	push	r14
    1f44:	0f 93       	push	r16
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
    1f4e:	8b ef       	ldi	r24, 0xFB	; 251
    1f50:	91 e0       	ldi	r25, 0x01	; 1
    1f52:	0e 94 65 10 	call	0x20ca	; 0x20ca <buffer_init>
	buffer_init(&_com_tx_buffer);
    1f56:	8e e1       	ldi	r24, 0x1E	; 30
    1f58:	92 e0       	ldi	r25, 0x02	; 2
    1f5a:	0e 94 65 10 	call	0x20ca	; 0x20ca <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
    1f5e:	0f 2e       	mov	r0, r31
    1f60:	f3 ee       	ldi	r31, 0xE3	; 227
    1f62:	8f 2e       	mov	r8, r31
    1f64:	fe e0       	ldi	r31, 0x0E	; 14
    1f66:	9f 2e       	mov	r9, r31
    1f68:	f0 2d       	mov	r31, r0
    1f6a:	0f 2e       	mov	r0, r31
    1f6c:	fe e1       	ldi	r31, 0x1E	; 30
    1f6e:	af 2e       	mov	r10, r31
    1f70:	f2 e0       	ldi	r31, 0x02	; 2
    1f72:	bf 2e       	mov	r11, r31
    1f74:	f0 2d       	mov	r31, r0
    1f76:	0f 2e       	mov	r0, r31
    1f78:	fb ef       	ldi	r31, 0xFB	; 251
    1f7a:	cf 2e       	mov	r12, r31
    1f7c:	f1 e0       	ldi	r31, 0x01	; 1
    1f7e:	df 2e       	mov	r13, r31
    1f80:	f0 2d       	mov	r31, r0
    1f82:	e1 2c       	mov	r14, r1
    1f84:	00 e0       	ldi	r16, 0x00	; 0
    1f86:	23 e0       	ldi	r18, 0x03	; 3
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	52 ec       	ldi	r21, 0xC2	; 194
    1f8c:	61 e0       	ldi	r22, 0x01	; 1
    1f8e:	70 e0       	ldi	r23, 0x00	; 0
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	0e 94 84 15 	call	0x2b08	; 0x2b08 <serial_new_instance>
    1f96:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <_com_serial_instance+0x1>
    1f9a:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <_com_serial_instance>
	
	// Set Joystick pins as inputs:
	DDRC &= ~(_BV(PINC0) | _BV(PINC1) | _BV(PINC6) | _BV(PINC7)); 
    1f9e:	87 e2       	ldi	r24, 0x27	; 39
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	27 e2       	ldi	r18, 0x27	; 39
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	f9 01       	movw	r30, r18
    1fa8:	20 81       	ld	r18, Z
    1faa:	2c 73       	andi	r18, 0x3C	; 60
    1fac:	fc 01       	movw	r30, r24
    1fae:	20 83       	st	Z, r18
	DDRD &= ~_BV(PIND3);
    1fb0:	8a e2       	ldi	r24, 0x2A	; 42
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	2a e2       	ldi	r18, 0x2A	; 42
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	f9 01       	movw	r30, r18
    1fba:	20 81       	ld	r18, Z
    1fbc:	27 7f       	andi	r18, 0xF7	; 247
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	20 83       	st	Z, r18

	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
    1fc2:	88 e2       	ldi	r24, 0x28	; 40
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	28 e2       	ldi	r18, 0x28	; 40
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	f9 01       	movw	r30, r18
    1fcc:	20 81       	ld	r18, Z
    1fce:	23 6c       	ori	r18, 0xC3	; 195
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
    1fd4:	8b e2       	ldi	r24, 0x2B	; 43
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	2b e2       	ldi	r18, 0x2B	; 43
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	f9 01       	movw	r30, r18
    1fde:	20 81       	ld	r18, Z
    1fe0:	28 60       	ori	r18, 0x08	; 8
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
    1fe6:	8a e2       	ldi	r24, 0x2A	; 42
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	2a e2       	ldi	r18, 0x2A	; 42
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	f9 01       	movw	r30, r18
    1ff0:	20 81       	ld	r18, Z
    1ff2:	24 67       	ori	r18, 0x74	; 116
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
    1ff8:	8b e2       	ldi	r24, 0x2B	; 43
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	2b e2       	ldi	r18, 0x2B	; 43
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	f9 01       	movw	r30, r18
    2002:	20 81       	ld	r18, Z
    2004:	20 64       	ori	r18, 0x40	; 64
    2006:	fc 01       	movw	r30, r24
    2008:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
    200a:	81 e2       	ldi	r24, 0x21	; 33
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	fc 01       	movw	r30, r24
    2010:	80 81       	ld	r24, Z
    2012:	81 e2       	ldi	r24, 0x21	; 33
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	2f ef       	ldi	r18, 0xFF	; 255
    2018:	fc 01       	movw	r30, r24
    201a:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
    201c:	84 e2       	ldi	r24, 0x24	; 36
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	24 e2       	ldi	r18, 0x24	; 36
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	f9 01       	movw	r30, r18
    2026:	20 81       	ld	r18, Z
    2028:	23 60       	ori	r18, 0x03	; 3
    202a:	fc 01       	movw	r30, r24
    202c:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
    202e:	84 e2       	ldi	r24, 0x24	; 36
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	24 e2       	ldi	r18, 0x24	; 36
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	f9 01       	movw	r30, r18
    2038:	20 81       	ld	r18, Z
    203a:	2c 63       	ori	r18, 0x3C	; 60
    203c:	fc 01       	movw	r30, r24
    203e:	20 83       	st	Z, r18
}
    2040:	00 00       	nop
    2042:	df 91       	pop	r29
    2044:	cf 91       	pop	r28
    2046:	0f 91       	pop	r16
    2048:	ef 90       	pop	r14
    204a:	df 90       	pop	r13
    204c:	cf 90       	pop	r12
    204e:	bf 90       	pop	r11
    2050:	af 90       	pop	r10
    2052:	9f 90       	pop	r9
    2054:	8f 90       	pop	r8
    2056:	08 95       	ret

00002058 <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
    2058:	cf 93       	push	r28
    205a:	df 93       	push	r29
    205c:	1f 92       	push	r1
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
    2064:	85 e2       	ldi	r24, 0x25	; 37
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	25 e2       	ldi	r18, 0x25	; 37
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	f9 01       	movw	r30, r18
    206e:	20 81       	ld	r18, Z
    2070:	23 7c       	andi	r18, 0xC3	; 195
    2072:	fc 01       	movw	r30, r24
    2074:	20 83       	st	Z, r18
		PORTB |= task_no << 2;
    2076:	85 e2       	ldi	r24, 0x25	; 37
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	25 e2       	ldi	r18, 0x25	; 37
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	f9 01       	movw	r30, r18
    2080:	20 81       	ld	r18, Z
    2082:	42 2f       	mov	r20, r18
    2084:	29 81       	ldd	r18, Y+1	; 0x01
    2086:	22 2f       	mov	r18, r18
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	22 0f       	add	r18, r18
    208c:	33 1f       	adc	r19, r19
    208e:	22 0f       	add	r18, r18
    2090:	33 1f       	adc	r19, r19
    2092:	24 2b       	or	r18, r20
    2094:	fc 01       	movw	r30, r24
    2096:	20 83       	st	Z, r18
	}
    2098:	00 00       	nop
    209a:	0f 90       	pop	r0
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	08 95       	ret

000020a2 <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
    20a2:	cf 93       	push	r28
    20a4:	df 93       	push	r29
    20a6:	1f 92       	push	r1
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
    20ae:	85 e2       	ldi	r24, 0x25	; 37
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	25 e2       	ldi	r18, 0x25	; 37
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	f9 01       	movw	r30, r18
    20b8:	20 81       	ld	r18, Z
    20ba:	23 7c       	andi	r18, 0xC3	; 195
    20bc:	fc 01       	movw	r30, r24
    20be:	20 83       	st	Z, r18
	}
    20c0:	00 00       	nop
    20c2:	0f 90       	pop	r0
    20c4:	df 91       	pop	r29
    20c6:	cf 91       	pop	r28
    20c8:	08 95       	ret

000020ca <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
    20ce:	00 d0       	rcall	.+0      	; 0x20d0 <buffer_init+0x6>
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	9a 83       	std	Y+2, r25	; 0x02
    20d6:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	9a 81       	ldd	r25, Y+2	; 0x02
    20dc:	fc 01       	movw	r30, r24
    20de:	10 a2       	std	Z+32, r1	; 0x20
	buffer->out_i = 0;
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	9a 81       	ldd	r25, Y+2	; 0x02
    20e4:	fc 01       	movw	r30, r24
    20e6:	11 a2       	std	Z+33, r1	; 0x21
	buffer->no_in_buffer = 0;
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	9a 81       	ldd	r25, Y+2	; 0x02
    20ec:	fc 01       	movw	r30, r24
    20ee:	12 a2       	std	Z+34, r1	; 0x22
}
    20f0:	00 00       	nop
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	df 91       	pop	r29
    20f8:	cf 91       	pop	r28
    20fa:	08 95       	ret

000020fc <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
    20fc:	cf 93       	push	r28
    20fe:	df 93       	push	r29
    2100:	00 d0       	rcall	.+0      	; 0x2102 <buffer_get_item+0x6>
    2102:	00 d0       	rcall	.+0      	; 0x2104 <buffer_get_item+0x8>
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	9a 83       	std	Y+2, r25	; 0x02
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	7c 83       	std	Y+4, r23	; 0x04
    210e:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	9a 81       	ldd	r25, Y+2	; 0x02
    2114:	fc 01       	movw	r30, r24
    2116:	82 a1       	ldd	r24, Z+34	; 0x22
    2118:	88 23       	and	r24, r24
    211a:	81 f1       	breq	.+96     	; 0x217c <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	9a 81       	ldd	r25, Y+2	; 0x02
    2120:	fc 01       	movw	r30, r24
    2122:	81 a1       	ldd	r24, Z+33	; 0x21
    2124:	88 2f       	mov	r24, r24
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	29 81       	ldd	r18, Y+1	; 0x01
    212a:	3a 81       	ldd	r19, Y+2	; 0x02
    212c:	82 0f       	add	r24, r18
    212e:	93 1f       	adc	r25, r19
    2130:	fc 01       	movw	r30, r24
    2132:	20 81       	ld	r18, Z
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	9c 81       	ldd	r25, Y+4	; 0x04
    2138:	fc 01       	movw	r30, r24
    213a:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	9a 81       	ldd	r25, Y+2	; 0x02
    2140:	fc 01       	movw	r30, r24
    2142:	81 a1       	ldd	r24, Z+33	; 0x21
    2144:	88 2f       	mov	r24, r24
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	01 96       	adiw	r24, 0x01	; 1
    214a:	8f 71       	andi	r24, 0x1F	; 31
    214c:	90 78       	andi	r25, 0x80	; 128
    214e:	99 23       	and	r25, r25
    2150:	24 f4       	brge	.+8      	; 0x215a <buffer_get_item+0x5e>
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	80 6e       	ori	r24, 0xE0	; 224
    2156:	9f 6f       	ori	r25, 0xFF	; 255
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	28 2f       	mov	r18, r24
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	9a 81       	ldd	r25, Y+2	; 0x02
    2160:	fc 01       	movw	r30, r24
    2162:	21 a3       	std	Z+33, r18	; 0x21
		buffer->no_in_buffer--;
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	9a 81       	ldd	r25, Y+2	; 0x02
    2168:	fc 01       	movw	r30, r24
    216a:	82 a1       	ldd	r24, Z+34	; 0x22
    216c:	2f ef       	ldi	r18, 0xFF	; 255
    216e:	28 0f       	add	r18, r24
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	9a 81       	ldd	r25, Y+2	; 0x02
    2174:	fc 01       	movw	r30, r24
    2176:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	01 c0       	rjmp	.+2      	; 0x217e <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
    217c:	81 e0       	ldi	r24, 0x01	; 1
}
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	08 95       	ret

0000218c <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	00 d0       	rcall	.+0      	; 0x2192 <buffer_put_item+0x6>
    2192:	1f 92       	push	r1
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	9a 83       	std	Y+2, r25	; 0x02
    219a:	89 83       	std	Y+1, r24	; 0x01
    219c:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	9a 81       	ldd	r25, Y+2	; 0x02
    21a2:	fc 01       	movw	r30, r24
    21a4:	82 a1       	ldd	r24, Z+34	; 0x22
    21a6:	80 32       	cpi	r24, 0x20	; 32
    21a8:	68 f5       	brcc	.+90     	; 0x2204 <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	9a 81       	ldd	r25, Y+2	; 0x02
    21ae:	fc 01       	movw	r30, r24
    21b0:	80 a1       	ldd	r24, Z+32	; 0x20
    21b2:	88 2f       	mov	r24, r24
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	29 81       	ldd	r18, Y+1	; 0x01
    21b8:	3a 81       	ldd	r19, Y+2	; 0x02
    21ba:	82 0f       	add	r24, r18
    21bc:	93 1f       	adc	r25, r19
    21be:	2b 81       	ldd	r18, Y+3	; 0x03
    21c0:	fc 01       	movw	r30, r24
    21c2:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	9a 81       	ldd	r25, Y+2	; 0x02
    21c8:	fc 01       	movw	r30, r24
    21ca:	80 a1       	ldd	r24, Z+32	; 0x20
    21cc:	88 2f       	mov	r24, r24
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	01 96       	adiw	r24, 0x01	; 1
    21d2:	8f 71       	andi	r24, 0x1F	; 31
    21d4:	90 78       	andi	r25, 0x80	; 128
    21d6:	99 23       	and	r25, r25
    21d8:	24 f4       	brge	.+8      	; 0x21e2 <buffer_put_item+0x56>
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	80 6e       	ori	r24, 0xE0	; 224
    21de:	9f 6f       	ori	r25, 0xFF	; 255
    21e0:	01 96       	adiw	r24, 0x01	; 1
    21e2:	28 2f       	mov	r18, r24
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	9a 81       	ldd	r25, Y+2	; 0x02
    21e8:	fc 01       	movw	r30, r24
    21ea:	20 a3       	std	Z+32, r18	; 0x20
		buffer->no_in_buffer++;
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	9a 81       	ldd	r25, Y+2	; 0x02
    21f0:	fc 01       	movw	r30, r24
    21f2:	82 a1       	ldd	r24, Z+34	; 0x22
    21f4:	21 e0       	ldi	r18, 0x01	; 1
    21f6:	28 0f       	add	r18, r24
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	9a 81       	ldd	r25, Y+2	; 0x02
    21fc:	fc 01       	movw	r30, r24
    21fe:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	01 c0       	rjmp	.+2      	; 0x2206 <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
    2204:	82 e0       	ldi	r24, 0x02	; 2
}
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
    2210:	08 95       	ret

00002212 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    2212:	cf 93       	push	r28
    2214:	df 93       	push	r29
    2216:	00 d0       	rcall	.+0      	; 0x2218 <vListInitialise+0x6>
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	9c 01       	movw	r18, r24
    2226:	2d 5f       	subi	r18, 0xFD	; 253
    2228:	3f 4f       	sbci	r19, 0xFF	; 255
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	9a 81       	ldd	r25, Y+2	; 0x02
    222e:	fc 01       	movw	r30, r24
    2230:	32 83       	std	Z+2, r19	; 0x02
    2232:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	2f ef       	ldi	r18, 0xFF	; 255
    223a:	3f ef       	ldi	r19, 0xFF	; 255
    223c:	fc 01       	movw	r30, r24
    223e:	34 83       	std	Z+4, r19	; 0x04
    2240:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	9a 81       	ldd	r25, Y+2	; 0x02
    2246:	9c 01       	movw	r18, r24
    2248:	2d 5f       	subi	r18, 0xFD	; 253
    224a:	3f 4f       	sbci	r19, 0xFF	; 255
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	9a 81       	ldd	r25, Y+2	; 0x02
    2250:	fc 01       	movw	r30, r24
    2252:	36 83       	std	Z+6, r19	; 0x06
    2254:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	9a 81       	ldd	r25, Y+2	; 0x02
    225a:	9c 01       	movw	r18, r24
    225c:	2d 5f       	subi	r18, 0xFD	; 253
    225e:	3f 4f       	sbci	r19, 0xFF	; 255
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	9a 81       	ldd	r25, Y+2	; 0x02
    2264:	fc 01       	movw	r30, r24
    2266:	30 87       	std	Z+8, r19	; 0x08
    2268:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	9a 81       	ldd	r25, Y+2	; 0x02
    226e:	fc 01       	movw	r30, r24
    2270:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    2272:	00 00       	nop
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	df 91       	pop	r29
    227a:	cf 91       	pop	r28
    227c:	08 95       	ret

0000227e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    227e:	cf 93       	push	r28
    2280:	df 93       	push	r29
    2282:	00 d0       	rcall	.+0      	; 0x2284 <vListInitialiseItem+0x6>
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	9a 83       	std	Y+2, r25	; 0x02
    228a:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	9a 81       	ldd	r25, Y+2	; 0x02
    2290:	fc 01       	movw	r30, r24
    2292:	11 86       	std	Z+9, r1	; 0x09
    2294:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    2296:	00 00       	nop
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	df 91       	pop	r29
    229e:	cf 91       	pop	r28
    22a0:	08 95       	ret

000022a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    22a2:	cf 93       	push	r28
    22a4:	df 93       	push	r29
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <vListInsertEnd+0x6>
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <vListInsertEnd+0x8>
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <vListInsertEnd+0xa>
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	9c 83       	std	Y+4, r25	; 0x04
    22b2:	8b 83       	std	Y+3, r24	; 0x03
    22b4:	7e 83       	std	Y+6, r23	; 0x06
    22b6:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	9c 81       	ldd	r25, Y+4	; 0x04
    22bc:	fc 01       	movw	r30, r24
    22be:	81 81       	ldd	r24, Z+1	; 0x01
    22c0:	92 81       	ldd	r25, Z+2	; 0x02
    22c2:	9a 83       	std	Y+2, r25	; 0x02
    22c4:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    22c6:	8d 81       	ldd	r24, Y+5	; 0x05
    22c8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ca:	29 81       	ldd	r18, Y+1	; 0x01
    22cc:	3a 81       	ldd	r19, Y+2	; 0x02
    22ce:	fc 01       	movw	r30, r24
    22d0:	33 83       	std	Z+3, r19	; 0x03
    22d2:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	9a 81       	ldd	r25, Y+2	; 0x02
    22d8:	fc 01       	movw	r30, r24
    22da:	24 81       	ldd	r18, Z+4	; 0x04
    22dc:	35 81       	ldd	r19, Z+5	; 0x05
    22de:	8d 81       	ldd	r24, Y+5	; 0x05
    22e0:	9e 81       	ldd	r25, Y+6	; 0x06
    22e2:	fc 01       	movw	r30, r24
    22e4:	35 83       	std	Z+5, r19	; 0x05
    22e6:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	9a 81       	ldd	r25, Y+2	; 0x02
    22ec:	fc 01       	movw	r30, r24
    22ee:	84 81       	ldd	r24, Z+4	; 0x04
    22f0:	95 81       	ldd	r25, Z+5	; 0x05
    22f2:	2d 81       	ldd	r18, Y+5	; 0x05
    22f4:	3e 81       	ldd	r19, Y+6	; 0x06
    22f6:	fc 01       	movw	r30, r24
    22f8:	33 83       	std	Z+3, r19	; 0x03
    22fa:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2300:	2d 81       	ldd	r18, Y+5	; 0x05
    2302:	3e 81       	ldd	r19, Y+6	; 0x06
    2304:	fc 01       	movw	r30, r24
    2306:	35 83       	std	Z+5, r19	; 0x05
    2308:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    230a:	8d 81       	ldd	r24, Y+5	; 0x05
    230c:	9e 81       	ldd	r25, Y+6	; 0x06
    230e:	2b 81       	ldd	r18, Y+3	; 0x03
    2310:	3c 81       	ldd	r19, Y+4	; 0x04
    2312:	fc 01       	movw	r30, r24
    2314:	31 87       	std	Z+9, r19	; 0x09
    2316:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	9c 81       	ldd	r25, Y+4	; 0x04
    231c:	fc 01       	movw	r30, r24
    231e:	80 81       	ld	r24, Z
    2320:	21 e0       	ldi	r18, 0x01	; 1
    2322:	28 0f       	add	r18, r24
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	9c 81       	ldd	r25, Y+4	; 0x04
    2328:	fc 01       	movw	r30, r24
    232a:	20 83       	st	Z, r18
}
    232c:	00 00       	nop
    232e:	26 96       	adiw	r28, 0x06	; 6
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	df 91       	pop	r29
    233c:	cf 91       	pop	r28
    233e:	08 95       	ret

00002340 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	28 97       	sbiw	r28, 0x08	; 8
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	9e 83       	std	Y+6, r25	; 0x06
    2356:	8d 83       	std	Y+5, r24	; 0x05
    2358:	78 87       	std	Y+8, r23	; 0x08
    235a:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    235c:	8f 81       	ldd	r24, Y+7	; 0x07
    235e:	98 85       	ldd	r25, Y+8	; 0x08
    2360:	fc 01       	movw	r30, r24
    2362:	80 81       	ld	r24, Z
    2364:	91 81       	ldd	r25, Z+1	; 0x01
    2366:	9c 83       	std	Y+4, r25	; 0x04
    2368:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	9c 81       	ldd	r25, Y+4	; 0x04
    236e:	01 96       	adiw	r24, 0x01	; 1
    2370:	41 f4       	brne	.+16     	; 0x2382 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2372:	8d 81       	ldd	r24, Y+5	; 0x05
    2374:	9e 81       	ldd	r25, Y+6	; 0x06
    2376:	fc 01       	movw	r30, r24
    2378:	87 81       	ldd	r24, Z+7	; 0x07
    237a:	90 85       	ldd	r25, Z+8	; 0x08
    237c:	9a 83       	std	Y+2, r25	; 0x02
    237e:	89 83       	std	Y+1, r24	; 0x01
    2380:	1a c0       	rjmp	.+52     	; 0x23b6 <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2382:	8d 81       	ldd	r24, Y+5	; 0x05
    2384:	9e 81       	ldd	r25, Y+6	; 0x06
    2386:	03 96       	adiw	r24, 0x03	; 3
    2388:	9a 83       	std	Y+2, r25	; 0x02
    238a:	89 83       	std	Y+1, r24	; 0x01
    238c:	07 c0       	rjmp	.+14     	; 0x239c <vListInsert+0x5c>
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	9a 81       	ldd	r25, Y+2	; 0x02
    2392:	fc 01       	movw	r30, r24
    2394:	82 81       	ldd	r24, Z+2	; 0x02
    2396:	93 81       	ldd	r25, Z+3	; 0x03
    2398:	9a 83       	std	Y+2, r25	; 0x02
    239a:	89 83       	std	Y+1, r24	; 0x01
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	9a 81       	ldd	r25, Y+2	; 0x02
    23a0:	fc 01       	movw	r30, r24
    23a2:	82 81       	ldd	r24, Z+2	; 0x02
    23a4:	93 81       	ldd	r25, Z+3	; 0x03
    23a6:	fc 01       	movw	r30, r24
    23a8:	20 81       	ld	r18, Z
    23aa:	31 81       	ldd	r19, Z+1	; 0x01
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	9c 81       	ldd	r25, Y+4	; 0x04
    23b0:	82 17       	cp	r24, r18
    23b2:	93 07       	cpc	r25, r19
    23b4:	60 f7       	brcc	.-40     	; 0x238e <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ba:	fc 01       	movw	r30, r24
    23bc:	22 81       	ldd	r18, Z+2	; 0x02
    23be:	33 81       	ldd	r19, Z+3	; 0x03
    23c0:	8f 81       	ldd	r24, Y+7	; 0x07
    23c2:	98 85       	ldd	r25, Y+8	; 0x08
    23c4:	fc 01       	movw	r30, r24
    23c6:	33 83       	std	Z+3, r19	; 0x03
    23c8:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    23ca:	8f 81       	ldd	r24, Y+7	; 0x07
    23cc:	98 85       	ldd	r25, Y+8	; 0x08
    23ce:	fc 01       	movw	r30, r24
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	93 81       	ldd	r25, Z+3	; 0x03
    23d4:	2f 81       	ldd	r18, Y+7	; 0x07
    23d6:	38 85       	ldd	r19, Y+8	; 0x08
    23d8:	fc 01       	movw	r30, r24
    23da:	35 83       	std	Z+5, r19	; 0x05
    23dc:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    23de:	8f 81       	ldd	r24, Y+7	; 0x07
    23e0:	98 85       	ldd	r25, Y+8	; 0x08
    23e2:	29 81       	ldd	r18, Y+1	; 0x01
    23e4:	3a 81       	ldd	r19, Y+2	; 0x02
    23e6:	fc 01       	movw	r30, r24
    23e8:	35 83       	std	Z+5, r19	; 0x05
    23ea:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	9a 81       	ldd	r25, Y+2	; 0x02
    23f0:	2f 81       	ldd	r18, Y+7	; 0x07
    23f2:	38 85       	ldd	r19, Y+8	; 0x08
    23f4:	fc 01       	movw	r30, r24
    23f6:	33 83       	std	Z+3, r19	; 0x03
    23f8:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    23fa:	8f 81       	ldd	r24, Y+7	; 0x07
    23fc:	98 85       	ldd	r25, Y+8	; 0x08
    23fe:	2d 81       	ldd	r18, Y+5	; 0x05
    2400:	3e 81       	ldd	r19, Y+6	; 0x06
    2402:	fc 01       	movw	r30, r24
    2404:	31 87       	std	Z+9, r19	; 0x09
    2406:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    2408:	8d 81       	ldd	r24, Y+5	; 0x05
    240a:	9e 81       	ldd	r25, Y+6	; 0x06
    240c:	fc 01       	movw	r30, r24
    240e:	80 81       	ld	r24, Z
    2410:	21 e0       	ldi	r18, 0x01	; 1
    2412:	28 0f       	add	r18, r24
    2414:	8d 81       	ldd	r24, Y+5	; 0x05
    2416:	9e 81       	ldd	r25, Y+6	; 0x06
    2418:	fc 01       	movw	r30, r24
    241a:	20 83       	st	Z, r18
}
    241c:	00 00       	nop
    241e:	28 96       	adiw	r28, 0x08	; 8
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	df 91       	pop	r29
    242c:	cf 91       	pop	r28
    242e:	08 95       	ret

00002430 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	00 d0       	rcall	.+0      	; 0x2436 <uxListRemove+0x6>
    2436:	00 d0       	rcall	.+0      	; 0x2438 <uxListRemove+0x8>
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
    243c:	9c 83       	std	Y+4, r25	; 0x04
    243e:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	9c 81       	ldd	r25, Y+4	; 0x04
    2444:	fc 01       	movw	r30, r24
    2446:	80 85       	ldd	r24, Z+8	; 0x08
    2448:	91 85       	ldd	r25, Z+9	; 0x09
    244a:	9a 83       	std	Y+2, r25	; 0x02
    244c:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	9c 81       	ldd	r25, Y+4	; 0x04
    2452:	fc 01       	movw	r30, r24
    2454:	82 81       	ldd	r24, Z+2	; 0x02
    2456:	93 81       	ldd	r25, Z+3	; 0x03
    2458:	2b 81       	ldd	r18, Y+3	; 0x03
    245a:	3c 81       	ldd	r19, Y+4	; 0x04
    245c:	f9 01       	movw	r30, r18
    245e:	24 81       	ldd	r18, Z+4	; 0x04
    2460:	35 81       	ldd	r19, Z+5	; 0x05
    2462:	fc 01       	movw	r30, r24
    2464:	35 83       	std	Z+5, r19	; 0x05
    2466:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2468:	8b 81       	ldd	r24, Y+3	; 0x03
    246a:	9c 81       	ldd	r25, Y+4	; 0x04
    246c:	fc 01       	movw	r30, r24
    246e:	84 81       	ldd	r24, Z+4	; 0x04
    2470:	95 81       	ldd	r25, Z+5	; 0x05
    2472:	2b 81       	ldd	r18, Y+3	; 0x03
    2474:	3c 81       	ldd	r19, Y+4	; 0x04
    2476:	f9 01       	movw	r30, r18
    2478:	22 81       	ldd	r18, Z+2	; 0x02
    247a:	33 81       	ldd	r19, Z+3	; 0x03
    247c:	fc 01       	movw	r30, r24
    247e:	33 83       	std	Z+3, r19	; 0x03
    2480:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	9a 81       	ldd	r25, Y+2	; 0x02
    2486:	fc 01       	movw	r30, r24
    2488:	21 81       	ldd	r18, Z+1	; 0x01
    248a:	32 81       	ldd	r19, Z+2	; 0x02
    248c:	8b 81       	ldd	r24, Y+3	; 0x03
    248e:	9c 81       	ldd	r25, Y+4	; 0x04
    2490:	28 17       	cp	r18, r24
    2492:	39 07       	cpc	r19, r25
    2494:	51 f4       	brne	.+20     	; 0x24aa <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	9c 81       	ldd	r25, Y+4	; 0x04
    249a:	fc 01       	movw	r30, r24
    249c:	24 81       	ldd	r18, Z+4	; 0x04
    249e:	35 81       	ldd	r19, Z+5	; 0x05
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	9a 81       	ldd	r25, Y+2	; 0x02
    24a4:	fc 01       	movw	r30, r24
    24a6:	32 83       	std	Z+2, r19	; 0x02
    24a8:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    24aa:	8b 81       	ldd	r24, Y+3	; 0x03
    24ac:	9c 81       	ldd	r25, Y+4	; 0x04
    24ae:	fc 01       	movw	r30, r24
    24b0:	11 86       	std	Z+9, r1	; 0x09
    24b2:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	9a 81       	ldd	r25, Y+2	; 0x02
    24b8:	fc 01       	movw	r30, r24
    24ba:	80 81       	ld	r24, Z
    24bc:	2f ef       	ldi	r18, 0xFF	; 255
    24be:	28 0f       	add	r18, r24
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	9a 81       	ldd	r25, Y+2	; 0x02
    24c4:	fc 01       	movw	r30, r24
    24c6:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	9a 81       	ldd	r25, Y+2	; 0x02
    24cc:	fc 01       	movw	r30, r24
    24ce:	80 81       	ld	r24, Z
}
    24d0:	0f 90       	pop	r0
    24d2:	0f 90       	pop	r0
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	df 91       	pop	r29
    24da:	cf 91       	pop	r28
    24dc:	08 95       	ret

000024de <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	28 97       	sbiw	r28, 0x08	; 8
    24e8:	0f b6       	in	r0, 0x3f	; 63
    24ea:	f8 94       	cli
    24ec:	de bf       	out	0x3e, r29	; 62
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	cd bf       	out	0x3d, r28	; 61
    24f2:	9c 83       	std	Y+4, r25	; 0x04
    24f4:	8b 83       	std	Y+3, r24	; 0x03
    24f6:	7e 83       	std	Y+6, r23	; 0x06
    24f8:	6d 83       	std	Y+5, r22	; 0x05
    24fa:	58 87       	std	Y+8, r21	; 0x08
    24fc:	4f 83       	std	Y+7, r20	; 0x07
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	9c 81       	ldd	r25, Y+4	; 0x04
    2502:	21 e1       	ldi	r18, 0x11	; 17
    2504:	fc 01       	movw	r30, r24
    2506:	20 83       	st	Z, r18
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	9c 81       	ldd	r25, Y+4	; 0x04
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	9c 83       	std	Y+4, r25	; 0x04
    2510:	8b 83       	std	Y+3, r24	; 0x03
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	9c 81       	ldd	r25, Y+4	; 0x04
    2516:	22 e2       	ldi	r18, 0x22	; 34
    2518:	fc 01       	movw	r30, r24
    251a:	20 83       	st	Z, r18
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	9c 81       	ldd	r25, Y+4	; 0x04
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	9c 83       	std	Y+4, r25	; 0x04
    2524:	8b 83       	std	Y+3, r24	; 0x03
    2526:	8b 81       	ldd	r24, Y+3	; 0x03
    2528:	9c 81       	ldd	r25, Y+4	; 0x04
    252a:	23 e3       	ldi	r18, 0x33	; 51
    252c:	fc 01       	movw	r30, r24
    252e:	20 83       	st	Z, r18
    2530:	8b 81       	ldd	r24, Y+3	; 0x03
    2532:	9c 81       	ldd	r25, Y+4	; 0x04
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	9c 83       	std	Y+4, r25	; 0x04
    2538:	8b 83       	std	Y+3, r24	; 0x03
    253a:	8d 81       	ldd	r24, Y+5	; 0x05
    253c:	9e 81       	ldd	r25, Y+6	; 0x06
    253e:	9a 83       	std	Y+2, r25	; 0x02
    2540:	89 83       	std	Y+1, r24	; 0x01
    2542:	29 81       	ldd	r18, Y+1	; 0x01
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	9c 81       	ldd	r25, Y+4	; 0x04
    2548:	fc 01       	movw	r30, r24
    254a:	20 83       	st	Z, r18
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	9c 81       	ldd	r25, Y+4	; 0x04
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	9c 83       	std	Y+4, r25	; 0x04
    2554:	8b 83       	std	Y+3, r24	; 0x03
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	9a 81       	ldd	r25, Y+2	; 0x02
    255a:	89 2f       	mov	r24, r25
    255c:	99 27       	eor	r25, r25
    255e:	9a 83       	std	Y+2, r25	; 0x02
    2560:	89 83       	std	Y+1, r24	; 0x01
    2562:	29 81       	ldd	r18, Y+1	; 0x01
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	fc 01       	movw	r30, r24
    256a:	20 83       	st	Z, r18
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
    256e:	9c 81       	ldd	r25, Y+4	; 0x04
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	9c 83       	std	Y+4, r25	; 0x04
    2574:	8b 83       	std	Y+3, r24	; 0x03
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	9c 81       	ldd	r25, Y+4	; 0x04
    257a:	fc 01       	movw	r30, r24
    257c:	10 82       	st	Z, r1
    257e:	8b 81       	ldd	r24, Y+3	; 0x03
    2580:	9c 81       	ldd	r25, Y+4	; 0x04
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	9c 83       	std	Y+4, r25	; 0x04
    2586:	8b 83       	std	Y+3, r24	; 0x03
    2588:	8b 81       	ldd	r24, Y+3	; 0x03
    258a:	9c 81       	ldd	r25, Y+4	; 0x04
    258c:	20 e8       	ldi	r18, 0x80	; 128
    258e:	fc 01       	movw	r30, r24
    2590:	20 83       	st	Z, r18
    2592:	8b 81       	ldd	r24, Y+3	; 0x03
    2594:	9c 81       	ldd	r25, Y+4	; 0x04
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	9c 83       	std	Y+4, r25	; 0x04
    259a:	8b 83       	std	Y+3, r24	; 0x03
    259c:	8b 81       	ldd	r24, Y+3	; 0x03
    259e:	9c 81       	ldd	r25, Y+4	; 0x04
    25a0:	fc 01       	movw	r30, r24
    25a2:	10 82       	st	Z, r1
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	9c 81       	ldd	r25, Y+4	; 0x04
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	9c 83       	std	Y+4, r25	; 0x04
    25ac:	8b 83       	std	Y+3, r24	; 0x03
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	9c 81       	ldd	r25, Y+4	; 0x04
    25b2:	22 e0       	ldi	r18, 0x02	; 2
    25b4:	fc 01       	movw	r30, r24
    25b6:	20 83       	st	Z, r18
    25b8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ba:	9c 81       	ldd	r25, Y+4	; 0x04
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	9c 83       	std	Y+4, r25	; 0x04
    25c0:	8b 83       	std	Y+3, r24	; 0x03
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	9c 81       	ldd	r25, Y+4	; 0x04
    25c6:	23 e0       	ldi	r18, 0x03	; 3
    25c8:	fc 01       	movw	r30, r24
    25ca:	20 83       	st	Z, r18
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	9c 81       	ldd	r25, Y+4	; 0x04
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	9c 83       	std	Y+4, r25	; 0x04
    25d4:	8b 83       	std	Y+3, r24	; 0x03
    25d6:	8b 81       	ldd	r24, Y+3	; 0x03
    25d8:	9c 81       	ldd	r25, Y+4	; 0x04
    25da:	24 e0       	ldi	r18, 0x04	; 4
    25dc:	fc 01       	movw	r30, r24
    25de:	20 83       	st	Z, r18
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	9c 81       	ldd	r25, Y+4	; 0x04
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	9c 83       	std	Y+4, r25	; 0x04
    25e8:	8b 83       	std	Y+3, r24	; 0x03
    25ea:	8b 81       	ldd	r24, Y+3	; 0x03
    25ec:	9c 81       	ldd	r25, Y+4	; 0x04
    25ee:	25 e0       	ldi	r18, 0x05	; 5
    25f0:	fc 01       	movw	r30, r24
    25f2:	20 83       	st	Z, r18
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	9c 81       	ldd	r25, Y+4	; 0x04
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	9c 83       	std	Y+4, r25	; 0x04
    25fc:	8b 83       	std	Y+3, r24	; 0x03
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	9c 81       	ldd	r25, Y+4	; 0x04
    2602:	26 e0       	ldi	r18, 0x06	; 6
    2604:	fc 01       	movw	r30, r24
    2606:	20 83       	st	Z, r18
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	9c 81       	ldd	r25, Y+4	; 0x04
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	9c 83       	std	Y+4, r25	; 0x04
    2610:	8b 83       	std	Y+3, r24	; 0x03
    2612:	8b 81       	ldd	r24, Y+3	; 0x03
    2614:	9c 81       	ldd	r25, Y+4	; 0x04
    2616:	27 e0       	ldi	r18, 0x07	; 7
    2618:	fc 01       	movw	r30, r24
    261a:	20 83       	st	Z, r18
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	9c 81       	ldd	r25, Y+4	; 0x04
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	9c 83       	std	Y+4, r25	; 0x04
    2624:	8b 83       	std	Y+3, r24	; 0x03
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	9c 81       	ldd	r25, Y+4	; 0x04
    262a:	28 e0       	ldi	r18, 0x08	; 8
    262c:	fc 01       	movw	r30, r24
    262e:	20 83       	st	Z, r18
    2630:	8b 81       	ldd	r24, Y+3	; 0x03
    2632:	9c 81       	ldd	r25, Y+4	; 0x04
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	9c 83       	std	Y+4, r25	; 0x04
    2638:	8b 83       	std	Y+3, r24	; 0x03
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	9c 81       	ldd	r25, Y+4	; 0x04
    263e:	29 e0       	ldi	r18, 0x09	; 9
    2640:	fc 01       	movw	r30, r24
    2642:	20 83       	st	Z, r18
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	9c 81       	ldd	r25, Y+4	; 0x04
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	9c 83       	std	Y+4, r25	; 0x04
    264c:	8b 83       	std	Y+3, r24	; 0x03
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	9c 81       	ldd	r25, Y+4	; 0x04
    2652:	20 e1       	ldi	r18, 0x10	; 16
    2654:	fc 01       	movw	r30, r24
    2656:	20 83       	st	Z, r18
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	9c 81       	ldd	r25, Y+4	; 0x04
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	9c 83       	std	Y+4, r25	; 0x04
    2660:	8b 83       	std	Y+3, r24	; 0x03
    2662:	8b 81       	ldd	r24, Y+3	; 0x03
    2664:	9c 81       	ldd	r25, Y+4	; 0x04
    2666:	21 e1       	ldi	r18, 0x11	; 17
    2668:	fc 01       	movw	r30, r24
    266a:	20 83       	st	Z, r18
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	9c 81       	ldd	r25, Y+4	; 0x04
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	9c 83       	std	Y+4, r25	; 0x04
    2674:	8b 83       	std	Y+3, r24	; 0x03
    2676:	8b 81       	ldd	r24, Y+3	; 0x03
    2678:	9c 81       	ldd	r25, Y+4	; 0x04
    267a:	22 e1       	ldi	r18, 0x12	; 18
    267c:	fc 01       	movw	r30, r24
    267e:	20 83       	st	Z, r18
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	9c 81       	ldd	r25, Y+4	; 0x04
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	9c 83       	std	Y+4, r25	; 0x04
    2688:	8b 83       	std	Y+3, r24	; 0x03
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	9c 81       	ldd	r25, Y+4	; 0x04
    268e:	23 e1       	ldi	r18, 0x13	; 19
    2690:	fc 01       	movw	r30, r24
    2692:	20 83       	st	Z, r18
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	9c 81       	ldd	r25, Y+4	; 0x04
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	9c 83       	std	Y+4, r25	; 0x04
    269c:	8b 83       	std	Y+3, r24	; 0x03
    269e:	8b 81       	ldd	r24, Y+3	; 0x03
    26a0:	9c 81       	ldd	r25, Y+4	; 0x04
    26a2:	24 e1       	ldi	r18, 0x14	; 20
    26a4:	fc 01       	movw	r30, r24
    26a6:	20 83       	st	Z, r18
    26a8:	8b 81       	ldd	r24, Y+3	; 0x03
    26aa:	9c 81       	ldd	r25, Y+4	; 0x04
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	9c 83       	std	Y+4, r25	; 0x04
    26b0:	8b 83       	std	Y+3, r24	; 0x03
    26b2:	8b 81       	ldd	r24, Y+3	; 0x03
    26b4:	9c 81       	ldd	r25, Y+4	; 0x04
    26b6:	25 e1       	ldi	r18, 0x15	; 21
    26b8:	fc 01       	movw	r30, r24
    26ba:	20 83       	st	Z, r18
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	9c 81       	ldd	r25, Y+4	; 0x04
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	9c 83       	std	Y+4, r25	; 0x04
    26c4:	8b 83       	std	Y+3, r24	; 0x03
    26c6:	8b 81       	ldd	r24, Y+3	; 0x03
    26c8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ca:	26 e1       	ldi	r18, 0x16	; 22
    26cc:	fc 01       	movw	r30, r24
    26ce:	20 83       	st	Z, r18
    26d0:	8b 81       	ldd	r24, Y+3	; 0x03
    26d2:	9c 81       	ldd	r25, Y+4	; 0x04
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	9c 83       	std	Y+4, r25	; 0x04
    26d8:	8b 83       	std	Y+3, r24	; 0x03
    26da:	8b 81       	ldd	r24, Y+3	; 0x03
    26dc:	9c 81       	ldd	r25, Y+4	; 0x04
    26de:	27 e1       	ldi	r18, 0x17	; 23
    26e0:	fc 01       	movw	r30, r24
    26e2:	20 83       	st	Z, r18
    26e4:	8b 81       	ldd	r24, Y+3	; 0x03
    26e6:	9c 81       	ldd	r25, Y+4	; 0x04
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	9c 83       	std	Y+4, r25	; 0x04
    26ec:	8b 83       	std	Y+3, r24	; 0x03
    26ee:	8b 81       	ldd	r24, Y+3	; 0x03
    26f0:	9c 81       	ldd	r25, Y+4	; 0x04
    26f2:	28 e1       	ldi	r18, 0x18	; 24
    26f4:	fc 01       	movw	r30, r24
    26f6:	20 83       	st	Z, r18
    26f8:	8b 81       	ldd	r24, Y+3	; 0x03
    26fa:	9c 81       	ldd	r25, Y+4	; 0x04
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	9c 83       	std	Y+4, r25	; 0x04
    2700:	8b 83       	std	Y+3, r24	; 0x03
    2702:	8b 81       	ldd	r24, Y+3	; 0x03
    2704:	9c 81       	ldd	r25, Y+4	; 0x04
    2706:	29 e1       	ldi	r18, 0x19	; 25
    2708:	fc 01       	movw	r30, r24
    270a:	20 83       	st	Z, r18
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	9c 81       	ldd	r25, Y+4	; 0x04
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	9c 83       	std	Y+4, r25	; 0x04
    2714:	8b 83       	std	Y+3, r24	; 0x03
    2716:	8b 81       	ldd	r24, Y+3	; 0x03
    2718:	9c 81       	ldd	r25, Y+4	; 0x04
    271a:	20 e2       	ldi	r18, 0x20	; 32
    271c:	fc 01       	movw	r30, r24
    271e:	20 83       	st	Z, r18
    2720:	8b 81       	ldd	r24, Y+3	; 0x03
    2722:	9c 81       	ldd	r25, Y+4	; 0x04
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	9c 83       	std	Y+4, r25	; 0x04
    2728:	8b 83       	std	Y+3, r24	; 0x03
    272a:	8b 81       	ldd	r24, Y+3	; 0x03
    272c:	9c 81       	ldd	r25, Y+4	; 0x04
    272e:	21 e2       	ldi	r18, 0x21	; 33
    2730:	fc 01       	movw	r30, r24
    2732:	20 83       	st	Z, r18
    2734:	8b 81       	ldd	r24, Y+3	; 0x03
    2736:	9c 81       	ldd	r25, Y+4	; 0x04
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	9c 83       	std	Y+4, r25	; 0x04
    273c:	8b 83       	std	Y+3, r24	; 0x03
    273e:	8b 81       	ldd	r24, Y+3	; 0x03
    2740:	9c 81       	ldd	r25, Y+4	; 0x04
    2742:	22 e2       	ldi	r18, 0x22	; 34
    2744:	fc 01       	movw	r30, r24
    2746:	20 83       	st	Z, r18
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	9c 81       	ldd	r25, Y+4	; 0x04
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	9c 83       	std	Y+4, r25	; 0x04
    2750:	8b 83       	std	Y+3, r24	; 0x03
    2752:	8b 81       	ldd	r24, Y+3	; 0x03
    2754:	9c 81       	ldd	r25, Y+4	; 0x04
    2756:	23 e2       	ldi	r18, 0x23	; 35
    2758:	fc 01       	movw	r30, r24
    275a:	20 83       	st	Z, r18
    275c:	8b 81       	ldd	r24, Y+3	; 0x03
    275e:	9c 81       	ldd	r25, Y+4	; 0x04
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	9c 83       	std	Y+4, r25	; 0x04
    2764:	8b 83       	std	Y+3, r24	; 0x03
    2766:	8f 81       	ldd	r24, Y+7	; 0x07
    2768:	98 85       	ldd	r25, Y+8	; 0x08
    276a:	9a 83       	std	Y+2, r25	; 0x02
    276c:	89 83       	std	Y+1, r24	; 0x01
    276e:	29 81       	ldd	r18, Y+1	; 0x01
    2770:	8b 81       	ldd	r24, Y+3	; 0x03
    2772:	9c 81       	ldd	r25, Y+4	; 0x04
    2774:	fc 01       	movw	r30, r24
    2776:	20 83       	st	Z, r18
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	9c 81       	ldd	r25, Y+4	; 0x04
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	9c 83       	std	Y+4, r25	; 0x04
    2780:	8b 83       	std	Y+3, r24	; 0x03
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	9a 81       	ldd	r25, Y+2	; 0x02
    2786:	89 2f       	mov	r24, r25
    2788:	99 27       	eor	r25, r25
    278a:	9a 83       	std	Y+2, r25	; 0x02
    278c:	89 83       	std	Y+1, r24	; 0x01
    278e:	29 81       	ldd	r18, Y+1	; 0x01
    2790:	8b 81       	ldd	r24, Y+3	; 0x03
    2792:	9c 81       	ldd	r25, Y+4	; 0x04
    2794:	fc 01       	movw	r30, r24
    2796:	20 83       	st	Z, r18
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	9c 81       	ldd	r25, Y+4	; 0x04
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	9c 83       	std	Y+4, r25	; 0x04
    27a0:	8b 83       	std	Y+3, r24	; 0x03
    27a2:	8b 81       	ldd	r24, Y+3	; 0x03
    27a4:	9c 81       	ldd	r25, Y+4	; 0x04
    27a6:	26 e2       	ldi	r18, 0x26	; 38
    27a8:	fc 01       	movw	r30, r24
    27aa:	20 83       	st	Z, r18
    27ac:	8b 81       	ldd	r24, Y+3	; 0x03
    27ae:	9c 81       	ldd	r25, Y+4	; 0x04
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	9c 83       	std	Y+4, r25	; 0x04
    27b4:	8b 83       	std	Y+3, r24	; 0x03
    27b6:	8b 81       	ldd	r24, Y+3	; 0x03
    27b8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ba:	27 e2       	ldi	r18, 0x27	; 39
    27bc:	fc 01       	movw	r30, r24
    27be:	20 83       	st	Z, r18
    27c0:	8b 81       	ldd	r24, Y+3	; 0x03
    27c2:	9c 81       	ldd	r25, Y+4	; 0x04
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	9c 83       	std	Y+4, r25	; 0x04
    27c8:	8b 83       	std	Y+3, r24	; 0x03
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	9c 81       	ldd	r25, Y+4	; 0x04
    27ce:	28 e2       	ldi	r18, 0x28	; 40
    27d0:	fc 01       	movw	r30, r24
    27d2:	20 83       	st	Z, r18
    27d4:	8b 81       	ldd	r24, Y+3	; 0x03
    27d6:	9c 81       	ldd	r25, Y+4	; 0x04
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	9c 83       	std	Y+4, r25	; 0x04
    27dc:	8b 83       	std	Y+3, r24	; 0x03
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	9c 81       	ldd	r25, Y+4	; 0x04
    27e2:	29 e2       	ldi	r18, 0x29	; 41
    27e4:	fc 01       	movw	r30, r24
    27e6:	20 83       	st	Z, r18
    27e8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ea:	9c 81       	ldd	r25, Y+4	; 0x04
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	9c 83       	std	Y+4, r25	; 0x04
    27f0:	8b 83       	std	Y+3, r24	; 0x03
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	9c 81       	ldd	r25, Y+4	; 0x04
    27f6:	20 e3       	ldi	r18, 0x30	; 48
    27f8:	fc 01       	movw	r30, r24
    27fa:	20 83       	st	Z, r18
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
    27fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	9c 83       	std	Y+4, r25	; 0x04
    2804:	8b 83       	std	Y+3, r24	; 0x03
    2806:	8b 81       	ldd	r24, Y+3	; 0x03
    2808:	9c 81       	ldd	r25, Y+4	; 0x04
    280a:	21 e3       	ldi	r18, 0x31	; 49
    280c:	fc 01       	movw	r30, r24
    280e:	20 83       	st	Z, r18
    2810:	8b 81       	ldd	r24, Y+3	; 0x03
    2812:	9c 81       	ldd	r25, Y+4	; 0x04
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	9c 83       	std	Y+4, r25	; 0x04
    2818:	8b 83       	std	Y+3, r24	; 0x03
    281a:	8b 81       	ldd	r24, Y+3	; 0x03
    281c:	9c 81       	ldd	r25, Y+4	; 0x04
    281e:	28 96       	adiw	r28, 0x08	; 8
    2820:	0f b6       	in	r0, 0x3f	; 63
    2822:	f8 94       	cli
    2824:	de bf       	out	0x3e, r29	; 62
    2826:	0f be       	out	0x3f, r0	; 63
    2828:	cd bf       	out	0x3d, r28	; 61
    282a:	df 91       	pop	r29
    282c:	cf 91       	pop	r28
    282e:	08 95       	ret

00002830 <xPortStartScheduler>:
    2830:	cf 93       	push	r28
    2832:	df 93       	push	r29
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <prvSetupTimerInterrupt>
    283c:	a0 91 c6 07 	lds	r26, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    2840:	b0 91 c7 07 	lds	r27, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    2844:	cd 91       	ld	r28, X+
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	dd 91       	ld	r29, X+
    284a:	de bf       	out	0x3e, r29	; 62
    284c:	ff 91       	pop	r31
    284e:	ef 91       	pop	r30
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
    2854:	bf 91       	pop	r27
    2856:	af 91       	pop	r26
    2858:	9f 91       	pop	r25
    285a:	8f 91       	pop	r24
    285c:	7f 91       	pop	r23
    285e:	6f 91       	pop	r22
    2860:	5f 91       	pop	r21
    2862:	4f 91       	pop	r20
    2864:	3f 91       	pop	r19
    2866:	2f 91       	pop	r18
    2868:	1f 91       	pop	r17
    286a:	0f 91       	pop	r16
    286c:	ff 90       	pop	r15
    286e:	ef 90       	pop	r14
    2870:	df 90       	pop	r13
    2872:	cf 90       	pop	r12
    2874:	bf 90       	pop	r11
    2876:	af 90       	pop	r10
    2878:	9f 90       	pop	r9
    287a:	8f 90       	pop	r8
    287c:	7f 90       	pop	r7
    287e:	6f 90       	pop	r6
    2880:	5f 90       	pop	r5
    2882:	4f 90       	pop	r4
    2884:	3f 90       	pop	r3
    2886:	2f 90       	pop	r2
    2888:	1f 90       	pop	r1
    288a:	0f 90       	pop	r0
    288c:	0f be       	out	0x3f, r0	; 63
    288e:	0f 90       	pop	r0
    2890:	08 95       	ret
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	df 91       	pop	r29
    2896:	cf 91       	pop	r28
    2898:	08 95       	ret

0000289a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    289a:	0f 92       	push	r0
    289c:	0f b6       	in	r0, 0x3f	; 63
    289e:	f8 94       	cli
    28a0:	0f 92       	push	r0
    28a2:	1f 92       	push	r1
    28a4:	11 24       	eor	r1, r1
    28a6:	2f 92       	push	r2
    28a8:	3f 92       	push	r3
    28aa:	4f 92       	push	r4
    28ac:	5f 92       	push	r5
    28ae:	6f 92       	push	r6
    28b0:	7f 92       	push	r7
    28b2:	8f 92       	push	r8
    28b4:	9f 92       	push	r9
    28b6:	af 92       	push	r10
    28b8:	bf 92       	push	r11
    28ba:	cf 92       	push	r12
    28bc:	df 92       	push	r13
    28be:	ef 92       	push	r14
    28c0:	ff 92       	push	r15
    28c2:	0f 93       	push	r16
    28c4:	1f 93       	push	r17
    28c6:	2f 93       	push	r18
    28c8:	3f 93       	push	r19
    28ca:	4f 93       	push	r20
    28cc:	5f 93       	push	r21
    28ce:	6f 93       	push	r22
    28d0:	7f 93       	push	r23
    28d2:	8f 93       	push	r24
    28d4:	9f 93       	push	r25
    28d6:	af 93       	push	r26
    28d8:	bf 93       	push	r27
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
    28de:	ef 93       	push	r30
    28e0:	ff 93       	push	r31
    28e2:	a0 91 c6 07 	lds	r26, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    28e6:	b0 91 c7 07 	lds	r27, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    28ea:	0d b6       	in	r0, 0x3d	; 61
    28ec:	0d 92       	st	X+, r0
    28ee:	0e b6       	in	r0, 0x3e	; 62
    28f0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    28f2:	0e 94 0e 23 	call	0x461c	; 0x461c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    28f6:	a0 91 c6 07 	lds	r26, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    28fa:	b0 91 c7 07 	lds	r27, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    28fe:	cd 91       	ld	r28, X+
    2900:	cd bf       	out	0x3d, r28	; 61
    2902:	dd 91       	ld	r29, X+
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	ff 91       	pop	r31
    2908:	ef 91       	pop	r30
    290a:	df 91       	pop	r29
    290c:	cf 91       	pop	r28
    290e:	bf 91       	pop	r27
    2910:	af 91       	pop	r26
    2912:	9f 91       	pop	r25
    2914:	8f 91       	pop	r24
    2916:	7f 91       	pop	r23
    2918:	6f 91       	pop	r22
    291a:	5f 91       	pop	r21
    291c:	4f 91       	pop	r20
    291e:	3f 91       	pop	r19
    2920:	2f 91       	pop	r18
    2922:	1f 91       	pop	r17
    2924:	0f 91       	pop	r16
    2926:	ff 90       	pop	r15
    2928:	ef 90       	pop	r14
    292a:	df 90       	pop	r13
    292c:	cf 90       	pop	r12
    292e:	bf 90       	pop	r11
    2930:	af 90       	pop	r10
    2932:	9f 90       	pop	r9
    2934:	8f 90       	pop	r8
    2936:	7f 90       	pop	r7
    2938:	6f 90       	pop	r6
    293a:	5f 90       	pop	r5
    293c:	4f 90       	pop	r4
    293e:	3f 90       	pop	r3
    2940:	2f 90       	pop	r2
    2942:	1f 90       	pop	r1
    2944:	0f 90       	pop	r0
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	0f 90       	pop	r0

	asm volatile ( "ret" );
    294a:	08 95       	ret
	...

0000294e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    294e:	0f 92       	push	r0
    2950:	0f b6       	in	r0, 0x3f	; 63
    2952:	f8 94       	cli
    2954:	0f 92       	push	r0
    2956:	1f 92       	push	r1
    2958:	11 24       	eor	r1, r1
    295a:	2f 92       	push	r2
    295c:	3f 92       	push	r3
    295e:	4f 92       	push	r4
    2960:	5f 92       	push	r5
    2962:	6f 92       	push	r6
    2964:	7f 92       	push	r7
    2966:	8f 92       	push	r8
    2968:	9f 92       	push	r9
    296a:	af 92       	push	r10
    296c:	bf 92       	push	r11
    296e:	cf 92       	push	r12
    2970:	df 92       	push	r13
    2972:	ef 92       	push	r14
    2974:	ff 92       	push	r15
    2976:	0f 93       	push	r16
    2978:	1f 93       	push	r17
    297a:	2f 93       	push	r18
    297c:	3f 93       	push	r19
    297e:	4f 93       	push	r20
    2980:	5f 93       	push	r21
    2982:	6f 93       	push	r22
    2984:	7f 93       	push	r23
    2986:	8f 93       	push	r24
    2988:	9f 93       	push	r25
    298a:	af 93       	push	r26
    298c:	bf 93       	push	r27
    298e:	cf 93       	push	r28
    2990:	df 93       	push	r29
    2992:	ef 93       	push	r30
    2994:	ff 93       	push	r31
    2996:	a0 91 c6 07 	lds	r26, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    299a:	b0 91 c7 07 	lds	r27, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    299e:	0d b6       	in	r0, 0x3d	; 61
    29a0:	0d 92       	st	X+, r0
    29a2:	0e b6       	in	r0, 0x3e	; 62
    29a4:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    29a6:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <xTaskIncrementTick>
    29aa:	88 23       	and	r24, r24
    29ac:	11 f0       	breq	.+4      	; 0x29b2 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    29ae:	0e 94 0e 23 	call	0x461c	; 0x461c <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    29b2:	a0 91 c6 07 	lds	r26, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    29b6:	b0 91 c7 07 	lds	r27, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    29ba:	cd 91       	ld	r28, X+
    29bc:	cd bf       	out	0x3d, r28	; 61
    29be:	dd 91       	ld	r29, X+
    29c0:	de bf       	out	0x3e, r29	; 62
    29c2:	ff 91       	pop	r31
    29c4:	ef 91       	pop	r30
    29c6:	df 91       	pop	r29
    29c8:	cf 91       	pop	r28
    29ca:	bf 91       	pop	r27
    29cc:	af 91       	pop	r26
    29ce:	9f 91       	pop	r25
    29d0:	8f 91       	pop	r24
    29d2:	7f 91       	pop	r23
    29d4:	6f 91       	pop	r22
    29d6:	5f 91       	pop	r21
    29d8:	4f 91       	pop	r20
    29da:	3f 91       	pop	r19
    29dc:	2f 91       	pop	r18
    29de:	1f 91       	pop	r17
    29e0:	0f 91       	pop	r16
    29e2:	ff 90       	pop	r15
    29e4:	ef 90       	pop	r14
    29e6:	df 90       	pop	r13
    29e8:	cf 90       	pop	r12
    29ea:	bf 90       	pop	r11
    29ec:	af 90       	pop	r10
    29ee:	9f 90       	pop	r9
    29f0:	8f 90       	pop	r8
    29f2:	7f 90       	pop	r7
    29f4:	6f 90       	pop	r6
    29f6:	5f 90       	pop	r5
    29f8:	4f 90       	pop	r4
    29fa:	3f 90       	pop	r3
    29fc:	2f 90       	pop	r2
    29fe:	1f 90       	pop	r1
    2a00:	0f 90       	pop	r0
    2a02:	0f be       	out	0x3f, r0	; 63
    2a04:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2a06:	08 95       	ret
	...

00002a0a <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    2a0a:	cf 93       	push	r28
    2a0c:	df 93       	push	r29
    2a0e:	00 d0       	rcall	.+0      	; 0x2a10 <prvSetupTimerInterrupt+0x6>
    2a10:	00 d0       	rcall	.+0      	; 0x2a12 <prvSetupTimerInterrupt+0x8>
    2a12:	00 d0       	rcall	.+0      	; 0x2a14 <prvSetupTimerInterrupt+0xa>
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    2a18:	89 e9       	ldi	r24, 0x99	; 153
    2a1a:	99 e3       	ldi	r25, 0x39	; 57
    2a1c:	a0 e0       	ldi	r26, 0x00	; 0
    2a1e:	b0 e0       	ldi	r27, 0x00	; 0
    2a20:	89 83       	std	Y+1, r24	; 0x01
    2a22:	9a 83       	std	Y+2, r25	; 0x02
    2a24:	ab 83       	std	Y+3, r26	; 0x03
    2a26:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2c:	ab 81       	ldd	r26, Y+3	; 0x03
    2a2e:	bc 81       	ldd	r27, Y+4	; 0x04
    2a30:	68 94       	set
    2a32:	15 f8       	bld	r1, 5
    2a34:	b6 95       	lsr	r27
    2a36:	a7 95       	ror	r26
    2a38:	97 95       	ror	r25
    2a3a:	87 95       	ror	r24
    2a3c:	16 94       	lsr	r1
    2a3e:	d1 f7       	brne	.-12     	; 0x2a34 <prvSetupTimerInterrupt+0x2a>
    2a40:	89 83       	std	Y+1, r24	; 0x01
    2a42:	9a 83       	std	Y+2, r25	; 0x02
    2a44:	ab 83       	std	Y+3, r26	; 0x03
    2a46:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4c:	ab 81       	ldd	r26, Y+3	; 0x03
    2a4e:	bc 81       	ldd	r27, Y+4	; 0x04
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	a1 09       	sbc	r26, r1
    2a54:	b1 09       	sbc	r27, r1
    2a56:	89 83       	std	Y+1, r24	; 0x01
    2a58:	9a 83       	std	Y+2, r25	; 0x02
    2a5a:	ab 83       	std	Y+3, r26	; 0x03
    2a5c:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	9a 81       	ldd	r25, Y+2	; 0x02
    2a66:	ab 81       	ldd	r26, Y+3	; 0x03
    2a68:	bc 81       	ldd	r27, Y+4	; 0x04
    2a6a:	89 2f       	mov	r24, r25
    2a6c:	9a 2f       	mov	r25, r26
    2a6e:	ab 2f       	mov	r26, r27
    2a70:	bb 27       	eor	r27, r27
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	9a 83       	std	Y+2, r25	; 0x02
    2a76:	ab 83       	std	Y+3, r26	; 0x03
    2a78:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    2a7e:	89 e8       	ldi	r24, 0x89	; 137
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	2e 81       	ldd	r18, Y+6	; 0x06
    2a84:	fc 01       	movw	r30, r24
    2a86:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    2a88:	88 e8       	ldi	r24, 0x88	; 136
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	2d 81       	ldd	r18, Y+5	; 0x05
    2a8e:	fc 01       	movw	r30, r24
    2a90:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    2a92:	8b e0       	ldi	r24, 0x0B	; 11
    2a94:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    2a96:	81 e8       	ldi	r24, 0x81	; 129
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	2d 81       	ldd	r18, Y+5	; 0x05
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    2aa0:	8f e6       	ldi	r24, 0x6F	; 111
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	80 81       	ld	r24, Z
    2aa8:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    2aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    2aac:	82 60       	ori	r24, 0x02	; 2
    2aae:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    2ab0:	8f e6       	ldi	r24, 0x6F	; 111
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	20 83       	st	Z, r18
}
    2aba:	00 00       	nop
    2abc:	26 96       	adiw	r28, 0x06	; 6
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	f8 94       	cli
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	cd bf       	out	0x3d, r28	; 61
    2ac8:	df 91       	pop	r29
    2aca:	cf 91       	pop	r28
    2acc:	08 95       	ret

00002ace <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    2ace:	0e 94 a7 14 	call	0x294e	; 0x294e <vPortYieldFromTick>
		asm volatile ( "reti" );
    2ad2:	18 95       	reti
	...

00002ad6 <_serial_tx_int_on>:
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
    2ad6:	cf 93       	push	r28
    2ad8:	df 93       	push	r29
    2ada:	00 d0       	rcall	.+0      	; 0x2adc <_serial_tx_int_on+0x6>
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	9a 83       	std	Y+2, r25	; 0x02
    2ae2:	89 83       	std	Y+1, r24	; 0x01
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae8:	05 97       	sbiw	r24, 0x05	; 5
    2aea:	29 81       	ldd	r18, Y+1	; 0x01
    2aec:	3a 81       	ldd	r19, Y+2	; 0x02
    2aee:	25 50       	subi	r18, 0x05	; 5
    2af0:	31 09       	sbc	r19, r1
    2af2:	f9 01       	movw	r30, r18
    2af4:	20 81       	ld	r18, Z
    2af6:	20 62       	ori	r18, 0x20	; 32
    2af8:	fc 01       	movw	r30, r24
    2afa:	20 83       	st	Z, r18
    2afc:	00 00       	nop
    2afe:	0f 90       	pop	r0
    2b00:	0f 90       	pop	r0
    2b02:	df 91       	pop	r29
    2b04:	cf 91       	pop	r28
    2b06:	08 95       	ret

00002b08 <serial_new_instance>:
    2b08:	8f 92       	push	r8
    2b0a:	9f 92       	push	r9
    2b0c:	af 92       	push	r10
    2b0e:	bf 92       	push	r11
    2b10:	cf 92       	push	r12
    2b12:	df 92       	push	r13
    2b14:	ef 92       	push	r14
    2b16:	0f 93       	push	r16
    2b18:	1f 93       	push	r17
    2b1a:	cf 93       	push	r28
    2b1c:	df 93       	push	r29
    2b1e:	cd b7       	in	r28, 0x3d	; 61
    2b20:	de b7       	in	r29, 0x3e	; 62
    2b22:	61 97       	sbiw	r28, 0x11	; 17
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	de bf       	out	0x3e, r29	; 62
    2b2a:	0f be       	out	0x3f, r0	; 63
    2b2c:	cd bf       	out	0x3d, r28	; 61
    2b2e:	8c 83       	std	Y+4, r24	; 0x04
    2b30:	4d 83       	std	Y+5, r20	; 0x05
    2b32:	5e 83       	std	Y+6, r21	; 0x06
    2b34:	6f 83       	std	Y+7, r22	; 0x07
    2b36:	78 87       	std	Y+8, r23	; 0x08
    2b38:	29 87       	std	Y+9, r18	; 0x09
    2b3a:	0a 87       	std	Y+10, r16	; 0x0a
    2b3c:	eb 86       	std	Y+11, r14	; 0x0b
    2b3e:	dd 86       	std	Y+13, r13	; 0x0d
    2b40:	cc 86       	std	Y+12, r12	; 0x0c
    2b42:	bf 86       	std	Y+15, r11	; 0x0f
    2b44:	ae 86       	std	Y+14, r10	; 0x0e
    2b46:	99 8a       	std	Y+17, r9	; 0x11
    2b48:	88 8a       	std	Y+16, r8	; 0x10
    2b4a:	88 e0       	ldi	r24, 0x08	; 8
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	0e 94 d7 17 	call	0x2fae	; 0x2fae <pvPortMalloc>
    2b52:	9a 83       	std	Y+2, r25	; 0x02
    2b54:	89 83       	std	Y+1, r24	; 0x01
    2b56:	8c 81       	ldd	r24, Y+4	; 0x04
    2b58:	88 2f       	mov	r24, r24
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	88 0f       	add	r24, r24
    2b5e:	99 1f       	adc	r25, r25
    2b60:	8f 5b       	subi	r24, 0xBF	; 191
    2b62:	9d 4f       	sbci	r25, 0xFD	; 253
    2b64:	29 81       	ldd	r18, Y+1	; 0x01
    2b66:	3a 81       	ldd	r19, Y+2	; 0x02
    2b68:	fc 01       	movw	r30, r24
    2b6a:	31 83       	std	Z+1, r19	; 0x01
    2b6c:	20 83       	st	Z, r18
    2b6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b70:	88 2f       	mov	r24, r24
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	80 5e       	subi	r24, 0xE0	; 224
    2b7a:	9e 4f       	sbci	r25, 0xFE	; 254
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	20 81       	ld	r18, Z
    2b80:	31 81       	ldd	r19, Z+1	; 0x01
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	9a 81       	ldd	r25, Y+2	; 0x02
    2b86:	fc 01       	movw	r30, r24
    2b88:	31 83       	std	Z+1, r19	; 0x01
    2b8a:	20 83       	st	Z, r18
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b90:	2e 85       	ldd	r18, Y+14	; 0x0e
    2b92:	3f 85       	ldd	r19, Y+15	; 0x0f
    2b94:	fc 01       	movw	r30, r24
    2b96:	33 83       	std	Z+3, r19	; 0x03
    2b98:	22 83       	std	Z+2, r18	; 0x02
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ba0:	3d 85       	ldd	r19, Y+13	; 0x0d
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	35 83       	std	Z+5, r19	; 0x05
    2ba6:	24 83       	std	Z+4, r18	; 0x04
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
    2baa:	9a 81       	ldd	r25, Y+2	; 0x02
    2bac:	28 89       	ldd	r18, Y+16	; 0x10
    2bae:	39 89       	ldd	r19, Y+17	; 0x11
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	37 83       	std	Z+7, r19	; 0x07
    2bb4:	26 83       	std	Z+6, r18	; 0x06
    2bb6:	8f e5       	ldi	r24, 0x5F	; 95
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	fc 01       	movw	r30, r24
    2bbc:	80 81       	ld	r24, Z
    2bbe:	8b 83       	std	Y+3, r24	; 0x03
    2bc0:	f8 94       	cli
    2bc2:	89 81       	ldd	r24, Y+1	; 0x01
    2bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	80 81       	ld	r24, Z
    2bca:	91 81       	ldd	r25, Z+1	; 0x01
    2bcc:	06 97       	sbiw	r24, 0x06	; 6
    2bce:	29 81       	ldd	r18, Y+1	; 0x01
    2bd0:	3a 81       	ldd	r19, Y+2	; 0x02
    2bd2:	f9 01       	movw	r30, r18
    2bd4:	20 81       	ld	r18, Z
    2bd6:	31 81       	ldd	r19, Z+1	; 0x01
    2bd8:	26 50       	subi	r18, 0x06	; 6
    2bda:	31 09       	sbc	r19, r1
    2bdc:	f9 01       	movw	r30, r18
    2bde:	20 81       	ld	r18, Z
    2be0:	22 60       	ori	r18, 0x02	; 2
    2be2:	fc 01       	movw	r30, r24
    2be4:	20 83       	st	Z, r18
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bea:	fc 01       	movw	r30, r24
    2bec:	80 81       	ld	r24, Z
    2bee:	91 81       	ldd	r25, Z+1	; 0x01
    2bf0:	8c 01       	movw	r16, r24
    2bf2:	02 50       	subi	r16, 0x02	; 2
    2bf4:	11 09       	sbc	r17, r1
    2bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfa:	af 81       	ldd	r26, Y+7	; 0x07
    2bfc:	b8 85       	ldd	r27, Y+8	; 0x08
    2bfe:	88 0f       	add	r24, r24
    2c00:	99 1f       	adc	r25, r25
    2c02:	aa 1f       	adc	r26, r26
    2c04:	bb 1f       	adc	r27, r27
    2c06:	88 0f       	add	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	aa 1f       	adc	r26, r26
    2c0c:	bb 1f       	adc	r27, r27
    2c0e:	88 0f       	add	r24, r24
    2c10:	99 1f       	adc	r25, r25
    2c12:	aa 1f       	adc	r26, r26
    2c14:	bb 1f       	adc	r27, r27
    2c16:	9c 01       	movw	r18, r24
    2c18:	ad 01       	movw	r20, r26
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	a1 ee       	ldi	r26, 0xE1	; 225
    2c20:	b0 e0       	ldi	r27, 0x00	; 0
    2c22:	bc 01       	movw	r22, r24
    2c24:	cd 01       	movw	r24, r26
    2c26:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <__udivmodsi4>
    2c2a:	da 01       	movw	r26, r20
    2c2c:	c9 01       	movw	r24, r18
    2c2e:	81 50       	subi	r24, 0x01	; 1
    2c30:	f8 01       	movw	r30, r16
    2c32:	80 83       	st	Z, r24
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	9a 81       	ldd	r25, Y+2	; 0x02
    2c38:	fc 01       	movw	r30, r24
    2c3a:	80 81       	ld	r24, Z
    2c3c:	91 81       	ldd	r25, Z+1	; 0x01
    2c3e:	05 97       	sbiw	r24, 0x05	; 5
    2c40:	28 e9       	ldi	r18, 0x98	; 152
    2c42:	fc 01       	movw	r30, r24
    2c44:	20 83       	st	Z, r18
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	80 81       	ld	r24, Z
    2c4e:	91 81       	ldd	r25, Z+1	; 0x01
    2c50:	04 97       	sbiw	r24, 0x04	; 4
    2c52:	26 e0       	ldi	r18, 0x06	; 6
    2c54:	fc 01       	movw	r30, r24
    2c56:	20 83       	st	Z, r18
    2c58:	8f e5       	ldi	r24, 0x5F	; 95
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c5e:	fc 01       	movw	r30, r24
    2c60:	20 83       	st	Z, r18
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	9a 81       	ldd	r25, Y+2	; 0x02
    2c66:	61 96       	adiw	r28, 0x11	; 17
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	cd bf       	out	0x3d, r28	; 61
    2c72:	df 91       	pop	r29
    2c74:	cf 91       	pop	r28
    2c76:	1f 91       	pop	r17
    2c78:	0f 91       	pop	r16
    2c7a:	ef 90       	pop	r14
    2c7c:	df 90       	pop	r13
    2c7e:	cf 90       	pop	r12
    2c80:	bf 90       	pop	r11
    2c82:	af 90       	pop	r10
    2c84:	9f 90       	pop	r9
    2c86:	8f 90       	pop	r8
    2c88:	08 95       	ret

00002c8a <serial_send_byte>:
    2c8a:	cf 93       	push	r28
    2c8c:	df 93       	push	r29
    2c8e:	00 d0       	rcall	.+0      	; 0x2c90 <serial_send_byte+0x6>
    2c90:	1f 92       	push	r1
    2c92:	cd b7       	in	r28, 0x3d	; 61
    2c94:	de b7       	in	r29, 0x3e	; 62
    2c96:	9a 83       	std	Y+2, r25	; 0x02
    2c98:	89 83       	std	Y+1, r24	; 0x01
    2c9a:	6b 83       	std	Y+3, r22	; 0x03
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
    2c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca0:	fc 01       	movw	r30, r24
    2ca2:	82 81       	ldd	r24, Z+2	; 0x02
    2ca4:	93 81       	ldd	r25, Z+3	; 0x03
    2ca6:	89 2b       	or	r24, r25
    2ca8:	99 f0       	breq	.+38     	; 0x2cd0 <serial_send_byte+0x46>
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	9a 81       	ldd	r25, Y+2	; 0x02
    2cae:	fc 01       	movw	r30, r24
    2cb0:	82 81       	ldd	r24, Z+2	; 0x02
    2cb2:	93 81       	ldd	r25, Z+3	; 0x03
    2cb4:	6b 81       	ldd	r22, Y+3	; 0x03
    2cb6:	0e 94 c6 10 	call	0x218c	; 0x218c <buffer_put_item>
    2cba:	88 23       	and	r24, r24
    2cbc:	49 f4       	brne	.+18     	; 0x2cd0 <serial_send_byte+0x46>
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	80 81       	ld	r24, Z
    2cc6:	91 81       	ldd	r25, Z+1	; 0x01
    2cc8:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_serial_tx_int_on>
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	01 c0       	rjmp	.+2      	; 0x2cd2 <serial_send_byte+0x48>
    2cd0:	82 e0       	ldi	r24, 0x02	; 2
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	08 95       	ret

00002cde <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    2cde:	1f 92       	push	r1
    2ce0:	0f 92       	push	r0
    2ce2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2ce6:	0f 92       	push	r0
    2ce8:	11 24       	eor	r1, r1
    2cea:	2f 93       	push	r18
    2cec:	3f 93       	push	r19
    2cee:	4f 93       	push	r20
    2cf0:	5f 93       	push	r21
    2cf2:	6f 93       	push	r22
    2cf4:	7f 93       	push	r23
    2cf6:	8f 93       	push	r24
    2cf8:	9f 93       	push	r25
    2cfa:	af 93       	push	r26
    2cfc:	bf 93       	push	r27
    2cfe:	ef 93       	push	r30
    2d00:	ff 93       	push	r31
    2d02:	cf 93       	push	r28
    2d04:	df 93       	push	r29
    2d06:	1f 92       	push	r1
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    2d0c:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <_ser_handle>
    2d10:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <_ser_handle+0x1>
    2d14:	89 2b       	or	r24, r25
    2d16:	31 f1       	breq	.+76     	; 0x2d64 <__vector_20+0x86>
		item = UDR0;
    2d18:	86 ec       	ldi	r24, 0xC6	; 198
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	80 81       	ld	r24, Z
    2d20:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    2d22:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <_ser_handle>
    2d26:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <_ser_handle+0x1>
    2d2a:	fc 01       	movw	r30, r24
    2d2c:	84 81       	ldd	r24, Z+4	; 0x04
    2d2e:	95 81       	ldd	r25, Z+5	; 0x05
    2d30:	69 81       	ldd	r22, Y+1	; 0x01
    2d32:	0e 94 c6 10 	call	0x218c	; 0x218c <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    2d36:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <_ser_handle>
    2d3a:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <_ser_handle+0x1>
    2d3e:	fc 01       	movw	r30, r24
    2d40:	86 81       	ldd	r24, Z+6	; 0x06
    2d42:	97 81       	ldd	r25, Z+7	; 0x07
    2d44:	89 2b       	or	r24, r25
    2d46:	71 f0       	breq	.+28     	; 0x2d64 <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    2d48:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <_ser_handle>
    2d4c:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <_ser_handle+0x1>
    2d50:	fc 01       	movw	r30, r24
    2d52:	26 81       	ldd	r18, Z+6	; 0x06
    2d54:	37 81       	ldd	r19, Z+7	; 0x07
    2d56:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <_ser_handle>
    2d5a:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <_ser_handle+0x1>
    2d5e:	69 81       	ldd	r22, Y+1	; 0x01
    2d60:	f9 01       	movw	r30, r18
    2d62:	09 95       	icall
		}
	}
}
    2d64:	00 00       	nop
    2d66:	0f 90       	pop	r0
    2d68:	df 91       	pop	r29
    2d6a:	cf 91       	pop	r28
    2d6c:	ff 91       	pop	r31
    2d6e:	ef 91       	pop	r30
    2d70:	bf 91       	pop	r27
    2d72:	af 91       	pop	r26
    2d74:	9f 91       	pop	r25
    2d76:	8f 91       	pop	r24
    2d78:	7f 91       	pop	r23
    2d7a:	6f 91       	pop	r22
    2d7c:	5f 91       	pop	r21
    2d7e:	4f 91       	pop	r20
    2d80:	3f 91       	pop	r19
    2d82:	2f 91       	pop	r18
    2d84:	0f 90       	pop	r0
    2d86:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2d8a:	0f 90       	pop	r0
    2d8c:	1f 90       	pop	r1
    2d8e:	18 95       	reti

00002d90 <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    2d90:	1f 92       	push	r1
    2d92:	0f 92       	push	r0
    2d94:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2d98:	0f 92       	push	r0
    2d9a:	11 24       	eor	r1, r1
    2d9c:	2f 93       	push	r18
    2d9e:	3f 93       	push	r19
    2da0:	4f 93       	push	r20
    2da2:	5f 93       	push	r21
    2da4:	6f 93       	push	r22
    2da6:	7f 93       	push	r23
    2da8:	8f 93       	push	r24
    2daa:	9f 93       	push	r25
    2dac:	af 93       	push	r26
    2dae:	bf 93       	push	r27
    2db0:	ef 93       	push	r30
    2db2:	ff 93       	push	r31
    2db4:	cf 93       	push	r28
    2db6:	df 93       	push	r29
    2db8:	1f 92       	push	r1
    2dba:	cd b7       	in	r28, 0x3d	; 61
    2dbc:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    2dbe:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <_ser_handle>
    2dc2:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <_ser_handle+0x1>
    2dc6:	89 2b       	or	r24, r25
    2dc8:	f9 f0       	breq	.+62     	; 0x2e08 <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    2dca:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <_ser_handle>
    2dce:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <_ser_handle+0x1>
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	82 81       	ldd	r24, Z+2	; 0x02
    2dd6:	93 81       	ldd	r25, Z+3	; 0x03
    2dd8:	9e 01       	movw	r18, r28
    2dda:	2f 5f       	subi	r18, 0xFF	; 255
    2ddc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dde:	b9 01       	movw	r22, r18
    2de0:	0e 94 7e 10 	call	0x20fc	; 0x20fc <buffer_get_item>
    2de4:	88 23       	and	r24, r24
    2de6:	31 f4       	brne	.+12     	; 0x2df4 <__vector_21+0x64>
			UDR0 = item;
    2de8:	86 ec       	ldi	r24, 0xC6	; 198
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	29 81       	ldd	r18, Y+1	; 0x01
    2dee:	fc 01       	movw	r30, r24
    2df0:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    2df2:	13 c0       	rjmp	.+38     	; 0x2e1a <__vector_21+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
			UDR0 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    2df4:	81 ec       	ldi	r24, 0xC1	; 193
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	21 ec       	ldi	r18, 0xC1	; 193
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	f9 01       	movw	r30, r18
    2dfe:	20 81       	ld	r18, Z
    2e00:	2f 7d       	andi	r18, 0xDF	; 223
    2e02:	fc 01       	movw	r30, r24
    2e04:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    2e06:	09 c0       	rjmp	.+18     	; 0x2e1a <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    2e08:	81 ec       	ldi	r24, 0xC1	; 193
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	21 ec       	ldi	r18, 0xC1	; 193
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	f9 01       	movw	r30, r18
    2e12:	20 81       	ld	r18, Z
    2e14:	2f 7d       	andi	r18, 0xDF	; 223
    2e16:	fc 01       	movw	r30, r24
    2e18:	20 83       	st	Z, r18
	}
}
    2e1a:	00 00       	nop
    2e1c:	0f 90       	pop	r0
    2e1e:	df 91       	pop	r29
    2e20:	cf 91       	pop	r28
    2e22:	ff 91       	pop	r31
    2e24:	ef 91       	pop	r30
    2e26:	bf 91       	pop	r27
    2e28:	af 91       	pop	r26
    2e2a:	9f 91       	pop	r25
    2e2c:	8f 91       	pop	r24
    2e2e:	7f 91       	pop	r23
    2e30:	6f 91       	pop	r22
    2e32:	5f 91       	pop	r21
    2e34:	4f 91       	pop	r20
    2e36:	3f 91       	pop	r19
    2e38:	2f 91       	pop	r18
    2e3a:	0f 90       	pop	r0
    2e3c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2e40:	0f 90       	pop	r0
    2e42:	1f 90       	pop	r1
    2e44:	18 95       	reti

00002e46 <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    2e46:	1f 92       	push	r1
    2e48:	0f 92       	push	r0
    2e4a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2e4e:	0f 92       	push	r0
    2e50:	11 24       	eor	r1, r1
    2e52:	2f 93       	push	r18
    2e54:	3f 93       	push	r19
    2e56:	4f 93       	push	r20
    2e58:	5f 93       	push	r21
    2e5a:	6f 93       	push	r22
    2e5c:	7f 93       	push	r23
    2e5e:	8f 93       	push	r24
    2e60:	9f 93       	push	r25
    2e62:	af 93       	push	r26
    2e64:	bf 93       	push	r27
    2e66:	ef 93       	push	r30
    2e68:	ff 93       	push	r31
    2e6a:	cf 93       	push	r28
    2e6c:	df 93       	push	r29
    2e6e:	1f 92       	push	r1
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    2e74:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <_ser_handle+0x2>
    2e78:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <_ser_handle+0x3>
    2e7c:	89 2b       	or	r24, r25
    2e7e:	31 f1       	breq	.+76     	; 0x2ecc <__vector_28+0x86>
		item = UDR1;
    2e80:	8e ec       	ldi	r24, 0xCE	; 206
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	fc 01       	movw	r30, r24
    2e86:	80 81       	ld	r24, Z
    2e88:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    2e8a:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <_ser_handle+0x2>
    2e8e:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <_ser_handle+0x3>
    2e92:	fc 01       	movw	r30, r24
    2e94:	84 81       	ldd	r24, Z+4	; 0x04
    2e96:	95 81       	ldd	r25, Z+5	; 0x05
    2e98:	69 81       	ldd	r22, Y+1	; 0x01
    2e9a:	0e 94 c6 10 	call	0x218c	; 0x218c <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    2e9e:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <_ser_handle+0x2>
    2ea2:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <_ser_handle+0x3>
    2ea6:	fc 01       	movw	r30, r24
    2ea8:	86 81       	ldd	r24, Z+6	; 0x06
    2eaa:	97 81       	ldd	r25, Z+7	; 0x07
    2eac:	89 2b       	or	r24, r25
    2eae:	71 f0       	breq	.+28     	; 0x2ecc <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    2eb0:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <_ser_handle+0x2>
    2eb4:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <_ser_handle+0x3>
    2eb8:	fc 01       	movw	r30, r24
    2eba:	26 81       	ldd	r18, Z+6	; 0x06
    2ebc:	37 81       	ldd	r19, Z+7	; 0x07
    2ebe:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <_ser_handle+0x2>
    2ec2:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <_ser_handle+0x3>
    2ec6:	69 81       	ldd	r22, Y+1	; 0x01
    2ec8:	f9 01       	movw	r30, r18
    2eca:	09 95       	icall
		}
	}
}
    2ecc:	00 00       	nop
    2ece:	0f 90       	pop	r0
    2ed0:	df 91       	pop	r29
    2ed2:	cf 91       	pop	r28
    2ed4:	ff 91       	pop	r31
    2ed6:	ef 91       	pop	r30
    2ed8:	bf 91       	pop	r27
    2eda:	af 91       	pop	r26
    2edc:	9f 91       	pop	r25
    2ede:	8f 91       	pop	r24
    2ee0:	7f 91       	pop	r23
    2ee2:	6f 91       	pop	r22
    2ee4:	5f 91       	pop	r21
    2ee6:	4f 91       	pop	r20
    2ee8:	3f 91       	pop	r19
    2eea:	2f 91       	pop	r18
    2eec:	0f 90       	pop	r0
    2eee:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2ef2:	0f 90       	pop	r0
    2ef4:	1f 90       	pop	r1
    2ef6:	18 95       	reti

00002ef8 <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    2ef8:	1f 92       	push	r1
    2efa:	0f 92       	push	r0
    2efc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2f00:	0f 92       	push	r0
    2f02:	11 24       	eor	r1, r1
    2f04:	2f 93       	push	r18
    2f06:	3f 93       	push	r19
    2f08:	4f 93       	push	r20
    2f0a:	5f 93       	push	r21
    2f0c:	6f 93       	push	r22
    2f0e:	7f 93       	push	r23
    2f10:	8f 93       	push	r24
    2f12:	9f 93       	push	r25
    2f14:	af 93       	push	r26
    2f16:	bf 93       	push	r27
    2f18:	ef 93       	push	r30
    2f1a:	ff 93       	push	r31
    2f1c:	cf 93       	push	r28
    2f1e:	df 93       	push	r29
    2f20:	1f 92       	push	r1
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    2f26:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <_ser_handle+0x2>
    2f2a:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <_ser_handle+0x3>
    2f2e:	89 2b       	or	r24, r25
    2f30:	f9 f0       	breq	.+62     	; 0x2f70 <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    2f32:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <_ser_handle+0x2>
    2f36:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <_ser_handle+0x3>
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	82 81       	ldd	r24, Z+2	; 0x02
    2f3e:	93 81       	ldd	r25, Z+3	; 0x03
    2f40:	9e 01       	movw	r18, r28
    2f42:	2f 5f       	subi	r18, 0xFF	; 255
    2f44:	3f 4f       	sbci	r19, 0xFF	; 255
    2f46:	b9 01       	movw	r22, r18
    2f48:	0e 94 7e 10 	call	0x20fc	; 0x20fc <buffer_get_item>
    2f4c:	88 23       	and	r24, r24
    2f4e:	31 f4       	brne	.+12     	; 0x2f5c <__vector_29+0x64>
			UDR1 = item;
    2f50:	8e ec       	ldi	r24, 0xCE	; 206
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	29 81       	ldd	r18, Y+1	; 0x01
    2f56:	fc 01       	movw	r30, r24
    2f58:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    2f5a:	13 c0       	rjmp	.+38     	; 0x2f82 <__vector_29+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
			UDR1 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    2f5c:	89 ec       	ldi	r24, 0xC9	; 201
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	29 ec       	ldi	r18, 0xC9	; 201
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	f9 01       	movw	r30, r18
    2f66:	20 81       	ld	r18, Z
    2f68:	2f 7d       	andi	r18, 0xDF	; 223
    2f6a:	fc 01       	movw	r30, r24
    2f6c:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    2f6e:	09 c0       	rjmp	.+18     	; 0x2f82 <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    2f70:	89 ec       	ldi	r24, 0xC9	; 201
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	29 ec       	ldi	r18, 0xC9	; 201
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	f9 01       	movw	r30, r18
    2f7a:	20 81       	ld	r18, Z
    2f7c:	2f 7d       	andi	r18, 0xDF	; 223
    2f7e:	fc 01       	movw	r30, r24
    2f80:	20 83       	st	Z, r18
	}
}
    2f82:	00 00       	nop
    2f84:	0f 90       	pop	r0
    2f86:	df 91       	pop	r29
    2f88:	cf 91       	pop	r28
    2f8a:	ff 91       	pop	r31
    2f8c:	ef 91       	pop	r30
    2f8e:	bf 91       	pop	r27
    2f90:	af 91       	pop	r26
    2f92:	9f 91       	pop	r25
    2f94:	8f 91       	pop	r24
    2f96:	7f 91       	pop	r23
    2f98:	6f 91       	pop	r22
    2f9a:	5f 91       	pop	r21
    2f9c:	4f 91       	pop	r20
    2f9e:	3f 91       	pop	r19
    2fa0:	2f 91       	pop	r18
    2fa2:	0f 90       	pop	r0
    2fa4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2fa8:	0f 90       	pop	r0
    2faa:	1f 90       	pop	r1
    2fac:	18 95       	reti

00002fae <pvPortMalloc>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* This just exists to keep the linker quiet. */
}
    2fae:	cf 93       	push	r28
    2fb0:	df 93       	push	r29
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
    2fb6:	2e 97       	sbiw	r28, 0x0e	; 14
    2fb8:	0f b6       	in	r0, 0x3f	; 63
    2fba:	f8 94       	cli
    2fbc:	de bf       	out	0x3e, r29	; 62
    2fbe:	0f be       	out	0x3f, r0	; 63
    2fc0:	cd bf       	out	0x3d, r28	; 61
    2fc2:	9e 87       	std	Y+14, r25	; 0x0e
    2fc4:	8d 87       	std	Y+13, r24	; 0x0d
    2fc6:	1e 82       	std	Y+6, r1	; 0x06
    2fc8:	1d 82       	std	Y+5, r1	; 0x05
    2fca:	0e 94 36 21 	call	0x426c	; 0x426c <vTaskSuspendAll>
    2fce:	80 91 c5 07 	lds	r24, 0x07C5	; 0x8007c5 <xHeapHasBeenInitialised.2095>
    2fd2:	88 23       	and	r24, r24
    2fd4:	29 f4       	brne	.+10     	; 0x2fe0 <pvPortMalloc+0x32>
    2fd6:	0e 94 3e 19 	call	0x327c	; 0x327c <prvHeapInit>
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <xHeapHasBeenInitialised.2095>
    2fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fe4:	89 2b       	or	r24, r25
    2fe6:	41 f0       	breq	.+16     	; 0x2ff8 <pvPortMalloc+0x4a>
    2fe8:	84 e0       	ldi	r24, 0x04	; 4
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	2d 85       	ldd	r18, Y+13	; 0x0d
    2fee:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ff0:	82 0f       	add	r24, r18
    2ff2:	93 1f       	adc	r25, r19
    2ff4:	9e 87       	std	Y+14, r25	; 0x0e
    2ff6:	8d 87       	std	Y+13, r24	; 0x0d
    2ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ffc:	89 2b       	or	r24, r25
    2ffe:	09 f4       	brne	.+2      	; 0x3002 <pvPortMalloc+0x54>
    3000:	b8 c0       	rjmp	.+368    	; 0x3172 <pvPortMalloc+0x1c4>
    3002:	8d 85       	ldd	r24, Y+13	; 0x0d
    3004:	9e 85       	ldd	r25, Y+14	; 0x0e
    3006:	87 37       	cpi	r24, 0x77	; 119
    3008:	95 40       	sbci	r25, 0x05	; 5
    300a:	08 f0       	brcs	.+2      	; 0x300e <pvPortMalloc+0x60>
    300c:	b2 c0       	rjmp	.+356    	; 0x3172 <pvPortMalloc+0x1c4>
    300e:	8d eb       	ldi	r24, 0xBD	; 189
    3010:	97 e0       	ldi	r25, 0x07	; 7
    3012:	9c 83       	std	Y+4, r25	; 0x04
    3014:	8b 83       	std	Y+3, r24	; 0x03
    3016:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <xStart>
    301a:	90 91 be 07 	lds	r25, 0x07BE	; 0x8007be <xStart+0x1>
    301e:	9a 83       	std	Y+2, r25	; 0x02
    3020:	89 83       	std	Y+1, r24	; 0x01
    3022:	0b c0       	rjmp	.+22     	; 0x303a <pvPortMalloc+0x8c>
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	9a 81       	ldd	r25, Y+2	; 0x02
    3028:	9c 83       	std	Y+4, r25	; 0x04
    302a:	8b 83       	std	Y+3, r24	; 0x03
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	9a 81       	ldd	r25, Y+2	; 0x02
    3030:	fc 01       	movw	r30, r24
    3032:	80 81       	ld	r24, Z
    3034:	91 81       	ldd	r25, Z+1	; 0x01
    3036:	9a 83       	std	Y+2, r25	; 0x02
    3038:	89 83       	std	Y+1, r24	; 0x01
    303a:	89 81       	ldd	r24, Y+1	; 0x01
    303c:	9a 81       	ldd	r25, Y+2	; 0x02
    303e:	fc 01       	movw	r30, r24
    3040:	22 81       	ldd	r18, Z+2	; 0x02
    3042:	33 81       	ldd	r19, Z+3	; 0x03
    3044:	8d 85       	ldd	r24, Y+13	; 0x0d
    3046:	9e 85       	ldd	r25, Y+14	; 0x0e
    3048:	28 17       	cp	r18, r24
    304a:	39 07       	cpc	r19, r25
    304c:	38 f4       	brcc	.+14     	; 0x305c <pvPortMalloc+0xae>
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	9a 81       	ldd	r25, Y+2	; 0x02
    3052:	fc 01       	movw	r30, r24
    3054:	80 81       	ld	r24, Z
    3056:	91 81       	ldd	r25, Z+1	; 0x01
    3058:	89 2b       	or	r24, r25
    305a:	21 f7       	brne	.-56     	; 0x3024 <pvPortMalloc+0x76>
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	9a 81       	ldd	r25, Y+2	; 0x02
    3060:	81 5c       	subi	r24, 0xC1	; 193
    3062:	97 40       	sbci	r25, 0x07	; 7
    3064:	09 f4       	brne	.+2      	; 0x3068 <pvPortMalloc+0xba>
    3066:	85 c0       	rjmp	.+266    	; 0x3172 <pvPortMalloc+0x1c4>
    3068:	8b 81       	ldd	r24, Y+3	; 0x03
    306a:	9c 81       	ldd	r25, Y+4	; 0x04
    306c:	fc 01       	movw	r30, r24
    306e:	20 81       	ld	r18, Z
    3070:	31 81       	ldd	r19, Z+1	; 0x01
    3072:	84 e0       	ldi	r24, 0x04	; 4
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	82 0f       	add	r24, r18
    3078:	93 1f       	adc	r25, r19
    307a:	9e 83       	std	Y+6, r25	; 0x06
    307c:	8d 83       	std	Y+5, r24	; 0x05
    307e:	89 81       	ldd	r24, Y+1	; 0x01
    3080:	9a 81       	ldd	r25, Y+2	; 0x02
    3082:	fc 01       	movw	r30, r24
    3084:	20 81       	ld	r18, Z
    3086:	31 81       	ldd	r19, Z+1	; 0x01
    3088:	8b 81       	ldd	r24, Y+3	; 0x03
    308a:	9c 81       	ldd	r25, Y+4	; 0x04
    308c:	fc 01       	movw	r30, r24
    308e:	31 83       	std	Z+1, r19	; 0x01
    3090:	20 83       	st	Z, r18
    3092:	89 81       	ldd	r24, Y+1	; 0x01
    3094:	9a 81       	ldd	r25, Y+2	; 0x02
    3096:	fc 01       	movw	r30, r24
    3098:	22 81       	ldd	r18, Z+2	; 0x02
    309a:	33 81       	ldd	r19, Z+3	; 0x03
    309c:	8d 85       	ldd	r24, Y+13	; 0x0d
    309e:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a0:	28 1b       	sub	r18, r24
    30a2:	39 0b       	sbc	r19, r25
    30a4:	84 e0       	ldi	r24, 0x04	; 4
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	88 0f       	add	r24, r24
    30aa:	99 1f       	adc	r25, r25
    30ac:	82 17       	cp	r24, r18
    30ae:	93 07       	cpc	r25, r19
    30b0:	08 f0       	brcs	.+2      	; 0x30b4 <pvPortMalloc+0x106>
    30b2:	4e c0       	rjmp	.+156    	; 0x3150 <pvPortMalloc+0x1a2>
    30b4:	29 81       	ldd	r18, Y+1	; 0x01
    30b6:	3a 81       	ldd	r19, Y+2	; 0x02
    30b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    30bc:	82 0f       	add	r24, r18
    30be:	93 1f       	adc	r25, r19
    30c0:	9a 87       	std	Y+10, r25	; 0x0a
    30c2:	89 87       	std	Y+9, r24	; 0x09
    30c4:	89 81       	ldd	r24, Y+1	; 0x01
    30c6:	9a 81       	ldd	r25, Y+2	; 0x02
    30c8:	fc 01       	movw	r30, r24
    30ca:	22 81       	ldd	r18, Z+2	; 0x02
    30cc:	33 81       	ldd	r19, Z+3	; 0x03
    30ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    30d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30d2:	28 1b       	sub	r18, r24
    30d4:	39 0b       	sbc	r19, r25
    30d6:	89 85       	ldd	r24, Y+9	; 0x09
    30d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30da:	fc 01       	movw	r30, r24
    30dc:	33 83       	std	Z+3, r19	; 0x03
    30de:	22 83       	std	Z+2, r18	; 0x02
    30e0:	89 81       	ldd	r24, Y+1	; 0x01
    30e2:	9a 81       	ldd	r25, Y+2	; 0x02
    30e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    30e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    30e8:	fc 01       	movw	r30, r24
    30ea:	33 83       	std	Z+3, r19	; 0x03
    30ec:	22 83       	std	Z+2, r18	; 0x02
    30ee:	89 85       	ldd	r24, Y+9	; 0x09
    30f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f2:	fc 01       	movw	r30, r24
    30f4:	82 81       	ldd	r24, Z+2	; 0x02
    30f6:	93 81       	ldd	r25, Z+3	; 0x03
    30f8:	9c 87       	std	Y+12, r25	; 0x0c
    30fa:	8b 87       	std	Y+11, r24	; 0x0b
    30fc:	8d eb       	ldi	r24, 0xBD	; 189
    30fe:	97 e0       	ldi	r25, 0x07	; 7
    3100:	98 87       	std	Y+8, r25	; 0x08
    3102:	8f 83       	std	Y+7, r24	; 0x07
    3104:	07 c0       	rjmp	.+14     	; 0x3114 <pvPortMalloc+0x166>
    3106:	8f 81       	ldd	r24, Y+7	; 0x07
    3108:	98 85       	ldd	r25, Y+8	; 0x08
    310a:	fc 01       	movw	r30, r24
    310c:	80 81       	ld	r24, Z
    310e:	91 81       	ldd	r25, Z+1	; 0x01
    3110:	98 87       	std	Y+8, r25	; 0x08
    3112:	8f 83       	std	Y+7, r24	; 0x07
    3114:	8f 81       	ldd	r24, Y+7	; 0x07
    3116:	98 85       	ldd	r25, Y+8	; 0x08
    3118:	fc 01       	movw	r30, r24
    311a:	80 81       	ld	r24, Z
    311c:	91 81       	ldd	r25, Z+1	; 0x01
    311e:	fc 01       	movw	r30, r24
    3120:	22 81       	ldd	r18, Z+2	; 0x02
    3122:	33 81       	ldd	r19, Z+3	; 0x03
    3124:	8b 85       	ldd	r24, Y+11	; 0x0b
    3126:	9c 85       	ldd	r25, Y+12	; 0x0c
    3128:	28 17       	cp	r18, r24
    312a:	39 07       	cpc	r19, r25
    312c:	60 f3       	brcs	.-40     	; 0x3106 <pvPortMalloc+0x158>
    312e:	8f 81       	ldd	r24, Y+7	; 0x07
    3130:	98 85       	ldd	r25, Y+8	; 0x08
    3132:	fc 01       	movw	r30, r24
    3134:	20 81       	ld	r18, Z
    3136:	31 81       	ldd	r19, Z+1	; 0x01
    3138:	89 85       	ldd	r24, Y+9	; 0x09
    313a:	9a 85       	ldd	r25, Y+10	; 0x0a
    313c:	fc 01       	movw	r30, r24
    313e:	31 83       	std	Z+1, r19	; 0x01
    3140:	20 83       	st	Z, r18
    3142:	8f 81       	ldd	r24, Y+7	; 0x07
    3144:	98 85       	ldd	r25, Y+8	; 0x08
    3146:	29 85       	ldd	r18, Y+9	; 0x09
    3148:	3a 85       	ldd	r19, Y+10	; 0x0a
    314a:	fc 01       	movw	r30, r24
    314c:	31 83       	std	Z+1, r19	; 0x01
    314e:	20 83       	st	Z, r18
    3150:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <xFreeBytesRemaining>
    3154:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <xFreeBytesRemaining+0x1>
    3158:	89 81       	ldd	r24, Y+1	; 0x01
    315a:	9a 81       	ldd	r25, Y+2	; 0x02
    315c:	fc 01       	movw	r30, r24
    315e:	82 81       	ldd	r24, Z+2	; 0x02
    3160:	93 81       	ldd	r25, Z+3	; 0x03
    3162:	a9 01       	movw	r20, r18
    3164:	48 1b       	sub	r20, r24
    3166:	59 0b       	sbc	r21, r25
    3168:	ca 01       	movw	r24, r20
    316a:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <xFreeBytesRemaining+0x1>
    316e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <xFreeBytesRemaining>
    3172:	0e 94 43 21 	call	0x4286	; 0x4286 <xTaskResumeAll>
    3176:	8d 81       	ldd	r24, Y+5	; 0x05
    3178:	9e 81       	ldd	r25, Y+6	; 0x06
    317a:	89 2b       	or	r24, r25
    317c:	11 f4       	brne	.+4      	; 0x3182 <pvPortMalloc+0x1d4>
    317e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <vApplicationMallocFailedHook>
    3182:	8d 81       	ldd	r24, Y+5	; 0x05
    3184:	9e 81       	ldd	r25, Y+6	; 0x06
    3186:	2e 96       	adiw	r28, 0x0e	; 14
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	df 91       	pop	r29
    3194:	cf 91       	pop	r28
    3196:	08 95       	ret

00003198 <vPortFree>:
    3198:	cf 93       	push	r28
    319a:	df 93       	push	r29
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62
    31a0:	2a 97       	sbiw	r28, 0x0a	; 10
    31a2:	0f b6       	in	r0, 0x3f	; 63
    31a4:	f8 94       	cli
    31a6:	de bf       	out	0x3e, r29	; 62
    31a8:	0f be       	out	0x3f, r0	; 63
    31aa:	cd bf       	out	0x3d, r28	; 61
    31ac:	9a 87       	std	Y+10, r25	; 0x0a
    31ae:	89 87       	std	Y+9, r24	; 0x09
    31b0:	89 85       	ldd	r24, Y+9	; 0x09
    31b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31b4:	9c 83       	std	Y+4, r25	; 0x04
    31b6:	8b 83       	std	Y+3, r24	; 0x03
    31b8:	89 85       	ldd	r24, Y+9	; 0x09
    31ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    31bc:	89 2b       	or	r24, r25
    31be:	09 f4       	brne	.+2      	; 0x31c2 <vPortFree+0x2a>
    31c0:	53 c0       	rjmp	.+166    	; 0x3268 <vPortFree+0xd0>
    31c2:	84 e0       	ldi	r24, 0x04	; 4
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	91 95       	neg	r25
    31c8:	81 95       	neg	r24
    31ca:	91 09       	sbc	r25, r1
    31cc:	2b 81       	ldd	r18, Y+3	; 0x03
    31ce:	3c 81       	ldd	r19, Y+4	; 0x04
    31d0:	82 0f       	add	r24, r18
    31d2:	93 1f       	adc	r25, r19
    31d4:	9c 83       	std	Y+4, r25	; 0x04
    31d6:	8b 83       	std	Y+3, r24	; 0x03
    31d8:	8b 81       	ldd	r24, Y+3	; 0x03
    31da:	9c 81       	ldd	r25, Y+4	; 0x04
    31dc:	9e 83       	std	Y+6, r25	; 0x06
    31de:	8d 83       	std	Y+5, r24	; 0x05
    31e0:	0e 94 36 21 	call	0x426c	; 0x426c <vTaskSuspendAll>
    31e4:	8d 81       	ldd	r24, Y+5	; 0x05
    31e6:	9e 81       	ldd	r25, Y+6	; 0x06
    31e8:	fc 01       	movw	r30, r24
    31ea:	82 81       	ldd	r24, Z+2	; 0x02
    31ec:	93 81       	ldd	r25, Z+3	; 0x03
    31ee:	98 87       	std	Y+8, r25	; 0x08
    31f0:	8f 83       	std	Y+7, r24	; 0x07
    31f2:	8d eb       	ldi	r24, 0xBD	; 189
    31f4:	97 e0       	ldi	r25, 0x07	; 7
    31f6:	9a 83       	std	Y+2, r25	; 0x02
    31f8:	89 83       	std	Y+1, r24	; 0x01
    31fa:	07 c0       	rjmp	.+14     	; 0x320a <vPortFree+0x72>
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3200:	fc 01       	movw	r30, r24
    3202:	80 81       	ld	r24, Z
    3204:	91 81       	ldd	r25, Z+1	; 0x01
    3206:	9a 83       	std	Y+2, r25	; 0x02
    3208:	89 83       	std	Y+1, r24	; 0x01
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	9a 81       	ldd	r25, Y+2	; 0x02
    320e:	fc 01       	movw	r30, r24
    3210:	80 81       	ld	r24, Z
    3212:	91 81       	ldd	r25, Z+1	; 0x01
    3214:	fc 01       	movw	r30, r24
    3216:	22 81       	ldd	r18, Z+2	; 0x02
    3218:	33 81       	ldd	r19, Z+3	; 0x03
    321a:	8f 81       	ldd	r24, Y+7	; 0x07
    321c:	98 85       	ldd	r25, Y+8	; 0x08
    321e:	28 17       	cp	r18, r24
    3220:	39 07       	cpc	r19, r25
    3222:	60 f3       	brcs	.-40     	; 0x31fc <vPortFree+0x64>
    3224:	89 81       	ldd	r24, Y+1	; 0x01
    3226:	9a 81       	ldd	r25, Y+2	; 0x02
    3228:	fc 01       	movw	r30, r24
    322a:	20 81       	ld	r18, Z
    322c:	31 81       	ldd	r19, Z+1	; 0x01
    322e:	8d 81       	ldd	r24, Y+5	; 0x05
    3230:	9e 81       	ldd	r25, Y+6	; 0x06
    3232:	fc 01       	movw	r30, r24
    3234:	31 83       	std	Z+1, r19	; 0x01
    3236:	20 83       	st	Z, r18
    3238:	89 81       	ldd	r24, Y+1	; 0x01
    323a:	9a 81       	ldd	r25, Y+2	; 0x02
    323c:	2d 81       	ldd	r18, Y+5	; 0x05
    323e:	3e 81       	ldd	r19, Y+6	; 0x06
    3240:	fc 01       	movw	r30, r24
    3242:	31 83       	std	Z+1, r19	; 0x01
    3244:	20 83       	st	Z, r18
    3246:	8d 81       	ldd	r24, Y+5	; 0x05
    3248:	9e 81       	ldd	r25, Y+6	; 0x06
    324a:	fc 01       	movw	r30, r24
    324c:	22 81       	ldd	r18, Z+2	; 0x02
    324e:	33 81       	ldd	r19, Z+3	; 0x03
    3250:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <xFreeBytesRemaining>
    3254:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <xFreeBytesRemaining+0x1>
    3258:	82 0f       	add	r24, r18
    325a:	93 1f       	adc	r25, r19
    325c:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <xFreeBytesRemaining+0x1>
    3260:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <xFreeBytesRemaining>
    3264:	0e 94 43 21 	call	0x4286	; 0x4286 <xTaskResumeAll>
    3268:	00 00       	nop
    326a:	2a 96       	adiw	r28, 0x0a	; 10
    326c:	0f b6       	in	r0, 0x3f	; 63
    326e:	f8 94       	cli
    3270:	de bf       	out	0x3e, r29	; 62
    3272:	0f be       	out	0x3f, r0	; 63
    3274:	cd bf       	out	0x3d, r28	; 61
    3276:	df 91       	pop	r29
    3278:	cf 91       	pop	r28
    327a:	08 95       	ret

0000327c <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    327c:	cf 93       	push	r28
    327e:	df 93       	push	r29
    3280:	00 d0       	rcall	.+0      	; 0x3282 <prvHeapInit+0x6>
    3282:	00 d0       	rcall	.+0      	; 0x3284 <prvHeapInit+0x8>
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    3288:	86 e4       	ldi	r24, 0x46	; 70
    328a:	92 e0       	ldi	r25, 0x02	; 2
    328c:	9a 83       	std	Y+2, r25	; 0x02
    328e:	89 83       	std	Y+1, r24	; 0x01

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    3290:	89 81       	ldd	r24, Y+1	; 0x01
    3292:	9a 81       	ldd	r25, Y+2	; 0x02
    3294:	90 93 be 07 	sts	0x07BE, r25	; 0x8007be <xStart+0x1>
    3298:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <xStart>
	xStart.xBlockSize = ( size_t ) 0;
    329c:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <xStart+0x3>
    32a0:	10 92 bf 07 	sts	0x07BF, r1	; 0x8007bf <xStart+0x2>

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    32a4:	87 e7       	ldi	r24, 0x77	; 119
    32a6:	95 e0       	ldi	r25, 0x05	; 5
    32a8:	90 93 c4 07 	sts	0x07C4, r25	; 0x8007c4 <xEnd+0x3>
    32ac:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <xEnd+0x2>
	xEnd.pxNextFreeBlock = NULL;
    32b0:	10 92 c2 07 	sts	0x07C2, r1	; 0x8007c2 <xEnd+0x1>
    32b4:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <xEnd>

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	9a 81       	ldd	r25, Y+2	; 0x02
    32bc:	9c 83       	std	Y+4, r25	; 0x04
    32be:	8b 83       	std	Y+3, r24	; 0x03
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    32c0:	8b 81       	ldd	r24, Y+3	; 0x03
    32c2:	9c 81       	ldd	r25, Y+4	; 0x04
    32c4:	27 e7       	ldi	r18, 0x77	; 119
    32c6:	35 e0       	ldi	r19, 0x05	; 5
    32c8:	fc 01       	movw	r30, r24
    32ca:	33 83       	std	Z+3, r19	; 0x03
    32cc:	22 83       	std	Z+2, r18	; 0x02
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    32ce:	8b 81       	ldd	r24, Y+3	; 0x03
    32d0:	9c 81       	ldd	r25, Y+4	; 0x04
    32d2:	21 ec       	ldi	r18, 0xC1	; 193
    32d4:	37 e0       	ldi	r19, 0x07	; 7
    32d6:	fc 01       	movw	r30, r24
    32d8:	31 83       	std	Z+1, r19	; 0x01
    32da:	20 83       	st	Z, r18
}
    32dc:	00 00       	nop
    32de:	0f 90       	pop	r0
    32e0:	0f 90       	pop	r0
    32e2:	0f 90       	pop	r0
    32e4:	0f 90       	pop	r0
    32e6:	df 91       	pop	r29
    32e8:	cf 91       	pop	r28
    32ea:	08 95       	ret

000032ec <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    32ec:	cf 93       	push	r28
    32ee:	df 93       	push	r29
    32f0:	00 d0       	rcall	.+0      	; 0x32f2 <xQueueGenericReset+0x6>
    32f2:	00 d0       	rcall	.+0      	; 0x32f4 <xQueueGenericReset+0x8>
    32f4:	1f 92       	push	r1
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62
    32fa:	9c 83       	std	Y+4, r25	; 0x04
    32fc:	8b 83       	std	Y+3, r24	; 0x03
    32fe:	6d 83       	std	Y+5, r22	; 0x05
    3300:	8b 81       	ldd	r24, Y+3	; 0x03
    3302:	9c 81       	ldd	r25, Y+4	; 0x04
    3304:	9a 83       	std	Y+2, r25	; 0x02
    3306:	89 83       	std	Y+1, r24	; 0x01
    3308:	0f b6       	in	r0, 0x3f	; 63
    330a:	f8 94       	cli
    330c:	0f 92       	push	r0
    330e:	89 81       	ldd	r24, Y+1	; 0x01
    3310:	9a 81       	ldd	r25, Y+2	; 0x02
    3312:	fc 01       	movw	r30, r24
    3314:	80 81       	ld	r24, Z
    3316:	91 81       	ldd	r25, Z+1	; 0x01
    3318:	29 81       	ldd	r18, Y+1	; 0x01
    331a:	3a 81       	ldd	r19, Y+2	; 0x02
    331c:	f9 01       	movw	r30, r18
    331e:	23 8d       	ldd	r18, Z+27	; 0x1b
    3320:	42 2f       	mov	r20, r18
    3322:	50 e0       	ldi	r21, 0x00	; 0
    3324:	29 81       	ldd	r18, Y+1	; 0x01
    3326:	3a 81       	ldd	r19, Y+2	; 0x02
    3328:	f9 01       	movw	r30, r18
    332a:	24 8d       	ldd	r18, Z+28	; 0x1c
    332c:	22 2f       	mov	r18, r18
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	42 9f       	mul	r20, r18
    3332:	b0 01       	movw	r22, r0
    3334:	43 9f       	mul	r20, r19
    3336:	70 0d       	add	r23, r0
    3338:	52 9f       	mul	r21, r18
    333a:	70 0d       	add	r23, r0
    333c:	11 24       	eor	r1, r1
    333e:	9b 01       	movw	r18, r22
    3340:	28 0f       	add	r18, r24
    3342:	39 1f       	adc	r19, r25
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	9a 81       	ldd	r25, Y+2	; 0x02
    3348:	fc 01       	movw	r30, r24
    334a:	33 83       	std	Z+3, r19	; 0x03
    334c:	22 83       	std	Z+2, r18	; 0x02
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	9a 81       	ldd	r25, Y+2	; 0x02
    3352:	fc 01       	movw	r30, r24
    3354:	12 8e       	std	Z+26, r1	; 0x1a
    3356:	89 81       	ldd	r24, Y+1	; 0x01
    3358:	9a 81       	ldd	r25, Y+2	; 0x02
    335a:	fc 01       	movw	r30, r24
    335c:	20 81       	ld	r18, Z
    335e:	31 81       	ldd	r19, Z+1	; 0x01
    3360:	89 81       	ldd	r24, Y+1	; 0x01
    3362:	9a 81       	ldd	r25, Y+2	; 0x02
    3364:	fc 01       	movw	r30, r24
    3366:	35 83       	std	Z+5, r19	; 0x05
    3368:	24 83       	std	Z+4, r18	; 0x04
    336a:	89 81       	ldd	r24, Y+1	; 0x01
    336c:	9a 81       	ldd	r25, Y+2	; 0x02
    336e:	fc 01       	movw	r30, r24
    3370:	80 81       	ld	r24, Z
    3372:	91 81       	ldd	r25, Z+1	; 0x01
    3374:	29 81       	ldd	r18, Y+1	; 0x01
    3376:	3a 81       	ldd	r19, Y+2	; 0x02
    3378:	f9 01       	movw	r30, r18
    337a:	23 8d       	ldd	r18, Z+27	; 0x1b
    337c:	22 2f       	mov	r18, r18
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	a9 01       	movw	r20, r18
    3382:	41 50       	subi	r20, 0x01	; 1
    3384:	51 09       	sbc	r21, r1
    3386:	29 81       	ldd	r18, Y+1	; 0x01
    3388:	3a 81       	ldd	r19, Y+2	; 0x02
    338a:	f9 01       	movw	r30, r18
    338c:	24 8d       	ldd	r18, Z+28	; 0x1c
    338e:	22 2f       	mov	r18, r18
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	42 9f       	mul	r20, r18
    3394:	b0 01       	movw	r22, r0
    3396:	43 9f       	mul	r20, r19
    3398:	70 0d       	add	r23, r0
    339a:	52 9f       	mul	r21, r18
    339c:	70 0d       	add	r23, r0
    339e:	11 24       	eor	r1, r1
    33a0:	9b 01       	movw	r18, r22
    33a2:	28 0f       	add	r18, r24
    33a4:	39 1f       	adc	r19, r25
    33a6:	89 81       	ldd	r24, Y+1	; 0x01
    33a8:	9a 81       	ldd	r25, Y+2	; 0x02
    33aa:	fc 01       	movw	r30, r24
    33ac:	37 83       	std	Z+7, r19	; 0x07
    33ae:	26 83       	std	Z+6, r18	; 0x06
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	9a 81       	ldd	r25, Y+2	; 0x02
    33b4:	2f ef       	ldi	r18, 0xFF	; 255
    33b6:	fc 01       	movw	r30, r24
    33b8:	25 8f       	std	Z+29, r18	; 0x1d
    33ba:	89 81       	ldd	r24, Y+1	; 0x01
    33bc:	9a 81       	ldd	r25, Y+2	; 0x02
    33be:	2f ef       	ldi	r18, 0xFF	; 255
    33c0:	fc 01       	movw	r30, r24
    33c2:	26 8f       	std	Z+30, r18	; 0x1e
    33c4:	8d 81       	ldd	r24, Y+5	; 0x05
    33c6:	88 23       	and	r24, r24
    33c8:	81 f4       	brne	.+32     	; 0x33ea <xQueueGenericReset+0xfe>
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
    33cc:	9a 81       	ldd	r25, Y+2	; 0x02
    33ce:	fc 01       	movw	r30, r24
    33d0:	80 85       	ldd	r24, Z+8	; 0x08
    33d2:	88 23       	and	r24, r24
    33d4:	a1 f0       	breq	.+40     	; 0x33fe <xQueueGenericReset+0x112>
    33d6:	89 81       	ldd	r24, Y+1	; 0x01
    33d8:	9a 81       	ldd	r25, Y+2	; 0x02
    33da:	08 96       	adiw	r24, 0x08	; 8
    33dc:	0e 94 d6 23 	call	0x47ac	; 0x47ac <xTaskRemoveFromEventList>
    33e0:	88 23       	and	r24, r24
    33e2:	69 f0       	breq	.+26     	; 0x33fe <xQueueGenericReset+0x112>
    33e4:	0e 94 4d 14 	call	0x289a	; 0x289a <vPortYield>
    33e8:	0a c0       	rjmp	.+20     	; 0x33fe <xQueueGenericReset+0x112>
    33ea:	89 81       	ldd	r24, Y+1	; 0x01
    33ec:	9a 81       	ldd	r25, Y+2	; 0x02
    33ee:	08 96       	adiw	r24, 0x08	; 8
    33f0:	0e 94 09 11 	call	0x2212	; 0x2212 <vListInitialise>
    33f4:	89 81       	ldd	r24, Y+1	; 0x01
    33f6:	9a 81       	ldd	r25, Y+2	; 0x02
    33f8:	41 96       	adiw	r24, 0x11	; 17
    33fa:	0e 94 09 11 	call	0x2212	; 0x2212 <vListInitialise>
    33fe:	0f 90       	pop	r0
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	0f 90       	pop	r0
    3406:	0f 90       	pop	r0
    3408:	0f 90       	pop	r0
    340a:	0f 90       	pop	r0
    340c:	0f 90       	pop	r0
    340e:	df 91       	pop	r29
    3410:	cf 91       	pop	r28
    3412:	08 95       	ret

00003414 <xQueueGenericCreate>:
    3414:	0f 93       	push	r16
    3416:	1f 93       	push	r17
    3418:	cf 93       	push	r28
    341a:	df 93       	push	r29
    341c:	cd b7       	in	r28, 0x3d	; 61
    341e:	de b7       	in	r29, 0x3e	; 62
    3420:	29 97       	sbiw	r28, 0x09	; 9
    3422:	0f b6       	in	r0, 0x3f	; 63
    3424:	f8 94       	cli
    3426:	de bf       	out	0x3e, r29	; 62
    3428:	0f be       	out	0x3f, r0	; 63
    342a:	cd bf       	out	0x3d, r28	; 61
    342c:	8f 83       	std	Y+7, r24	; 0x07
    342e:	68 87       	std	Y+8, r22	; 0x08
    3430:	49 87       	std	Y+9, r20	; 0x09
    3432:	88 85       	ldd	r24, Y+8	; 0x08
    3434:	88 23       	and	r24, r24
    3436:	19 f4       	brne	.+6      	; 0x343e <xQueueGenericCreate+0x2a>
    3438:	1a 82       	std	Y+2, r1	; 0x02
    343a:	19 82       	std	Y+1, r1	; 0x01
    343c:	0f c0       	rjmp	.+30     	; 0x345c <xQueueGenericCreate+0x48>
    343e:	8f 81       	ldd	r24, Y+7	; 0x07
    3440:	48 2f       	mov	r20, r24
    3442:	50 e0       	ldi	r21, 0x00	; 0
    3444:	88 85       	ldd	r24, Y+8	; 0x08
    3446:	28 2f       	mov	r18, r24
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	42 9f       	mul	r20, r18
    344c:	c0 01       	movw	r24, r0
    344e:	43 9f       	mul	r20, r19
    3450:	90 0d       	add	r25, r0
    3452:	52 9f       	mul	r21, r18
    3454:	90 0d       	add	r25, r0
    3456:	11 24       	eor	r1, r1
    3458:	9a 83       	std	Y+2, r25	; 0x02
    345a:	89 83       	std	Y+1, r24	; 0x01
    345c:	89 81       	ldd	r24, Y+1	; 0x01
    345e:	9a 81       	ldd	r25, Y+2	; 0x02
    3460:	81 96       	adiw	r24, 0x21	; 33
    3462:	0e 94 d7 17 	call	0x2fae	; 0x2fae <pvPortMalloc>
    3466:	9c 83       	std	Y+4, r25	; 0x04
    3468:	8b 83       	std	Y+3, r24	; 0x03
    346a:	8b 81       	ldd	r24, Y+3	; 0x03
    346c:	9c 81       	ldd	r25, Y+4	; 0x04
    346e:	89 2b       	or	r24, r25
    3470:	81 f0       	breq	.+32     	; 0x3492 <xQueueGenericCreate+0x7e>
    3472:	8b 81       	ldd	r24, Y+3	; 0x03
    3474:	9c 81       	ldd	r25, Y+4	; 0x04
    3476:	81 96       	adiw	r24, 0x21	; 33
    3478:	9e 83       	std	Y+6, r25	; 0x06
    347a:	8d 83       	std	Y+5, r24	; 0x05
    347c:	2b 81       	ldd	r18, Y+3	; 0x03
    347e:	3c 81       	ldd	r19, Y+4	; 0x04
    3480:	8d 81       	ldd	r24, Y+5	; 0x05
    3482:	9e 81       	ldd	r25, Y+6	; 0x06
    3484:	89 01       	movw	r16, r18
    3486:	29 85       	ldd	r18, Y+9	; 0x09
    3488:	ac 01       	movw	r20, r24
    348a:	68 85       	ldd	r22, Y+8	; 0x08
    348c:	8f 81       	ldd	r24, Y+7	; 0x07
    348e:	0e 94 56 1a 	call	0x34ac	; 0x34ac <prvInitialiseNewQueue>
    3492:	8b 81       	ldd	r24, Y+3	; 0x03
    3494:	9c 81       	ldd	r25, Y+4	; 0x04
    3496:	29 96       	adiw	r28, 0x09	; 9
    3498:	0f b6       	in	r0, 0x3f	; 63
    349a:	f8 94       	cli
    349c:	de bf       	out	0x3e, r29	; 62
    349e:	0f be       	out	0x3f, r0	; 63
    34a0:	cd bf       	out	0x3d, r28	; 61
    34a2:	df 91       	pop	r29
    34a4:	cf 91       	pop	r28
    34a6:	1f 91       	pop	r17
    34a8:	0f 91       	pop	r16
    34aa:	08 95       	ret

000034ac <prvInitialiseNewQueue>:
    34ac:	0f 93       	push	r16
    34ae:	1f 93       	push	r17
    34b0:	cf 93       	push	r28
    34b2:	df 93       	push	r29
    34b4:	cd b7       	in	r28, 0x3d	; 61
    34b6:	de b7       	in	r29, 0x3e	; 62
    34b8:	27 97       	sbiw	r28, 0x07	; 7
    34ba:	0f b6       	in	r0, 0x3f	; 63
    34bc:	f8 94       	cli
    34be:	de bf       	out	0x3e, r29	; 62
    34c0:	0f be       	out	0x3f, r0	; 63
    34c2:	cd bf       	out	0x3d, r28	; 61
    34c4:	89 83       	std	Y+1, r24	; 0x01
    34c6:	6a 83       	std	Y+2, r22	; 0x02
    34c8:	5c 83       	std	Y+4, r21	; 0x04
    34ca:	4b 83       	std	Y+3, r20	; 0x03
    34cc:	2d 83       	std	Y+5, r18	; 0x05
    34ce:	1f 83       	std	Y+7, r17	; 0x07
    34d0:	0e 83       	std	Y+6, r16	; 0x06
    34d2:	8a 81       	ldd	r24, Y+2	; 0x02
    34d4:	88 23       	and	r24, r24
    34d6:	41 f4       	brne	.+16     	; 0x34e8 <prvInitialiseNewQueue+0x3c>
    34d8:	8e 81       	ldd	r24, Y+6	; 0x06
    34da:	9f 81       	ldd	r25, Y+7	; 0x07
    34dc:	2e 81       	ldd	r18, Y+6	; 0x06
    34de:	3f 81       	ldd	r19, Y+7	; 0x07
    34e0:	fc 01       	movw	r30, r24
    34e2:	31 83       	std	Z+1, r19	; 0x01
    34e4:	20 83       	st	Z, r18
    34e6:	07 c0       	rjmp	.+14     	; 0x34f6 <prvInitialiseNewQueue+0x4a>
    34e8:	8e 81       	ldd	r24, Y+6	; 0x06
    34ea:	9f 81       	ldd	r25, Y+7	; 0x07
    34ec:	2b 81       	ldd	r18, Y+3	; 0x03
    34ee:	3c 81       	ldd	r19, Y+4	; 0x04
    34f0:	fc 01       	movw	r30, r24
    34f2:	31 83       	std	Z+1, r19	; 0x01
    34f4:	20 83       	st	Z, r18
    34f6:	8e 81       	ldd	r24, Y+6	; 0x06
    34f8:	9f 81       	ldd	r25, Y+7	; 0x07
    34fa:	29 81       	ldd	r18, Y+1	; 0x01
    34fc:	fc 01       	movw	r30, r24
    34fe:	23 8f       	std	Z+27, r18	; 0x1b
    3500:	8e 81       	ldd	r24, Y+6	; 0x06
    3502:	9f 81       	ldd	r25, Y+7	; 0x07
    3504:	2a 81       	ldd	r18, Y+2	; 0x02
    3506:	fc 01       	movw	r30, r24
    3508:	24 8f       	std	Z+28, r18	; 0x1c
    350a:	8e 81       	ldd	r24, Y+6	; 0x06
    350c:	9f 81       	ldd	r25, Y+7	; 0x07
    350e:	61 e0       	ldi	r22, 0x01	; 1
    3510:	0e 94 76 19 	call	0x32ec	; 0x32ec <xQueueGenericReset>
    3514:	8e 81       	ldd	r24, Y+6	; 0x06
    3516:	9f 81       	ldd	r25, Y+7	; 0x07
    3518:	2d 81       	ldd	r18, Y+5	; 0x05
    351a:	fc 01       	movw	r30, r24
    351c:	20 a3       	std	Z+32, r18	; 0x20
    351e:	00 00       	nop
    3520:	27 96       	adiw	r28, 0x07	; 7
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	f8 94       	cli
    3526:	de bf       	out	0x3e, r29	; 62
    3528:	0f be       	out	0x3f, r0	; 63
    352a:	cd bf       	out	0x3d, r28	; 61
    352c:	df 91       	pop	r29
    352e:	cf 91       	pop	r28
    3530:	1f 91       	pop	r17
    3532:	0f 91       	pop	r16
    3534:	08 95       	ret

00003536 <xQueueGenericSend>:
    3536:	cf 93       	push	r28
    3538:	df 93       	push	r29
    353a:	cd b7       	in	r28, 0x3d	; 61
    353c:	de b7       	in	r29, 0x3e	; 62
    353e:	2e 97       	sbiw	r28, 0x0e	; 14
    3540:	0f b6       	in	r0, 0x3f	; 63
    3542:	f8 94       	cli
    3544:	de bf       	out	0x3e, r29	; 62
    3546:	0f be       	out	0x3f, r0	; 63
    3548:	cd bf       	out	0x3d, r28	; 61
    354a:	99 87       	std	Y+9, r25	; 0x09
    354c:	88 87       	std	Y+8, r24	; 0x08
    354e:	7b 87       	std	Y+11, r23	; 0x0b
    3550:	6a 87       	std	Y+10, r22	; 0x0a
    3552:	5d 87       	std	Y+13, r21	; 0x0d
    3554:	4c 87       	std	Y+12, r20	; 0x0c
    3556:	2e 87       	std	Y+14, r18	; 0x0e
    3558:	19 82       	std	Y+1, r1	; 0x01
    355a:	88 85       	ldd	r24, Y+8	; 0x08
    355c:	99 85       	ldd	r25, Y+9	; 0x09
    355e:	9b 83       	std	Y+3, r25	; 0x03
    3560:	8a 83       	std	Y+2, r24	; 0x02
    3562:	0f b6       	in	r0, 0x3f	; 63
    3564:	f8 94       	cli
    3566:	0f 92       	push	r0
    3568:	8a 81       	ldd	r24, Y+2	; 0x02
    356a:	9b 81       	ldd	r25, Y+3	; 0x03
    356c:	fc 01       	movw	r30, r24
    356e:	22 8d       	ldd	r18, Z+26	; 0x1a
    3570:	8a 81       	ldd	r24, Y+2	; 0x02
    3572:	9b 81       	ldd	r25, Y+3	; 0x03
    3574:	fc 01       	movw	r30, r24
    3576:	83 8d       	ldd	r24, Z+27	; 0x1b
    3578:	28 17       	cp	r18, r24
    357a:	18 f0       	brcs	.+6      	; 0x3582 <xQueueGenericSend+0x4c>
    357c:	8e 85       	ldd	r24, Y+14	; 0x0e
    357e:	82 30       	cpi	r24, 0x02	; 2
    3580:	11 f5       	brne	.+68     	; 0x35c6 <xQueueGenericSend+0x90>
    3582:	2a 85       	ldd	r18, Y+10	; 0x0a
    3584:	3b 85       	ldd	r19, Y+11	; 0x0b
    3586:	8a 81       	ldd	r24, Y+2	; 0x02
    3588:	9b 81       	ldd	r25, Y+3	; 0x03
    358a:	4e 85       	ldd	r20, Y+14	; 0x0e
    358c:	b9 01       	movw	r22, r18
    358e:	0e 94 c8 1c 	call	0x3990	; 0x3990 <prvCopyDataToQueue>
    3592:	8c 83       	std	Y+4, r24	; 0x04
    3594:	8a 81       	ldd	r24, Y+2	; 0x02
    3596:	9b 81       	ldd	r25, Y+3	; 0x03
    3598:	fc 01       	movw	r30, r24
    359a:	81 89       	ldd	r24, Z+17	; 0x11
    359c:	88 23       	and	r24, r24
    359e:	51 f0       	breq	.+20     	; 0x35b4 <xQueueGenericSend+0x7e>
    35a0:	8a 81       	ldd	r24, Y+2	; 0x02
    35a2:	9b 81       	ldd	r25, Y+3	; 0x03
    35a4:	41 96       	adiw	r24, 0x11	; 17
    35a6:	0e 94 d6 23 	call	0x47ac	; 0x47ac <xTaskRemoveFromEventList>
    35aa:	88 23       	and	r24, r24
    35ac:	41 f0       	breq	.+16     	; 0x35be <xQueueGenericSend+0x88>
    35ae:	0e 94 4d 14 	call	0x289a	; 0x289a <vPortYield>
    35b2:	05 c0       	rjmp	.+10     	; 0x35be <xQueueGenericSend+0x88>
    35b4:	8c 81       	ldd	r24, Y+4	; 0x04
    35b6:	88 23       	and	r24, r24
    35b8:	11 f0       	breq	.+4      	; 0x35be <xQueueGenericSend+0x88>
    35ba:	0e 94 4d 14 	call	0x289a	; 0x289a <vPortYield>
    35be:	0f 90       	pop	r0
    35c0:	0f be       	out	0x3f, r0	; 63
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	60 c0       	rjmp	.+192    	; 0x3686 <xQueueGenericSend+0x150>
    35c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    35c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    35ca:	89 2b       	or	r24, r25
    35cc:	21 f4       	brne	.+8      	; 0x35d6 <xQueueGenericSend+0xa0>
    35ce:	0f 90       	pop	r0
    35d0:	0f be       	out	0x3f, r0	; 63
    35d2:	80 e0       	ldi	r24, 0x00	; 0
    35d4:	58 c0       	rjmp	.+176    	; 0x3686 <xQueueGenericSend+0x150>
    35d6:	89 81       	ldd	r24, Y+1	; 0x01
    35d8:	88 23       	and	r24, r24
    35da:	31 f4       	brne	.+12     	; 0x35e8 <xQueueGenericSend+0xb2>
    35dc:	ce 01       	movw	r24, r28
    35de:	05 96       	adiw	r24, 0x05	; 5
    35e0:	0e 94 43 24 	call	0x4886	; 0x4886 <vTaskSetTimeOutState>
    35e4:	81 e0       	ldi	r24, 0x01	; 1
    35e6:	89 83       	std	Y+1, r24	; 0x01
    35e8:	0f 90       	pop	r0
    35ea:	0f be       	out	0x3f, r0	; 63
    35ec:	0e 94 36 21 	call	0x426c	; 0x426c <vTaskSuspendAll>
    35f0:	0f b6       	in	r0, 0x3f	; 63
    35f2:	f8 94       	cli
    35f4:	0f 92       	push	r0
    35f6:	8a 81       	ldd	r24, Y+2	; 0x02
    35f8:	9b 81       	ldd	r25, Y+3	; 0x03
    35fa:	fc 01       	movw	r30, r24
    35fc:	85 8d       	ldd	r24, Z+29	; 0x1d
    35fe:	8f 3f       	cpi	r24, 0xFF	; 255
    3600:	21 f4       	brne	.+8      	; 0x360a <xQueueGenericSend+0xd4>
    3602:	8a 81       	ldd	r24, Y+2	; 0x02
    3604:	9b 81       	ldd	r25, Y+3	; 0x03
    3606:	fc 01       	movw	r30, r24
    3608:	15 8e       	std	Z+29, r1	; 0x1d
    360a:	8a 81       	ldd	r24, Y+2	; 0x02
    360c:	9b 81       	ldd	r25, Y+3	; 0x03
    360e:	fc 01       	movw	r30, r24
    3610:	86 8d       	ldd	r24, Z+30	; 0x1e
    3612:	8f 3f       	cpi	r24, 0xFF	; 255
    3614:	21 f4       	brne	.+8      	; 0x361e <xQueueGenericSend+0xe8>
    3616:	8a 81       	ldd	r24, Y+2	; 0x02
    3618:	9b 81       	ldd	r25, Y+3	; 0x03
    361a:	fc 01       	movw	r30, r24
    361c:	16 8e       	std	Z+30, r1	; 0x1e
    361e:	0f 90       	pop	r0
    3620:	0f be       	out	0x3f, r0	; 63
    3622:	9e 01       	movw	r18, r28
    3624:	24 5f       	subi	r18, 0xF4	; 244
    3626:	3f 4f       	sbci	r19, 0xFF	; 255
    3628:	ce 01       	movw	r24, r28
    362a:	05 96       	adiw	r24, 0x05	; 5
    362c:	b9 01       	movw	r22, r18
    362e:	0e 94 5f 24 	call	0x48be	; 0x48be <xTaskCheckForTimeOut>
    3632:	88 23       	and	r24, r24
    3634:	09 f5       	brne	.+66     	; 0x3678 <xQueueGenericSend+0x142>
    3636:	8a 81       	ldd	r24, Y+2	; 0x02
    3638:	9b 81       	ldd	r25, Y+3	; 0x03
    363a:	0e 94 65 1e 	call	0x3cca	; 0x3cca <prvIsQueueFull>
    363e:	88 23       	and	r24, r24
    3640:	a1 f0       	breq	.+40     	; 0x366a <xQueueGenericSend+0x134>
    3642:	2c 85       	ldd	r18, Y+12	; 0x0c
    3644:	3d 85       	ldd	r19, Y+13	; 0x0d
    3646:	8a 81       	ldd	r24, Y+2	; 0x02
    3648:	9b 81       	ldd	r25, Y+3	; 0x03
    364a:	08 96       	adiw	r24, 0x08	; 8
    364c:	b9 01       	movw	r22, r18
    364e:	0e 94 b3 23 	call	0x4766	; 0x4766 <vTaskPlaceOnEventList>
    3652:	8a 81       	ldd	r24, Y+2	; 0x02
    3654:	9b 81       	ldd	r25, Y+3	; 0x03
    3656:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <prvUnlockQueue>
    365a:	0e 94 43 21 	call	0x4286	; 0x4286 <xTaskResumeAll>
    365e:	88 23       	and	r24, r24
    3660:	09 f0       	breq	.+2      	; 0x3664 <xQueueGenericSend+0x12e>
    3662:	7f cf       	rjmp	.-258    	; 0x3562 <xQueueGenericSend+0x2c>
    3664:	0e 94 4d 14 	call	0x289a	; 0x289a <vPortYield>
    3668:	7c cf       	rjmp	.-264    	; 0x3562 <xQueueGenericSend+0x2c>
    366a:	8a 81       	ldd	r24, Y+2	; 0x02
    366c:	9b 81       	ldd	r25, Y+3	; 0x03
    366e:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <prvUnlockQueue>
    3672:	0e 94 43 21 	call	0x4286	; 0x4286 <xTaskResumeAll>
    3676:	75 cf       	rjmp	.-278    	; 0x3562 <xQueueGenericSend+0x2c>
    3678:	8a 81       	ldd	r24, Y+2	; 0x02
    367a:	9b 81       	ldd	r25, Y+3	; 0x03
    367c:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <prvUnlockQueue>
    3680:	0e 94 43 21 	call	0x4286	; 0x4286 <xTaskResumeAll>
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	2e 96       	adiw	r28, 0x0e	; 14
    3688:	0f b6       	in	r0, 0x3f	; 63
    368a:	f8 94       	cli
    368c:	de bf       	out	0x3e, r29	; 62
    368e:	0f be       	out	0x3f, r0	; 63
    3690:	cd bf       	out	0x3d, r28	; 61
    3692:	df 91       	pop	r29
    3694:	cf 91       	pop	r28
    3696:	08 95       	ret

00003698 <xQueueGenericSendFromISR>:
    3698:	cf 93       	push	r28
    369a:	df 93       	push	r29
    369c:	cd b7       	in	r28, 0x3d	; 61
    369e:	de b7       	in	r29, 0x3e	; 62
    36a0:	2c 97       	sbiw	r28, 0x0c	; 12
    36a2:	0f b6       	in	r0, 0x3f	; 63
    36a4:	f8 94       	cli
    36a6:	de bf       	out	0x3e, r29	; 62
    36a8:	0f be       	out	0x3f, r0	; 63
    36aa:	cd bf       	out	0x3d, r28	; 61
    36ac:	9f 83       	std	Y+7, r25	; 0x07
    36ae:	8e 83       	std	Y+6, r24	; 0x06
    36b0:	79 87       	std	Y+9, r23	; 0x09
    36b2:	68 87       	std	Y+8, r22	; 0x08
    36b4:	5b 87       	std	Y+11, r21	; 0x0b
    36b6:	4a 87       	std	Y+10, r20	; 0x0a
    36b8:	2c 87       	std	Y+12, r18	; 0x0c
    36ba:	8e 81       	ldd	r24, Y+6	; 0x06
    36bc:	9f 81       	ldd	r25, Y+7	; 0x07
    36be:	9b 83       	std	Y+3, r25	; 0x03
    36c0:	8a 83       	std	Y+2, r24	; 0x02
    36c2:	1c 82       	std	Y+4, r1	; 0x04
    36c4:	8a 81       	ldd	r24, Y+2	; 0x02
    36c6:	9b 81       	ldd	r25, Y+3	; 0x03
    36c8:	fc 01       	movw	r30, r24
    36ca:	22 8d       	ldd	r18, Z+26	; 0x1a
    36cc:	8a 81       	ldd	r24, Y+2	; 0x02
    36ce:	9b 81       	ldd	r25, Y+3	; 0x03
    36d0:	fc 01       	movw	r30, r24
    36d2:	83 8d       	ldd	r24, Z+27	; 0x1b
    36d4:	28 17       	cp	r18, r24
    36d6:	18 f0       	brcs	.+6      	; 0x36de <xQueueGenericSendFromISR+0x46>
    36d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    36da:	82 30       	cpi	r24, 0x02	; 2
    36dc:	89 f5       	brne	.+98     	; 0x3740 <xQueueGenericSendFromISR+0xa8>
    36de:	8a 81       	ldd	r24, Y+2	; 0x02
    36e0:	9b 81       	ldd	r25, Y+3	; 0x03
    36e2:	fc 01       	movw	r30, r24
    36e4:	86 8d       	ldd	r24, Z+30	; 0x1e
    36e6:	8d 83       	std	Y+5, r24	; 0x05
    36e8:	28 85       	ldd	r18, Y+8	; 0x08
    36ea:	39 85       	ldd	r19, Y+9	; 0x09
    36ec:	8a 81       	ldd	r24, Y+2	; 0x02
    36ee:	9b 81       	ldd	r25, Y+3	; 0x03
    36f0:	4c 85       	ldd	r20, Y+12	; 0x0c
    36f2:	b9 01       	movw	r22, r18
    36f4:	0e 94 c8 1c 	call	0x3990	; 0x3990 <prvCopyDataToQueue>
    36f8:	8d 81       	ldd	r24, Y+5	; 0x05
    36fa:	8f 3f       	cpi	r24, 0xFF	; 255
    36fc:	b9 f4       	brne	.+46     	; 0x372c <xQueueGenericSendFromISR+0x94>
    36fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3700:	9b 81       	ldd	r25, Y+3	; 0x03
    3702:	fc 01       	movw	r30, r24
    3704:	81 89       	ldd	r24, Z+17	; 0x11
    3706:	88 23       	and	r24, r24
    3708:	c1 f0       	breq	.+48     	; 0x373a <xQueueGenericSendFromISR+0xa2>
    370a:	8a 81       	ldd	r24, Y+2	; 0x02
    370c:	9b 81       	ldd	r25, Y+3	; 0x03
    370e:	41 96       	adiw	r24, 0x11	; 17
    3710:	0e 94 d6 23 	call	0x47ac	; 0x47ac <xTaskRemoveFromEventList>
    3714:	88 23       	and	r24, r24
    3716:	89 f0       	breq	.+34     	; 0x373a <xQueueGenericSendFromISR+0xa2>
    3718:	8a 85       	ldd	r24, Y+10	; 0x0a
    371a:	9b 85       	ldd	r25, Y+11	; 0x0b
    371c:	89 2b       	or	r24, r25
    371e:	69 f0       	breq	.+26     	; 0x373a <xQueueGenericSendFromISR+0xa2>
    3720:	8a 85       	ldd	r24, Y+10	; 0x0a
    3722:	9b 85       	ldd	r25, Y+11	; 0x0b
    3724:	21 e0       	ldi	r18, 0x01	; 1
    3726:	fc 01       	movw	r30, r24
    3728:	20 83       	st	Z, r18
    372a:	07 c0       	rjmp	.+14     	; 0x373a <xQueueGenericSendFromISR+0xa2>
    372c:	8d 81       	ldd	r24, Y+5	; 0x05
    372e:	8f 5f       	subi	r24, 0xFF	; 255
    3730:	28 2f       	mov	r18, r24
    3732:	8a 81       	ldd	r24, Y+2	; 0x02
    3734:	9b 81       	ldd	r25, Y+3	; 0x03
    3736:	fc 01       	movw	r30, r24
    3738:	26 8f       	std	Z+30, r18	; 0x1e
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	89 83       	std	Y+1, r24	; 0x01
    373e:	01 c0       	rjmp	.+2      	; 0x3742 <xQueueGenericSendFromISR+0xaa>
    3740:	19 82       	std	Y+1, r1	; 0x01
    3742:	89 81       	ldd	r24, Y+1	; 0x01
    3744:	2c 96       	adiw	r28, 0x0c	; 12
    3746:	0f b6       	in	r0, 0x3f	; 63
    3748:	f8 94       	cli
    374a:	de bf       	out	0x3e, r29	; 62
    374c:	0f be       	out	0x3f, r0	; 63
    374e:	cd bf       	out	0x3d, r28	; 61
    3750:	df 91       	pop	r29
    3752:	cf 91       	pop	r28
    3754:	08 95       	ret

00003756 <xQueueGenericReceive>:
    3756:	cf 93       	push	r28
    3758:	df 93       	push	r29
    375a:	cd b7       	in	r28, 0x3d	; 61
    375c:	de b7       	in	r29, 0x3e	; 62
    375e:	60 97       	sbiw	r28, 0x10	; 16
    3760:	0f b6       	in	r0, 0x3f	; 63
    3762:	f8 94       	cli
    3764:	de bf       	out	0x3e, r29	; 62
    3766:	0f be       	out	0x3f, r0	; 63
    3768:	cd bf       	out	0x3d, r28	; 61
    376a:	9b 87       	std	Y+11, r25	; 0x0b
    376c:	8a 87       	std	Y+10, r24	; 0x0a
    376e:	7d 87       	std	Y+13, r23	; 0x0d
    3770:	6c 87       	std	Y+12, r22	; 0x0c
    3772:	5f 87       	std	Y+15, r21	; 0x0f
    3774:	4e 87       	std	Y+14, r20	; 0x0e
    3776:	28 8b       	std	Y+16, r18	; 0x10
    3778:	19 82       	std	Y+1, r1	; 0x01
    377a:	8a 85       	ldd	r24, Y+10	; 0x0a
    377c:	9b 85       	ldd	r25, Y+11	; 0x0b
    377e:	9b 83       	std	Y+3, r25	; 0x03
    3780:	8a 83       	std	Y+2, r24	; 0x02
    3782:	0f b6       	in	r0, 0x3f	; 63
    3784:	f8 94       	cli
    3786:	0f 92       	push	r0
    3788:	8a 81       	ldd	r24, Y+2	; 0x02
    378a:	9b 81       	ldd	r25, Y+3	; 0x03
    378c:	fc 01       	movw	r30, r24
    378e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3790:	8c 83       	std	Y+4, r24	; 0x04
    3792:	8c 81       	ldd	r24, Y+4	; 0x04
    3794:	88 23       	and	r24, r24
    3796:	09 f4       	brne	.+2      	; 0x379a <xQueueGenericReceive+0x44>
    3798:	51 c0       	rjmp	.+162    	; 0x383c <xQueueGenericReceive+0xe6>
    379a:	8a 81       	ldd	r24, Y+2	; 0x02
    379c:	9b 81       	ldd	r25, Y+3	; 0x03
    379e:	fc 01       	movw	r30, r24
    37a0:	86 81       	ldd	r24, Z+6	; 0x06
    37a2:	97 81       	ldd	r25, Z+7	; 0x07
    37a4:	9e 83       	std	Y+6, r25	; 0x06
    37a6:	8d 83       	std	Y+5, r24	; 0x05
    37a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    37aa:	3d 85       	ldd	r19, Y+13	; 0x0d
    37ac:	8a 81       	ldd	r24, Y+2	; 0x02
    37ae:	9b 81       	ldd	r25, Y+3	; 0x03
    37b0:	b9 01       	movw	r22, r18
    37b2:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <prvCopyDataFromQueue>
    37b6:	88 89       	ldd	r24, Y+16	; 0x10
    37b8:	88 23       	and	r24, r24
    37ba:	31 f5       	brne	.+76     	; 0x3808 <xQueueGenericReceive+0xb2>
    37bc:	8c 81       	ldd	r24, Y+4	; 0x04
    37be:	2f ef       	ldi	r18, 0xFF	; 255
    37c0:	28 0f       	add	r18, r24
    37c2:	8a 81       	ldd	r24, Y+2	; 0x02
    37c4:	9b 81       	ldd	r25, Y+3	; 0x03
    37c6:	fc 01       	movw	r30, r24
    37c8:	22 8f       	std	Z+26, r18	; 0x1a
    37ca:	8a 81       	ldd	r24, Y+2	; 0x02
    37cc:	9b 81       	ldd	r25, Y+3	; 0x03
    37ce:	fc 01       	movw	r30, r24
    37d0:	80 81       	ld	r24, Z
    37d2:	91 81       	ldd	r25, Z+1	; 0x01
    37d4:	89 2b       	or	r24, r25
    37d6:	41 f4       	brne	.+16     	; 0x37e8 <xQueueGenericReceive+0x92>
    37d8:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <pvTaskIncrementMutexHeldCount>
    37dc:	9c 01       	movw	r18, r24
    37de:	8a 81       	ldd	r24, Y+2	; 0x02
    37e0:	9b 81       	ldd	r25, Y+3	; 0x03
    37e2:	fc 01       	movw	r30, r24
    37e4:	33 83       	std	Z+3, r19	; 0x03
    37e6:	22 83       	std	Z+2, r18	; 0x02
    37e8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ea:	9b 81       	ldd	r25, Y+3	; 0x03
    37ec:	fc 01       	movw	r30, r24
    37ee:	80 85       	ldd	r24, Z+8	; 0x08
    37f0:	88 23       	and	r24, r24
    37f2:	01 f1       	breq	.+64     	; 0x3834 <xQueueGenericReceive+0xde>
    37f4:	8a 81       	ldd	r24, Y+2	; 0x02
    37f6:	9b 81       	ldd	r25, Y+3	; 0x03
    37f8:	08 96       	adiw	r24, 0x08	; 8
    37fa:	0e 94 d6 23 	call	0x47ac	; 0x47ac <xTaskRemoveFromEventList>
    37fe:	88 23       	and	r24, r24
    3800:	c9 f0       	breq	.+50     	; 0x3834 <xQueueGenericReceive+0xde>
    3802:	0e 94 4d 14 	call	0x289a	; 0x289a <vPortYield>
    3806:	16 c0       	rjmp	.+44     	; 0x3834 <xQueueGenericReceive+0xde>
    3808:	8a 81       	ldd	r24, Y+2	; 0x02
    380a:	9b 81       	ldd	r25, Y+3	; 0x03
    380c:	2d 81       	ldd	r18, Y+5	; 0x05
    380e:	3e 81       	ldd	r19, Y+6	; 0x06
    3810:	fc 01       	movw	r30, r24
    3812:	37 83       	std	Z+7, r19	; 0x07
    3814:	26 83       	std	Z+6, r18	; 0x06
    3816:	8a 81       	ldd	r24, Y+2	; 0x02
    3818:	9b 81       	ldd	r25, Y+3	; 0x03
    381a:	fc 01       	movw	r30, r24
    381c:	81 89       	ldd	r24, Z+17	; 0x11
    381e:	88 23       	and	r24, r24
    3820:	49 f0       	breq	.+18     	; 0x3834 <xQueueGenericReceive+0xde>
    3822:	8a 81       	ldd	r24, Y+2	; 0x02
    3824:	9b 81       	ldd	r25, Y+3	; 0x03
    3826:	41 96       	adiw	r24, 0x11	; 17
    3828:	0e 94 d6 23 	call	0x47ac	; 0x47ac <xTaskRemoveFromEventList>
    382c:	88 23       	and	r24, r24
    382e:	11 f0       	breq	.+4      	; 0x3834 <xQueueGenericReceive+0xde>
    3830:	0e 94 4d 14 	call	0x289a	; 0x289a <vPortYield>
    3834:	0f 90       	pop	r0
    3836:	0f be       	out	0x3f, r0	; 63
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	7a c0       	rjmp	.+244    	; 0x3930 <xQueueGenericReceive+0x1da>
    383c:	8e 85       	ldd	r24, Y+14	; 0x0e
    383e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3840:	89 2b       	or	r24, r25
    3842:	21 f4       	brne	.+8      	; 0x384c <xQueueGenericReceive+0xf6>
    3844:	0f 90       	pop	r0
    3846:	0f be       	out	0x3f, r0	; 63
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	72 c0       	rjmp	.+228    	; 0x3930 <xQueueGenericReceive+0x1da>
    384c:	89 81       	ldd	r24, Y+1	; 0x01
    384e:	88 23       	and	r24, r24
    3850:	31 f4       	brne	.+12     	; 0x385e <xQueueGenericReceive+0x108>
    3852:	ce 01       	movw	r24, r28
    3854:	07 96       	adiw	r24, 0x07	; 7
    3856:	0e 94 43 24 	call	0x4886	; 0x4886 <vTaskSetTimeOutState>
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	89 83       	std	Y+1, r24	; 0x01
    385e:	0f 90       	pop	r0
    3860:	0f be       	out	0x3f, r0	; 63
    3862:	0e 94 36 21 	call	0x426c	; 0x426c <vTaskSuspendAll>
    3866:	0f b6       	in	r0, 0x3f	; 63
    3868:	f8 94       	cli
    386a:	0f 92       	push	r0
    386c:	8a 81       	ldd	r24, Y+2	; 0x02
    386e:	9b 81       	ldd	r25, Y+3	; 0x03
    3870:	fc 01       	movw	r30, r24
    3872:	85 8d       	ldd	r24, Z+29	; 0x1d
    3874:	8f 3f       	cpi	r24, 0xFF	; 255
    3876:	21 f4       	brne	.+8      	; 0x3880 <xQueueGenericReceive+0x12a>
    3878:	8a 81       	ldd	r24, Y+2	; 0x02
    387a:	9b 81       	ldd	r25, Y+3	; 0x03
    387c:	fc 01       	movw	r30, r24
    387e:	15 8e       	std	Z+29, r1	; 0x1d
    3880:	8a 81       	ldd	r24, Y+2	; 0x02
    3882:	9b 81       	ldd	r25, Y+3	; 0x03
    3884:	fc 01       	movw	r30, r24
    3886:	86 8d       	ldd	r24, Z+30	; 0x1e
    3888:	8f 3f       	cpi	r24, 0xFF	; 255
    388a:	21 f4       	brne	.+8      	; 0x3894 <xQueueGenericReceive+0x13e>
    388c:	8a 81       	ldd	r24, Y+2	; 0x02
    388e:	9b 81       	ldd	r25, Y+3	; 0x03
    3890:	fc 01       	movw	r30, r24
    3892:	16 8e       	std	Z+30, r1	; 0x1e
    3894:	0f 90       	pop	r0
    3896:	0f be       	out	0x3f, r0	; 63
    3898:	9e 01       	movw	r18, r28
    389a:	22 5f       	subi	r18, 0xF2	; 242
    389c:	3f 4f       	sbci	r19, 0xFF	; 255
    389e:	ce 01       	movw	r24, r28
    38a0:	07 96       	adiw	r24, 0x07	; 7
    38a2:	b9 01       	movw	r22, r18
    38a4:	0e 94 5f 24 	call	0x48be	; 0x48be <xTaskCheckForTimeOut>
    38a8:	88 23       	and	r24, r24
    38aa:	a1 f5       	brne	.+104    	; 0x3914 <xQueueGenericReceive+0x1be>
    38ac:	8a 81       	ldd	r24, Y+2	; 0x02
    38ae:	9b 81       	ldd	r25, Y+3	; 0x03
    38b0:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <prvIsQueueEmpty>
    38b4:	88 23       	and	r24, r24
    38b6:	39 f1       	breq	.+78     	; 0x3906 <xQueueGenericReceive+0x1b0>
    38b8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ba:	9b 81       	ldd	r25, Y+3	; 0x03
    38bc:	fc 01       	movw	r30, r24
    38be:	80 81       	ld	r24, Z
    38c0:	91 81       	ldd	r25, Z+1	; 0x01
    38c2:	89 2b       	or	r24, r25
    38c4:	61 f4       	brne	.+24     	; 0x38de <xQueueGenericReceive+0x188>
    38c6:	0f b6       	in	r0, 0x3f	; 63
    38c8:	f8 94       	cli
    38ca:	0f 92       	push	r0
    38cc:	8a 81       	ldd	r24, Y+2	; 0x02
    38ce:	9b 81       	ldd	r25, Y+3	; 0x03
    38d0:	fc 01       	movw	r30, r24
    38d2:	82 81       	ldd	r24, Z+2	; 0x02
    38d4:	93 81       	ldd	r25, Z+3	; 0x03
    38d6:	0e 94 08 26 	call	0x4c10	; 0x4c10 <vTaskPriorityInherit>
    38da:	0f 90       	pop	r0
    38dc:	0f be       	out	0x3f, r0	; 63
    38de:	2e 85       	ldd	r18, Y+14	; 0x0e
    38e0:	3f 85       	ldd	r19, Y+15	; 0x0f
    38e2:	8a 81       	ldd	r24, Y+2	; 0x02
    38e4:	9b 81       	ldd	r25, Y+3	; 0x03
    38e6:	41 96       	adiw	r24, 0x11	; 17
    38e8:	b9 01       	movw	r22, r18
    38ea:	0e 94 b3 23 	call	0x4766	; 0x4766 <vTaskPlaceOnEventList>
    38ee:	8a 81       	ldd	r24, Y+2	; 0x02
    38f0:	9b 81       	ldd	r25, Y+3	; 0x03
    38f2:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <prvUnlockQueue>
    38f6:	0e 94 43 21 	call	0x4286	; 0x4286 <xTaskResumeAll>
    38fa:	88 23       	and	r24, r24
    38fc:	09 f0       	breq	.+2      	; 0x3900 <xQueueGenericReceive+0x1aa>
    38fe:	41 cf       	rjmp	.-382    	; 0x3782 <xQueueGenericReceive+0x2c>
    3900:	0e 94 4d 14 	call	0x289a	; 0x289a <vPortYield>
    3904:	3e cf       	rjmp	.-388    	; 0x3782 <xQueueGenericReceive+0x2c>
    3906:	8a 81       	ldd	r24, Y+2	; 0x02
    3908:	9b 81       	ldd	r25, Y+3	; 0x03
    390a:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <prvUnlockQueue>
    390e:	0e 94 43 21 	call	0x4286	; 0x4286 <xTaskResumeAll>
    3912:	37 cf       	rjmp	.-402    	; 0x3782 <xQueueGenericReceive+0x2c>
    3914:	8a 81       	ldd	r24, Y+2	; 0x02
    3916:	9b 81       	ldd	r25, Y+3	; 0x03
    3918:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <prvUnlockQueue>
    391c:	0e 94 43 21 	call	0x4286	; 0x4286 <xTaskResumeAll>
    3920:	8a 81       	ldd	r24, Y+2	; 0x02
    3922:	9b 81       	ldd	r25, Y+3	; 0x03
    3924:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <prvIsQueueEmpty>
    3928:	88 23       	and	r24, r24
    392a:	09 f4       	brne	.+2      	; 0x392e <xQueueGenericReceive+0x1d8>
    392c:	2a cf       	rjmp	.-428    	; 0x3782 <xQueueGenericReceive+0x2c>
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	60 96       	adiw	r28, 0x10	; 16
    3932:	0f b6       	in	r0, 0x3f	; 63
    3934:	f8 94       	cli
    3936:	de bf       	out	0x3e, r29	; 62
    3938:	0f be       	out	0x3f, r0	; 63
    393a:	cd bf       	out	0x3d, r28	; 61
    393c:	df 91       	pop	r29
    393e:	cf 91       	pop	r28
    3940:	08 95       	ret

00003942 <uxQueueSpacesAvailable>:
    3942:	cf 93       	push	r28
    3944:	df 93       	push	r29
    3946:	00 d0       	rcall	.+0      	; 0x3948 <uxQueueSpacesAvailable+0x6>
    3948:	00 d0       	rcall	.+0      	; 0x394a <uxQueueSpacesAvailable+0x8>
    394a:	1f 92       	push	r1
    394c:	cd b7       	in	r28, 0x3d	; 61
    394e:	de b7       	in	r29, 0x3e	; 62
    3950:	9d 83       	std	Y+5, r25	; 0x05
    3952:	8c 83       	std	Y+4, r24	; 0x04
    3954:	8c 81       	ldd	r24, Y+4	; 0x04
    3956:	9d 81       	ldd	r25, Y+5	; 0x05
    3958:	9a 83       	std	Y+2, r25	; 0x02
    395a:	89 83       	std	Y+1, r24	; 0x01
    395c:	0f b6       	in	r0, 0x3f	; 63
    395e:	f8 94       	cli
    3960:	0f 92       	push	r0
    3962:	89 81       	ldd	r24, Y+1	; 0x01
    3964:	9a 81       	ldd	r25, Y+2	; 0x02
    3966:	fc 01       	movw	r30, r24
    3968:	23 8d       	ldd	r18, Z+27	; 0x1b
    396a:	89 81       	ldd	r24, Y+1	; 0x01
    396c:	9a 81       	ldd	r25, Y+2	; 0x02
    396e:	fc 01       	movw	r30, r24
    3970:	82 8d       	ldd	r24, Z+26	; 0x1a
    3972:	f2 2f       	mov	r31, r18
    3974:	f8 1b       	sub	r31, r24
    3976:	8f 2f       	mov	r24, r31
    3978:	8b 83       	std	Y+3, r24	; 0x03
    397a:	0f 90       	pop	r0
    397c:	0f be       	out	0x3f, r0	; 63
    397e:	8b 81       	ldd	r24, Y+3	; 0x03
    3980:	0f 90       	pop	r0
    3982:	0f 90       	pop	r0
    3984:	0f 90       	pop	r0
    3986:	0f 90       	pop	r0
    3988:	0f 90       	pop	r0
    398a:	df 91       	pop	r29
    398c:	cf 91       	pop	r28
    398e:	08 95       	ret

00003990 <prvCopyDataToQueue>:
    3990:	cf 93       	push	r28
    3992:	df 93       	push	r29
    3994:	cd b7       	in	r28, 0x3d	; 61
    3996:	de b7       	in	r29, 0x3e	; 62
    3998:	27 97       	sbiw	r28, 0x07	; 7
    399a:	0f b6       	in	r0, 0x3f	; 63
    399c:	f8 94       	cli
    399e:	de bf       	out	0x3e, r29	; 62
    39a0:	0f be       	out	0x3f, r0	; 63
    39a2:	cd bf       	out	0x3d, r28	; 61
    39a4:	9c 83       	std	Y+4, r25	; 0x04
    39a6:	8b 83       	std	Y+3, r24	; 0x03
    39a8:	7e 83       	std	Y+6, r23	; 0x06
    39aa:	6d 83       	std	Y+5, r22	; 0x05
    39ac:	4f 83       	std	Y+7, r20	; 0x07
    39ae:	19 82       	std	Y+1, r1	; 0x01
    39b0:	8b 81       	ldd	r24, Y+3	; 0x03
    39b2:	9c 81       	ldd	r25, Y+4	; 0x04
    39b4:	fc 01       	movw	r30, r24
    39b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    39b8:	8a 83       	std	Y+2, r24	; 0x02
    39ba:	8b 81       	ldd	r24, Y+3	; 0x03
    39bc:	9c 81       	ldd	r25, Y+4	; 0x04
    39be:	fc 01       	movw	r30, r24
    39c0:	84 8d       	ldd	r24, Z+28	; 0x1c
    39c2:	88 23       	and	r24, r24
    39c4:	b1 f4       	brne	.+44     	; 0x39f2 <prvCopyDataToQueue+0x62>
    39c6:	8b 81       	ldd	r24, Y+3	; 0x03
    39c8:	9c 81       	ldd	r25, Y+4	; 0x04
    39ca:	fc 01       	movw	r30, r24
    39cc:	80 81       	ld	r24, Z
    39ce:	91 81       	ldd	r25, Z+1	; 0x01
    39d0:	89 2b       	or	r24, r25
    39d2:	09 f0       	breq	.+2      	; 0x39d6 <prvCopyDataToQueue+0x46>
    39d4:	9c c0       	rjmp	.+312    	; 0x3b0e <prvCopyDataToQueue+0x17e>
    39d6:	8b 81       	ldd	r24, Y+3	; 0x03
    39d8:	9c 81       	ldd	r25, Y+4	; 0x04
    39da:	fc 01       	movw	r30, r24
    39dc:	82 81       	ldd	r24, Z+2	; 0x02
    39de:	93 81       	ldd	r25, Z+3	; 0x03
    39e0:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <xTaskPriorityDisinherit>
    39e4:	89 83       	std	Y+1, r24	; 0x01
    39e6:	8b 81       	ldd	r24, Y+3	; 0x03
    39e8:	9c 81       	ldd	r25, Y+4	; 0x04
    39ea:	fc 01       	movw	r30, r24
    39ec:	13 82       	std	Z+3, r1	; 0x03
    39ee:	12 82       	std	Z+2, r1	; 0x02
    39f0:	8e c0       	rjmp	.+284    	; 0x3b0e <prvCopyDataToQueue+0x17e>
    39f2:	8f 81       	ldd	r24, Y+7	; 0x07
    39f4:	88 23       	and	r24, r24
    39f6:	d9 f5       	brne	.+118    	; 0x3a6e <prvCopyDataToQueue+0xde>
    39f8:	8b 81       	ldd	r24, Y+3	; 0x03
    39fa:	9c 81       	ldd	r25, Y+4	; 0x04
    39fc:	fc 01       	movw	r30, r24
    39fe:	84 8d       	ldd	r24, Z+28	; 0x1c
    3a00:	48 2f       	mov	r20, r24
    3a02:	50 e0       	ldi	r21, 0x00	; 0
    3a04:	8b 81       	ldd	r24, Y+3	; 0x03
    3a06:	9c 81       	ldd	r25, Y+4	; 0x04
    3a08:	fc 01       	movw	r30, r24
    3a0a:	84 81       	ldd	r24, Z+4	; 0x04
    3a0c:	95 81       	ldd	r25, Z+5	; 0x05
    3a0e:	2d 81       	ldd	r18, Y+5	; 0x05
    3a10:	3e 81       	ldd	r19, Y+6	; 0x06
    3a12:	b9 01       	movw	r22, r18
    3a14:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <memcpy>
    3a18:	8b 81       	ldd	r24, Y+3	; 0x03
    3a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a1c:	fc 01       	movw	r30, r24
    3a1e:	24 81       	ldd	r18, Z+4	; 0x04
    3a20:	35 81       	ldd	r19, Z+5	; 0x05
    3a22:	8b 81       	ldd	r24, Y+3	; 0x03
    3a24:	9c 81       	ldd	r25, Y+4	; 0x04
    3a26:	fc 01       	movw	r30, r24
    3a28:	84 8d       	ldd	r24, Z+28	; 0x1c
    3a2a:	88 2f       	mov	r24, r24
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	28 0f       	add	r18, r24
    3a30:	39 1f       	adc	r19, r25
    3a32:	8b 81       	ldd	r24, Y+3	; 0x03
    3a34:	9c 81       	ldd	r25, Y+4	; 0x04
    3a36:	fc 01       	movw	r30, r24
    3a38:	35 83       	std	Z+5, r19	; 0x05
    3a3a:	24 83       	std	Z+4, r18	; 0x04
    3a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a40:	fc 01       	movw	r30, r24
    3a42:	24 81       	ldd	r18, Z+4	; 0x04
    3a44:	35 81       	ldd	r19, Z+5	; 0x05
    3a46:	8b 81       	ldd	r24, Y+3	; 0x03
    3a48:	9c 81       	ldd	r25, Y+4	; 0x04
    3a4a:	fc 01       	movw	r30, r24
    3a4c:	82 81       	ldd	r24, Z+2	; 0x02
    3a4e:	93 81       	ldd	r25, Z+3	; 0x03
    3a50:	28 17       	cp	r18, r24
    3a52:	39 07       	cpc	r19, r25
    3a54:	08 f4       	brcc	.+2      	; 0x3a58 <prvCopyDataToQueue+0xc8>
    3a56:	5b c0       	rjmp	.+182    	; 0x3b0e <prvCopyDataToQueue+0x17e>
    3a58:	8b 81       	ldd	r24, Y+3	; 0x03
    3a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	20 81       	ld	r18, Z
    3a60:	31 81       	ldd	r19, Z+1	; 0x01
    3a62:	8b 81       	ldd	r24, Y+3	; 0x03
    3a64:	9c 81       	ldd	r25, Y+4	; 0x04
    3a66:	fc 01       	movw	r30, r24
    3a68:	35 83       	std	Z+5, r19	; 0x05
    3a6a:	24 83       	std	Z+4, r18	; 0x04
    3a6c:	50 c0       	rjmp	.+160    	; 0x3b0e <prvCopyDataToQueue+0x17e>
    3a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a70:	9c 81       	ldd	r25, Y+4	; 0x04
    3a72:	fc 01       	movw	r30, r24
    3a74:	84 8d       	ldd	r24, Z+28	; 0x1c
    3a76:	48 2f       	mov	r20, r24
    3a78:	50 e0       	ldi	r21, 0x00	; 0
    3a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a7e:	fc 01       	movw	r30, r24
    3a80:	86 81       	ldd	r24, Z+6	; 0x06
    3a82:	97 81       	ldd	r25, Z+7	; 0x07
    3a84:	2d 81       	ldd	r18, Y+5	; 0x05
    3a86:	3e 81       	ldd	r19, Y+6	; 0x06
    3a88:	b9 01       	movw	r22, r18
    3a8a:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <memcpy>
    3a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a90:	9c 81       	ldd	r25, Y+4	; 0x04
    3a92:	fc 01       	movw	r30, r24
    3a94:	26 81       	ldd	r18, Z+6	; 0x06
    3a96:	37 81       	ldd	r19, Z+7	; 0x07
    3a98:	8b 81       	ldd	r24, Y+3	; 0x03
    3a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a9c:	fc 01       	movw	r30, r24
    3a9e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3aa0:	88 2f       	mov	r24, r24
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	91 95       	neg	r25
    3aa6:	81 95       	neg	r24
    3aa8:	91 09       	sbc	r25, r1
    3aaa:	28 0f       	add	r18, r24
    3aac:	39 1f       	adc	r19, r25
    3aae:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ab2:	fc 01       	movw	r30, r24
    3ab4:	37 83       	std	Z+7, r19	; 0x07
    3ab6:	26 83       	std	Z+6, r18	; 0x06
    3ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    3aba:	9c 81       	ldd	r25, Y+4	; 0x04
    3abc:	fc 01       	movw	r30, r24
    3abe:	26 81       	ldd	r18, Z+6	; 0x06
    3ac0:	37 81       	ldd	r19, Z+7	; 0x07
    3ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ac6:	fc 01       	movw	r30, r24
    3ac8:	80 81       	ld	r24, Z
    3aca:	91 81       	ldd	r25, Z+1	; 0x01
    3acc:	28 17       	cp	r18, r24
    3ace:	39 07       	cpc	r19, r25
    3ad0:	a8 f4       	brcc	.+42     	; 0x3afc <prvCopyDataToQueue+0x16c>
    3ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad6:	fc 01       	movw	r30, r24
    3ad8:	22 81       	ldd	r18, Z+2	; 0x02
    3ada:	33 81       	ldd	r19, Z+3	; 0x03
    3adc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ade:	9c 81       	ldd	r25, Y+4	; 0x04
    3ae0:	fc 01       	movw	r30, r24
    3ae2:	84 8d       	ldd	r24, Z+28	; 0x1c
    3ae4:	88 2f       	mov	r24, r24
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	91 95       	neg	r25
    3aea:	81 95       	neg	r24
    3aec:	91 09       	sbc	r25, r1
    3aee:	28 0f       	add	r18, r24
    3af0:	39 1f       	adc	r19, r25
    3af2:	8b 81       	ldd	r24, Y+3	; 0x03
    3af4:	9c 81       	ldd	r25, Y+4	; 0x04
    3af6:	fc 01       	movw	r30, r24
    3af8:	37 83       	std	Z+7, r19	; 0x07
    3afa:	26 83       	std	Z+6, r18	; 0x06
    3afc:	8f 81       	ldd	r24, Y+7	; 0x07
    3afe:	82 30       	cpi	r24, 0x02	; 2
    3b00:	31 f4       	brne	.+12     	; 0x3b0e <prvCopyDataToQueue+0x17e>
    3b02:	8a 81       	ldd	r24, Y+2	; 0x02
    3b04:	88 23       	and	r24, r24
    3b06:	19 f0       	breq	.+6      	; 0x3b0e <prvCopyDataToQueue+0x17e>
    3b08:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0a:	81 50       	subi	r24, 0x01	; 1
    3b0c:	8a 83       	std	Y+2, r24	; 0x02
    3b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b10:	21 e0       	ldi	r18, 0x01	; 1
    3b12:	28 0f       	add	r18, r24
    3b14:	8b 81       	ldd	r24, Y+3	; 0x03
    3b16:	9c 81       	ldd	r25, Y+4	; 0x04
    3b18:	fc 01       	movw	r30, r24
    3b1a:	22 8f       	std	Z+26, r18	; 0x1a
    3b1c:	89 81       	ldd	r24, Y+1	; 0x01
    3b1e:	27 96       	adiw	r28, 0x07	; 7
    3b20:	0f b6       	in	r0, 0x3f	; 63
    3b22:	f8 94       	cli
    3b24:	de bf       	out	0x3e, r29	; 62
    3b26:	0f be       	out	0x3f, r0	; 63
    3b28:	cd bf       	out	0x3d, r28	; 61
    3b2a:	df 91       	pop	r29
    3b2c:	cf 91       	pop	r28
    3b2e:	08 95       	ret

00003b30 <prvCopyDataFromQueue>:
    3b30:	cf 93       	push	r28
    3b32:	df 93       	push	r29
    3b34:	00 d0       	rcall	.+0      	; 0x3b36 <prvCopyDataFromQueue+0x6>
    3b36:	00 d0       	rcall	.+0      	; 0x3b38 <prvCopyDataFromQueue+0x8>
    3b38:	cd b7       	in	r28, 0x3d	; 61
    3b3a:	de b7       	in	r29, 0x3e	; 62
    3b3c:	9a 83       	std	Y+2, r25	; 0x02
    3b3e:	89 83       	std	Y+1, r24	; 0x01
    3b40:	7c 83       	std	Y+4, r23	; 0x04
    3b42:	6b 83       	std	Y+3, r22	; 0x03
    3b44:	89 81       	ldd	r24, Y+1	; 0x01
    3b46:	9a 81       	ldd	r25, Y+2	; 0x02
    3b48:	fc 01       	movw	r30, r24
    3b4a:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b4c:	88 23       	and	r24, r24
    3b4e:	c9 f1       	breq	.+114    	; 0x3bc2 <prvCopyDataFromQueue+0x92>
    3b50:	89 81       	ldd	r24, Y+1	; 0x01
    3b52:	9a 81       	ldd	r25, Y+2	; 0x02
    3b54:	fc 01       	movw	r30, r24
    3b56:	26 81       	ldd	r18, Z+6	; 0x06
    3b58:	37 81       	ldd	r19, Z+7	; 0x07
    3b5a:	89 81       	ldd	r24, Y+1	; 0x01
    3b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b5e:	fc 01       	movw	r30, r24
    3b60:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b62:	88 2f       	mov	r24, r24
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	28 0f       	add	r18, r24
    3b68:	39 1f       	adc	r19, r25
    3b6a:	89 81       	ldd	r24, Y+1	; 0x01
    3b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b6e:	fc 01       	movw	r30, r24
    3b70:	37 83       	std	Z+7, r19	; 0x07
    3b72:	26 83       	std	Z+6, r18	; 0x06
    3b74:	89 81       	ldd	r24, Y+1	; 0x01
    3b76:	9a 81       	ldd	r25, Y+2	; 0x02
    3b78:	fc 01       	movw	r30, r24
    3b7a:	26 81       	ldd	r18, Z+6	; 0x06
    3b7c:	37 81       	ldd	r19, Z+7	; 0x07
    3b7e:	89 81       	ldd	r24, Y+1	; 0x01
    3b80:	9a 81       	ldd	r25, Y+2	; 0x02
    3b82:	fc 01       	movw	r30, r24
    3b84:	82 81       	ldd	r24, Z+2	; 0x02
    3b86:	93 81       	ldd	r25, Z+3	; 0x03
    3b88:	28 17       	cp	r18, r24
    3b8a:	39 07       	cpc	r19, r25
    3b8c:	50 f0       	brcs	.+20     	; 0x3ba2 <prvCopyDataFromQueue+0x72>
    3b8e:	89 81       	ldd	r24, Y+1	; 0x01
    3b90:	9a 81       	ldd	r25, Y+2	; 0x02
    3b92:	fc 01       	movw	r30, r24
    3b94:	20 81       	ld	r18, Z
    3b96:	31 81       	ldd	r19, Z+1	; 0x01
    3b98:	89 81       	ldd	r24, Y+1	; 0x01
    3b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b9c:	fc 01       	movw	r30, r24
    3b9e:	37 83       	std	Z+7, r19	; 0x07
    3ba0:	26 83       	std	Z+6, r18	; 0x06
    3ba2:	89 81       	ldd	r24, Y+1	; 0x01
    3ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba6:	fc 01       	movw	r30, r24
    3ba8:	84 8d       	ldd	r24, Z+28	; 0x1c
    3baa:	48 2f       	mov	r20, r24
    3bac:	50 e0       	ldi	r21, 0x00	; 0
    3bae:	89 81       	ldd	r24, Y+1	; 0x01
    3bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb2:	fc 01       	movw	r30, r24
    3bb4:	26 81       	ldd	r18, Z+6	; 0x06
    3bb6:	37 81       	ldd	r19, Z+7	; 0x07
    3bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bba:	9c 81       	ldd	r25, Y+4	; 0x04
    3bbc:	b9 01       	movw	r22, r18
    3bbe:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <memcpy>
    3bc2:	00 00       	nop
    3bc4:	0f 90       	pop	r0
    3bc6:	0f 90       	pop	r0
    3bc8:	0f 90       	pop	r0
    3bca:	0f 90       	pop	r0
    3bcc:	df 91       	pop	r29
    3bce:	cf 91       	pop	r28
    3bd0:	08 95       	ret

00003bd2 <prvUnlockQueue>:
    3bd2:	cf 93       	push	r28
    3bd4:	df 93       	push	r29
    3bd6:	00 d0       	rcall	.+0      	; 0x3bd8 <prvUnlockQueue+0x6>
    3bd8:	00 d0       	rcall	.+0      	; 0x3bda <prvUnlockQueue+0x8>
    3bda:	cd b7       	in	r28, 0x3d	; 61
    3bdc:	de b7       	in	r29, 0x3e	; 62
    3bde:	9c 83       	std	Y+4, r25	; 0x04
    3be0:	8b 83       	std	Y+3, r24	; 0x03
    3be2:	0f b6       	in	r0, 0x3f	; 63
    3be4:	f8 94       	cli
    3be6:	0f 92       	push	r0
    3be8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bea:	9c 81       	ldd	r25, Y+4	; 0x04
    3bec:	fc 01       	movw	r30, r24
    3bee:	86 8d       	ldd	r24, Z+30	; 0x1e
    3bf0:	89 83       	std	Y+1, r24	; 0x01
    3bf2:	12 c0       	rjmp	.+36     	; 0x3c18 <prvUnlockQueue+0x46>
    3bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    3bf8:	fc 01       	movw	r30, r24
    3bfa:	81 89       	ldd	r24, Z+17	; 0x11
    3bfc:	88 23       	and	r24, r24
    3bfe:	81 f0       	breq	.+32     	; 0x3c20 <prvUnlockQueue+0x4e>
    3c00:	8b 81       	ldd	r24, Y+3	; 0x03
    3c02:	9c 81       	ldd	r25, Y+4	; 0x04
    3c04:	41 96       	adiw	r24, 0x11	; 17
    3c06:	0e 94 d6 23 	call	0x47ac	; 0x47ac <xTaskRemoveFromEventList>
    3c0a:	88 23       	and	r24, r24
    3c0c:	11 f0       	breq	.+4      	; 0x3c12 <prvUnlockQueue+0x40>
    3c0e:	0e 94 c7 24 	call	0x498e	; 0x498e <vTaskMissedYield>
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
    3c14:	81 50       	subi	r24, 0x01	; 1
    3c16:	89 83       	std	Y+1, r24	; 0x01
    3c18:	89 81       	ldd	r24, Y+1	; 0x01
    3c1a:	18 16       	cp	r1, r24
    3c1c:	5c f3       	brlt	.-42     	; 0x3bf4 <prvUnlockQueue+0x22>
    3c1e:	01 c0       	rjmp	.+2      	; 0x3c22 <prvUnlockQueue+0x50>
    3c20:	00 00       	nop
    3c22:	8b 81       	ldd	r24, Y+3	; 0x03
    3c24:	9c 81       	ldd	r25, Y+4	; 0x04
    3c26:	2f ef       	ldi	r18, 0xFF	; 255
    3c28:	fc 01       	movw	r30, r24
    3c2a:	26 8f       	std	Z+30, r18	; 0x1e
    3c2c:	0f 90       	pop	r0
    3c2e:	0f be       	out	0x3f, r0	; 63
    3c30:	0f b6       	in	r0, 0x3f	; 63
    3c32:	f8 94       	cli
    3c34:	0f 92       	push	r0
    3c36:	8b 81       	ldd	r24, Y+3	; 0x03
    3c38:	9c 81       	ldd	r25, Y+4	; 0x04
    3c3a:	fc 01       	movw	r30, r24
    3c3c:	85 8d       	ldd	r24, Z+29	; 0x1d
    3c3e:	8a 83       	std	Y+2, r24	; 0x02
    3c40:	12 c0       	rjmp	.+36     	; 0x3c66 <prvUnlockQueue+0x94>
    3c42:	8b 81       	ldd	r24, Y+3	; 0x03
    3c44:	9c 81       	ldd	r25, Y+4	; 0x04
    3c46:	fc 01       	movw	r30, r24
    3c48:	80 85       	ldd	r24, Z+8	; 0x08
    3c4a:	88 23       	and	r24, r24
    3c4c:	81 f0       	breq	.+32     	; 0x3c6e <prvUnlockQueue+0x9c>
    3c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c50:	9c 81       	ldd	r25, Y+4	; 0x04
    3c52:	08 96       	adiw	r24, 0x08	; 8
    3c54:	0e 94 d6 23 	call	0x47ac	; 0x47ac <xTaskRemoveFromEventList>
    3c58:	88 23       	and	r24, r24
    3c5a:	11 f0       	breq	.+4      	; 0x3c60 <prvUnlockQueue+0x8e>
    3c5c:	0e 94 c7 24 	call	0x498e	; 0x498e <vTaskMissedYield>
    3c60:	8a 81       	ldd	r24, Y+2	; 0x02
    3c62:	81 50       	subi	r24, 0x01	; 1
    3c64:	8a 83       	std	Y+2, r24	; 0x02
    3c66:	8a 81       	ldd	r24, Y+2	; 0x02
    3c68:	18 16       	cp	r1, r24
    3c6a:	5c f3       	brlt	.-42     	; 0x3c42 <prvUnlockQueue+0x70>
    3c6c:	01 c0       	rjmp	.+2      	; 0x3c70 <prvUnlockQueue+0x9e>
    3c6e:	00 00       	nop
    3c70:	8b 81       	ldd	r24, Y+3	; 0x03
    3c72:	9c 81       	ldd	r25, Y+4	; 0x04
    3c74:	2f ef       	ldi	r18, 0xFF	; 255
    3c76:	fc 01       	movw	r30, r24
    3c78:	25 8f       	std	Z+29, r18	; 0x1d
    3c7a:	0f 90       	pop	r0
    3c7c:	0f be       	out	0x3f, r0	; 63
    3c7e:	00 00       	nop
    3c80:	0f 90       	pop	r0
    3c82:	0f 90       	pop	r0
    3c84:	0f 90       	pop	r0
    3c86:	0f 90       	pop	r0
    3c88:	df 91       	pop	r29
    3c8a:	cf 91       	pop	r28
    3c8c:	08 95       	ret

00003c8e <prvIsQueueEmpty>:
    3c8e:	cf 93       	push	r28
    3c90:	df 93       	push	r29
    3c92:	00 d0       	rcall	.+0      	; 0x3c94 <prvIsQueueEmpty+0x6>
    3c94:	1f 92       	push	r1
    3c96:	cd b7       	in	r28, 0x3d	; 61
    3c98:	de b7       	in	r29, 0x3e	; 62
    3c9a:	9b 83       	std	Y+3, r25	; 0x03
    3c9c:	8a 83       	std	Y+2, r24	; 0x02
    3c9e:	0f b6       	in	r0, 0x3f	; 63
    3ca0:	f8 94       	cli
    3ca2:	0f 92       	push	r0
    3ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ca8:	fc 01       	movw	r30, r24
    3caa:	82 8d       	ldd	r24, Z+26	; 0x1a
    3cac:	88 23       	and	r24, r24
    3cae:	19 f4       	brne	.+6      	; 0x3cb6 <prvIsQueueEmpty+0x28>
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	89 83       	std	Y+1, r24	; 0x01
    3cb4:	01 c0       	rjmp	.+2      	; 0x3cb8 <prvIsQueueEmpty+0x2a>
    3cb6:	19 82       	std	Y+1, r1	; 0x01
    3cb8:	0f 90       	pop	r0
    3cba:	0f be       	out	0x3f, r0	; 63
    3cbc:	89 81       	ldd	r24, Y+1	; 0x01
    3cbe:	0f 90       	pop	r0
    3cc0:	0f 90       	pop	r0
    3cc2:	0f 90       	pop	r0
    3cc4:	df 91       	pop	r29
    3cc6:	cf 91       	pop	r28
    3cc8:	08 95       	ret

00003cca <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    3cca:	cf 93       	push	r28
    3ccc:	df 93       	push	r29
    3cce:	00 d0       	rcall	.+0      	; 0x3cd0 <prvIsQueueFull+0x6>
    3cd0:	1f 92       	push	r1
    3cd2:	cd b7       	in	r28, 0x3d	; 61
    3cd4:	de b7       	in	r29, 0x3e	; 62
    3cd6:	9b 83       	std	Y+3, r25	; 0x03
    3cd8:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3cda:	0f b6       	in	r0, 0x3f	; 63
    3cdc:	f8 94       	cli
    3cde:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    3ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ce4:	fc 01       	movw	r30, r24
    3ce6:	22 8d       	ldd	r18, Z+26	; 0x1a
    3ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cea:	9b 81       	ldd	r25, Y+3	; 0x03
    3cec:	fc 01       	movw	r30, r24
    3cee:	83 8d       	ldd	r24, Z+27	; 0x1b
    3cf0:	28 17       	cp	r18, r24
    3cf2:	19 f4       	brne	.+6      	; 0x3cfa <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	89 83       	std	Y+1, r24	; 0x01
    3cf8:	01 c0       	rjmp	.+2      	; 0x3cfc <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    3cfa:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    3cfc:	0f 90       	pop	r0
    3cfe:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3d00:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d02:	0f 90       	pop	r0
    3d04:	0f 90       	pop	r0
    3d06:	0f 90       	pop	r0
    3d08:	df 91       	pop	r29
    3d0a:	cf 91       	pop	r28
    3d0c:	08 95       	ret

00003d0e <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    3d0e:	8f 92       	push	r8
    3d10:	9f 92       	push	r9
    3d12:	af 92       	push	r10
    3d14:	bf 92       	push	r11
    3d16:	cf 92       	push	r12
    3d18:	df 92       	push	r13
    3d1a:	ef 92       	push	r14
    3d1c:	ff 92       	push	r15
    3d1e:	0f 93       	push	r16
    3d20:	1f 93       	push	r17
    3d22:	cf 93       	push	r28
    3d24:	df 93       	push	r29
    3d26:	cd b7       	in	r28, 0x3d	; 61
    3d28:	de b7       	in	r29, 0x3e	; 62
    3d2a:	60 97       	sbiw	r28, 0x10	; 16
    3d2c:	0f b6       	in	r0, 0x3f	; 63
    3d2e:	f8 94       	cli
    3d30:	de bf       	out	0x3e, r29	; 62
    3d32:	0f be       	out	0x3f, r0	; 63
    3d34:	cd bf       	out	0x3d, r28	; 61
    3d36:	9f 83       	std	Y+7, r25	; 0x07
    3d38:	8e 83       	std	Y+6, r24	; 0x06
    3d3a:	79 87       	std	Y+9, r23	; 0x09
    3d3c:	68 87       	std	Y+8, r22	; 0x08
    3d3e:	5b 87       	std	Y+11, r21	; 0x0b
    3d40:	4a 87       	std	Y+10, r20	; 0x0a
    3d42:	3d 87       	std	Y+13, r19	; 0x0d
    3d44:	2c 87       	std	Y+12, r18	; 0x0c
    3d46:	0e 87       	std	Y+14, r16	; 0x0e
    3d48:	f8 8a       	std	Y+16, r15	; 0x10
    3d4a:	ef 86       	std	Y+15, r14	; 0x0f
    3d4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d50:	0e 94 d7 17 	call	0x2fae	; 0x2fae <pvPortMalloc>
    3d54:	9d 83       	std	Y+5, r25	; 0x05
    3d56:	8c 83       	std	Y+4, r24	; 0x04
    3d58:	8c 81       	ldd	r24, Y+4	; 0x04
    3d5a:	9d 81       	ldd	r25, Y+5	; 0x05
    3d5c:	89 2b       	or	r24, r25
    3d5e:	b9 f0       	breq	.+46     	; 0x3d8e <xTaskCreate+0x80>
    3d60:	8c e2       	ldi	r24, 0x2C	; 44
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	0e 94 d7 17 	call	0x2fae	; 0x2fae <pvPortMalloc>
    3d68:	9a 83       	std	Y+2, r25	; 0x02
    3d6a:	89 83       	std	Y+1, r24	; 0x01
    3d6c:	89 81       	ldd	r24, Y+1	; 0x01
    3d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d70:	89 2b       	or	r24, r25
    3d72:	41 f0       	breq	.+16     	; 0x3d84 <xTaskCreate+0x76>
    3d74:	89 81       	ldd	r24, Y+1	; 0x01
    3d76:	9a 81       	ldd	r25, Y+2	; 0x02
    3d78:	2c 81       	ldd	r18, Y+4	; 0x04
    3d7a:	3d 81       	ldd	r19, Y+5	; 0x05
    3d7c:	fc 01       	movw	r30, r24
    3d7e:	30 8f       	std	Z+24, r19	; 0x18
    3d80:	27 8b       	std	Z+23, r18	; 0x17
    3d82:	07 c0       	rjmp	.+14     	; 0x3d92 <xTaskCreate+0x84>
    3d84:	8c 81       	ldd	r24, Y+4	; 0x04
    3d86:	9d 81       	ldd	r25, Y+5	; 0x05
    3d88:	0e 94 cc 18 	call	0x3198	; 0x3198 <vPortFree>
    3d8c:	02 c0       	rjmp	.+4      	; 0x3d92 <xTaskCreate+0x84>
    3d8e:	1a 82       	std	Y+2, r1	; 0x02
    3d90:	19 82       	std	Y+1, r1	; 0x01
    3d92:	89 81       	ldd	r24, Y+1	; 0x01
    3d94:	9a 81       	ldd	r25, Y+2	; 0x02
    3d96:	89 2b       	or	r24, r25
    3d98:	09 f1       	breq	.+66     	; 0x3ddc <xTaskCreate+0xce>
    3d9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d9e:	cc 01       	movw	r24, r24
    3da0:	a0 e0       	ldi	r26, 0x00	; 0
    3da2:	b0 e0       	ldi	r27, 0x00	; 0
    3da4:	09 81       	ldd	r16, Y+1	; 0x01
    3da6:	1a 81       	ldd	r17, Y+2	; 0x02
    3da8:	4f 85       	ldd	r20, Y+15	; 0x0f
    3daa:	58 89       	ldd	r21, Y+16	; 0x10
    3dac:	2c 85       	ldd	r18, Y+12	; 0x0c
    3dae:	3d 85       	ldd	r19, Y+13	; 0x0d
    3db0:	68 85       	ldd	r22, Y+8	; 0x08
    3db2:	79 85       	ldd	r23, Y+9	; 0x09
    3db4:	ee 81       	ldd	r30, Y+6	; 0x06
    3db6:	ff 81       	ldd	r31, Y+7	; 0x07
    3db8:	81 2c       	mov	r8, r1
    3dba:	91 2c       	mov	r9, r1
    3dbc:	58 01       	movw	r10, r16
    3dbe:	6a 01       	movw	r12, r20
    3dc0:	ee 84       	ldd	r14, Y+14	; 0x0e
    3dc2:	89 01       	movw	r16, r18
    3dc4:	9c 01       	movw	r18, r24
    3dc6:	ad 01       	movw	r20, r26
    3dc8:	cf 01       	movw	r24, r30
    3dca:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <prvInitialiseNewTask>
    3dce:	89 81       	ldd	r24, Y+1	; 0x01
    3dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    3dd2:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <prvAddNewTaskToReadyList>
    3dd6:	81 e0       	ldi	r24, 0x01	; 1
    3dd8:	8b 83       	std	Y+3, r24	; 0x03
    3dda:	02 c0       	rjmp	.+4      	; 0x3de0 <xTaskCreate+0xd2>
    3ddc:	8f ef       	ldi	r24, 0xFF	; 255
    3dde:	8b 83       	std	Y+3, r24	; 0x03
    3de0:	8b 81       	ldd	r24, Y+3	; 0x03
    3de2:	60 96       	adiw	r28, 0x10	; 16
    3de4:	0f b6       	in	r0, 0x3f	; 63
    3de6:	f8 94       	cli
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	cd bf       	out	0x3d, r28	; 61
    3dee:	df 91       	pop	r29
    3df0:	cf 91       	pop	r28
    3df2:	1f 91       	pop	r17
    3df4:	0f 91       	pop	r16
    3df6:	ff 90       	pop	r15
    3df8:	ef 90       	pop	r14
    3dfa:	df 90       	pop	r13
    3dfc:	cf 90       	pop	r12
    3dfe:	bf 90       	pop	r11
    3e00:	af 90       	pop	r10
    3e02:	9f 90       	pop	r9
    3e04:	8f 90       	pop	r8
    3e06:	08 95       	ret

00003e08 <prvInitialiseNewTask>:
    3e08:	8f 92       	push	r8
    3e0a:	9f 92       	push	r9
    3e0c:	af 92       	push	r10
    3e0e:	bf 92       	push	r11
    3e10:	cf 92       	push	r12
    3e12:	df 92       	push	r13
    3e14:	ef 92       	push	r14
    3e16:	0f 93       	push	r16
    3e18:	1f 93       	push	r17
    3e1a:	cf 93       	push	r28
    3e1c:	df 93       	push	r29
    3e1e:	cd b7       	in	r28, 0x3d	; 61
    3e20:	de b7       	in	r29, 0x3e	; 62
    3e22:	64 97       	sbiw	r28, 0x14	; 20
    3e24:	0f b6       	in	r0, 0x3f	; 63
    3e26:	f8 94       	cli
    3e28:	de bf       	out	0x3e, r29	; 62
    3e2a:	0f be       	out	0x3f, r0	; 63
    3e2c:	cd bf       	out	0x3d, r28	; 61
    3e2e:	9d 83       	std	Y+5, r25	; 0x05
    3e30:	8c 83       	std	Y+4, r24	; 0x04
    3e32:	7f 83       	std	Y+7, r23	; 0x07
    3e34:	6e 83       	std	Y+6, r22	; 0x06
    3e36:	28 87       	std	Y+8, r18	; 0x08
    3e38:	39 87       	std	Y+9, r19	; 0x09
    3e3a:	4a 87       	std	Y+10, r20	; 0x0a
    3e3c:	5b 87       	std	Y+11, r21	; 0x0b
    3e3e:	1d 87       	std	Y+13, r17	; 0x0d
    3e40:	0c 87       	std	Y+12, r16	; 0x0c
    3e42:	ee 86       	std	Y+14, r14	; 0x0e
    3e44:	d8 8a       	std	Y+16, r13	; 0x10
    3e46:	cf 86       	std	Y+15, r12	; 0x0f
    3e48:	ba 8a       	std	Y+18, r11	; 0x12
    3e4a:	a9 8a       	std	Y+17, r10	; 0x11
    3e4c:	9c 8a       	std	Y+20, r9	; 0x14
    3e4e:	8b 8a       	std	Y+19, r8	; 0x13
    3e50:	28 85       	ldd	r18, Y+8	; 0x08
    3e52:	39 85       	ldd	r19, Y+9	; 0x09
    3e54:	89 89       	ldd	r24, Y+17	; 0x11
    3e56:	9a 89       	ldd	r25, Y+18	; 0x12
    3e58:	fc 01       	movw	r30, r24
    3e5a:	87 89       	ldd	r24, Z+23	; 0x17
    3e5c:	90 8d       	ldd	r25, Z+24	; 0x18
    3e5e:	a9 01       	movw	r20, r18
    3e60:	65 ea       	ldi	r22, 0xA5	; 165
    3e62:	70 e0       	ldi	r23, 0x00	; 0
    3e64:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <memset>
    3e68:	89 89       	ldd	r24, Y+17	; 0x11
    3e6a:	9a 89       	ldd	r25, Y+18	; 0x12
    3e6c:	fc 01       	movw	r30, r24
    3e6e:	27 89       	ldd	r18, Z+23	; 0x17
    3e70:	30 8d       	ldd	r19, Z+24	; 0x18
    3e72:	88 85       	ldd	r24, Y+8	; 0x08
    3e74:	99 85       	ldd	r25, Y+9	; 0x09
    3e76:	01 97       	sbiw	r24, 0x01	; 1
    3e78:	82 0f       	add	r24, r18
    3e7a:	93 1f       	adc	r25, r19
    3e7c:	9b 83       	std	Y+3, r25	; 0x03
    3e7e:	8a 83       	std	Y+2, r24	; 0x02
    3e80:	19 82       	std	Y+1, r1	; 0x01
    3e82:	21 c0       	rjmp	.+66     	; 0x3ec6 <prvInitialiseNewTask+0xbe>
    3e84:	89 81       	ldd	r24, Y+1	; 0x01
    3e86:	88 2f       	mov	r24, r24
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	29 81       	ldd	r18, Y+1	; 0x01
    3e8c:	22 2f       	mov	r18, r18
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	4e 81       	ldd	r20, Y+6	; 0x06
    3e92:	5f 81       	ldd	r21, Y+7	; 0x07
    3e94:	24 0f       	add	r18, r20
    3e96:	35 1f       	adc	r19, r21
    3e98:	f9 01       	movw	r30, r18
    3e9a:	40 81       	ld	r20, Z
    3e9c:	29 89       	ldd	r18, Y+17	; 0x11
    3e9e:	3a 89       	ldd	r19, Y+18	; 0x12
    3ea0:	82 0f       	add	r24, r18
    3ea2:	93 1f       	adc	r25, r19
    3ea4:	49 96       	adiw	r24, 0x19	; 25
    3ea6:	fc 01       	movw	r30, r24
    3ea8:	40 83       	st	Z, r20
    3eaa:	89 81       	ldd	r24, Y+1	; 0x01
    3eac:	88 2f       	mov	r24, r24
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	2e 81       	ldd	r18, Y+6	; 0x06
    3eb2:	3f 81       	ldd	r19, Y+7	; 0x07
    3eb4:	82 0f       	add	r24, r18
    3eb6:	93 1f       	adc	r25, r19
    3eb8:	fc 01       	movw	r30, r24
    3eba:	80 81       	ld	r24, Z
    3ebc:	88 23       	and	r24, r24
    3ebe:	39 f0       	breq	.+14     	; 0x3ece <prvInitialiseNewTask+0xc6>
    3ec0:	89 81       	ldd	r24, Y+1	; 0x01
    3ec2:	8f 5f       	subi	r24, 0xFF	; 255
    3ec4:	89 83       	std	Y+1, r24	; 0x01
    3ec6:	89 81       	ldd	r24, Y+1	; 0x01
    3ec8:	88 30       	cpi	r24, 0x08	; 8
    3eca:	e0 f2       	brcs	.-72     	; 0x3e84 <prvInitialiseNewTask+0x7c>
    3ecc:	01 c0       	rjmp	.+2      	; 0x3ed0 <prvInitialiseNewTask+0xc8>
    3ece:	00 00       	nop
    3ed0:	89 89       	ldd	r24, Y+17	; 0x11
    3ed2:	9a 89       	ldd	r25, Y+18	; 0x12
    3ed4:	fc 01       	movw	r30, r24
    3ed6:	10 a2       	std	Z+32, r1	; 0x20
    3ed8:	8e 85       	ldd	r24, Y+14	; 0x0e
    3eda:	84 30       	cpi	r24, 0x04	; 4
    3edc:	10 f0       	brcs	.+4      	; 0x3ee2 <prvInitialiseNewTask+0xda>
    3ede:	83 e0       	ldi	r24, 0x03	; 3
    3ee0:	8e 87       	std	Y+14, r24	; 0x0e
    3ee2:	89 89       	ldd	r24, Y+17	; 0x11
    3ee4:	9a 89       	ldd	r25, Y+18	; 0x12
    3ee6:	2e 85       	ldd	r18, Y+14	; 0x0e
    3ee8:	fc 01       	movw	r30, r24
    3eea:	26 8b       	std	Z+22, r18	; 0x16
    3eec:	89 89       	ldd	r24, Y+17	; 0x11
    3eee:	9a 89       	ldd	r25, Y+18	; 0x12
    3ef0:	2e 85       	ldd	r18, Y+14	; 0x0e
    3ef2:	fc 01       	movw	r30, r24
    3ef4:	23 a3       	std	Z+35, r18	; 0x23
    3ef6:	89 89       	ldd	r24, Y+17	; 0x11
    3ef8:	9a 89       	ldd	r25, Y+18	; 0x12
    3efa:	fc 01       	movw	r30, r24
    3efc:	14 a2       	std	Z+36, r1	; 0x24
    3efe:	89 89       	ldd	r24, Y+17	; 0x11
    3f00:	9a 89       	ldd	r25, Y+18	; 0x12
    3f02:	02 96       	adiw	r24, 0x02	; 2
    3f04:	0e 94 3f 11 	call	0x227e	; 0x227e <vListInitialiseItem>
    3f08:	89 89       	ldd	r24, Y+17	; 0x11
    3f0a:	9a 89       	ldd	r25, Y+18	; 0x12
    3f0c:	0c 96       	adiw	r24, 0x0c	; 12
    3f0e:	0e 94 3f 11 	call	0x227e	; 0x227e <vListInitialiseItem>
    3f12:	89 89       	ldd	r24, Y+17	; 0x11
    3f14:	9a 89       	ldd	r25, Y+18	; 0x12
    3f16:	29 89       	ldd	r18, Y+17	; 0x11
    3f18:	3a 89       	ldd	r19, Y+18	; 0x12
    3f1a:	fc 01       	movw	r30, r24
    3f1c:	31 87       	std	Z+9, r19	; 0x09
    3f1e:	20 87       	std	Z+8, r18	; 0x08
    3f20:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f22:	88 2f       	mov	r24, r24
    3f24:	90 e0       	ldi	r25, 0x00	; 0
    3f26:	24 e0       	ldi	r18, 0x04	; 4
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	28 1b       	sub	r18, r24
    3f2c:	39 0b       	sbc	r19, r25
    3f2e:	89 89       	ldd	r24, Y+17	; 0x11
    3f30:	9a 89       	ldd	r25, Y+18	; 0x12
    3f32:	fc 01       	movw	r30, r24
    3f34:	35 87       	std	Z+13, r19	; 0x0d
    3f36:	24 87       	std	Z+12, r18	; 0x0c
    3f38:	89 89       	ldd	r24, Y+17	; 0x11
    3f3a:	9a 89       	ldd	r25, Y+18	; 0x12
    3f3c:	29 89       	ldd	r18, Y+17	; 0x11
    3f3e:	3a 89       	ldd	r19, Y+18	; 0x12
    3f40:	fc 01       	movw	r30, r24
    3f42:	33 8b       	std	Z+19, r19	; 0x13
    3f44:	22 8b       	std	Z+18, r18	; 0x12
    3f46:	89 89       	ldd	r24, Y+17	; 0x11
    3f48:	9a 89       	ldd	r25, Y+18	; 0x12
    3f4a:	fc 01       	movw	r30, r24
    3f4c:	16 a2       	std	Z+38, r1	; 0x26
    3f4e:	15 a2       	std	Z+37, r1	; 0x25
    3f50:	89 89       	ldd	r24, Y+17	; 0x11
    3f52:	9a 89       	ldd	r25, Y+18	; 0x12
    3f54:	fc 01       	movw	r30, r24
    3f56:	17 a2       	std	Z+39, r1	; 0x27
    3f58:	10 a6       	std	Z+40, r1	; 0x28
    3f5a:	11 a6       	std	Z+41, r1	; 0x29
    3f5c:	12 a6       	std	Z+42, r1	; 0x2a
    3f5e:	89 89       	ldd	r24, Y+17	; 0x11
    3f60:	9a 89       	ldd	r25, Y+18	; 0x12
    3f62:	fc 01       	movw	r30, r24
    3f64:	13 a6       	std	Z+43, r1	; 0x2b
    3f66:	4c 85       	ldd	r20, Y+12	; 0x0c
    3f68:	5d 85       	ldd	r21, Y+13	; 0x0d
    3f6a:	2c 81       	ldd	r18, Y+4	; 0x04
    3f6c:	3d 81       	ldd	r19, Y+5	; 0x05
    3f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f70:	9b 81       	ldd	r25, Y+3	; 0x03
    3f72:	b9 01       	movw	r22, r18
    3f74:	0e 94 6f 12 	call	0x24de	; 0x24de <pxPortInitialiseStack>
    3f78:	9c 01       	movw	r18, r24
    3f7a:	89 89       	ldd	r24, Y+17	; 0x11
    3f7c:	9a 89       	ldd	r25, Y+18	; 0x12
    3f7e:	fc 01       	movw	r30, r24
    3f80:	31 83       	std	Z+1, r19	; 0x01
    3f82:	20 83       	st	Z, r18
    3f84:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f86:	98 89       	ldd	r25, Y+16	; 0x10
    3f88:	89 2b       	or	r24, r25
    3f8a:	39 f0       	breq	.+14     	; 0x3f9a <prvInitialiseNewTask+0x192>
    3f8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f8e:	98 89       	ldd	r25, Y+16	; 0x10
    3f90:	29 89       	ldd	r18, Y+17	; 0x11
    3f92:	3a 89       	ldd	r19, Y+18	; 0x12
    3f94:	fc 01       	movw	r30, r24
    3f96:	31 83       	std	Z+1, r19	; 0x01
    3f98:	20 83       	st	Z, r18
    3f9a:	00 00       	nop
    3f9c:	64 96       	adiw	r28, 0x14	; 20
    3f9e:	0f b6       	in	r0, 0x3f	; 63
    3fa0:	f8 94       	cli
    3fa2:	de bf       	out	0x3e, r29	; 62
    3fa4:	0f be       	out	0x3f, r0	; 63
    3fa6:	cd bf       	out	0x3d, r28	; 61
    3fa8:	df 91       	pop	r29
    3faa:	cf 91       	pop	r28
    3fac:	1f 91       	pop	r17
    3fae:	0f 91       	pop	r16
    3fb0:	ef 90       	pop	r14
    3fb2:	df 90       	pop	r13
    3fb4:	cf 90       	pop	r12
    3fb6:	bf 90       	pop	r11
    3fb8:	af 90       	pop	r10
    3fba:	9f 90       	pop	r9
    3fbc:	8f 90       	pop	r8
    3fbe:	08 95       	ret

00003fc0 <prvAddNewTaskToReadyList>:
    3fc0:	cf 93       	push	r28
    3fc2:	df 93       	push	r29
    3fc4:	00 d0       	rcall	.+0      	; 0x3fc6 <prvAddNewTaskToReadyList+0x6>
    3fc6:	cd b7       	in	r28, 0x3d	; 61
    3fc8:	de b7       	in	r29, 0x3e	; 62
    3fca:	9a 83       	std	Y+2, r25	; 0x02
    3fcc:	89 83       	std	Y+1, r24	; 0x01
    3fce:	0f b6       	in	r0, 0x3f	; 63
    3fd0:	f8 94       	cli
    3fd2:	0f 92       	push	r0
    3fd4:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <uxCurrentNumberOfTasks>
    3fd8:	8f 5f       	subi	r24, 0xFF	; 255
    3fda:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <uxCurrentNumberOfTasks>
    3fde:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    3fe2:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    3fe6:	89 2b       	or	r24, r25
    3fe8:	69 f4       	brne	.+26     	; 0x4004 <prvAddNewTaskToReadyList+0x44>
    3fea:	89 81       	ldd	r24, Y+1	; 0x01
    3fec:	9a 81       	ldd	r25, Y+2	; 0x02
    3fee:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <pxCurrentTCB+0x1>
    3ff2:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <pxCurrentTCB>
    3ff6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <uxCurrentNumberOfTasks>
    3ffa:	81 30       	cpi	r24, 0x01	; 1
    3ffc:	c9 f4       	brne	.+50     	; 0x4030 <prvAddNewTaskToReadyList+0x70>
    3ffe:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <prvInitialiseTaskLists>
    4002:	16 c0       	rjmp	.+44     	; 0x4030 <prvAddNewTaskToReadyList+0x70>
    4004:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <xSchedulerRunning>
    4008:	88 23       	and	r24, r24
    400a:	91 f4       	brne	.+36     	; 0x4030 <prvAddNewTaskToReadyList+0x70>
    400c:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4010:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4014:	fc 01       	movw	r30, r24
    4016:	26 89       	ldd	r18, Z+22	; 0x16
    4018:	89 81       	ldd	r24, Y+1	; 0x01
    401a:	9a 81       	ldd	r25, Y+2	; 0x02
    401c:	fc 01       	movw	r30, r24
    401e:	86 89       	ldd	r24, Z+22	; 0x16
    4020:	82 17       	cp	r24, r18
    4022:	30 f0       	brcs	.+12     	; 0x4030 <prvAddNewTaskToReadyList+0x70>
    4024:	89 81       	ldd	r24, Y+1	; 0x01
    4026:	9a 81       	ldd	r25, Y+2	; 0x02
    4028:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <pxCurrentTCB+0x1>
    402c:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <pxCurrentTCB>
    4030:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <uxTaskNumber>
    4034:	8f 5f       	subi	r24, 0xFF	; 255
    4036:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <uxTaskNumber>
    403a:	20 91 1d 08 	lds	r18, 0x081D	; 0x80081d <uxTaskNumber>
    403e:	89 81       	ldd	r24, Y+1	; 0x01
    4040:	9a 81       	ldd	r25, Y+2	; 0x02
    4042:	fc 01       	movw	r30, r24
    4044:	21 a3       	std	Z+33, r18	; 0x21
    4046:	89 81       	ldd	r24, Y+1	; 0x01
    4048:	9a 81       	ldd	r25, Y+2	; 0x02
    404a:	fc 01       	movw	r30, r24
    404c:	96 89       	ldd	r25, Z+22	; 0x16
    404e:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <uxTopReadyPriority>
    4052:	89 17       	cp	r24, r25
    4054:	30 f4       	brcc	.+12     	; 0x4062 <prvAddNewTaskToReadyList+0xa2>
    4056:	89 81       	ldd	r24, Y+1	; 0x01
    4058:	9a 81       	ldd	r25, Y+2	; 0x02
    405a:	fc 01       	movw	r30, r24
    405c:	86 89       	ldd	r24, Z+22	; 0x16
    405e:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <uxTopReadyPriority>
    4062:	89 81       	ldd	r24, Y+1	; 0x01
    4064:	9a 81       	ldd	r25, Y+2	; 0x02
    4066:	ac 01       	movw	r20, r24
    4068:	4e 5f       	subi	r20, 0xFE	; 254
    406a:	5f 4f       	sbci	r21, 0xFF	; 255
    406c:	89 81       	ldd	r24, Y+1	; 0x01
    406e:	9a 81       	ldd	r25, Y+2	; 0x02
    4070:	fc 01       	movw	r30, r24
    4072:	86 89       	ldd	r24, Z+22	; 0x16
    4074:	28 2f       	mov	r18, r24
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	c9 01       	movw	r24, r18
    407a:	88 0f       	add	r24, r24
    407c:	99 1f       	adc	r25, r25
    407e:	88 0f       	add	r24, r24
    4080:	99 1f       	adc	r25, r25
    4082:	88 0f       	add	r24, r24
    4084:	99 1f       	adc	r25, r25
    4086:	82 0f       	add	r24, r18
    4088:	93 1f       	adc	r25, r19
    408a:	88 53       	subi	r24, 0x38	; 56
    408c:	98 4f       	sbci	r25, 0xF8	; 248
    408e:	ba 01       	movw	r22, r20
    4090:	0e 94 51 11 	call	0x22a2	; 0x22a2 <vListInsertEnd>
    4094:	0f 90       	pop	r0
    4096:	0f be       	out	0x3f, r0	; 63
    4098:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <xSchedulerRunning>
    409c:	88 23       	and	r24, r24
    409e:	71 f0       	breq	.+28     	; 0x40bc <prvAddNewTaskToReadyList+0xfc>
    40a0:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    40a4:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    40a8:	fc 01       	movw	r30, r24
    40aa:	26 89       	ldd	r18, Z+22	; 0x16
    40ac:	89 81       	ldd	r24, Y+1	; 0x01
    40ae:	9a 81       	ldd	r25, Y+2	; 0x02
    40b0:	fc 01       	movw	r30, r24
    40b2:	86 89       	ldd	r24, Z+22	; 0x16
    40b4:	28 17       	cp	r18, r24
    40b6:	10 f4       	brcc	.+4      	; 0x40bc <prvAddNewTaskToReadyList+0xfc>
    40b8:	0e 94 4d 14 	call	0x289a	; 0x289a <vPortYield>
    40bc:	00 00       	nop
    40be:	0f 90       	pop	r0
    40c0:	0f 90       	pop	r0
    40c2:	df 91       	pop	r29
    40c4:	cf 91       	pop	r28
    40c6:	08 95       	ret

000040c8 <vTaskDelayUntil>:
    40c8:	cf 93       	push	r28
    40ca:	df 93       	push	r29
    40cc:	cd b7       	in	r28, 0x3d	; 61
    40ce:	de b7       	in	r29, 0x3e	; 62
    40d0:	2a 97       	sbiw	r28, 0x0a	; 10
    40d2:	0f b6       	in	r0, 0x3f	; 63
    40d4:	f8 94       	cli
    40d6:	de bf       	out	0x3e, r29	; 62
    40d8:	0f be       	out	0x3f, r0	; 63
    40da:	cd bf       	out	0x3d, r28	; 61
    40dc:	98 87       	std	Y+8, r25	; 0x08
    40de:	8f 83       	std	Y+7, r24	; 0x07
    40e0:	7a 87       	std	Y+10, r23	; 0x0a
    40e2:	69 87       	std	Y+9, r22	; 0x09
    40e4:	19 82       	std	Y+1, r1	; 0x01
    40e6:	0e 94 36 21 	call	0x426c	; 0x426c <vTaskSuspendAll>
    40ea:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <xTickCount>
    40ee:	90 91 17 08 	lds	r25, 0x0817	; 0x800817 <xTickCount+0x1>
    40f2:	9b 83       	std	Y+3, r25	; 0x03
    40f4:	8a 83       	std	Y+2, r24	; 0x02
    40f6:	8f 81       	ldd	r24, Y+7	; 0x07
    40f8:	98 85       	ldd	r25, Y+8	; 0x08
    40fa:	fc 01       	movw	r30, r24
    40fc:	20 81       	ld	r18, Z
    40fe:	31 81       	ldd	r19, Z+1	; 0x01
    4100:	89 85       	ldd	r24, Y+9	; 0x09
    4102:	9a 85       	ldd	r25, Y+10	; 0x0a
    4104:	82 0f       	add	r24, r18
    4106:	93 1f       	adc	r25, r19
    4108:	9d 83       	std	Y+5, r25	; 0x05
    410a:	8c 83       	std	Y+4, r24	; 0x04
    410c:	8f 81       	ldd	r24, Y+7	; 0x07
    410e:	98 85       	ldd	r25, Y+8	; 0x08
    4110:	fc 01       	movw	r30, r24
    4112:	20 81       	ld	r18, Z
    4114:	31 81       	ldd	r19, Z+1	; 0x01
    4116:	8a 81       	ldd	r24, Y+2	; 0x02
    4118:	9b 81       	ldd	r25, Y+3	; 0x03
    411a:	82 17       	cp	r24, r18
    411c:	93 07       	cpc	r25, r19
    411e:	a0 f4       	brcc	.+40     	; 0x4148 <vTaskDelayUntil+0x80>
    4120:	8f 81       	ldd	r24, Y+7	; 0x07
    4122:	98 85       	ldd	r25, Y+8	; 0x08
    4124:	fc 01       	movw	r30, r24
    4126:	20 81       	ld	r18, Z
    4128:	31 81       	ldd	r19, Z+1	; 0x01
    412a:	8c 81       	ldd	r24, Y+4	; 0x04
    412c:	9d 81       	ldd	r25, Y+5	; 0x05
    412e:	82 17       	cp	r24, r18
    4130:	93 07       	cpc	r25, r19
    4132:	e8 f4       	brcc	.+58     	; 0x416e <vTaskDelayUntil+0xa6>
    4134:	2c 81       	ldd	r18, Y+4	; 0x04
    4136:	3d 81       	ldd	r19, Y+5	; 0x05
    4138:	8a 81       	ldd	r24, Y+2	; 0x02
    413a:	9b 81       	ldd	r25, Y+3	; 0x03
    413c:	82 17       	cp	r24, r18
    413e:	93 07       	cpc	r25, r19
    4140:	b0 f4       	brcc	.+44     	; 0x416e <vTaskDelayUntil+0xa6>
    4142:	81 e0       	ldi	r24, 0x01	; 1
    4144:	89 83       	std	Y+1, r24	; 0x01
    4146:	13 c0       	rjmp	.+38     	; 0x416e <vTaskDelayUntil+0xa6>
    4148:	8f 81       	ldd	r24, Y+7	; 0x07
    414a:	98 85       	ldd	r25, Y+8	; 0x08
    414c:	fc 01       	movw	r30, r24
    414e:	20 81       	ld	r18, Z
    4150:	31 81       	ldd	r19, Z+1	; 0x01
    4152:	8c 81       	ldd	r24, Y+4	; 0x04
    4154:	9d 81       	ldd	r25, Y+5	; 0x05
    4156:	82 17       	cp	r24, r18
    4158:	93 07       	cpc	r25, r19
    415a:	38 f0       	brcs	.+14     	; 0x416a <vTaskDelayUntil+0xa2>
    415c:	2c 81       	ldd	r18, Y+4	; 0x04
    415e:	3d 81       	ldd	r19, Y+5	; 0x05
    4160:	8a 81       	ldd	r24, Y+2	; 0x02
    4162:	9b 81       	ldd	r25, Y+3	; 0x03
    4164:	82 17       	cp	r24, r18
    4166:	93 07       	cpc	r25, r19
    4168:	10 f4       	brcc	.+4      	; 0x416e <vTaskDelayUntil+0xa6>
    416a:	81 e0       	ldi	r24, 0x01	; 1
    416c:	89 83       	std	Y+1, r24	; 0x01
    416e:	8f 81       	ldd	r24, Y+7	; 0x07
    4170:	98 85       	ldd	r25, Y+8	; 0x08
    4172:	2c 81       	ldd	r18, Y+4	; 0x04
    4174:	3d 81       	ldd	r19, Y+5	; 0x05
    4176:	fc 01       	movw	r30, r24
    4178:	31 83       	std	Z+1, r19	; 0x01
    417a:	20 83       	st	Z, r18
    417c:	89 81       	ldd	r24, Y+1	; 0x01
    417e:	88 23       	and	r24, r24
    4180:	59 f0       	breq	.+22     	; 0x4198 <vTaskDelayUntil+0xd0>
    4182:	2c 81       	ldd	r18, Y+4	; 0x04
    4184:	3d 81       	ldd	r19, Y+5	; 0x05
    4186:	8a 81       	ldd	r24, Y+2	; 0x02
    4188:	9b 81       	ldd	r25, Y+3	; 0x03
    418a:	a9 01       	movw	r20, r18
    418c:	48 1b       	sub	r20, r24
    418e:	59 0b       	sbc	r21, r25
    4190:	ca 01       	movw	r24, r20
    4192:	60 e0       	ldi	r22, 0x00	; 0
    4194:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <prvAddCurrentTaskToDelayedList>
    4198:	0e 94 43 21 	call	0x4286	; 0x4286 <xTaskResumeAll>
    419c:	8e 83       	std	Y+6, r24	; 0x06
    419e:	8e 81       	ldd	r24, Y+6	; 0x06
    41a0:	88 23       	and	r24, r24
    41a2:	11 f4       	brne	.+4      	; 0x41a8 <vTaskDelayUntil+0xe0>
    41a4:	0e 94 4d 14 	call	0x289a	; 0x289a <vPortYield>
    41a8:	00 00       	nop
    41aa:	2a 96       	adiw	r28, 0x0a	; 10
    41ac:	0f b6       	in	r0, 0x3f	; 63
    41ae:	f8 94       	cli
    41b0:	de bf       	out	0x3e, r29	; 62
    41b2:	0f be       	out	0x3f, r0	; 63
    41b4:	cd bf       	out	0x3d, r28	; 61
    41b6:	df 91       	pop	r29
    41b8:	cf 91       	pop	r28
    41ba:	08 95       	ret

000041bc <vTaskDelay>:
    41bc:	cf 93       	push	r28
    41be:	df 93       	push	r29
    41c0:	00 d0       	rcall	.+0      	; 0x41c2 <vTaskDelay+0x6>
    41c2:	1f 92       	push	r1
    41c4:	cd b7       	in	r28, 0x3d	; 61
    41c6:	de b7       	in	r29, 0x3e	; 62
    41c8:	9b 83       	std	Y+3, r25	; 0x03
    41ca:	8a 83       	std	Y+2, r24	; 0x02
    41cc:	19 82       	std	Y+1, r1	; 0x01
    41ce:	8a 81       	ldd	r24, Y+2	; 0x02
    41d0:	9b 81       	ldd	r25, Y+3	; 0x03
    41d2:	89 2b       	or	r24, r25
    41d4:	51 f0       	breq	.+20     	; 0x41ea <vTaskDelay+0x2e>
    41d6:	0e 94 36 21 	call	0x426c	; 0x426c <vTaskSuspendAll>
    41da:	8a 81       	ldd	r24, Y+2	; 0x02
    41dc:	9b 81       	ldd	r25, Y+3	; 0x03
    41de:	60 e0       	ldi	r22, 0x00	; 0
    41e0:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <prvAddCurrentTaskToDelayedList>
    41e4:	0e 94 43 21 	call	0x4286	; 0x4286 <xTaskResumeAll>
    41e8:	89 83       	std	Y+1, r24	; 0x01
    41ea:	89 81       	ldd	r24, Y+1	; 0x01
    41ec:	88 23       	and	r24, r24
    41ee:	11 f4       	brne	.+4      	; 0x41f4 <vTaskDelay+0x38>
    41f0:	0e 94 4d 14 	call	0x289a	; 0x289a <vPortYield>
    41f4:	00 00       	nop
    41f6:	0f 90       	pop	r0
    41f8:	0f 90       	pop	r0
    41fa:	0f 90       	pop	r0
    41fc:	df 91       	pop	r29
    41fe:	cf 91       	pop	r28
    4200:	08 95       	ret

00004202 <vTaskStartScheduler>:
    4202:	ef 92       	push	r14
    4204:	ff 92       	push	r15
    4206:	0f 93       	push	r16
    4208:	cf 93       	push	r28
    420a:	df 93       	push	r29
    420c:	1f 92       	push	r1
    420e:	cd b7       	in	r28, 0x3d	; 61
    4210:	de b7       	in	r29, 0x3e	; 62
    4212:	0f 2e       	mov	r0, r31
    4214:	f0 e2       	ldi	r31, 0x20	; 32
    4216:	ef 2e       	mov	r14, r31
    4218:	f8 e0       	ldi	r31, 0x08	; 8
    421a:	ff 2e       	mov	r15, r31
    421c:	f0 2d       	mov	r31, r0
    421e:	00 e0       	ldi	r16, 0x00	; 0
    4220:	20 e0       	ldi	r18, 0x00	; 0
    4222:	30 e0       	ldi	r19, 0x00	; 0
    4224:	45 e5       	ldi	r20, 0x55	; 85
    4226:	50 e0       	ldi	r21, 0x00	; 0
    4228:	61 e7       	ldi	r22, 0x71	; 113
    422a:	71 e0       	ldi	r23, 0x01	; 1
    422c:	82 ed       	ldi	r24, 0xD2	; 210
    422e:	94 e2       	ldi	r25, 0x24	; 36
    4230:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <xTaskCreate>
    4234:	89 83       	std	Y+1, r24	; 0x01
    4236:	89 81       	ldd	r24, Y+1	; 0x01
    4238:	81 30       	cpi	r24, 0x01	; 1
    423a:	81 f4       	brne	.+32     	; 0x425c <vTaskStartScheduler+0x5a>
    423c:	f8 94       	cli
    423e:	8f ef       	ldi	r24, 0xFF	; 255
    4240:	9f ef       	ldi	r25, 0xFF	; 255
    4242:	90 93 1f 08 	sts	0x081F, r25	; 0x80081f <xNextTaskUnblockTime+0x1>
    4246:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <xNextTaskUnblockTime>
    424a:	81 e0       	ldi	r24, 0x01	; 1
    424c:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <xSchedulerRunning>
    4250:	10 92 17 08 	sts	0x0817, r1	; 0x800817 <xTickCount+0x1>
    4254:	10 92 16 08 	sts	0x0816, r1	; 0x800816 <xTickCount>
    4258:	0e 94 18 14 	call	0x2830	; 0x2830 <xPortStartScheduler>
    425c:	00 00       	nop
    425e:	0f 90       	pop	r0
    4260:	df 91       	pop	r29
    4262:	cf 91       	pop	r28
    4264:	0f 91       	pop	r16
    4266:	ff 90       	pop	r15
    4268:	ef 90       	pop	r14
    426a:	08 95       	ret

0000426c <vTaskSuspendAll>:
    426c:	cf 93       	push	r28
    426e:	df 93       	push	r29
    4270:	cd b7       	in	r28, 0x3d	; 61
    4272:	de b7       	in	r29, 0x3e	; 62
    4274:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <uxSchedulerSuspended>
    4278:	8f 5f       	subi	r24, 0xFF	; 255
    427a:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <uxSchedulerSuspended>
    427e:	00 00       	nop
    4280:	df 91       	pop	r29
    4282:	cf 91       	pop	r28
    4284:	08 95       	ret

00004286 <xTaskResumeAll>:
    4286:	cf 93       	push	r28
    4288:	df 93       	push	r29
    428a:	00 d0       	rcall	.+0      	; 0x428c <xTaskResumeAll+0x6>
    428c:	00 d0       	rcall	.+0      	; 0x428e <xTaskResumeAll+0x8>
    428e:	cd b7       	in	r28, 0x3d	; 61
    4290:	de b7       	in	r29, 0x3e	; 62
    4292:	1a 82       	std	Y+2, r1	; 0x02
    4294:	19 82       	std	Y+1, r1	; 0x01
    4296:	1b 82       	std	Y+3, r1	; 0x03
    4298:	0f b6       	in	r0, 0x3f	; 63
    429a:	f8 94       	cli
    429c:	0f 92       	push	r0
    429e:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <uxSchedulerSuspended>
    42a2:	81 50       	subi	r24, 0x01	; 1
    42a4:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <uxSchedulerSuspended>
    42a8:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <uxSchedulerSuspended>
    42ac:	88 23       	and	r24, r24
    42ae:	09 f0       	breq	.+2      	; 0x42b2 <xTaskResumeAll+0x2c>
    42b0:	77 c0       	rjmp	.+238    	; 0x43a0 <xTaskResumeAll+0x11a>
    42b2:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <uxCurrentNumberOfTasks>
    42b6:	88 23       	and	r24, r24
    42b8:	09 f4       	brne	.+2      	; 0x42bc <xTaskResumeAll+0x36>
    42ba:	72 c0       	rjmp	.+228    	; 0x43a0 <xTaskResumeAll+0x11a>
    42bc:	49 c0       	rjmp	.+146    	; 0x4350 <xTaskResumeAll+0xca>
    42be:	80 91 07 08 	lds	r24, 0x0807	; 0x800807 <xPendingReadyList+0x5>
    42c2:	90 91 08 08 	lds	r25, 0x0808	; 0x800808 <xPendingReadyList+0x6>
    42c6:	fc 01       	movw	r30, r24
    42c8:	86 81       	ldd	r24, Z+6	; 0x06
    42ca:	97 81       	ldd	r25, Z+7	; 0x07
    42cc:	9a 83       	std	Y+2, r25	; 0x02
    42ce:	89 83       	std	Y+1, r24	; 0x01
    42d0:	89 81       	ldd	r24, Y+1	; 0x01
    42d2:	9a 81       	ldd	r25, Y+2	; 0x02
    42d4:	0c 96       	adiw	r24, 0x0c	; 12
    42d6:	0e 94 18 12 	call	0x2430	; 0x2430 <uxListRemove>
    42da:	89 81       	ldd	r24, Y+1	; 0x01
    42dc:	9a 81       	ldd	r25, Y+2	; 0x02
    42de:	02 96       	adiw	r24, 0x02	; 2
    42e0:	0e 94 18 12 	call	0x2430	; 0x2430 <uxListRemove>
    42e4:	89 81       	ldd	r24, Y+1	; 0x01
    42e6:	9a 81       	ldd	r25, Y+2	; 0x02
    42e8:	fc 01       	movw	r30, r24
    42ea:	96 89       	ldd	r25, Z+22	; 0x16
    42ec:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <uxTopReadyPriority>
    42f0:	89 17       	cp	r24, r25
    42f2:	30 f4       	brcc	.+12     	; 0x4300 <xTaskResumeAll+0x7a>
    42f4:	89 81       	ldd	r24, Y+1	; 0x01
    42f6:	9a 81       	ldd	r25, Y+2	; 0x02
    42f8:	fc 01       	movw	r30, r24
    42fa:	86 89       	ldd	r24, Z+22	; 0x16
    42fc:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <uxTopReadyPriority>
    4300:	89 81       	ldd	r24, Y+1	; 0x01
    4302:	9a 81       	ldd	r25, Y+2	; 0x02
    4304:	ac 01       	movw	r20, r24
    4306:	4e 5f       	subi	r20, 0xFE	; 254
    4308:	5f 4f       	sbci	r21, 0xFF	; 255
    430a:	89 81       	ldd	r24, Y+1	; 0x01
    430c:	9a 81       	ldd	r25, Y+2	; 0x02
    430e:	fc 01       	movw	r30, r24
    4310:	86 89       	ldd	r24, Z+22	; 0x16
    4312:	28 2f       	mov	r18, r24
    4314:	30 e0       	ldi	r19, 0x00	; 0
    4316:	c9 01       	movw	r24, r18
    4318:	88 0f       	add	r24, r24
    431a:	99 1f       	adc	r25, r25
    431c:	88 0f       	add	r24, r24
    431e:	99 1f       	adc	r25, r25
    4320:	88 0f       	add	r24, r24
    4322:	99 1f       	adc	r25, r25
    4324:	82 0f       	add	r24, r18
    4326:	93 1f       	adc	r25, r19
    4328:	88 53       	subi	r24, 0x38	; 56
    432a:	98 4f       	sbci	r25, 0xF8	; 248
    432c:	ba 01       	movw	r22, r20
    432e:	0e 94 51 11 	call	0x22a2	; 0x22a2 <vListInsertEnd>
    4332:	89 81       	ldd	r24, Y+1	; 0x01
    4334:	9a 81       	ldd	r25, Y+2	; 0x02
    4336:	fc 01       	movw	r30, r24
    4338:	26 89       	ldd	r18, Z+22	; 0x16
    433a:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    433e:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4342:	fc 01       	movw	r30, r24
    4344:	86 89       	ldd	r24, Z+22	; 0x16
    4346:	28 17       	cp	r18, r24
    4348:	18 f0       	brcs	.+6      	; 0x4350 <xTaskResumeAll+0xca>
    434a:	81 e0       	ldi	r24, 0x01	; 1
    434c:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <xYieldPending>
    4350:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <xPendingReadyList>
    4354:	88 23       	and	r24, r24
    4356:	09 f0       	breq	.+2      	; 0x435a <xTaskResumeAll+0xd4>
    4358:	b2 cf       	rjmp	.-156    	; 0x42be <xTaskResumeAll+0x38>
    435a:	89 81       	ldd	r24, Y+1	; 0x01
    435c:	9a 81       	ldd	r25, Y+2	; 0x02
    435e:	89 2b       	or	r24, r25
    4360:	11 f0       	breq	.+4      	; 0x4366 <xTaskResumeAll+0xe0>
    4362:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <prvResetNextTaskUnblockTime>
    4366:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <uxPendedTicks>
    436a:	8c 83       	std	Y+4, r24	; 0x04
    436c:	8c 81       	ldd	r24, Y+4	; 0x04
    436e:	88 23       	and	r24, r24
    4370:	79 f0       	breq	.+30     	; 0x4390 <xTaskResumeAll+0x10a>
    4372:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <xTaskIncrementTick>
    4376:	88 23       	and	r24, r24
    4378:	19 f0       	breq	.+6      	; 0x4380 <xTaskResumeAll+0xfa>
    437a:	81 e0       	ldi	r24, 0x01	; 1
    437c:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <xYieldPending>
    4380:	8c 81       	ldd	r24, Y+4	; 0x04
    4382:	81 50       	subi	r24, 0x01	; 1
    4384:	8c 83       	std	Y+4, r24	; 0x04
    4386:	8c 81       	ldd	r24, Y+4	; 0x04
    4388:	88 23       	and	r24, r24
    438a:	99 f7       	brne	.-26     	; 0x4372 <xTaskResumeAll+0xec>
    438c:	10 92 1a 08 	sts	0x081A, r1	; 0x80081a <uxPendedTicks>
    4390:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <xYieldPending>
    4394:	88 23       	and	r24, r24
    4396:	21 f0       	breq	.+8      	; 0x43a0 <xTaskResumeAll+0x11a>
    4398:	81 e0       	ldi	r24, 0x01	; 1
    439a:	8b 83       	std	Y+3, r24	; 0x03
    439c:	0e 94 4d 14 	call	0x289a	; 0x289a <vPortYield>
    43a0:	0f 90       	pop	r0
    43a2:	0f be       	out	0x3f, r0	; 63
    43a4:	8b 81       	ldd	r24, Y+3	; 0x03
    43a6:	0f 90       	pop	r0
    43a8:	0f 90       	pop	r0
    43aa:	0f 90       	pop	r0
    43ac:	0f 90       	pop	r0
    43ae:	df 91       	pop	r29
    43b0:	cf 91       	pop	r28
    43b2:	08 95       	ret

000043b4 <xTaskGetTickCount>:
    43b4:	cf 93       	push	r28
    43b6:	df 93       	push	r29
    43b8:	00 d0       	rcall	.+0      	; 0x43ba <xTaskGetTickCount+0x6>
    43ba:	cd b7       	in	r28, 0x3d	; 61
    43bc:	de b7       	in	r29, 0x3e	; 62
    43be:	0f b6       	in	r0, 0x3f	; 63
    43c0:	f8 94       	cli
    43c2:	0f 92       	push	r0
    43c4:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <xTickCount>
    43c8:	90 91 17 08 	lds	r25, 0x0817	; 0x800817 <xTickCount+0x1>
    43cc:	9a 83       	std	Y+2, r25	; 0x02
    43ce:	89 83       	std	Y+1, r24	; 0x01
    43d0:	0f 90       	pop	r0
    43d2:	0f be       	out	0x3f, r0	; 63
    43d4:	89 81       	ldd	r24, Y+1	; 0x01
    43d6:	9a 81       	ldd	r25, Y+2	; 0x02
    43d8:	0f 90       	pop	r0
    43da:	0f 90       	pop	r0
    43dc:	df 91       	pop	r29
    43de:	cf 91       	pop	r28
    43e0:	08 95       	ret

000043e2 <xTaskIncrementTick>:
    43e2:	cf 93       	push	r28
    43e4:	df 93       	push	r29
    43e6:	cd b7       	in	r28, 0x3d	; 61
    43e8:	de b7       	in	r29, 0x3e	; 62
    43ea:	29 97       	sbiw	r28, 0x09	; 9
    43ec:	0f b6       	in	r0, 0x3f	; 63
    43ee:	f8 94       	cli
    43f0:	de bf       	out	0x3e, r29	; 62
    43f2:	0f be       	out	0x3f, r0	; 63
    43f4:	cd bf       	out	0x3d, r28	; 61
    43f6:	19 82       	std	Y+1, r1	; 0x01
    43f8:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <uxSchedulerSuspended>
    43fc:	88 23       	and	r24, r24
    43fe:	09 f0       	breq	.+2      	; 0x4402 <xTaskIncrementTick+0x20>
    4400:	c8 c0       	rjmp	.+400    	; 0x4592 <xTaskIncrementTick+0x1b0>
    4402:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <xTickCount>
    4406:	90 91 17 08 	lds	r25, 0x0817	; 0x800817 <xTickCount+0x1>
    440a:	01 96       	adiw	r24, 0x01	; 1
    440c:	9b 83       	std	Y+3, r25	; 0x03
    440e:	8a 83       	std	Y+2, r24	; 0x02
    4410:	8a 81       	ldd	r24, Y+2	; 0x02
    4412:	9b 81       	ldd	r25, Y+3	; 0x03
    4414:	90 93 17 08 	sts	0x0817, r25	; 0x800817 <xTickCount+0x1>
    4418:	80 93 16 08 	sts	0x0816, r24	; 0x800816 <xTickCount>
    441c:	8a 81       	ldd	r24, Y+2	; 0x02
    441e:	9b 81       	ldd	r25, Y+3	; 0x03
    4420:	89 2b       	or	r24, r25
    4422:	d9 f4       	brne	.+54     	; 0x445a <xTaskIncrementTick+0x78>
    4424:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <pxDelayedTaskList>
    4428:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <pxDelayedTaskList+0x1>
    442c:	9d 83       	std	Y+5, r25	; 0x05
    442e:	8c 83       	std	Y+4, r24	; 0x04
    4430:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <pxOverflowDelayedTaskList>
    4434:	90 91 01 08 	lds	r25, 0x0801	; 0x800801 <pxOverflowDelayedTaskList+0x1>
    4438:	90 93 ff 07 	sts	0x07FF, r25	; 0x8007ff <pxDelayedTaskList+0x1>
    443c:	80 93 fe 07 	sts	0x07FE, r24	; 0x8007fe <pxDelayedTaskList>
    4440:	8c 81       	ldd	r24, Y+4	; 0x04
    4442:	9d 81       	ldd	r25, Y+5	; 0x05
    4444:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <pxOverflowDelayedTaskList+0x1>
    4448:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <pxOverflowDelayedTaskList>
    444c:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <xNumOfOverflows>
    4450:	8f 5f       	subi	r24, 0xFF	; 255
    4452:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <xNumOfOverflows>
    4456:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <prvResetNextTaskUnblockTime>
    445a:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <xNextTaskUnblockTime>
    445e:	90 91 1f 08 	lds	r25, 0x081F	; 0x80081f <xNextTaskUnblockTime+0x1>
    4462:	2a 81       	ldd	r18, Y+2	; 0x02
    4464:	3b 81       	ldd	r19, Y+3	; 0x03
    4466:	28 17       	cp	r18, r24
    4468:	39 07       	cpc	r19, r25
    446a:	08 f4       	brcc	.+2      	; 0x446e <xTaskIncrementTick+0x8c>
    446c:	78 c0       	rjmp	.+240    	; 0x455e <xTaskIncrementTick+0x17c>
    446e:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <pxDelayedTaskList>
    4472:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <pxDelayedTaskList+0x1>
    4476:	fc 01       	movw	r30, r24
    4478:	80 81       	ld	r24, Z
    447a:	88 23       	and	r24, r24
    447c:	39 f4       	brne	.+14     	; 0x448c <xTaskIncrementTick+0xaa>
    447e:	8f ef       	ldi	r24, 0xFF	; 255
    4480:	9f ef       	ldi	r25, 0xFF	; 255
    4482:	90 93 1f 08 	sts	0x081F, r25	; 0x80081f <xNextTaskUnblockTime+0x1>
    4486:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <xNextTaskUnblockTime>
    448a:	69 c0       	rjmp	.+210    	; 0x455e <xTaskIncrementTick+0x17c>
    448c:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <pxDelayedTaskList>
    4490:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <pxDelayedTaskList+0x1>
    4494:	fc 01       	movw	r30, r24
    4496:	85 81       	ldd	r24, Z+5	; 0x05
    4498:	96 81       	ldd	r25, Z+6	; 0x06
    449a:	fc 01       	movw	r30, r24
    449c:	86 81       	ldd	r24, Z+6	; 0x06
    449e:	97 81       	ldd	r25, Z+7	; 0x07
    44a0:	9f 83       	std	Y+7, r25	; 0x07
    44a2:	8e 83       	std	Y+6, r24	; 0x06
    44a4:	8e 81       	ldd	r24, Y+6	; 0x06
    44a6:	9f 81       	ldd	r25, Y+7	; 0x07
    44a8:	fc 01       	movw	r30, r24
    44aa:	82 81       	ldd	r24, Z+2	; 0x02
    44ac:	93 81       	ldd	r25, Z+3	; 0x03
    44ae:	99 87       	std	Y+9, r25	; 0x09
    44b0:	88 87       	std	Y+8, r24	; 0x08
    44b2:	2a 81       	ldd	r18, Y+2	; 0x02
    44b4:	3b 81       	ldd	r19, Y+3	; 0x03
    44b6:	88 85       	ldd	r24, Y+8	; 0x08
    44b8:	99 85       	ldd	r25, Y+9	; 0x09
    44ba:	28 17       	cp	r18, r24
    44bc:	39 07       	cpc	r19, r25
    44be:	38 f4       	brcc	.+14     	; 0x44ce <xTaskIncrementTick+0xec>
    44c0:	88 85       	ldd	r24, Y+8	; 0x08
    44c2:	99 85       	ldd	r25, Y+9	; 0x09
    44c4:	90 93 1f 08 	sts	0x081F, r25	; 0x80081f <xNextTaskUnblockTime+0x1>
    44c8:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <xNextTaskUnblockTime>
    44cc:	48 c0       	rjmp	.+144    	; 0x455e <xTaskIncrementTick+0x17c>
    44ce:	8e 81       	ldd	r24, Y+6	; 0x06
    44d0:	9f 81       	ldd	r25, Y+7	; 0x07
    44d2:	02 96       	adiw	r24, 0x02	; 2
    44d4:	0e 94 18 12 	call	0x2430	; 0x2430 <uxListRemove>
    44d8:	8e 81       	ldd	r24, Y+6	; 0x06
    44da:	9f 81       	ldd	r25, Y+7	; 0x07
    44dc:	fc 01       	movw	r30, r24
    44de:	84 89       	ldd	r24, Z+20	; 0x14
    44e0:	95 89       	ldd	r25, Z+21	; 0x15
    44e2:	89 2b       	or	r24, r25
    44e4:	29 f0       	breq	.+10     	; 0x44f0 <xTaskIncrementTick+0x10e>
    44e6:	8e 81       	ldd	r24, Y+6	; 0x06
    44e8:	9f 81       	ldd	r25, Y+7	; 0x07
    44ea:	0c 96       	adiw	r24, 0x0c	; 12
    44ec:	0e 94 18 12 	call	0x2430	; 0x2430 <uxListRemove>
    44f0:	8e 81       	ldd	r24, Y+6	; 0x06
    44f2:	9f 81       	ldd	r25, Y+7	; 0x07
    44f4:	fc 01       	movw	r30, r24
    44f6:	96 89       	ldd	r25, Z+22	; 0x16
    44f8:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <uxTopReadyPriority>
    44fc:	89 17       	cp	r24, r25
    44fe:	30 f4       	brcc	.+12     	; 0x450c <xTaskIncrementTick+0x12a>
    4500:	8e 81       	ldd	r24, Y+6	; 0x06
    4502:	9f 81       	ldd	r25, Y+7	; 0x07
    4504:	fc 01       	movw	r30, r24
    4506:	86 89       	ldd	r24, Z+22	; 0x16
    4508:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <uxTopReadyPriority>
    450c:	8e 81       	ldd	r24, Y+6	; 0x06
    450e:	9f 81       	ldd	r25, Y+7	; 0x07
    4510:	ac 01       	movw	r20, r24
    4512:	4e 5f       	subi	r20, 0xFE	; 254
    4514:	5f 4f       	sbci	r21, 0xFF	; 255
    4516:	8e 81       	ldd	r24, Y+6	; 0x06
    4518:	9f 81       	ldd	r25, Y+7	; 0x07
    451a:	fc 01       	movw	r30, r24
    451c:	86 89       	ldd	r24, Z+22	; 0x16
    451e:	28 2f       	mov	r18, r24
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	c9 01       	movw	r24, r18
    4524:	88 0f       	add	r24, r24
    4526:	99 1f       	adc	r25, r25
    4528:	88 0f       	add	r24, r24
    452a:	99 1f       	adc	r25, r25
    452c:	88 0f       	add	r24, r24
    452e:	99 1f       	adc	r25, r25
    4530:	82 0f       	add	r24, r18
    4532:	93 1f       	adc	r25, r19
    4534:	88 53       	subi	r24, 0x38	; 56
    4536:	98 4f       	sbci	r25, 0xF8	; 248
    4538:	ba 01       	movw	r22, r20
    453a:	0e 94 51 11 	call	0x22a2	; 0x22a2 <vListInsertEnd>
    453e:	8e 81       	ldd	r24, Y+6	; 0x06
    4540:	9f 81       	ldd	r25, Y+7	; 0x07
    4542:	fc 01       	movw	r30, r24
    4544:	26 89       	ldd	r18, Z+22	; 0x16
    4546:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    454a:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    454e:	fc 01       	movw	r30, r24
    4550:	86 89       	ldd	r24, Z+22	; 0x16
    4552:	28 17       	cp	r18, r24
    4554:	08 f4       	brcc	.+2      	; 0x4558 <xTaskIncrementTick+0x176>
    4556:	8b cf       	rjmp	.-234    	; 0x446e <xTaskIncrementTick+0x8c>
    4558:	81 e0       	ldi	r24, 0x01	; 1
    455a:	89 83       	std	Y+1, r24	; 0x01
    455c:	88 cf       	rjmp	.-240    	; 0x446e <xTaskIncrementTick+0x8c>
    455e:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4562:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4566:	fc 01       	movw	r30, r24
    4568:	86 89       	ldd	r24, Z+22	; 0x16
    456a:	28 2f       	mov	r18, r24
    456c:	30 e0       	ldi	r19, 0x00	; 0
    456e:	c9 01       	movw	r24, r18
    4570:	88 0f       	add	r24, r24
    4572:	99 1f       	adc	r25, r25
    4574:	88 0f       	add	r24, r24
    4576:	99 1f       	adc	r25, r25
    4578:	88 0f       	add	r24, r24
    457a:	99 1f       	adc	r25, r25
    457c:	82 0f       	add	r24, r18
    457e:	93 1f       	adc	r25, r19
    4580:	88 53       	subi	r24, 0x38	; 56
    4582:	98 4f       	sbci	r25, 0xF8	; 248
    4584:	fc 01       	movw	r30, r24
    4586:	80 81       	ld	r24, Z
    4588:	82 30       	cpi	r24, 0x02	; 2
    458a:	40 f0       	brcs	.+16     	; 0x459c <xTaskIncrementTick+0x1ba>
    458c:	81 e0       	ldi	r24, 0x01	; 1
    458e:	89 83       	std	Y+1, r24	; 0x01
    4590:	05 c0       	rjmp	.+10     	; 0x459c <xTaskIncrementTick+0x1ba>
    4592:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <uxPendedTicks>
    4596:	8f 5f       	subi	r24, 0xFF	; 255
    4598:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <uxPendedTicks>
    459c:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <xYieldPending>
    45a0:	88 23       	and	r24, r24
    45a2:	11 f0       	breq	.+4      	; 0x45a8 <xTaskIncrementTick+0x1c6>
    45a4:	81 e0       	ldi	r24, 0x01	; 1
    45a6:	89 83       	std	Y+1, r24	; 0x01
    45a8:	89 81       	ldd	r24, Y+1	; 0x01
    45aa:	29 96       	adiw	r28, 0x09	; 9
    45ac:	0f b6       	in	r0, 0x3f	; 63
    45ae:	f8 94       	cli
    45b0:	de bf       	out	0x3e, r29	; 62
    45b2:	0f be       	out	0x3f, r0	; 63
    45b4:	cd bf       	out	0x3d, r28	; 61
    45b6:	df 91       	pop	r29
    45b8:	cf 91       	pop	r28
    45ba:	08 95       	ret

000045bc <vTaskSetApplicationTaskTag>:
    45bc:	cf 93       	push	r28
    45be:	df 93       	push	r29
    45c0:	00 d0       	rcall	.+0      	; 0x45c2 <vTaskSetApplicationTaskTag+0x6>
    45c2:	00 d0       	rcall	.+0      	; 0x45c4 <vTaskSetApplicationTaskTag+0x8>
    45c4:	00 d0       	rcall	.+0      	; 0x45c6 <vTaskSetApplicationTaskTag+0xa>
    45c6:	cd b7       	in	r28, 0x3d	; 61
    45c8:	de b7       	in	r29, 0x3e	; 62
    45ca:	9c 83       	std	Y+4, r25	; 0x04
    45cc:	8b 83       	std	Y+3, r24	; 0x03
    45ce:	7e 83       	std	Y+6, r23	; 0x06
    45d0:	6d 83       	std	Y+5, r22	; 0x05
    45d2:	8b 81       	ldd	r24, Y+3	; 0x03
    45d4:	9c 81       	ldd	r25, Y+4	; 0x04
    45d6:	89 2b       	or	r24, r25
    45d8:	39 f4       	brne	.+14     	; 0x45e8 <vTaskSetApplicationTaskTag+0x2c>
    45da:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    45de:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    45e2:	9a 83       	std	Y+2, r25	; 0x02
    45e4:	89 83       	std	Y+1, r24	; 0x01
    45e6:	04 c0       	rjmp	.+8      	; 0x45f0 <vTaskSetApplicationTaskTag+0x34>
    45e8:	8b 81       	ldd	r24, Y+3	; 0x03
    45ea:	9c 81       	ldd	r25, Y+4	; 0x04
    45ec:	9a 83       	std	Y+2, r25	; 0x02
    45ee:	89 83       	std	Y+1, r24	; 0x01
    45f0:	0f b6       	in	r0, 0x3f	; 63
    45f2:	f8 94       	cli
    45f4:	0f 92       	push	r0
    45f6:	89 81       	ldd	r24, Y+1	; 0x01
    45f8:	9a 81       	ldd	r25, Y+2	; 0x02
    45fa:	2d 81       	ldd	r18, Y+5	; 0x05
    45fc:	3e 81       	ldd	r19, Y+6	; 0x06
    45fe:	fc 01       	movw	r30, r24
    4600:	36 a3       	std	Z+38, r19	; 0x26
    4602:	25 a3       	std	Z+37, r18	; 0x25
    4604:	0f 90       	pop	r0
    4606:	0f be       	out	0x3f, r0	; 63
    4608:	00 00       	nop
    460a:	26 96       	adiw	r28, 0x06	; 6
    460c:	0f b6       	in	r0, 0x3f	; 63
    460e:	f8 94       	cli
    4610:	de bf       	out	0x3e, r29	; 62
    4612:	0f be       	out	0x3f, r0	; 63
    4614:	cd bf       	out	0x3d, r28	; 61
    4616:	df 91       	pop	r29
    4618:	cf 91       	pop	r28
    461a:	08 95       	ret

0000461c <vTaskSwitchContext>:
    461c:	cf 93       	push	r28
    461e:	df 93       	push	r29
    4620:	00 d0       	rcall	.+0      	; 0x4622 <vTaskSwitchContext+0x6>
    4622:	1f 92       	push	r1
    4624:	cd b7       	in	r28, 0x3d	; 61
    4626:	de b7       	in	r29, 0x3e	; 62
    4628:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <uxSchedulerSuspended>
    462c:	88 23       	and	r24, r24
    462e:	21 f0       	breq	.+8      	; 0x4638 <vTaskSwitchContext+0x1c>
    4630:	81 e0       	ldi	r24, 0x01	; 1
    4632:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <xYieldPending>
    4636:	90 c0       	rjmp	.+288    	; 0x4758 <vTaskSwitchContext+0x13c>
    4638:	10 92 1b 08 	sts	0x081B, r1	; 0x80081b <xYieldPending>
    463c:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4640:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4644:	fc 01       	movw	r30, r24
    4646:	85 a1       	ldd	r24, Z+37	; 0x25
    4648:	96 a1       	ldd	r25, Z+38	; 0x26
    464a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <switch_out>
    464e:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4652:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4656:	fc 01       	movw	r30, r24
    4658:	20 81       	ld	r18, Z
    465a:	31 81       	ldd	r19, Z+1	; 0x01
    465c:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4660:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4664:	fc 01       	movw	r30, r24
    4666:	87 89       	ldd	r24, Z+23	; 0x17
    4668:	90 8d       	ldd	r25, Z+24	; 0x18
    466a:	82 17       	cp	r24, r18
    466c:	93 07       	cpc	r25, r19
    466e:	70 f0       	brcs	.+28     	; 0x468c <vTaskSwitchContext+0x70>
    4670:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4674:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4678:	9c 01       	movw	r18, r24
    467a:	27 5e       	subi	r18, 0xE7	; 231
    467c:	3f 4f       	sbci	r19, 0xFF	; 255
    467e:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4682:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4686:	b9 01       	movw	r22, r18
    4688:	0e 94 c3 09 	call	0x1386	; 0x1386 <vApplicationStackOverflowHook>
    468c:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <uxTopReadyPriority>
    4690:	89 83       	std	Y+1, r24	; 0x01
    4692:	03 c0       	rjmp	.+6      	; 0x469a <vTaskSwitchContext+0x7e>
    4694:	89 81       	ldd	r24, Y+1	; 0x01
    4696:	81 50       	subi	r24, 0x01	; 1
    4698:	89 83       	std	Y+1, r24	; 0x01
    469a:	89 81       	ldd	r24, Y+1	; 0x01
    469c:	28 2f       	mov	r18, r24
    469e:	30 e0       	ldi	r19, 0x00	; 0
    46a0:	c9 01       	movw	r24, r18
    46a2:	88 0f       	add	r24, r24
    46a4:	99 1f       	adc	r25, r25
    46a6:	88 0f       	add	r24, r24
    46a8:	99 1f       	adc	r25, r25
    46aa:	88 0f       	add	r24, r24
    46ac:	99 1f       	adc	r25, r25
    46ae:	82 0f       	add	r24, r18
    46b0:	93 1f       	adc	r25, r19
    46b2:	88 53       	subi	r24, 0x38	; 56
    46b4:	98 4f       	sbci	r25, 0xF8	; 248
    46b6:	fc 01       	movw	r30, r24
    46b8:	80 81       	ld	r24, Z
    46ba:	88 23       	and	r24, r24
    46bc:	59 f3       	breq	.-42     	; 0x4694 <vTaskSwitchContext+0x78>
    46be:	89 81       	ldd	r24, Y+1	; 0x01
    46c0:	28 2f       	mov	r18, r24
    46c2:	30 e0       	ldi	r19, 0x00	; 0
    46c4:	c9 01       	movw	r24, r18
    46c6:	88 0f       	add	r24, r24
    46c8:	99 1f       	adc	r25, r25
    46ca:	88 0f       	add	r24, r24
    46cc:	99 1f       	adc	r25, r25
    46ce:	88 0f       	add	r24, r24
    46d0:	99 1f       	adc	r25, r25
    46d2:	82 0f       	add	r24, r18
    46d4:	93 1f       	adc	r25, r19
    46d6:	88 53       	subi	r24, 0x38	; 56
    46d8:	98 4f       	sbci	r25, 0xF8	; 248
    46da:	9b 83       	std	Y+3, r25	; 0x03
    46dc:	8a 83       	std	Y+2, r24	; 0x02
    46de:	8a 81       	ldd	r24, Y+2	; 0x02
    46e0:	9b 81       	ldd	r25, Y+3	; 0x03
    46e2:	fc 01       	movw	r30, r24
    46e4:	81 81       	ldd	r24, Z+1	; 0x01
    46e6:	92 81       	ldd	r25, Z+2	; 0x02
    46e8:	fc 01       	movw	r30, r24
    46ea:	22 81       	ldd	r18, Z+2	; 0x02
    46ec:	33 81       	ldd	r19, Z+3	; 0x03
    46ee:	8a 81       	ldd	r24, Y+2	; 0x02
    46f0:	9b 81       	ldd	r25, Y+3	; 0x03
    46f2:	fc 01       	movw	r30, r24
    46f4:	32 83       	std	Z+2, r19	; 0x02
    46f6:	21 83       	std	Z+1, r18	; 0x01
    46f8:	8a 81       	ldd	r24, Y+2	; 0x02
    46fa:	9b 81       	ldd	r25, Y+3	; 0x03
    46fc:	fc 01       	movw	r30, r24
    46fe:	21 81       	ldd	r18, Z+1	; 0x01
    4700:	32 81       	ldd	r19, Z+2	; 0x02
    4702:	8a 81       	ldd	r24, Y+2	; 0x02
    4704:	9b 81       	ldd	r25, Y+3	; 0x03
    4706:	03 96       	adiw	r24, 0x03	; 3
    4708:	28 17       	cp	r18, r24
    470a:	39 07       	cpc	r19, r25
    470c:	69 f4       	brne	.+26     	; 0x4728 <vTaskSwitchContext+0x10c>
    470e:	8a 81       	ldd	r24, Y+2	; 0x02
    4710:	9b 81       	ldd	r25, Y+3	; 0x03
    4712:	fc 01       	movw	r30, r24
    4714:	81 81       	ldd	r24, Z+1	; 0x01
    4716:	92 81       	ldd	r25, Z+2	; 0x02
    4718:	fc 01       	movw	r30, r24
    471a:	22 81       	ldd	r18, Z+2	; 0x02
    471c:	33 81       	ldd	r19, Z+3	; 0x03
    471e:	8a 81       	ldd	r24, Y+2	; 0x02
    4720:	9b 81       	ldd	r25, Y+3	; 0x03
    4722:	fc 01       	movw	r30, r24
    4724:	32 83       	std	Z+2, r19	; 0x02
    4726:	21 83       	std	Z+1, r18	; 0x01
    4728:	8a 81       	ldd	r24, Y+2	; 0x02
    472a:	9b 81       	ldd	r25, Y+3	; 0x03
    472c:	fc 01       	movw	r30, r24
    472e:	81 81       	ldd	r24, Z+1	; 0x01
    4730:	92 81       	ldd	r25, Z+2	; 0x02
    4732:	fc 01       	movw	r30, r24
    4734:	86 81       	ldd	r24, Z+6	; 0x06
    4736:	97 81       	ldd	r25, Z+7	; 0x07
    4738:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <pxCurrentTCB+0x1>
    473c:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <pxCurrentTCB>
    4740:	89 81       	ldd	r24, Y+1	; 0x01
    4742:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <uxTopReadyPriority>
    4746:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    474a:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    474e:	fc 01       	movw	r30, r24
    4750:	85 a1       	ldd	r24, Z+37	; 0x25
    4752:	96 a1       	ldd	r25, Z+38	; 0x26
    4754:	0e 94 2c 10 	call	0x2058	; 0x2058 <switch_in>
    4758:	00 00       	nop
    475a:	0f 90       	pop	r0
    475c:	0f 90       	pop	r0
    475e:	0f 90       	pop	r0
    4760:	df 91       	pop	r29
    4762:	cf 91       	pop	r28
    4764:	08 95       	ret

00004766 <vTaskPlaceOnEventList>:
    4766:	cf 93       	push	r28
    4768:	df 93       	push	r29
    476a:	00 d0       	rcall	.+0      	; 0x476c <vTaskPlaceOnEventList+0x6>
    476c:	00 d0       	rcall	.+0      	; 0x476e <vTaskPlaceOnEventList+0x8>
    476e:	cd b7       	in	r28, 0x3d	; 61
    4770:	de b7       	in	r29, 0x3e	; 62
    4772:	9a 83       	std	Y+2, r25	; 0x02
    4774:	89 83       	std	Y+1, r24	; 0x01
    4776:	7c 83       	std	Y+4, r23	; 0x04
    4778:	6b 83       	std	Y+3, r22	; 0x03
    477a:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    477e:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4782:	9c 01       	movw	r18, r24
    4784:	24 5f       	subi	r18, 0xF4	; 244
    4786:	3f 4f       	sbci	r19, 0xFF	; 255
    4788:	89 81       	ldd	r24, Y+1	; 0x01
    478a:	9a 81       	ldd	r25, Y+2	; 0x02
    478c:	b9 01       	movw	r22, r18
    478e:	0e 94 a0 11 	call	0x2340	; 0x2340 <vListInsert>
    4792:	8b 81       	ldd	r24, Y+3	; 0x03
    4794:	9c 81       	ldd	r25, Y+4	; 0x04
    4796:	61 e0       	ldi	r22, 0x01	; 1
    4798:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <prvAddCurrentTaskToDelayedList>
    479c:	00 00       	nop
    479e:	0f 90       	pop	r0
    47a0:	0f 90       	pop	r0
    47a2:	0f 90       	pop	r0
    47a4:	0f 90       	pop	r0
    47a6:	df 91       	pop	r29
    47a8:	cf 91       	pop	r28
    47aa:	08 95       	ret

000047ac <xTaskRemoveFromEventList>:
    47ac:	cf 93       	push	r28
    47ae:	df 93       	push	r29
    47b0:	00 d0       	rcall	.+0      	; 0x47b2 <xTaskRemoveFromEventList+0x6>
    47b2:	00 d0       	rcall	.+0      	; 0x47b4 <xTaskRemoveFromEventList+0x8>
    47b4:	1f 92       	push	r1
    47b6:	cd b7       	in	r28, 0x3d	; 61
    47b8:	de b7       	in	r29, 0x3e	; 62
    47ba:	9d 83       	std	Y+5, r25	; 0x05
    47bc:	8c 83       	std	Y+4, r24	; 0x04
    47be:	8c 81       	ldd	r24, Y+4	; 0x04
    47c0:	9d 81       	ldd	r25, Y+5	; 0x05
    47c2:	fc 01       	movw	r30, r24
    47c4:	85 81       	ldd	r24, Z+5	; 0x05
    47c6:	96 81       	ldd	r25, Z+6	; 0x06
    47c8:	fc 01       	movw	r30, r24
    47ca:	86 81       	ldd	r24, Z+6	; 0x06
    47cc:	97 81       	ldd	r25, Z+7	; 0x07
    47ce:	9b 83       	std	Y+3, r25	; 0x03
    47d0:	8a 83       	std	Y+2, r24	; 0x02
    47d2:	8a 81       	ldd	r24, Y+2	; 0x02
    47d4:	9b 81       	ldd	r25, Y+3	; 0x03
    47d6:	0c 96       	adiw	r24, 0x0c	; 12
    47d8:	0e 94 18 12 	call	0x2430	; 0x2430 <uxListRemove>
    47dc:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <uxSchedulerSuspended>
    47e0:	88 23       	and	r24, r24
    47e2:	69 f5       	brne	.+90     	; 0x483e <xTaskRemoveFromEventList+0x92>
    47e4:	8a 81       	ldd	r24, Y+2	; 0x02
    47e6:	9b 81       	ldd	r25, Y+3	; 0x03
    47e8:	02 96       	adiw	r24, 0x02	; 2
    47ea:	0e 94 18 12 	call	0x2430	; 0x2430 <uxListRemove>
    47ee:	8a 81       	ldd	r24, Y+2	; 0x02
    47f0:	9b 81       	ldd	r25, Y+3	; 0x03
    47f2:	fc 01       	movw	r30, r24
    47f4:	96 89       	ldd	r25, Z+22	; 0x16
    47f6:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <uxTopReadyPriority>
    47fa:	89 17       	cp	r24, r25
    47fc:	30 f4       	brcc	.+12     	; 0x480a <xTaskRemoveFromEventList+0x5e>
    47fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4800:	9b 81       	ldd	r25, Y+3	; 0x03
    4802:	fc 01       	movw	r30, r24
    4804:	86 89       	ldd	r24, Z+22	; 0x16
    4806:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <uxTopReadyPriority>
    480a:	8a 81       	ldd	r24, Y+2	; 0x02
    480c:	9b 81       	ldd	r25, Y+3	; 0x03
    480e:	ac 01       	movw	r20, r24
    4810:	4e 5f       	subi	r20, 0xFE	; 254
    4812:	5f 4f       	sbci	r21, 0xFF	; 255
    4814:	8a 81       	ldd	r24, Y+2	; 0x02
    4816:	9b 81       	ldd	r25, Y+3	; 0x03
    4818:	fc 01       	movw	r30, r24
    481a:	86 89       	ldd	r24, Z+22	; 0x16
    481c:	28 2f       	mov	r18, r24
    481e:	30 e0       	ldi	r19, 0x00	; 0
    4820:	c9 01       	movw	r24, r18
    4822:	88 0f       	add	r24, r24
    4824:	99 1f       	adc	r25, r25
    4826:	88 0f       	add	r24, r24
    4828:	99 1f       	adc	r25, r25
    482a:	88 0f       	add	r24, r24
    482c:	99 1f       	adc	r25, r25
    482e:	82 0f       	add	r24, r18
    4830:	93 1f       	adc	r25, r19
    4832:	88 53       	subi	r24, 0x38	; 56
    4834:	98 4f       	sbci	r25, 0xF8	; 248
    4836:	ba 01       	movw	r22, r20
    4838:	0e 94 51 11 	call	0x22a2	; 0x22a2 <vListInsertEnd>
    483c:	08 c0       	rjmp	.+16     	; 0x484e <xTaskRemoveFromEventList+0xa2>
    483e:	8a 81       	ldd	r24, Y+2	; 0x02
    4840:	9b 81       	ldd	r25, Y+3	; 0x03
    4842:	0c 96       	adiw	r24, 0x0c	; 12
    4844:	bc 01       	movw	r22, r24
    4846:	82 e0       	ldi	r24, 0x02	; 2
    4848:	98 e0       	ldi	r25, 0x08	; 8
    484a:	0e 94 51 11 	call	0x22a2	; 0x22a2 <vListInsertEnd>
    484e:	8a 81       	ldd	r24, Y+2	; 0x02
    4850:	9b 81       	ldd	r25, Y+3	; 0x03
    4852:	fc 01       	movw	r30, r24
    4854:	26 89       	ldd	r18, Z+22	; 0x16
    4856:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    485a:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    485e:	fc 01       	movw	r30, r24
    4860:	86 89       	ldd	r24, Z+22	; 0x16
    4862:	82 17       	cp	r24, r18
    4864:	30 f4       	brcc	.+12     	; 0x4872 <xTaskRemoveFromEventList+0xc6>
    4866:	81 e0       	ldi	r24, 0x01	; 1
    4868:	89 83       	std	Y+1, r24	; 0x01
    486a:	81 e0       	ldi	r24, 0x01	; 1
    486c:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <xYieldPending>
    4870:	01 c0       	rjmp	.+2      	; 0x4874 <xTaskRemoveFromEventList+0xc8>
    4872:	19 82       	std	Y+1, r1	; 0x01
    4874:	89 81       	ldd	r24, Y+1	; 0x01
    4876:	0f 90       	pop	r0
    4878:	0f 90       	pop	r0
    487a:	0f 90       	pop	r0
    487c:	0f 90       	pop	r0
    487e:	0f 90       	pop	r0
    4880:	df 91       	pop	r29
    4882:	cf 91       	pop	r28
    4884:	08 95       	ret

00004886 <vTaskSetTimeOutState>:
    4886:	cf 93       	push	r28
    4888:	df 93       	push	r29
    488a:	00 d0       	rcall	.+0      	; 0x488c <vTaskSetTimeOutState+0x6>
    488c:	cd b7       	in	r28, 0x3d	; 61
    488e:	de b7       	in	r29, 0x3e	; 62
    4890:	9a 83       	std	Y+2, r25	; 0x02
    4892:	89 83       	std	Y+1, r24	; 0x01
    4894:	20 91 1c 08 	lds	r18, 0x081C	; 0x80081c <xNumOfOverflows>
    4898:	89 81       	ldd	r24, Y+1	; 0x01
    489a:	9a 81       	ldd	r25, Y+2	; 0x02
    489c:	fc 01       	movw	r30, r24
    489e:	20 83       	st	Z, r18
    48a0:	20 91 16 08 	lds	r18, 0x0816	; 0x800816 <xTickCount>
    48a4:	30 91 17 08 	lds	r19, 0x0817	; 0x800817 <xTickCount+0x1>
    48a8:	89 81       	ldd	r24, Y+1	; 0x01
    48aa:	9a 81       	ldd	r25, Y+2	; 0x02
    48ac:	fc 01       	movw	r30, r24
    48ae:	32 83       	std	Z+2, r19	; 0x02
    48b0:	21 83       	std	Z+1, r18	; 0x01
    48b2:	00 00       	nop
    48b4:	0f 90       	pop	r0
    48b6:	0f 90       	pop	r0
    48b8:	df 91       	pop	r29
    48ba:	cf 91       	pop	r28
    48bc:	08 95       	ret

000048be <xTaskCheckForTimeOut>:
    48be:	cf 93       	push	r28
    48c0:	df 93       	push	r29
    48c2:	cd b7       	in	r28, 0x3d	; 61
    48c4:	de b7       	in	r29, 0x3e	; 62
    48c6:	27 97       	sbiw	r28, 0x07	; 7
    48c8:	0f b6       	in	r0, 0x3f	; 63
    48ca:	f8 94       	cli
    48cc:	de bf       	out	0x3e, r29	; 62
    48ce:	0f be       	out	0x3f, r0	; 63
    48d0:	cd bf       	out	0x3d, r28	; 61
    48d2:	9d 83       	std	Y+5, r25	; 0x05
    48d4:	8c 83       	std	Y+4, r24	; 0x04
    48d6:	7f 83       	std	Y+7, r23	; 0x07
    48d8:	6e 83       	std	Y+6, r22	; 0x06
    48da:	0f b6       	in	r0, 0x3f	; 63
    48dc:	f8 94       	cli
    48de:	0f 92       	push	r0
    48e0:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <xTickCount>
    48e4:	90 91 17 08 	lds	r25, 0x0817	; 0x800817 <xTickCount+0x1>
    48e8:	9b 83       	std	Y+3, r25	; 0x03
    48ea:	8a 83       	std	Y+2, r24	; 0x02
    48ec:	8c 81       	ldd	r24, Y+4	; 0x04
    48ee:	9d 81       	ldd	r25, Y+5	; 0x05
    48f0:	fc 01       	movw	r30, r24
    48f2:	90 81       	ld	r25, Z
    48f4:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <xNumOfOverflows>
    48f8:	98 17       	cp	r25, r24
    48fa:	69 f0       	breq	.+26     	; 0x4916 <xTaskCheckForTimeOut+0x58>
    48fc:	8c 81       	ldd	r24, Y+4	; 0x04
    48fe:	9d 81       	ldd	r25, Y+5	; 0x05
    4900:	fc 01       	movw	r30, r24
    4902:	21 81       	ldd	r18, Z+1	; 0x01
    4904:	32 81       	ldd	r19, Z+2	; 0x02
    4906:	8a 81       	ldd	r24, Y+2	; 0x02
    4908:	9b 81       	ldd	r25, Y+3	; 0x03
    490a:	82 17       	cp	r24, r18
    490c:	93 07       	cpc	r25, r19
    490e:	18 f0       	brcs	.+6      	; 0x4916 <xTaskCheckForTimeOut+0x58>
    4910:	81 e0       	ldi	r24, 0x01	; 1
    4912:	89 83       	std	Y+1, r24	; 0x01
    4914:	30 c0       	rjmp	.+96     	; 0x4976 <xTaskCheckForTimeOut+0xb8>
    4916:	8c 81       	ldd	r24, Y+4	; 0x04
    4918:	9d 81       	ldd	r25, Y+5	; 0x05
    491a:	fc 01       	movw	r30, r24
    491c:	81 81       	ldd	r24, Z+1	; 0x01
    491e:	92 81       	ldd	r25, Z+2	; 0x02
    4920:	2a 81       	ldd	r18, Y+2	; 0x02
    4922:	3b 81       	ldd	r19, Y+3	; 0x03
    4924:	28 1b       	sub	r18, r24
    4926:	39 0b       	sbc	r19, r25
    4928:	8e 81       	ldd	r24, Y+6	; 0x06
    492a:	9f 81       	ldd	r25, Y+7	; 0x07
    492c:	fc 01       	movw	r30, r24
    492e:	80 81       	ld	r24, Z
    4930:	91 81       	ldd	r25, Z+1	; 0x01
    4932:	28 17       	cp	r18, r24
    4934:	39 07       	cpc	r19, r25
    4936:	e8 f4       	brcc	.+58     	; 0x4972 <xTaskCheckForTimeOut+0xb4>
    4938:	8e 81       	ldd	r24, Y+6	; 0x06
    493a:	9f 81       	ldd	r25, Y+7	; 0x07
    493c:	fc 01       	movw	r30, r24
    493e:	20 81       	ld	r18, Z
    4940:	31 81       	ldd	r19, Z+1	; 0x01
    4942:	8c 81       	ldd	r24, Y+4	; 0x04
    4944:	9d 81       	ldd	r25, Y+5	; 0x05
    4946:	fc 01       	movw	r30, r24
    4948:	41 81       	ldd	r20, Z+1	; 0x01
    494a:	52 81       	ldd	r21, Z+2	; 0x02
    494c:	8a 81       	ldd	r24, Y+2	; 0x02
    494e:	9b 81       	ldd	r25, Y+3	; 0x03
    4950:	ba 01       	movw	r22, r20
    4952:	68 1b       	sub	r22, r24
    4954:	79 0b       	sbc	r23, r25
    4956:	cb 01       	movw	r24, r22
    4958:	28 0f       	add	r18, r24
    495a:	39 1f       	adc	r19, r25
    495c:	8e 81       	ldd	r24, Y+6	; 0x06
    495e:	9f 81       	ldd	r25, Y+7	; 0x07
    4960:	fc 01       	movw	r30, r24
    4962:	31 83       	std	Z+1, r19	; 0x01
    4964:	20 83       	st	Z, r18
    4966:	8c 81       	ldd	r24, Y+4	; 0x04
    4968:	9d 81       	ldd	r25, Y+5	; 0x05
    496a:	0e 94 43 24 	call	0x4886	; 0x4886 <vTaskSetTimeOutState>
    496e:	19 82       	std	Y+1, r1	; 0x01
    4970:	02 c0       	rjmp	.+4      	; 0x4976 <xTaskCheckForTimeOut+0xb8>
    4972:	81 e0       	ldi	r24, 0x01	; 1
    4974:	89 83       	std	Y+1, r24	; 0x01
    4976:	0f 90       	pop	r0
    4978:	0f be       	out	0x3f, r0	; 63
    497a:	89 81       	ldd	r24, Y+1	; 0x01
    497c:	27 96       	adiw	r28, 0x07	; 7
    497e:	0f b6       	in	r0, 0x3f	; 63
    4980:	f8 94       	cli
    4982:	de bf       	out	0x3e, r29	; 62
    4984:	0f be       	out	0x3f, r0	; 63
    4986:	cd bf       	out	0x3d, r28	; 61
    4988:	df 91       	pop	r29
    498a:	cf 91       	pop	r28
    498c:	08 95       	ret

0000498e <vTaskMissedYield>:
    498e:	cf 93       	push	r28
    4990:	df 93       	push	r29
    4992:	cd b7       	in	r28, 0x3d	; 61
    4994:	de b7       	in	r29, 0x3e	; 62
    4996:	81 e0       	ldi	r24, 0x01	; 1
    4998:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <xYieldPending>
    499c:	00 00       	nop
    499e:	df 91       	pop	r29
    49a0:	cf 91       	pop	r28
    49a2:	08 95       	ret

000049a4 <prvIdleTask>:
    49a4:	cf 93       	push	r28
    49a6:	df 93       	push	r29
    49a8:	00 d0       	rcall	.+0      	; 0x49aa <prvIdleTask+0x6>
    49aa:	cd b7       	in	r28, 0x3d	; 61
    49ac:	de b7       	in	r29, 0x3e	; 62
    49ae:	9a 83       	std	Y+2, r25	; 0x02
    49b0:	89 83       	std	Y+1, r24	; 0x01
    49b2:	0e 94 22 25 	call	0x4a44	; 0x4a44 <prvCheckTasksWaitingTermination>
    49b6:	80 91 c8 07 	lds	r24, 0x07C8	; 0x8007c8 <pxReadyTasksLists>
    49ba:	82 30       	cpi	r24, 0x02	; 2
    49bc:	10 f0       	brcs	.+4      	; 0x49c2 <prvIdleTask+0x1e>
    49be:	0e 94 4d 14 	call	0x289a	; 0x289a <vPortYield>
    49c2:	0e 94 22 09 	call	0x1244	; 0x1244 <vApplicationIdleHook>
    49c6:	f5 cf       	rjmp	.-22     	; 0x49b2 <prvIdleTask+0xe>

000049c8 <prvInitialiseTaskLists>:
    49c8:	cf 93       	push	r28
    49ca:	df 93       	push	r29
    49cc:	1f 92       	push	r1
    49ce:	cd b7       	in	r28, 0x3d	; 61
    49d0:	de b7       	in	r29, 0x3e	; 62
    49d2:	19 82       	std	Y+1, r1	; 0x01
    49d4:	13 c0       	rjmp	.+38     	; 0x49fc <prvInitialiseTaskLists+0x34>
    49d6:	89 81       	ldd	r24, Y+1	; 0x01
    49d8:	28 2f       	mov	r18, r24
    49da:	30 e0       	ldi	r19, 0x00	; 0
    49dc:	c9 01       	movw	r24, r18
    49de:	88 0f       	add	r24, r24
    49e0:	99 1f       	adc	r25, r25
    49e2:	88 0f       	add	r24, r24
    49e4:	99 1f       	adc	r25, r25
    49e6:	88 0f       	add	r24, r24
    49e8:	99 1f       	adc	r25, r25
    49ea:	82 0f       	add	r24, r18
    49ec:	93 1f       	adc	r25, r19
    49ee:	88 53       	subi	r24, 0x38	; 56
    49f0:	98 4f       	sbci	r25, 0xF8	; 248
    49f2:	0e 94 09 11 	call	0x2212	; 0x2212 <vListInitialise>
    49f6:	89 81       	ldd	r24, Y+1	; 0x01
    49f8:	8f 5f       	subi	r24, 0xFF	; 255
    49fa:	89 83       	std	Y+1, r24	; 0x01
    49fc:	89 81       	ldd	r24, Y+1	; 0x01
    49fe:	84 30       	cpi	r24, 0x04	; 4
    4a00:	50 f3       	brcs	.-44     	; 0x49d6 <prvInitialiseTaskLists+0xe>
    4a02:	8c ee       	ldi	r24, 0xEC	; 236
    4a04:	97 e0       	ldi	r25, 0x07	; 7
    4a06:	0e 94 09 11 	call	0x2212	; 0x2212 <vListInitialise>
    4a0a:	85 ef       	ldi	r24, 0xF5	; 245
    4a0c:	97 e0       	ldi	r25, 0x07	; 7
    4a0e:	0e 94 09 11 	call	0x2212	; 0x2212 <vListInitialise>
    4a12:	82 e0       	ldi	r24, 0x02	; 2
    4a14:	98 e0       	ldi	r25, 0x08	; 8
    4a16:	0e 94 09 11 	call	0x2212	; 0x2212 <vListInitialise>
    4a1a:	8b e0       	ldi	r24, 0x0B	; 11
    4a1c:	98 e0       	ldi	r25, 0x08	; 8
    4a1e:	0e 94 09 11 	call	0x2212	; 0x2212 <vListInitialise>
    4a22:	8c ee       	ldi	r24, 0xEC	; 236
    4a24:	97 e0       	ldi	r25, 0x07	; 7
    4a26:	90 93 ff 07 	sts	0x07FF, r25	; 0x8007ff <pxDelayedTaskList+0x1>
    4a2a:	80 93 fe 07 	sts	0x07FE, r24	; 0x8007fe <pxDelayedTaskList>
    4a2e:	85 ef       	ldi	r24, 0xF5	; 245
    4a30:	97 e0       	ldi	r25, 0x07	; 7
    4a32:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <pxOverflowDelayedTaskList+0x1>
    4a36:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <pxOverflowDelayedTaskList>
    4a3a:	00 00       	nop
    4a3c:	0f 90       	pop	r0
    4a3e:	df 91       	pop	r29
    4a40:	cf 91       	pop	r28
    4a42:	08 95       	ret

00004a44 <prvCheckTasksWaitingTermination>:
    4a44:	cf 93       	push	r28
    4a46:	df 93       	push	r29
    4a48:	00 d0       	rcall	.+0      	; 0x4a4a <prvCheckTasksWaitingTermination+0x6>
    4a4a:	1f 92       	push	r1
    4a4c:	cd b7       	in	r28, 0x3d	; 61
    4a4e:	de b7       	in	r29, 0x3e	; 62
    4a50:	2f c0       	rjmp	.+94     	; 0x4ab0 <prvCheckTasksWaitingTermination+0x6c>
    4a52:	0e 94 36 21 	call	0x426c	; 0x426c <vTaskSuspendAll>
    4a56:	90 91 0b 08 	lds	r25, 0x080B	; 0x80080b <xTasksWaitingTermination>
    4a5a:	81 e0       	ldi	r24, 0x01	; 1
    4a5c:	99 23       	and	r25, r25
    4a5e:	09 f0       	breq	.+2      	; 0x4a62 <prvCheckTasksWaitingTermination+0x1e>
    4a60:	80 e0       	ldi	r24, 0x00	; 0
    4a62:	89 83       	std	Y+1, r24	; 0x01
    4a64:	0e 94 43 21 	call	0x4286	; 0x4286 <xTaskResumeAll>
    4a68:	89 81       	ldd	r24, Y+1	; 0x01
    4a6a:	88 23       	and	r24, r24
    4a6c:	09 f5       	brne	.+66     	; 0x4ab0 <prvCheckTasksWaitingTermination+0x6c>
    4a6e:	0f b6       	in	r0, 0x3f	; 63
    4a70:	f8 94       	cli
    4a72:	0f 92       	push	r0
    4a74:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <xTasksWaitingTermination+0x5>
    4a78:	90 91 11 08 	lds	r25, 0x0811	; 0x800811 <xTasksWaitingTermination+0x6>
    4a7c:	fc 01       	movw	r30, r24
    4a7e:	86 81       	ldd	r24, Z+6	; 0x06
    4a80:	97 81       	ldd	r25, Z+7	; 0x07
    4a82:	9b 83       	std	Y+3, r25	; 0x03
    4a84:	8a 83       	std	Y+2, r24	; 0x02
    4a86:	8a 81       	ldd	r24, Y+2	; 0x02
    4a88:	9b 81       	ldd	r25, Y+3	; 0x03
    4a8a:	02 96       	adiw	r24, 0x02	; 2
    4a8c:	0e 94 18 12 	call	0x2430	; 0x2430 <uxListRemove>
    4a90:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <uxCurrentNumberOfTasks>
    4a94:	81 50       	subi	r24, 0x01	; 1
    4a96:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <uxCurrentNumberOfTasks>
    4a9a:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <uxDeletedTasksWaitingCleanUp>
    4a9e:	81 50       	subi	r24, 0x01	; 1
    4aa0:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <uxDeletedTasksWaitingCleanUp>
    4aa4:	0f 90       	pop	r0
    4aa6:	0f be       	out	0x3f, r0	; 63
    4aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aaa:	9b 81       	ldd	r25, Y+3	; 0x03
    4aac:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <prvDeleteTCB>
    4ab0:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <uxDeletedTasksWaitingCleanUp>
    4ab4:	88 23       	and	r24, r24
    4ab6:	69 f6       	brne	.-102    	; 0x4a52 <prvCheckTasksWaitingTermination+0xe>
    4ab8:	00 00       	nop
    4aba:	0f 90       	pop	r0
    4abc:	0f 90       	pop	r0
    4abe:	0f 90       	pop	r0
    4ac0:	df 91       	pop	r29
    4ac2:	cf 91       	pop	r28
    4ac4:	08 95       	ret

00004ac6 <prvTaskCheckFreeStackSpace>:
    4ac6:	cf 93       	push	r28
    4ac8:	df 93       	push	r29
    4aca:	00 d0       	rcall	.+0      	; 0x4acc <prvTaskCheckFreeStackSpace+0x6>
    4acc:	00 d0       	rcall	.+0      	; 0x4ace <prvTaskCheckFreeStackSpace+0x8>
    4ace:	00 d0       	rcall	.+0      	; 0x4ad0 <prvTaskCheckFreeStackSpace+0xa>
    4ad0:	cd b7       	in	r28, 0x3d	; 61
    4ad2:	de b7       	in	r29, 0x3e	; 62
    4ad4:	9e 83       	std	Y+6, r25	; 0x06
    4ad6:	8d 83       	std	Y+5, r24	; 0x05
    4ad8:	19 82       	std	Y+1, r1	; 0x01
    4ada:	1a 82       	std	Y+2, r1	; 0x02
    4adc:	1b 82       	std	Y+3, r1	; 0x03
    4ade:	1c 82       	std	Y+4, r1	; 0x04
    4ae0:	10 c0       	rjmp	.+32     	; 0x4b02 <prvTaskCheckFreeStackSpace+0x3c>
    4ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    4ae6:	01 96       	adiw	r24, 0x01	; 1
    4ae8:	9e 83       	std	Y+6, r25	; 0x06
    4aea:	8d 83       	std	Y+5, r24	; 0x05
    4aec:	89 81       	ldd	r24, Y+1	; 0x01
    4aee:	9a 81       	ldd	r25, Y+2	; 0x02
    4af0:	ab 81       	ldd	r26, Y+3	; 0x03
    4af2:	bc 81       	ldd	r27, Y+4	; 0x04
    4af4:	01 96       	adiw	r24, 0x01	; 1
    4af6:	a1 1d       	adc	r26, r1
    4af8:	b1 1d       	adc	r27, r1
    4afa:	89 83       	std	Y+1, r24	; 0x01
    4afc:	9a 83       	std	Y+2, r25	; 0x02
    4afe:	ab 83       	std	Y+3, r26	; 0x03
    4b00:	bc 83       	std	Y+4, r27	; 0x04
    4b02:	8d 81       	ldd	r24, Y+5	; 0x05
    4b04:	9e 81       	ldd	r25, Y+6	; 0x06
    4b06:	fc 01       	movw	r30, r24
    4b08:	80 81       	ld	r24, Z
    4b0a:	85 3a       	cpi	r24, 0xA5	; 165
    4b0c:	51 f3       	breq	.-44     	; 0x4ae2 <prvTaskCheckFreeStackSpace+0x1c>
    4b0e:	89 81       	ldd	r24, Y+1	; 0x01
    4b10:	9a 81       	ldd	r25, Y+2	; 0x02
    4b12:	26 96       	adiw	r28, 0x06	; 6
    4b14:	0f b6       	in	r0, 0x3f	; 63
    4b16:	f8 94       	cli
    4b18:	de bf       	out	0x3e, r29	; 62
    4b1a:	0f be       	out	0x3f, r0	; 63
    4b1c:	cd bf       	out	0x3d, r28	; 61
    4b1e:	df 91       	pop	r29
    4b20:	cf 91       	pop	r28
    4b22:	08 95       	ret

00004b24 <uxTaskGetStackHighWaterMark>:
    4b24:	cf 93       	push	r28
    4b26:	df 93       	push	r29
    4b28:	cd b7       	in	r28, 0x3d	; 61
    4b2a:	de b7       	in	r29, 0x3e	; 62
    4b2c:	27 97       	sbiw	r28, 0x07	; 7
    4b2e:	0f b6       	in	r0, 0x3f	; 63
    4b30:	f8 94       	cli
    4b32:	de bf       	out	0x3e, r29	; 62
    4b34:	0f be       	out	0x3f, r0	; 63
    4b36:	cd bf       	out	0x3d, r28	; 61
    4b38:	9f 83       	std	Y+7, r25	; 0x07
    4b3a:	8e 83       	std	Y+6, r24	; 0x06
    4b3c:	8e 81       	ldd	r24, Y+6	; 0x06
    4b3e:	9f 81       	ldd	r25, Y+7	; 0x07
    4b40:	89 2b       	or	r24, r25
    4b42:	29 f4       	brne	.+10     	; 0x4b4e <uxTaskGetStackHighWaterMark+0x2a>
    4b44:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4b48:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4b4c:	02 c0       	rjmp	.+4      	; 0x4b52 <uxTaskGetStackHighWaterMark+0x2e>
    4b4e:	8e 81       	ldd	r24, Y+6	; 0x06
    4b50:	9f 81       	ldd	r25, Y+7	; 0x07
    4b52:	9a 83       	std	Y+2, r25	; 0x02
    4b54:	89 83       	std	Y+1, r24	; 0x01
    4b56:	89 81       	ldd	r24, Y+1	; 0x01
    4b58:	9a 81       	ldd	r25, Y+2	; 0x02
    4b5a:	fc 01       	movw	r30, r24
    4b5c:	87 89       	ldd	r24, Z+23	; 0x17
    4b5e:	90 8d       	ldd	r25, Z+24	; 0x18
    4b60:	9c 83       	std	Y+4, r25	; 0x04
    4b62:	8b 83       	std	Y+3, r24	; 0x03
    4b64:	8b 81       	ldd	r24, Y+3	; 0x03
    4b66:	9c 81       	ldd	r25, Y+4	; 0x04
    4b68:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <prvTaskCheckFreeStackSpace>
    4b6c:	8d 83       	std	Y+5, r24	; 0x05
    4b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    4b70:	27 96       	adiw	r28, 0x07	; 7
    4b72:	0f b6       	in	r0, 0x3f	; 63
    4b74:	f8 94       	cli
    4b76:	de bf       	out	0x3e, r29	; 62
    4b78:	0f be       	out	0x3f, r0	; 63
    4b7a:	cd bf       	out	0x3d, r28	; 61
    4b7c:	df 91       	pop	r29
    4b7e:	cf 91       	pop	r28
    4b80:	08 95       	ret

00004b82 <prvDeleteTCB>:
    4b82:	cf 93       	push	r28
    4b84:	df 93       	push	r29
    4b86:	00 d0       	rcall	.+0      	; 0x4b88 <prvDeleteTCB+0x6>
    4b88:	cd b7       	in	r28, 0x3d	; 61
    4b8a:	de b7       	in	r29, 0x3e	; 62
    4b8c:	9a 83       	std	Y+2, r25	; 0x02
    4b8e:	89 83       	std	Y+1, r24	; 0x01
    4b90:	89 81       	ldd	r24, Y+1	; 0x01
    4b92:	9a 81       	ldd	r25, Y+2	; 0x02
    4b94:	fc 01       	movw	r30, r24
    4b96:	87 89       	ldd	r24, Z+23	; 0x17
    4b98:	90 8d       	ldd	r25, Z+24	; 0x18
    4b9a:	0e 94 cc 18 	call	0x3198	; 0x3198 <vPortFree>
    4b9e:	89 81       	ldd	r24, Y+1	; 0x01
    4ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ba2:	0e 94 cc 18 	call	0x3198	; 0x3198 <vPortFree>
    4ba6:	00 00       	nop
    4ba8:	0f 90       	pop	r0
    4baa:	0f 90       	pop	r0
    4bac:	df 91       	pop	r29
    4bae:	cf 91       	pop	r28
    4bb0:	08 95       	ret

00004bb2 <prvResetNextTaskUnblockTime>:
    4bb2:	cf 93       	push	r28
    4bb4:	df 93       	push	r29
    4bb6:	00 d0       	rcall	.+0      	; 0x4bb8 <prvResetNextTaskUnblockTime+0x6>
    4bb8:	cd b7       	in	r28, 0x3d	; 61
    4bba:	de b7       	in	r29, 0x3e	; 62
    4bbc:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <pxDelayedTaskList>
    4bc0:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <pxDelayedTaskList+0x1>
    4bc4:	fc 01       	movw	r30, r24
    4bc6:	80 81       	ld	r24, Z
    4bc8:	88 23       	and	r24, r24
    4bca:	39 f4       	brne	.+14     	; 0x4bda <prvResetNextTaskUnblockTime+0x28>
    4bcc:	8f ef       	ldi	r24, 0xFF	; 255
    4bce:	9f ef       	ldi	r25, 0xFF	; 255
    4bd0:	90 93 1f 08 	sts	0x081F, r25	; 0x80081f <xNextTaskUnblockTime+0x1>
    4bd4:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <xNextTaskUnblockTime>
    4bd8:	15 c0       	rjmp	.+42     	; 0x4c04 <prvResetNextTaskUnblockTime+0x52>
    4bda:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <pxDelayedTaskList>
    4bde:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <pxDelayedTaskList+0x1>
    4be2:	fc 01       	movw	r30, r24
    4be4:	85 81       	ldd	r24, Z+5	; 0x05
    4be6:	96 81       	ldd	r25, Z+6	; 0x06
    4be8:	fc 01       	movw	r30, r24
    4bea:	86 81       	ldd	r24, Z+6	; 0x06
    4bec:	97 81       	ldd	r25, Z+7	; 0x07
    4bee:	9a 83       	std	Y+2, r25	; 0x02
    4bf0:	89 83       	std	Y+1, r24	; 0x01
    4bf2:	89 81       	ldd	r24, Y+1	; 0x01
    4bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    4bf6:	fc 01       	movw	r30, r24
    4bf8:	82 81       	ldd	r24, Z+2	; 0x02
    4bfa:	93 81       	ldd	r25, Z+3	; 0x03
    4bfc:	90 93 1f 08 	sts	0x081F, r25	; 0x80081f <xNextTaskUnblockTime+0x1>
    4c00:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <xNextTaskUnblockTime>
    4c04:	00 00       	nop
    4c06:	0f 90       	pop	r0
    4c08:	0f 90       	pop	r0
    4c0a:	df 91       	pop	r29
    4c0c:	cf 91       	pop	r28
    4c0e:	08 95       	ret

00004c10 <vTaskPriorityInherit>:
    4c10:	cf 93       	push	r28
    4c12:	df 93       	push	r29
    4c14:	00 d0       	rcall	.+0      	; 0x4c16 <vTaskPriorityInherit+0x6>
    4c16:	00 d0       	rcall	.+0      	; 0x4c18 <vTaskPriorityInherit+0x8>
    4c18:	cd b7       	in	r28, 0x3d	; 61
    4c1a:	de b7       	in	r29, 0x3e	; 62
    4c1c:	9c 83       	std	Y+4, r25	; 0x04
    4c1e:	8b 83       	std	Y+3, r24	; 0x03
    4c20:	8b 81       	ldd	r24, Y+3	; 0x03
    4c22:	9c 81       	ldd	r25, Y+4	; 0x04
    4c24:	9a 83       	std	Y+2, r25	; 0x02
    4c26:	89 83       	std	Y+1, r24	; 0x01
    4c28:	8b 81       	ldd	r24, Y+3	; 0x03
    4c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    4c2c:	89 2b       	or	r24, r25
    4c2e:	09 f4       	brne	.+2      	; 0x4c32 <vTaskPriorityInherit+0x22>
    4c30:	7f c0       	rjmp	.+254    	; 0x4d30 <vTaskPriorityInherit+0x120>
    4c32:	89 81       	ldd	r24, Y+1	; 0x01
    4c34:	9a 81       	ldd	r25, Y+2	; 0x02
    4c36:	fc 01       	movw	r30, r24
    4c38:	26 89       	ldd	r18, Z+22	; 0x16
    4c3a:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4c3e:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4c42:	fc 01       	movw	r30, r24
    4c44:	86 89       	ldd	r24, Z+22	; 0x16
    4c46:	28 17       	cp	r18, r24
    4c48:	08 f0       	brcs	.+2      	; 0x4c4c <vTaskPriorityInherit+0x3c>
    4c4a:	72 c0       	rjmp	.+228    	; 0x4d30 <vTaskPriorityInherit+0x120>
    4c4c:	89 81       	ldd	r24, Y+1	; 0x01
    4c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c50:	fc 01       	movw	r30, r24
    4c52:	84 85       	ldd	r24, Z+12	; 0x0c
    4c54:	95 85       	ldd	r25, Z+13	; 0x0d
    4c56:	99 23       	and	r25, r25
    4c58:	8c f0       	brlt	.+34     	; 0x4c7c <vTaskPriorityInherit+0x6c>
    4c5a:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4c5e:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4c62:	fc 01       	movw	r30, r24
    4c64:	86 89       	ldd	r24, Z+22	; 0x16
    4c66:	88 2f       	mov	r24, r24
    4c68:	90 e0       	ldi	r25, 0x00	; 0
    4c6a:	24 e0       	ldi	r18, 0x04	; 4
    4c6c:	30 e0       	ldi	r19, 0x00	; 0
    4c6e:	28 1b       	sub	r18, r24
    4c70:	39 0b       	sbc	r19, r25
    4c72:	89 81       	ldd	r24, Y+1	; 0x01
    4c74:	9a 81       	ldd	r25, Y+2	; 0x02
    4c76:	fc 01       	movw	r30, r24
    4c78:	35 87       	std	Z+13, r19	; 0x0d
    4c7a:	24 87       	std	Z+12, r18	; 0x0c
    4c7c:	89 81       	ldd	r24, Y+1	; 0x01
    4c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c80:	fc 01       	movw	r30, r24
    4c82:	42 85       	ldd	r20, Z+10	; 0x0a
    4c84:	53 85       	ldd	r21, Z+11	; 0x0b
    4c86:	89 81       	ldd	r24, Y+1	; 0x01
    4c88:	9a 81       	ldd	r25, Y+2	; 0x02
    4c8a:	fc 01       	movw	r30, r24
    4c8c:	86 89       	ldd	r24, Z+22	; 0x16
    4c8e:	28 2f       	mov	r18, r24
    4c90:	30 e0       	ldi	r19, 0x00	; 0
    4c92:	c9 01       	movw	r24, r18
    4c94:	88 0f       	add	r24, r24
    4c96:	99 1f       	adc	r25, r25
    4c98:	88 0f       	add	r24, r24
    4c9a:	99 1f       	adc	r25, r25
    4c9c:	88 0f       	add	r24, r24
    4c9e:	99 1f       	adc	r25, r25
    4ca0:	82 0f       	add	r24, r18
    4ca2:	93 1f       	adc	r25, r19
    4ca4:	88 53       	subi	r24, 0x38	; 56
    4ca6:	98 4f       	sbci	r25, 0xF8	; 248
    4ca8:	48 17       	cp	r20, r24
    4caa:	59 07       	cpc	r21, r25
    4cac:	b9 f5       	brne	.+110    	; 0x4d1c <vTaskPriorityInherit+0x10c>
    4cae:	89 81       	ldd	r24, Y+1	; 0x01
    4cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    4cb2:	02 96       	adiw	r24, 0x02	; 2
    4cb4:	0e 94 18 12 	call	0x2430	; 0x2430 <uxListRemove>
    4cb8:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4cbc:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4cc0:	fc 01       	movw	r30, r24
    4cc2:	26 89       	ldd	r18, Z+22	; 0x16
    4cc4:	89 81       	ldd	r24, Y+1	; 0x01
    4cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    4cc8:	fc 01       	movw	r30, r24
    4cca:	26 8b       	std	Z+22, r18	; 0x16
    4ccc:	89 81       	ldd	r24, Y+1	; 0x01
    4cce:	9a 81       	ldd	r25, Y+2	; 0x02
    4cd0:	fc 01       	movw	r30, r24
    4cd2:	96 89       	ldd	r25, Z+22	; 0x16
    4cd4:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <uxTopReadyPriority>
    4cd8:	89 17       	cp	r24, r25
    4cda:	30 f4       	brcc	.+12     	; 0x4ce8 <vTaskPriorityInherit+0xd8>
    4cdc:	89 81       	ldd	r24, Y+1	; 0x01
    4cde:	9a 81       	ldd	r25, Y+2	; 0x02
    4ce0:	fc 01       	movw	r30, r24
    4ce2:	86 89       	ldd	r24, Z+22	; 0x16
    4ce4:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <uxTopReadyPriority>
    4ce8:	89 81       	ldd	r24, Y+1	; 0x01
    4cea:	9a 81       	ldd	r25, Y+2	; 0x02
    4cec:	ac 01       	movw	r20, r24
    4cee:	4e 5f       	subi	r20, 0xFE	; 254
    4cf0:	5f 4f       	sbci	r21, 0xFF	; 255
    4cf2:	89 81       	ldd	r24, Y+1	; 0x01
    4cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    4cf6:	fc 01       	movw	r30, r24
    4cf8:	86 89       	ldd	r24, Z+22	; 0x16
    4cfa:	28 2f       	mov	r18, r24
    4cfc:	30 e0       	ldi	r19, 0x00	; 0
    4cfe:	c9 01       	movw	r24, r18
    4d00:	88 0f       	add	r24, r24
    4d02:	99 1f       	adc	r25, r25
    4d04:	88 0f       	add	r24, r24
    4d06:	99 1f       	adc	r25, r25
    4d08:	88 0f       	add	r24, r24
    4d0a:	99 1f       	adc	r25, r25
    4d0c:	82 0f       	add	r24, r18
    4d0e:	93 1f       	adc	r25, r19
    4d10:	88 53       	subi	r24, 0x38	; 56
    4d12:	98 4f       	sbci	r25, 0xF8	; 248
    4d14:	ba 01       	movw	r22, r20
    4d16:	0e 94 51 11 	call	0x22a2	; 0x22a2 <vListInsertEnd>
    4d1a:	0a c0       	rjmp	.+20     	; 0x4d30 <vTaskPriorityInherit+0x120>
    4d1c:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4d20:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4d24:	fc 01       	movw	r30, r24
    4d26:	26 89       	ldd	r18, Z+22	; 0x16
    4d28:	89 81       	ldd	r24, Y+1	; 0x01
    4d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d2c:	fc 01       	movw	r30, r24
    4d2e:	26 8b       	std	Z+22, r18	; 0x16
    4d30:	00 00       	nop
    4d32:	0f 90       	pop	r0
    4d34:	0f 90       	pop	r0
    4d36:	0f 90       	pop	r0
    4d38:	0f 90       	pop	r0
    4d3a:	df 91       	pop	r29
    4d3c:	cf 91       	pop	r28
    4d3e:	08 95       	ret

00004d40 <xTaskPriorityDisinherit>:
    4d40:	cf 93       	push	r28
    4d42:	df 93       	push	r29
    4d44:	00 d0       	rcall	.+0      	; 0x4d46 <xTaskPriorityDisinherit+0x6>
    4d46:	00 d0       	rcall	.+0      	; 0x4d48 <xTaskPriorityDisinherit+0x8>
    4d48:	1f 92       	push	r1
    4d4a:	cd b7       	in	r28, 0x3d	; 61
    4d4c:	de b7       	in	r29, 0x3e	; 62
    4d4e:	9d 83       	std	Y+5, r25	; 0x05
    4d50:	8c 83       	std	Y+4, r24	; 0x04
    4d52:	8c 81       	ldd	r24, Y+4	; 0x04
    4d54:	9d 81       	ldd	r25, Y+5	; 0x05
    4d56:	9b 83       	std	Y+3, r25	; 0x03
    4d58:	8a 83       	std	Y+2, r24	; 0x02
    4d5a:	19 82       	std	Y+1, r1	; 0x01
    4d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    4d5e:	9d 81       	ldd	r25, Y+5	; 0x05
    4d60:	89 2b       	or	r24, r25
    4d62:	09 f4       	brne	.+2      	; 0x4d66 <xTaskPriorityDisinherit+0x26>
    4d64:	61 c0       	rjmp	.+194    	; 0x4e28 <xTaskPriorityDisinherit+0xe8>
    4d66:	8a 81       	ldd	r24, Y+2	; 0x02
    4d68:	9b 81       	ldd	r25, Y+3	; 0x03
    4d6a:	fc 01       	movw	r30, r24
    4d6c:	84 a1       	ldd	r24, Z+36	; 0x24
    4d6e:	2f ef       	ldi	r18, 0xFF	; 255
    4d70:	28 0f       	add	r18, r24
    4d72:	8a 81       	ldd	r24, Y+2	; 0x02
    4d74:	9b 81       	ldd	r25, Y+3	; 0x03
    4d76:	fc 01       	movw	r30, r24
    4d78:	24 a3       	std	Z+36, r18	; 0x24
    4d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    4d7e:	fc 01       	movw	r30, r24
    4d80:	26 89       	ldd	r18, Z+22	; 0x16
    4d82:	8a 81       	ldd	r24, Y+2	; 0x02
    4d84:	9b 81       	ldd	r25, Y+3	; 0x03
    4d86:	fc 01       	movw	r30, r24
    4d88:	83 a1       	ldd	r24, Z+35	; 0x23
    4d8a:	28 17       	cp	r18, r24
    4d8c:	09 f4       	brne	.+2      	; 0x4d90 <xTaskPriorityDisinherit+0x50>
    4d8e:	4c c0       	rjmp	.+152    	; 0x4e28 <xTaskPriorityDisinherit+0xe8>
    4d90:	8a 81       	ldd	r24, Y+2	; 0x02
    4d92:	9b 81       	ldd	r25, Y+3	; 0x03
    4d94:	fc 01       	movw	r30, r24
    4d96:	84 a1       	ldd	r24, Z+36	; 0x24
    4d98:	88 23       	and	r24, r24
    4d9a:	09 f0       	breq	.+2      	; 0x4d9e <xTaskPriorityDisinherit+0x5e>
    4d9c:	45 c0       	rjmp	.+138    	; 0x4e28 <xTaskPriorityDisinherit+0xe8>
    4d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    4da0:	9b 81       	ldd	r25, Y+3	; 0x03
    4da2:	02 96       	adiw	r24, 0x02	; 2
    4da4:	0e 94 18 12 	call	0x2430	; 0x2430 <uxListRemove>
    4da8:	8a 81       	ldd	r24, Y+2	; 0x02
    4daa:	9b 81       	ldd	r25, Y+3	; 0x03
    4dac:	fc 01       	movw	r30, r24
    4dae:	23 a1       	ldd	r18, Z+35	; 0x23
    4db0:	8a 81       	ldd	r24, Y+2	; 0x02
    4db2:	9b 81       	ldd	r25, Y+3	; 0x03
    4db4:	fc 01       	movw	r30, r24
    4db6:	26 8b       	std	Z+22, r18	; 0x16
    4db8:	8a 81       	ldd	r24, Y+2	; 0x02
    4dba:	9b 81       	ldd	r25, Y+3	; 0x03
    4dbc:	fc 01       	movw	r30, r24
    4dbe:	86 89       	ldd	r24, Z+22	; 0x16
    4dc0:	88 2f       	mov	r24, r24
    4dc2:	90 e0       	ldi	r25, 0x00	; 0
    4dc4:	24 e0       	ldi	r18, 0x04	; 4
    4dc6:	30 e0       	ldi	r19, 0x00	; 0
    4dc8:	28 1b       	sub	r18, r24
    4dca:	39 0b       	sbc	r19, r25
    4dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    4dce:	9b 81       	ldd	r25, Y+3	; 0x03
    4dd0:	fc 01       	movw	r30, r24
    4dd2:	35 87       	std	Z+13, r19	; 0x0d
    4dd4:	24 87       	std	Z+12, r18	; 0x0c
    4dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd8:	9b 81       	ldd	r25, Y+3	; 0x03
    4dda:	fc 01       	movw	r30, r24
    4ddc:	96 89       	ldd	r25, Z+22	; 0x16
    4dde:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <uxTopReadyPriority>
    4de2:	89 17       	cp	r24, r25
    4de4:	30 f4       	brcc	.+12     	; 0x4df2 <xTaskPriorityDisinherit+0xb2>
    4de6:	8a 81       	ldd	r24, Y+2	; 0x02
    4de8:	9b 81       	ldd	r25, Y+3	; 0x03
    4dea:	fc 01       	movw	r30, r24
    4dec:	86 89       	ldd	r24, Z+22	; 0x16
    4dee:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <uxTopReadyPriority>
    4df2:	8a 81       	ldd	r24, Y+2	; 0x02
    4df4:	9b 81       	ldd	r25, Y+3	; 0x03
    4df6:	ac 01       	movw	r20, r24
    4df8:	4e 5f       	subi	r20, 0xFE	; 254
    4dfa:	5f 4f       	sbci	r21, 0xFF	; 255
    4dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    4dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    4e00:	fc 01       	movw	r30, r24
    4e02:	86 89       	ldd	r24, Z+22	; 0x16
    4e04:	28 2f       	mov	r18, r24
    4e06:	30 e0       	ldi	r19, 0x00	; 0
    4e08:	c9 01       	movw	r24, r18
    4e0a:	88 0f       	add	r24, r24
    4e0c:	99 1f       	adc	r25, r25
    4e0e:	88 0f       	add	r24, r24
    4e10:	99 1f       	adc	r25, r25
    4e12:	88 0f       	add	r24, r24
    4e14:	99 1f       	adc	r25, r25
    4e16:	82 0f       	add	r24, r18
    4e18:	93 1f       	adc	r25, r19
    4e1a:	88 53       	subi	r24, 0x38	; 56
    4e1c:	98 4f       	sbci	r25, 0xF8	; 248
    4e1e:	ba 01       	movw	r22, r20
    4e20:	0e 94 51 11 	call	0x22a2	; 0x22a2 <vListInsertEnd>
    4e24:	81 e0       	ldi	r24, 0x01	; 1
    4e26:	89 83       	std	Y+1, r24	; 0x01
    4e28:	89 81       	ldd	r24, Y+1	; 0x01
    4e2a:	0f 90       	pop	r0
    4e2c:	0f 90       	pop	r0
    4e2e:	0f 90       	pop	r0
    4e30:	0f 90       	pop	r0
    4e32:	0f 90       	pop	r0
    4e34:	df 91       	pop	r29
    4e36:	cf 91       	pop	r28
    4e38:	08 95       	ret

00004e3a <pvTaskIncrementMutexHeldCount>:
    4e3a:	cf 93       	push	r28
    4e3c:	df 93       	push	r29
    4e3e:	cd b7       	in	r28, 0x3d	; 61
    4e40:	de b7       	in	r29, 0x3e	; 62
    4e42:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4e46:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4e4a:	89 2b       	or	r24, r25
    4e4c:	49 f0       	breq	.+18     	; 0x4e60 <pvTaskIncrementMutexHeldCount+0x26>
    4e4e:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4e52:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4e56:	fc 01       	movw	r30, r24
    4e58:	24 a1       	ldd	r18, Z+36	; 0x24
    4e5a:	2f 5f       	subi	r18, 0xFF	; 255
    4e5c:	fc 01       	movw	r30, r24
    4e5e:	24 a3       	std	Z+36, r18	; 0x24
    4e60:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4e64:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4e68:	df 91       	pop	r29
    4e6a:	cf 91       	pop	r28
    4e6c:	08 95       	ret

00004e6e <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    4e6e:	cf 93       	push	r28
    4e70:	df 93       	push	r29
    4e72:	cd b7       	in	r28, 0x3d	; 61
    4e74:	de b7       	in	r29, 0x3e	; 62
    4e76:	27 97       	sbiw	r28, 0x07	; 7
    4e78:	0f b6       	in	r0, 0x3f	; 63
    4e7a:	f8 94       	cli
    4e7c:	de bf       	out	0x3e, r29	; 62
    4e7e:	0f be       	out	0x3f, r0	; 63
    4e80:	cd bf       	out	0x3d, r28	; 61
    4e82:	9e 83       	std	Y+6, r25	; 0x06
    4e84:	8d 83       	std	Y+5, r24	; 0x05
    4e86:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    4e88:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <xTickCount>
    4e8c:	90 91 17 08 	lds	r25, 0x0817	; 0x800817 <xTickCount+0x1>
    4e90:	9a 83       	std	Y+2, r25	; 0x02
    4e92:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4e94:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4e98:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4e9c:	02 96       	adiw	r24, 0x02	; 2
    4e9e:	0e 94 18 12 	call	0x2430	; 0x2430 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    4ea2:	29 81       	ldd	r18, Y+1	; 0x01
    4ea4:	3a 81       	ldd	r19, Y+2	; 0x02
    4ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    4eaa:	82 0f       	add	r24, r18
    4eac:	93 1f       	adc	r25, r19
    4eae:	9c 83       	std	Y+4, r25	; 0x04
    4eb0:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    4eb2:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4eb6:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4eba:	2b 81       	ldd	r18, Y+3	; 0x03
    4ebc:	3c 81       	ldd	r19, Y+4	; 0x04
    4ebe:	fc 01       	movw	r30, r24
    4ec0:	33 83       	std	Z+3, r19	; 0x03
    4ec2:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    4ec4:	2b 81       	ldd	r18, Y+3	; 0x03
    4ec6:	3c 81       	ldd	r19, Y+4	; 0x04
    4ec8:	89 81       	ldd	r24, Y+1	; 0x01
    4eca:	9a 81       	ldd	r25, Y+2	; 0x02
    4ecc:	28 17       	cp	r18, r24
    4ece:	39 07       	cpc	r19, r25
    4ed0:	78 f4       	brcc	.+30     	; 0x4ef0 <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4ed2:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4ed6:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4eda:	9c 01       	movw	r18, r24
    4edc:	2e 5f       	subi	r18, 0xFE	; 254
    4ede:	3f 4f       	sbci	r19, 0xFF	; 255
    4ee0:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <pxOverflowDelayedTaskList>
    4ee4:	90 91 01 08 	lds	r25, 0x0801	; 0x800801 <pxOverflowDelayedTaskList+0x1>
    4ee8:	b9 01       	movw	r22, r18
    4eea:	0e 94 a0 11 	call	0x2340	; 0x2340 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    4eee:	1d c0       	rjmp	.+58     	; 0x4f2a <prvAddCurrentTaskToDelayedList+0xbc>
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4ef0:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    4ef4:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    4ef8:	9c 01       	movw	r18, r24
    4efa:	2e 5f       	subi	r18, 0xFE	; 254
    4efc:	3f 4f       	sbci	r19, 0xFF	; 255
    4efe:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <pxDelayedTaskList>
    4f02:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <pxDelayedTaskList+0x1>
    4f06:	b9 01       	movw	r22, r18
    4f08:	0e 94 a0 11 	call	0x2340	; 0x2340 <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    4f0c:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <xNextTaskUnblockTime>
    4f10:	90 91 1f 08 	lds	r25, 0x081F	; 0x80081f <xNextTaskUnblockTime+0x1>
    4f14:	2b 81       	ldd	r18, Y+3	; 0x03
    4f16:	3c 81       	ldd	r19, Y+4	; 0x04
    4f18:	28 17       	cp	r18, r24
    4f1a:	39 07       	cpc	r19, r25
    4f1c:	30 f4       	brcc	.+12     	; 0x4f2a <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    4f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f20:	9c 81       	ldd	r25, Y+4	; 0x04
    4f22:	90 93 1f 08 	sts	0x081F, r25	; 0x80081f <xNextTaskUnblockTime+0x1>
    4f26:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    4f2a:	00 00       	nop
    4f2c:	27 96       	adiw	r28, 0x07	; 7
    4f2e:	0f b6       	in	r0, 0x3f	; 63
    4f30:	f8 94       	cli
    4f32:	de bf       	out	0x3e, r29	; 62
    4f34:	0f be       	out	0x3f, r0	; 63
    4f36:	cd bf       	out	0x3d, r28	; 61
    4f38:	df 91       	pop	r29
    4f3a:	cf 91       	pop	r28
    4f3c:	08 95       	ret

00004f3e <__divmodhi4>:
    4f3e:	97 fb       	bst	r25, 7
    4f40:	07 2e       	mov	r0, r23
    4f42:	16 f4       	brtc	.+4      	; 0x4f48 <__divmodhi4+0xa>
    4f44:	00 94       	com	r0
    4f46:	07 d0       	rcall	.+14     	; 0x4f56 <__divmodhi4_neg1>
    4f48:	77 fd       	sbrc	r23, 7
    4f4a:	09 d0       	rcall	.+18     	; 0x4f5e <__divmodhi4_neg2>
    4f4c:	0e 94 d5 27 	call	0x4faa	; 0x4faa <__udivmodhi4>
    4f50:	07 fc       	sbrc	r0, 7
    4f52:	05 d0       	rcall	.+10     	; 0x4f5e <__divmodhi4_neg2>
    4f54:	3e f4       	brtc	.+14     	; 0x4f64 <__divmodhi4_exit>

00004f56 <__divmodhi4_neg1>:
    4f56:	90 95       	com	r25
    4f58:	81 95       	neg	r24
    4f5a:	9f 4f       	sbci	r25, 0xFF	; 255
    4f5c:	08 95       	ret

00004f5e <__divmodhi4_neg2>:
    4f5e:	70 95       	com	r23
    4f60:	61 95       	neg	r22
    4f62:	7f 4f       	sbci	r23, 0xFF	; 255

00004f64 <__divmodhi4_exit>:
    4f64:	08 95       	ret

00004f66 <__udivmodsi4>:
    4f66:	a1 e2       	ldi	r26, 0x21	; 33
    4f68:	1a 2e       	mov	r1, r26
    4f6a:	aa 1b       	sub	r26, r26
    4f6c:	bb 1b       	sub	r27, r27
    4f6e:	fd 01       	movw	r30, r26
    4f70:	0d c0       	rjmp	.+26     	; 0x4f8c <__udivmodsi4_ep>

00004f72 <__udivmodsi4_loop>:
    4f72:	aa 1f       	adc	r26, r26
    4f74:	bb 1f       	adc	r27, r27
    4f76:	ee 1f       	adc	r30, r30
    4f78:	ff 1f       	adc	r31, r31
    4f7a:	a2 17       	cp	r26, r18
    4f7c:	b3 07       	cpc	r27, r19
    4f7e:	e4 07       	cpc	r30, r20
    4f80:	f5 07       	cpc	r31, r21
    4f82:	20 f0       	brcs	.+8      	; 0x4f8c <__udivmodsi4_ep>
    4f84:	a2 1b       	sub	r26, r18
    4f86:	b3 0b       	sbc	r27, r19
    4f88:	e4 0b       	sbc	r30, r20
    4f8a:	f5 0b       	sbc	r31, r21

00004f8c <__udivmodsi4_ep>:
    4f8c:	66 1f       	adc	r22, r22
    4f8e:	77 1f       	adc	r23, r23
    4f90:	88 1f       	adc	r24, r24
    4f92:	99 1f       	adc	r25, r25
    4f94:	1a 94       	dec	r1
    4f96:	69 f7       	brne	.-38     	; 0x4f72 <__udivmodsi4_loop>
    4f98:	60 95       	com	r22
    4f9a:	70 95       	com	r23
    4f9c:	80 95       	com	r24
    4f9e:	90 95       	com	r25
    4fa0:	9b 01       	movw	r18, r22
    4fa2:	ac 01       	movw	r20, r24
    4fa4:	bd 01       	movw	r22, r26
    4fa6:	cf 01       	movw	r24, r30
    4fa8:	08 95       	ret

00004faa <__udivmodhi4>:
    4faa:	aa 1b       	sub	r26, r26
    4fac:	bb 1b       	sub	r27, r27
    4fae:	51 e1       	ldi	r21, 0x11	; 17
    4fb0:	07 c0       	rjmp	.+14     	; 0x4fc0 <__udivmodhi4_ep>

00004fb2 <__udivmodhi4_loop>:
    4fb2:	aa 1f       	adc	r26, r26
    4fb4:	bb 1f       	adc	r27, r27
    4fb6:	a6 17       	cp	r26, r22
    4fb8:	b7 07       	cpc	r27, r23
    4fba:	10 f0       	brcs	.+4      	; 0x4fc0 <__udivmodhi4_ep>
    4fbc:	a6 1b       	sub	r26, r22
    4fbe:	b7 0b       	sbc	r27, r23

00004fc0 <__udivmodhi4_ep>:
    4fc0:	88 1f       	adc	r24, r24
    4fc2:	99 1f       	adc	r25, r25
    4fc4:	5a 95       	dec	r21
    4fc6:	a9 f7       	brne	.-22     	; 0x4fb2 <__udivmodhi4_loop>
    4fc8:	80 95       	com	r24
    4fca:	90 95       	com	r25
    4fcc:	bc 01       	movw	r22, r24
    4fce:	cd 01       	movw	r24, r26
    4fd0:	08 95       	ret

00004fd2 <memcpy>:
    4fd2:	fb 01       	movw	r30, r22
    4fd4:	dc 01       	movw	r26, r24
    4fd6:	02 c0       	rjmp	.+4      	; 0x4fdc <memcpy+0xa>
    4fd8:	01 90       	ld	r0, Z+
    4fda:	0d 92       	st	X+, r0
    4fdc:	41 50       	subi	r20, 0x01	; 1
    4fde:	50 40       	sbci	r21, 0x00	; 0
    4fe0:	d8 f7       	brcc	.-10     	; 0x4fd8 <memcpy+0x6>
    4fe2:	08 95       	ret

00004fe4 <memset>:
    4fe4:	dc 01       	movw	r26, r24
    4fe6:	01 c0       	rjmp	.+2      	; 0x4fea <memset+0x6>
    4fe8:	6d 93       	st	X+, r22
    4fea:	41 50       	subi	r20, 0x01	; 1
    4fec:	50 40       	sbci	r21, 0x00	; 0
    4fee:	e0 f7       	brcc	.-8      	; 0x4fe8 <memset+0x4>
    4ff0:	08 95       	ret

00004ff2 <strlen>:
    4ff2:	fc 01       	movw	r30, r24
    4ff4:	01 90       	ld	r0, Z+
    4ff6:	00 20       	and	r0, r0
    4ff8:	e9 f7       	brne	.-6      	; 0x4ff4 <strlen+0x2>
    4ffa:	80 95       	com	r24
    4ffc:	90 95       	com	r25
    4ffe:	8e 0f       	add	r24, r30
    5000:	9f 1f       	adc	r25, r31
    5002:	08 95       	ret

00005004 <_exit>:
    5004:	f8 94       	cli

00005006 <__stop_program>:
    5006:	ff cf       	rjmp	.-2      	; 0x5006 <__stop_program>
